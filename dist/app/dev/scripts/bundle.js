(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/scripts/main.js":[function(require,module,exports){
'use strict';

var namespace = 'main';

var angular = require('angular');
var app = angular.module(namespace, [
// inject:modules start
require('./common')(namespace).name
// inject:modules end
]);

var runDeps = [];
var run = function run() {};

run.$inject = runDeps;
app.run(run);

module.exports = app;

},{"./common":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/index.js","angular":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js":[function(require,module,exports){
/*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

exports.name = require('./lib/name');
exports.address = require('./lib/address');
exports.phone = require('./lib/phone_number');
exports.internet = require('./lib/internet');
exports.company = require('./lib/company');
exports.image = require('./lib/image');
exports.lorem = require('./lib/lorem');
exports.helpers =  require('./lib/helpers');
exports.date = require('./lib/date');
exports.random = require('./lib/random');
exports.finance = require('./lib/finance');
exports.hacker = require('./lib/hacker');

var locales = exports.locales = require('./lib/locales');

// default locale
exports.locale = "en";

// in case a locale is missing a definition, fallback to this locale
exports.localeFallback = "en";

exports.definitions = {};

var _definitions = {
  "name": ["first_name", "last_name", "prefix", "suffix"],
  "address": ["city_prefix", "city_suffix", "street_suffix", "county", "country", "state", "state_abbr"],
  "company": ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb"],
  "lorem": ["words"],
  "hacker": ["abbreviation", "adjective", "noun", "verb", "ingverb"],
  "phone_number": ["formats"],
  "finance": ["account_type", "transaction_type", "currency"],
  "internet": ["avatar_uri", "domain_suffix", "free_email", "password"]
};

// Create a Getter for all definitions.foo.bar propetries
Object.keys(_definitions).forEach(function(d){
  if (typeof exports.definitions[d] === "undefined") {
    exports.definitions[d] = {};
  }
  _definitions[d].forEach(function(p){
    Object.defineProperty(exports.definitions[d], p, {
      get: function () {
        if (typeof locales[exports.locale][d] === "undefined" || typeof locales[exports.locale][d][p] === "undefined") {
          // certain localization sets contain less data then others.
          // in the case of a missing defintion, use the default localeFallback to substitute the missing set data
          return locales[exports.localeFallback][d][p];
        } else {
          // return localized data
          return locales[exports.locale][d][p];
        }
      }
    });
  });
});
},{"./lib/address":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/address.js","./lib/company":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/company.js","./lib/date":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/date.js","./lib/finance":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/finance.js","./lib/hacker":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/hacker.js","./lib/helpers":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/helpers.js","./lib/image":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/image.js","./lib/internet":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/internet.js","./lib/locales":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales.js","./lib/lorem":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/lorem.js","./lib/name":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/name.js","./lib/phone_number":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/phone_number.js","./lib/random":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/random.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/address.js":[function(require,module,exports){
var Helpers = require('./helpers');
var faker = require('../index');

var address = {
    zipCode: function () {
        return Helpers.replaceSymbolWithNumber(faker.random.array_element(["#####", '#####-####']));
    },

    city: function () {
        var result;
        switch (faker.random.number(3)) {
        case 0:
            result = faker.address.cityPrefix() + " " + faker.name.firstName() + faker.address.citySuffix();
            break;
        case 1:
            result = faker.address.cityPrefix() + " " + faker.name.firstName();
            break;
        case 2:
            result = faker.name.firstName() + faker.address.citySuffix();
            break;
        case 3:
            result = faker.name.lastName() + faker.address.citySuffix();
            break;
        }
        return result;
    },

    cityPrefix: function () {
      return faker.random.array_element(faker.definitions.address.city_prefix);
    },

    citySuffix: function () {
      return faker.random.array_element(faker.definitions.address.city_suffix);
    },

    streetName: function () {
        var result;
        switch (faker.random.number(1)) {
        case 0:
            result = faker.name.lastName() + " " + faker.address.streetSuffix();
            break;
        case 1:
            result = faker.name.firstName() + " " + faker.address.streetSuffix();
            break;
        }
        return result;
    },

    //
    // TODO: change all these methods that accept a boolean to instead accept an options hash.
    //
    streetAddress: function (useFullAddress) {
        if (useFullAddress === undefined) { useFullAddress = false; }
        var address = "";
        switch (faker.random.number(2)) {
        case 0:
            address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
            break;
        case 1:
            address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
            break;
        case 2:
            address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
            break;
        }
        return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
    },

    streetSuffix: function () {
        return faker.random.array_element(faker.definitions.address.street_suffix);
    },

    secondaryAddress: function () {
        return Helpers.replaceSymbolWithNumber(faker.random.array_element(
            [
                'Apt. ###',
                'Suite ###'
            ]
        ));
    },

    county: function () {
      return faker.random.array_element(faker.definitions.address.county);
    },

    country: function () {
      return faker.random.array_element(faker.definitions.address.country);
    },

    state: function (useAbbr) {
        return faker.random.array_element(faker.definitions.address.state);
    },

    stateAbbr: function () {
        return faker.random.array_element(faker.definitions.address.state_abbr);
    },

    latitude: function () {
        return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
    },

    longitude: function () {
        return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
    }
};

module.exports = address;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js","./helpers":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/helpers.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/company.js":[function(require,module,exports){
var faker = require('../index');

var company = {

    suffixes: function () {
        return ["Inc", "and Sons", "LLC", "Group", "and Daughters"];
    },

    companyName: function (format) {
        switch ((format ? format : faker.random.number(2))) {
        case 0:
            return faker.name.lastName() + " " + faker.company.companySuffix();
        case 1:
            return faker.name.lastName() + "-" + faker.name.lastName();
        case 2:
            return faker.name.lastName() + ", " + faker.name.lastName() + " and " + faker.name.lastName();
        }
    },

    companySuffix: function () {
        return faker.random.array_element(faker.company.suffixes());
    },

    catchPhrase: function () {
        return faker.company.catchPhraseAdjective() + " " +
            faker.company.catchPhraseDescriptor() + " " +
            faker.company.catchPhraseNoun();
    },

    bs: function () {
        return faker.company.bsAdjective() + " " +
            faker.company.bsBuzz() + " " +
            faker.company.bsNoun();
    },

    catchPhraseAdjective: function () {
        return faker.random.array_element(faker.definitions.company.adjective);
    },

    catchPhraseDescriptor: function () {
        return faker.random.array_element(faker.definitions.company.descriptor);
    },

    catchPhraseNoun: function () {
        return faker.random.array_element(faker.definitions.company.noun);
    },

    bsAdjective: function () {
        return faker.random.array_element(faker.definitions.company.bs_adjective);
    },

    bsBuzz: function () {
        return faker.random.array_element(faker.definitions.company.bs_verb);
    },

    bsNoun: function () {
        return faker.random.array_element(faker.definitions.company.bs_noun);
    }

};

module.exports = company;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/date.js":[function(require,module,exports){
var faker = require("../index");

var date = {

    past: function (years, refDate) {
        var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
        var range = {
          min: 1000,
          max: (years || 1) * 365 * 24 * 3600 * 1000
        };

        var past = date.getTime();
        past -= faker.random.number(range); // some time from now to N years ago, in milliseconds
        date.setTime(past);

        return date;
    },

    future: function (years, refDate) {
        var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
        var range = {
          min: 1000,
          max: (years || 1) * 365 * 24 * 3600 * 1000
        };

        var future = date.getTime();
        future += faker.random.number(range); // some time from now to N years later, in milliseconds
        date.setTime(future);

        return date;
    },

    between: function (from, to) {
        var fromMilli = Date.parse(from);
        var dateOffset = faker.random.number(Date.parse(to) - fromMilli);

        var newDate = new Date(fromMilli + dateOffset);

        return newDate;
    },

    recent: function (days) {
        var date = new Date();
        var range = {
          min: 1000,
          max: (days || 1) * 24 * 3600 * 1000
        };

        var future = date.getTime();
        future -= faker.random.number(range); // some time from now to N days ago, in milliseconds
        date.setTime(future);

        return date;
    }
};
module.exports = date;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/finance.js":[function(require,module,exports){
var Helpers = require('./helpers'),
    faker = require('../index');

var finance = {

    account: function (length) {

        length = length || 8;

        var template = '';

        for (var i = 0; i < length; i++) {
            template = template + '#';
        }
        length = null;
        return Helpers.replaceSymbolWithNumber(template);
    },

    accountName: function () {

        return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');
    },

    mask: function (length, parens, elipsis) {


        //set defaults
        length = (length == 0 || !length || typeof length == 'undefined') ? 4 : length;
        parens = (parens === null) ? true : parens;
        elipsis = (elipsis === null) ? true : elipsis;

        //create a template for length
        var template = '';

        for (var i = 0; i < length; i++) {
            template = template + '#';
        }

        //prefix with elipsis
        template = (elipsis) ? ['...', template].join('') : template;

        template = (parens) ? ['(', template, ')'].join('') : template;

        //generate random numbers
        template = Helpers.replaceSymbolWithNumber(template);

        return template;

    },

    //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
    //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

    amount: function (min, max, dec, symbol) {

        min = min || 0;
        max = max || 1000;
        dec = dec || 2;
        symbol = symbol || '';

        return symbol + (Math.round((Math.random() * (max - min) + min) * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);

    },

    transactionType: function () {
        return Helpers.randomize(faker.definitions.finance.transaction_type);
    },

    currencyCode: function () {
        return faker.random.object_element(faker.definitions.finance.currency)['code'];
    },

    currencyName: function () {
        return faker.random.object_element(faker.definitions.finance.currency, 'key');
    },

    currencySymbol: function () {
        var symbol;

        while (!symbol) {
            symbol = faker.random.object_element(faker.definitions.finance.currency)['symbol'];
        }
        return symbol;
    }
};

module.exports = finance;
},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js","./helpers":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/helpers.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/hacker.js":[function(require,module,exports){
var faker = require('../index');

var hacker = {

  abbreviation : function () {
    return faker.random.array_element(faker.definitions.hacker.abbreviation);
  },

  adjective : function () {
    return faker.random.array_element(faker.definitions.hacker.adjective);
  },

  noun : function () {
    return faker.random.array_element(faker.definitions.hacker.noun);
  },

  verb : function () {
    return faker.random.array_element(faker.definitions.hacker.verb);
  },

  ingverb : function () {
    return faker.random.array_element(faker.definitions.hacker.ingverb);
  },

  phrase : function () {

    var data = {
      abbreviation: hacker.abbreviation(),
      adjective: hacker.adjective(),
      ingverb: hacker.ingverb(),
      noun: hacker.noun(),
      verb: hacker.verb()
    };

    var phrase = faker.random.array_element([ "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!",
      "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!",
      "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!",
      "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!",
      "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"
   ]);

   return faker.helpers.mustache(phrase, data);

  },


};

module.exports = hacker;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/helpers.js":[function(require,module,exports){
var faker = require('../index');

// backword-compatibility
exports.randomNumber = function (range) {
    return faker.random.number(range);
};

// backword-compatibility
exports.randomize = function (array) {
    array = array || ["a", "b", "c"];
    return faker.random.array_element(array);
};

// slugifies string
exports.slugify = function (string) {
    string = string || "";
    return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '');
};

// parses string for a symbol and replace it with a random number from 1-10
exports.replaceSymbolWithNumber = function (string, symbol) {
    string = string || "";
    // default symbol is '#'
    if (symbol === undefined) {
        symbol = '#';
    }

    var str = '';
    for (var i = 0; i < string.length; i++) {
        if (string.charAt(i) == symbol) {
            str += faker.random.number(9);
        } else {
            str += string.charAt(i);
        }
    }
    return str;
};

// takes an array and returns it randomized
exports.shuffle = function (o) {
    o = o || ["a", "b", "c"];
    for (var j, x, i = o.length; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x);
    return o;
};

exports.mustache = function (str, data) {
  for(var p in data) {
    var re = new RegExp('{{' + p + '}}', 'g')
    str = str.replace(re, data[p]);
  }
  return str;
};

exports.createCard = function () {
    return {
        "name": faker.name.findName(),
        "username": faker.internet.userName(),
        "email": faker.internet.email(),
        "address": {
            "streetA": faker.address.streetName(),
            "streetB": faker.address.streetAddress(),
            "streetC": faker.address.streetAddress(true),
            "streetD": faker.address.secondaryAddress(),
            "city": faker.address.city(),
            "state": faker.address.state(),
            "country": faker.address.country(),
            "zipcode": faker.address.zipCode(),
            "geo": {
                "lat": faker.address.latitude(),
                "lng": faker.address.longitude()
            }
        },
        "phone": faker.phone.phoneNumber(),
        "website": faker.internet.domainName(),
        "company": {
            "name": faker.company.companyName(),
            "catchPhrase": faker.company.catchPhrase(),
            "bs": faker.company.bs()
        },
        "posts": [
            {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            },
            {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            },
            {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            }
        ],
        "accountHistory": [faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction()]
    };
};

exports.contextualCard = function () {
  var name = faker.name.firstName(),
      userName = faker.internet.userName(name);
  return {
      "name": name,
      "username": userName,
      "avatar": faker.internet.avatar(),
      "email": faker.internet.email(userName),
      "dob": faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
      "phone": faker.phone.phoneNumber(),
      "address": {
          "street": faker.address.streetName(true),
          "suite": faker.address.secondaryAddress(),
          "city": faker.address.city(),
          "zipcode": faker.address.zipCode(),
          "geo": {
              "lat": faker.address.latitude(),
              "lng": faker.address.longitude()
          }
      },
      "website": faker.internet.domainName(),
      "company": {
          "name": faker.company.companyName(),
          "catchPhrase": faker.company.catchPhrase(),
          "bs": faker.company.bs()
      }
  };
};


exports.userCard = function () {
    return {
        "name": faker.name.findName(),
        "username": faker.internet.userName(),
        "email": faker.internet.email(),
        "address": {
            "street": faker.address.streetName(true),
            "suite": faker.address.secondaryAddress(),
            "city": faker.address.city(),
            "zipcode": faker.address.zipCode(),
            "geo": {
                "lat": faker.address.latitude(),
                "lng": faker.address.longitude()
            }
        },
        "phone": faker.phone.phoneNumber(),
        "website": faker.internet.domainName(),
        "company": {
            "name": faker.company.companyName(),
            "catchPhrase": faker.company.catchPhrase(),
            "bs": faker.company.bs()
        }
    };
};

exports.createTransaction = function(){
  return {
    "amount" : faker.finance.amount(),
    "date" : new Date(2012, 1, 2),  //TODO: add a ranged date method
    "business": faker.company.companyName(),
    "name": [faker.finance.accountName(), faker.finance.mask()].join(' '),
    "type" : exports.randomize(faker.definitions.finance.transaction_type),
    "account" : faker.finance.account()
  };
};

/*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/


},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/image.js":[function(require,module,exports){
var faker = require('../index');

var image = {
  image: function () {
    var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
    return image[faker.random.array_element(categories)]();
  },
  avatar: function () {
    return faker.internet.avatar();
  },
  imageUrl: function (width, height, category) {
      var width = width || 640;
      var height = height || 480;

      var url ='http://lorempixel.com/' + width + '/' + height;
      if (typeof category !== 'undefined') {
        url += '/' + category;
      }
      return url;
  },
  abstract: function (width, height) {
    return faker.image.imageUrl(width, height, 'abstract');
  },
  animals: function (width, height) {
    return faker.image.imageUrl(width, height, 'animals');
  },
  business: function (width, height) {
    return faker.image.imageUrl(width, height, 'business');
  },
  cats: function (width, height) {
    return faker.image.imageUrl(width, height, 'cats');
  },
  city: function (width, height) {
    return faker.image.imageUrl(width, height, 'city');
  },
  food: function (width, height) {
    return faker.image.imageUrl(width, height, 'food');
  },
  nightlife: function (width, height) {
    return faker.image.imageUrl(width, height, 'nightlife');
  },
  fashion: function (width, height) {
    return faker.image.imageUrl(width, height, 'fashion');
  },
  people: function (width, height) {
    return faker.image.imageUrl(width, height, 'people');
  },
  nature: function (width, height) {
    return faker.image.imageUrl(width, height, 'nature');
  },
  sports: function (width, height) {
    return faker.image.imageUrl(width, height, 'sports');
  },
  technics: function (width, height) {
    return faker.image.imageUrl(width, height, 'technics');
  },
  transport: function (width, height) {
    return faker.image.imageUrl(width, height, 'transport');
  }
};

module.exports = image;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/internet.js":[function(require,module,exports){
var faker = require('../index'),
    password_generator = require('../vendor/password-generator.js'),
    random_ua = require('../vendor/user-agent');

var internet = {

    avatar: function () {
        return faker.random.array_element(faker.definitions.internet.avatar_uri);
    },

    email: function (firstName, lastName, provider) {
        provider = provider || faker.random.array_element(faker.definitions.internet.free_email);
        return  faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
    },

    userName: function (firstName, lastName) {
        var result;
        firstName = firstName || faker.name.firstName();
        lastName = lastName || faker.name.lastName();
        switch (faker.random.number(2)) {
        case 0:
            result = firstName + faker.random.number(99);
            break;
        case 1:
            result = firstName + faker.random.array_element([".", "_"]) + lastName;
            break;
        case 2:
            result = firstName + faker.random.array_element([".", "_"]) + lastName + faker.random.number(99);
            break;
        }
        result = result.replace(/'/g, "");
        result = result.replace(/ /g, "");
        return result;
    },

    domainName: function () {
        return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
    },

    domainSuffix: function () {
        return faker.random.array_element(faker.definitions.internet.domain_suffix);
    },

    domainWord:  function () {
        return faker.name.firstName().replace(/([^A-Z0-9._%+-])/ig, '').toLowerCase();
    },

    ip: function () {
        var randNum = function () {
            return (faker.random.number(255)).toFixed(0);
        };

        var result = [];
        for (var i = 0; i < 4; i++) {
            result[i] = randNum();
        }

        return result.join(".");
    },

    userAgent: function () {
      return random_ua.generate();
    },

    color: function (baseRed255, baseGreen255, baseBlue255) {
        baseRed255 = baseRed255 || 0;
        baseGreen255 = baseGreen255 || 0;
        baseBlue255 = baseBlue255 || 0;
        // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
        var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
        var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);
        var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);
        var redStr = red.toString(16);
        var greenStr = green.toString(16);
        var blueStr = blue.toString(16);
        return '#' +
          (redStr.length === 1 ? '0' : '') + redStr +
          (greenStr.length === 1 ? '0' : '') + greenStr +
          (blueStr.length === 1 ? '0': '') + blueStr;

    },

    password: function (len, memorable, pattern, prefix) {
      len = len || 15;
      if (typeof memorable === "undefined") {
        memorable = false;
      }
      return password_generator(len, memorable, pattern, prefix);
    }
};

module.exports = internet;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js","../vendor/password-generator.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/vendor/password-generator.js","../vendor/user-agent":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/vendor/user-agent.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales.js":[function(require,module,exports){
var faker = require('../index');
exports['de'] = require('./locales/de.js');
exports['de_AT'] = require('./locales/de_AT.js');
exports['de_CH'] = require('./locales/de_CH.js');
exports['en'] = require('./locales/en.js');
exports['en_AU'] = require('./locales/en_AU.js');
exports['en_BORK'] = require('./locales/en_BORK.js');
exports['en_CA'] = require('./locales/en_CA.js');
exports['en_GB'] = require('./locales/en_GB.js');
exports['en_IND'] = require('./locales/en_IND.js');
exports['en_US'] = require('./locales/en_US.js');
exports['en_au_ocker'] = require('./locales/en_au_ocker.js');
exports['es'] = require('./locales/es.js');
exports['fa'] = require('./locales/fa.js');
exports['fr'] = require('./locales/fr.js');
exports['it'] = require('./locales/it.js');
exports['ja'] = require('./locales/ja.js');
exports['ko'] = require('./locales/ko.js');
exports['nb_NO'] = require('./locales/nb_NO.js');
exports['nep'] = require('./locales/nep.js');
exports['nl'] = require('./locales/nl.js');
exports['pl'] = require('./locales/pl.js');
exports['pt_BR'] = require('./locales/pt_BR.js');
exports['ru'] = require('./locales/ru.js');
exports['sk'] = require('./locales/sk.js');
exports['sv'] = require('./locales/sv.js');
exports['vi'] = require('./locales/vi.js');
exports['zh_CN'] = require('./locales/zh_CN.js');
},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js","./locales/de.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/de.js","./locales/de_AT.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/de_AT.js","./locales/de_CH.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/de_CH.js","./locales/en.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en.js","./locales/en_AU.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_AU.js","./locales/en_BORK.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_BORK.js","./locales/en_CA.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_CA.js","./locales/en_GB.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_GB.js","./locales/en_IND.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_IND.js","./locales/en_US.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_US.js","./locales/en_au_ocker.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_au_ocker.js","./locales/es.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/es.js","./locales/fa.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/fa.js","./locales/fr.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/fr.js","./locales/it.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/it.js","./locales/ja.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/ja.js","./locales/ko.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/ko.js","./locales/nb_NO.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/nb_NO.js","./locales/nep.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/nep.js","./locales/nl.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/nl.js","./locales/pl.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/pl.js","./locales/pt_BR.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/pt_BR.js","./locales/ru.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/ru.js","./locales/sk.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/sk.js","./locales/sv.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/sv.js","./locales/vi.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/vi.js","./locales/zh_CN.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/zh_CN.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/de.js":[function(require,module,exports){
var de = {};
module["exports"] = de;
de.title = "German";
de.address = {
  "city_prefix": [
    "Nord",
    "Ost",
    "West",
    "Süd",
    "Neu",
    "Alt",
    "Bad"
  ],
  "city_suffix": [
    "stadt",
    "dorf",
    "land",
    "scheid",
    "burg"
  ],
  "country": [
    "Ägypten",
    "Äquatorialguinea",
    "Äthiopien",
    "Österreich",
    "Afghanistan",
    "Albanien",
    "Algerien",
    "Amerikanisch-Samoa",
    "Amerikanische Jungferninseln",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarktis",
    "Antigua und Barbuda",
    "Argentinien",
    "Armenien",
    "Aruba",
    "Aserbaidschan",
    "Australien",
    "Bahamas",
    "Bahrain",
    "Bangladesch",
    "Barbados",
    "Belarus",
    "Belgien",
    "Belize",
    "Benin",
    "die Bermudas",
    "Bhutan",
    "Bolivien",
    "Bosnien und Herzegowina",
    "Botsuana",
    "Bouvetinsel",
    "Brasilien",
    "Britische Jungferninseln",
    "Britisches Territorium im Indischen Ozean",
    "Brunei Darussalam",
    "Bulgarien",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "China",
    "Cookinseln",
    "Costa Rica",
    "Dänemark",
    "Demokratische Republik Kongo",
    "Demokratische Volksrepublik Korea",
    "Deutschland",
    "Dominica",
    "Dominikanische Republik",
    "Dschibuti",
    "Ecuador",
    "El Salvador",
    "Eritrea",
    "Estland",
    "Färöer",
    "Falklandinseln",
    "Fidschi",
    "Finnland",
    "Frankreich",
    "Französisch-Guayana",
    "Französisch-Polynesien",
    "Französische Gebiete im südlichen Indischen Ozean",
    "Gabun",
    "Gambia",
    "Georgien",
    "Ghana",
    "Gibraltar",
    "Grönland",
    "Grenada",
    "Griechenland",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard und McDonaldinseln",
    "Honduras",
    "Hongkong",
    "Indien",
    "Indonesien",
    "Irak",
    "Iran",
    "Irland",
    "Island",
    "Israel",
    "Italien",
    "Jamaika",
    "Japan",
    "Jemen",
    "Jordanien",
    "Jugoslawien",
    "Kaimaninseln",
    "Kambodscha",
    "Kamerun",
    "Kanada",
    "Kap Verde",
    "Kasachstan",
    "Katar",
    "Kenia",
    "Kirgisistan",
    "Kiribati",
    "Kleinere amerikanische Überseeinseln",
    "Kokosinseln",
    "Kolumbien",
    "Komoren",
    "Kongo",
    "Kroatien",
    "Kuba",
    "Kuwait",
    "Laos",
    "Lesotho",
    "Lettland",
    "Libanon",
    "Liberia",
    "Libyen",
    "Liechtenstein",
    "Litauen",
    "Luxemburg",
    "Macau",
    "Madagaskar",
    "Malawi",
    "Malaysia",
    "Malediven",
    "Mali",
    "Malta",
    "ehemalige jugoslawische Republik Mazedonien",
    "Marokko",
    "Marshallinseln",
    "Martinique",
    "Mauretanien",
    "Mauritius",
    "Mayotte",
    "Mexiko",
    "Mikronesien",
    "Monaco",
    "Mongolei",
    "Montserrat",
    "Mosambik",
    "Myanmar",
    "Nördliche Marianen",
    "Namibia",
    "Nauru",
    "Nepal",
    "Neukaledonien",
    "Neuseeland",
    "Nicaragua",
    "Niederländische Antillen",
    "Niederlande",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolkinsel",
    "Norwegen",
    "Oman",
    "Osttimor",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Neuguinea",
    "Paraguay",
    "Peru",
    "Philippinen",
    "Pitcairninseln",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Réunion",
    "Republik Korea",
    "Republik Moldau",
    "Ruanda",
    "Rumänien",
    "Russische Föderation",
    "São Tomé und Príncipe",
    "Südafrika",
    "Südgeorgien und Südliche Sandwichinseln",
    "Salomonen",
    "Sambia",
    "Samoa",
    "San Marino",
    "Saudi-Arabien",
    "Schweden",
    "Schweiz",
    "Senegal",
    "Seychellen",
    "Sierra Leone",
    "Simbabwe",
    "Singapur",
    "Slowakei",
    "Slowenien",
    "Somalien",
    "Spanien",
    "Sri Lanka",
    "St. Helena",
    "St. Kitts und Nevis",
    "St. Lucia",
    "St. Pierre und Miquelon",
    "St. Vincent und die Grenadinen",
    "Sudan",
    "Surinam",
    "Svalbard und Jan Mayen",
    "Swasiland",
    "Syrien",
    "Türkei",
    "Tadschikistan",
    "Taiwan",
    "Tansania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad und Tobago",
    "Tschad",
    "Tschechische Republik",
    "Tunesien",
    "Turkmenistan",
    "Turks- und Caicosinseln",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "Ungarn",
    "Uruguay",
    "Usbekistan",
    "Vanuatu",
    "Vatikanstadt",
    "Venezuela",
    "Vereinigte Arabische Emirate",
    "Vereinigte Staaten",
    "Vereinigtes Königreich",
    "Vietnam",
    "Wallis und Futuna",
    "Weihnachtsinsel",
    "Westsahara",
    "Zentralafrikanische Republik",
    "Zypern"
  ],
  "street_root": [
    "Ackerweg",
    "Adalbert-Stifter-Str.",
    "Adalbertstr.",
    "Adolf-Baeyer-Str.",
    "Adolf-Kaschny-Str.",
    "Adolf-Reichwein-Str.",
    "Adolfsstr.",
    "Ahornweg",
    "Ahrstr.",
    "Akazienweg",
    "Albert-Einstein-Str.",
    "Albert-Schweitzer-Str.",
    "Albertus-Magnus-Str.",
    "Albert-Zarthe-Weg",
    "Albin-Edelmann-Str.",
    "Albrecht-Haushofer-Str.",
    "Aldegundisstr.",
    "Alexanderstr.",
    "Alfred-Delp-Str.",
    "Alfred-Kubin-Str.",
    "Alfred-Stock-Str.",
    "Alkenrather Str.",
    "Allensteiner Str.",
    "Alsenstr.",
    "Alt Steinbücheler Weg",
    "Alte Garten",
    "Alte Heide",
    "Alte Landstr.",
    "Alte Ziegelei",
    "Altenberger Str.",
    "Altenhof",
    "Alter Grenzweg",
    "Altstadtstr.",
    "Am Alten Gaswerk",
    "Am Alten Schafstall",
    "Am Arenzberg",
    "Am Benthal",
    "Am Birkenberg",
    "Am Blauen Berg",
    "Am Borsberg",
    "Am Brungen",
    "Am Büchelter Hof",
    "Am Buttermarkt",
    "Am Ehrenfriedhof",
    "Am Eselsdamm",
    "Am Falkenberg",
    "Am Frankenberg",
    "Am Gesundheitspark",
    "Am Gierlichshof",
    "Am Graben",
    "Am Hagelkreuz",
    "Am Hang",
    "Am Heidkamp",
    "Am Hemmelrather Hof",
    "Am Hofacker",
    "Am Hohen Ufer",
    "Am Höllers Eck",
    "Am Hühnerberg",
    "Am Jägerhof",
    "Am Junkernkamp",
    "Am Kemperstiegel",
    "Am Kettnersbusch",
    "Am Kiesberg",
    "Am Klösterchen",
    "Am Knechtsgraben",
    "Am Köllerweg",
    "Am Köttersbach",
    "Am Kreispark",
    "Am Kronefeld",
    "Am Küchenhof",
    "Am Kühnsbusch",
    "Am Lindenfeld",
    "Am Märchen",
    "Am Mittelberg",
    "Am Mönchshof",
    "Am Mühlenbach",
    "Am Neuenhof",
    "Am Nonnenbruch",
    "Am Plattenbusch",
    "Am Quettinger Feld",
    "Am Rosenhügel",
    "Am Sandberg",
    "Am Scherfenbrand",
    "Am Schokker",
    "Am Silbersee",
    "Am Sonnenhang",
    "Am Sportplatz",
    "Am Stadtpark",
    "Am Steinberg",
    "Am Telegraf",
    "Am Thelenhof",
    "Am Vogelkreuz",
    "Am Vogelsang",
    "Am Vogelsfeldchen",
    "Am Wambacher Hof",
    "Am Wasserturm",
    "Am Weidenbusch",
    "Am Weiher",
    "Am Weingarten",
    "Am Werth",
    "Amselweg",
    "An den Irlen",
    "An den Rheinauen",
    "An der Bergerweide",
    "An der Dingbank",
    "An der Evangelischen Kirche",
    "An der Evgl. Kirche",
    "An der Feldgasse",
    "An der Fettehenne",
    "An der Kante",
    "An der Laach",
    "An der Lehmkuhle",
    "An der Lichtenburg",
    "An der Luisenburg",
    "An der Robertsburg",
    "An der Schmitten",
    "An der Schusterinsel",
    "An der Steinrütsch",
    "An St. Andreas",
    "An St. Remigius",
    "Andreasstr.",
    "Ankerweg",
    "Annette-Kolb-Str.",
    "Apenrader Str.",
    "Arnold-Ohletz-Str.",
    "Atzlenbacher Str.",
    "Auerweg",
    "Auestr.",
    "Auf dem Acker",
    "Auf dem Blahnenhof",
    "Auf dem Bohnbüchel",
    "Auf dem Bruch",
    "Auf dem End",
    "Auf dem Forst",
    "Auf dem Herberg",
    "Auf dem Lehn",
    "Auf dem Stein",
    "Auf dem Weierberg",
    "Auf dem Weiherhahn",
    "Auf den Reien",
    "Auf der Donnen",
    "Auf der Grieße",
    "Auf der Ohmer",
    "Auf der Weide",
    "Auf'm Berg",
    "Auf'm Kamp",
    "Augustastr.",
    "August-Kekulé-Str.",
    "A.-W.-v.-Hofmann-Str.",
    "Bahnallee",
    "Bahnhofstr.",
    "Baltrumstr.",
    "Bamberger Str.",
    "Baumberger Str.",
    "Bebelstr.",
    "Beckers Kämpchen",
    "Beerenstr.",
    "Beethovenstr.",
    "Behringstr.",
    "Bendenweg",
    "Bensberger Str.",
    "Benzstr.",
    "Bergische Landstr.",
    "Bergstr.",
    "Berliner Platz",
    "Berliner Str.",
    "Bernhard-Letterhaus-Str.",
    "Bernhard-Lichtenberg-Str.",
    "Bernhard-Ridder-Str.",
    "Bernsteinstr.",
    "Bertha-Middelhauve-Str.",
    "Bertha-von-Suttner-Str.",
    "Bertolt-Brecht-Str.",
    "Berzeliusstr.",
    "Bielertstr.",
    "Biesenbach",
    "Billrothstr.",
    "Birkenbergstr.",
    "Birkengartenstr.",
    "Birkenweg",
    "Bismarckstr.",
    "Bitterfelder Str.",
    "Blankenburg",
    "Blaukehlchenweg",
    "Blütenstr.",
    "Boberstr.",
    "Böcklerstr.",
    "Bodelschwinghstr.",
    "Bodestr.",
    "Bogenstr.",
    "Bohnenkampsweg",
    "Bohofsweg",
    "Bonifatiusstr.",
    "Bonner Str.",
    "Borkumstr.",
    "Bornheimer Str.",
    "Borsigstr.",
    "Borussiastr.",
    "Bracknellstr.",
    "Brahmsweg",
    "Brandenburger Str.",
    "Breidenbachstr.",
    "Breslauer Str.",
    "Bruchhauser Str.",
    "Brückenstr.",
    "Brucknerstr.",
    "Brüder-Bonhoeffer-Str.",
    "Buchenweg",
    "Bürgerbuschweg",
    "Burgloch",
    "Burgplatz",
    "Burgstr.",
    "Burgweg",
    "Bürriger Weg",
    "Burscheider Str.",
    "Buschkämpchen",
    "Butterheider Str.",
    "Carl-Duisberg-Platz",
    "Carl-Duisberg-Str.",
    "Carl-Leverkus-Str.",
    "Carl-Maria-von-Weber-Platz",
    "Carl-Maria-von-Weber-Str.",
    "Carlo-Mierendorff-Str.",
    "Carl-Rumpff-Str.",
    "Carl-von-Ossietzky-Str.",
    "Charlottenburger Str.",
    "Christian-Heß-Str.",
    "Claasbruch",
    "Clemens-Winkler-Str.",
    "Concordiastr.",
    "Cranachstr.",
    "Dahlemer Str.",
    "Daimlerstr.",
    "Damaschkestr.",
    "Danziger Str.",
    "Debengasse",
    "Dechant-Fein-Str.",
    "Dechant-Krey-Str.",
    "Deichtorstr.",
    "Dhünnberg",
    "Dhünnstr.",
    "Dianastr.",
    "Diedenhofener Str.",
    "Diepental",
    "Diepenthaler Str.",
    "Dieselstr.",
    "Dillinger Str.",
    "Distelkamp",
    "Dohrgasse",
    "Domblick",
    "Dönhoffstr.",
    "Dornierstr.",
    "Drachenfelsstr.",
    "Dr.-August-Blank-Str.",
    "Dresdener Str.",
    "Driescher Hecke",
    "Drosselweg",
    "Dudweilerstr.",
    "Dünenweg",
    "Dünfelder Str.",
    "Dünnwalder Grenzweg",
    "Düppeler Str.",
    "Dürerstr.",
    "Dürscheider Weg",
    "Düsseldorfer Str.",
    "Edelrather Weg",
    "Edmund-Husserl-Str.",
    "Eduard-Spranger-Str.",
    "Ehrlichstr.",
    "Eichenkamp",
    "Eichenweg",
    "Eidechsenweg",
    "Eifelstr.",
    "Eifgenstr.",
    "Eintrachtstr.",
    "Elbestr.",
    "Elisabeth-Langgässer-Str.",
    "Elisabethstr.",
    "Elisabeth-von-Thadden-Str.",
    "Elisenstr.",
    "Elsa-Brändström-Str.",
    "Elsbachstr.",
    "Else-Lasker-Schüler-Str.",
    "Elsterstr.",
    "Emil-Fischer-Str.",
    "Emil-Nolde-Str.",
    "Engelbertstr.",
    "Engstenberger Weg",
    "Entenpfuhl",
    "Erbelegasse",
    "Erftstr.",
    "Erfurter Str.",
    "Erich-Heckel-Str.",
    "Erich-Klausener-Str.",
    "Erich-Ollenhauer-Str.",
    "Erlenweg",
    "Ernst-Bloch-Str.",
    "Ernst-Ludwig-Kirchner-Str.",
    "Erzbergerstr.",
    "Eschenallee",
    "Eschenweg",
    "Esmarchstr.",
    "Espenweg",
    "Euckenstr.",
    "Eulengasse",
    "Eulenkamp",
    "Ewald-Flamme-Str.",
    "Ewald-Röll-Str.",
    "Fährstr.",
    "Farnweg",
    "Fasanenweg",
    "Faßbacher Hof",
    "Felderstr.",
    "Feldkampstr.",
    "Feldsiefer Weg",
    "Feldsiefer Wiesen",
    "Feldstr.",
    "Feldtorstr.",
    "Felix-von-Roll-Str.",
    "Ferdinand-Lassalle-Str.",
    "Fester Weg",
    "Feuerbachstr.",
    "Feuerdornweg",
    "Fichtenweg",
    "Fichtestr.",
    "Finkelsteinstr.",
    "Finkenweg",
    "Fixheider Str.",
    "Flabbenhäuschen",
    "Flensburger Str.",
    "Fliederweg",
    "Florastr.",
    "Florianweg",
    "Flotowstr.",
    "Flurstr.",
    "Föhrenweg",
    "Fontanestr.",
    "Forellental",
    "Fortunastr.",
    "Franz-Esser-Str.",
    "Franz-Hitze-Str.",
    "Franz-Kail-Str.",
    "Franz-Marc-Str.",
    "Freiburger Str.",
    "Freiheitstr.",
    "Freiherr-vom-Stein-Str.",
    "Freudenthal",
    "Freudenthaler Weg",
    "Fridtjof-Nansen-Str.",
    "Friedenberger Str.",
    "Friedensstr.",
    "Friedhofstr.",
    "Friedlandstr.",
    "Friedlieb-Ferdinand-Runge-Str.",
    "Friedrich-Bayer-Str.",
    "Friedrich-Bergius-Platz",
    "Friedrich-Ebert-Platz",
    "Friedrich-Ebert-Str.",
    "Friedrich-Engels-Str.",
    "Friedrich-List-Str.",
    "Friedrich-Naumann-Str.",
    "Friedrich-Sertürner-Str.",
    "Friedrichstr.",
    "Friedrich-Weskott-Str.",
    "Friesenweg",
    "Frischenberg",
    "Fritz-Erler-Str.",
    "Fritz-Henseler-Str.",
    "Fröbelstr.",
    "Fürstenbergplatz",
    "Fürstenbergstr.",
    "Gabriele-Münter-Str.",
    "Gartenstr.",
    "Gebhardstr.",
    "Geibelstr.",
    "Gellertstr.",
    "Georg-von-Vollmar-Str.",
    "Gerhard-Domagk-Str.",
    "Gerhart-Hauptmann-Str.",
    "Gerichtsstr.",
    "Geschwister-Scholl-Str.",
    "Gezelinallee",
    "Gierener Weg",
    "Ginsterweg",
    "Gisbert-Cremer-Str.",
    "Glücksburger Str.",
    "Gluckstr.",
    "Gneisenaustr.",
    "Goetheplatz",
    "Goethestr.",
    "Golo-Mann-Str.",
    "Görlitzer Str.",
    "Görresstr.",
    "Graebestr.",
    "Graf-Galen-Platz",
    "Gregor-Mendel-Str.",
    "Greifswalder Str.",
    "Grillenweg",
    "Gronenborner Weg",
    "Große Kirchstr.",
    "Grunder Wiesen",
    "Grundermühle",
    "Grundermühlenhof",
    "Grundermühlenweg",
    "Grüner Weg",
    "Grunewaldstr.",
    "Grünstr.",
    "Günther-Weisenborn-Str.",
    "Gustav-Freytag-Str.",
    "Gustav-Heinemann-Str.",
    "Gustav-Radbruch-Str.",
    "Gut Reuschenberg",
    "Gutenbergstr.",
    "Haberstr.",
    "Habichtgasse",
    "Hafenstr.",
    "Hagenauer Str.",
    "Hahnenblecher",
    "Halenseestr.",
    "Halfenleimbach",
    "Hallesche Str.",
    "Halligstr.",
    "Hamberger Str.",
    "Hammerweg",
    "Händelstr.",
    "Hannah-Höch-Str.",
    "Hans-Arp-Str.",
    "Hans-Gerhard-Str.",
    "Hans-Sachs-Str.",
    "Hans-Schlehahn-Str.",
    "Hans-von-Dohnanyi-Str.",
    "Hardenbergstr.",
    "Haselweg",
    "Hauptstr.",
    "Haus-Vorster-Str.",
    "Hauweg",
    "Havelstr.",
    "Havensteinstr.",
    "Haydnstr.",
    "Hebbelstr.",
    "Heckenweg",
    "Heerweg",
    "Hegelstr.",
    "Heidberg",
    "Heidehöhe",
    "Heidestr.",
    "Heimstättenweg",
    "Heinrich-Böll-Str.",
    "Heinrich-Brüning-Str.",
    "Heinrich-Claes-Str.",
    "Heinrich-Heine-Str.",
    "Heinrich-Hörlein-Str.",
    "Heinrich-Lübke-Str.",
    "Heinrich-Lützenkirchen-Weg",
    "Heinrichstr.",
    "Heinrich-Strerath-Str.",
    "Heinrich-von-Kleist-Str.",
    "Heinrich-von-Stephan-Str.",
    "Heisterbachstr.",
    "Helenenstr.",
    "Helmestr.",
    "Hemmelrather Weg",
    "Henry-T.-v.-Böttinger-Str.",
    "Herderstr.",
    "Heribertstr.",
    "Hermann-Ehlers-Str.",
    "Hermann-Hesse-Str.",
    "Hermann-König-Str.",
    "Hermann-Löns-Str.",
    "Hermann-Milde-Str.",
    "Hermann-Nörrenberg-Str.",
    "Hermann-von-Helmholtz-Str.",
    "Hermann-Waibel-Str.",
    "Herzogstr.",
    "Heymannstr.",
    "Hindenburgstr.",
    "Hirzenberg",
    "Hitdorfer Kirchweg",
    "Hitdorfer Str.",
    "Höfer Mühle",
    "Höfer Weg",
    "Hohe Str.",
    "Höhenstr.",
    "Höltgestal",
    "Holunderweg",
    "Holzer Weg",
    "Holzer Wiesen",
    "Hornpottweg",
    "Hubertusweg",
    "Hufelandstr.",
    "Hufer Weg",
    "Humboldtstr.",
    "Hummelsheim",
    "Hummelweg",
    "Humperdinckstr.",
    "Hüscheider Gärten",
    "Hüscheider Str.",
    "Hütte",
    "Ilmstr.",
    "Im Bergischen Heim",
    "Im Bruch",
    "Im Buchenhain",
    "Im Bühl",
    "Im Burgfeld",
    "Im Dorf",
    "Im Eisholz",
    "Im Friedenstal",
    "Im Frohental",
    "Im Grunde",
    "Im Hederichsfeld",
    "Im Jücherfeld",
    "Im Kalkfeld",
    "Im Kirberg",
    "Im Kirchfeld",
    "Im Kreuzbruch",
    "Im Mühlenfeld",
    "Im Nesselrader Kamp",
    "Im Oberdorf",
    "Im Oberfeld",
    "Im Rosengarten",
    "Im Rottland",
    "Im Scheffengarten",
    "Im Staderfeld",
    "Im Steinfeld",
    "Im Weidenblech",
    "Im Winkel",
    "Im Ziegelfeld",
    "Imbach",
    "Imbacher Weg",
    "Immenweg",
    "In den Blechenhöfen",
    "In den Dehlen",
    "In der Birkenau",
    "In der Dasladen",
    "In der Felderhütten",
    "In der Hartmannswiese",
    "In der Höhle",
    "In der Schaafsdellen",
    "In der Wasserkuhl",
    "In der Wüste",
    "In Holzhausen",
    "Insterstr.",
    "Jacob-Fröhlen-Str.",
    "Jägerstr.",
    "Jahnstr.",
    "Jakob-Eulenberg-Weg",
    "Jakobistr.",
    "Jakob-Kaiser-Str.",
    "Jenaer Str.",
    "Johannes-Baptist-Str.",
    "Johannes-Dott-Str.",
    "Johannes-Popitz-Str.",
    "Johannes-Wislicenus-Str.",
    "Johannisburger Str.",
    "Johann-Janssen-Str.",
    "Johann-Wirtz-Weg",
    "Josefstr.",
    "Jüch",
    "Julius-Doms-Str.",
    "Julius-Leber-Str.",
    "Kaiserplatz",
    "Kaiserstr.",
    "Kaiser-Wilhelm-Allee",
    "Kalkstr.",
    "Kämpchenstr.",
    "Kämpenwiese",
    "Kämper Weg",
    "Kamptalweg",
    "Kanalstr.",
    "Kandinskystr.",
    "Kantstr.",
    "Kapellenstr.",
    "Karl-Arnold-Str.",
    "Karl-Bosch-Str.",
    "Karl-Bückart-Str.",
    "Karl-Carstens-Ring",
    "Karl-Friedrich-Goerdeler-Str.",
    "Karl-Jaspers-Str.",
    "Karl-König-Str.",
    "Karl-Krekeler-Str.",
    "Karl-Marx-Str.",
    "Karlstr.",
    "Karl-Ulitzka-Str.",
    "Karl-Wichmann-Str.",
    "Karl-Wingchen-Str.",
    "Käsenbrod",
    "Käthe-Kollwitz-Str.",
    "Katzbachstr.",
    "Kerschensteinerstr.",
    "Kiefernweg",
    "Kieler Str.",
    "Kieselstr.",
    "Kiesweg",
    "Kinderhausen",
    "Kleiberweg",
    "Kleine Kirchstr.",
    "Kleingansweg",
    "Kleinheider Weg",
    "Klief",
    "Kneippstr.",
    "Knochenbergsweg",
    "Kochergarten",
    "Kocherstr.",
    "Kockelsberg",
    "Kolberger Str.",
    "Kolmarer Str.",
    "Kölner Gasse",
    "Kölner Str.",
    "Kolpingstr.",
    "Königsberger Platz",
    "Konrad-Adenauer-Platz",
    "Köpenicker Str.",
    "Kopernikusstr.",
    "Körnerstr.",
    "Köschenberg",
    "Köttershof",
    "Kreuzbroicher Str.",
    "Kreuzkamp",
    "Krummer Weg",
    "Kruppstr.",
    "Kuhlmannweg",
    "Kump",
    "Kumper Weg",
    "Kunstfeldstr.",
    "Küppersteger Str.",
    "Kursiefen",
    "Kursiefer Weg",
    "Kurtekottenweg",
    "Kurt-Schumacher-Ring",
    "Kyllstr.",
    "Langenfelder Str.",
    "Längsleimbach",
    "Lärchenweg",
    "Legienstr.",
    "Lehner Mühle",
    "Leichlinger Str.",
    "Leimbacher Hof",
    "Leinestr.",
    "Leineweberstr.",
    "Leipziger Str.",
    "Lerchengasse",
    "Lessingstr.",
    "Libellenweg",
    "Lichstr.",
    "Liebigstr.",
    "Lindenstr.",
    "Lingenfeld",
    "Linienstr.",
    "Lippe",
    "Löchergraben",
    "Löfflerstr.",
    "Loheweg",
    "Lohrbergstr.",
    "Lohrstr.",
    "Löhstr.",
    "Lortzingstr.",
    "Lötzener Str.",
    "Löwenburgstr.",
    "Lucasstr.",
    "Ludwig-Erhard-Platz",
    "Ludwig-Girtler-Str.",
    "Ludwig-Knorr-Str.",
    "Luisenstr.",
    "Lupinenweg",
    "Lurchenweg",
    "Lützenkirchener Str.",
    "Lycker Str.",
    "Maashofstr.",
    "Manforter Str.",
    "Marc-Chagall-Str.",
    "Maria-Dresen-Str.",
    "Maria-Terwiel-Str.",
    "Marie-Curie-Str.",
    "Marienburger Str.",
    "Mariendorfer Str.",
    "Marienwerderstr.",
    "Marie-Schlei-Str.",
    "Marktplatz",
    "Markusweg",
    "Martin-Buber-Str.",
    "Martin-Heidegger-Str.",
    "Martin-Luther-Str.",
    "Masurenstr.",
    "Mathildenweg",
    "Maurinusstr.",
    "Mauspfad",
    "Max-Beckmann-Str.",
    "Max-Delbrück-Str.",
    "Max-Ernst-Str.",
    "Max-Holthausen-Platz",
    "Max-Horkheimer-Str.",
    "Max-Liebermann-Str.",
    "Max-Pechstein-Str.",
    "Max-Planck-Str.",
    "Max-Scheler-Str.",
    "Max-Schönenberg-Str.",
    "Maybachstr.",
    "Meckhofer Feld",
    "Meisenweg",
    "Memelstr.",
    "Menchendahler Str.",
    "Mendelssohnstr.",
    "Merziger Str.",
    "Mettlacher Str.",
    "Metzer Str.",
    "Michaelsweg",
    "Miselohestr.",
    "Mittelstr.",
    "Mohlenstr.",
    "Moltkestr.",
    "Monheimer Str.",
    "Montanusstr.",
    "Montessoriweg",
    "Moosweg",
    "Morsbroicher Str.",
    "Moselstr.",
    "Moskauer Str.",
    "Mozartstr.",
    "Mühlenweg",
    "Muhrgasse",
    "Muldestr.",
    "Mülhausener Str.",
    "Mülheimer Str.",
    "Münsters Gäßchen",
    "Münzstr.",
    "Müritzstr.",
    "Myliusstr.",
    "Nachtigallenweg",
    "Nauener Str.",
    "Neißestr.",
    "Nelly-Sachs-Str.",
    "Netzestr.",
    "Neuendriesch",
    "Neuenhausgasse",
    "Neuenkamp",
    "Neujudenhof",
    "Neukronenberger Str.",
    "Neustadtstr.",
    "Nicolai-Hartmann-Str.",
    "Niederblecher",
    "Niederfeldstr.",
    "Nietzschestr.",
    "Nikolaus-Groß-Str.",
    "Nobelstr.",
    "Norderneystr.",
    "Nordstr.",
    "Ober dem Hof",
    "Obere Lindenstr.",
    "Obere Str.",
    "Oberölbach",
    "Odenthaler Str.",
    "Oderstr.",
    "Okerstr.",
    "Olof-Palme-Str.",
    "Ophovener Str.",
    "Opladener Platz",
    "Opladener Str.",
    "Ortelsburger Str.",
    "Oskar-Moll-Str.",
    "Oskar-Schlemmer-Str.",
    "Oststr.",
    "Oswald-Spengler-Str.",
    "Otto-Dix-Str.",
    "Otto-Grimm-Str.",
    "Otto-Hahn-Str.",
    "Otto-Müller-Str.",
    "Otto-Stange-Str.",
    "Ottostr.",
    "Otto-Varnhagen-Str.",
    "Otto-Wels-Str.",
    "Ottweilerstr.",
    "Oulustr.",
    "Overfeldweg",
    "Pappelweg",
    "Paracelsusstr.",
    "Parkstr.",
    "Pastor-Louis-Str.",
    "Pastor-Scheibler-Str.",
    "Pastorskamp",
    "Paul-Klee-Str.",
    "Paul-Löbe-Str.",
    "Paulstr.",
    "Peenestr.",
    "Pescher Busch",
    "Peschstr.",
    "Pestalozzistr.",
    "Peter-Grieß-Str.",
    "Peter-Joseph-Lenné-Str.",
    "Peter-Neuenheuser-Str.",
    "Petersbergstr.",
    "Peterstr.",
    "Pfarrer-Jekel-Str.",
    "Pfarrer-Klein-Str.",
    "Pfarrer-Röhr-Str.",
    "Pfeilshofstr.",
    "Philipp-Ott-Str.",
    "Piet-Mondrian-Str.",
    "Platanenweg",
    "Pommernstr.",
    "Porschestr.",
    "Poststr.",
    "Potsdamer Str.",
    "Pregelstr.",
    "Prießnitzstr.",
    "Pützdelle",
    "Quarzstr.",
    "Quettinger Str.",
    "Rat-Deycks-Str.",
    "Rathenaustr.",
    "Ratherkämp",
    "Ratiborer Str.",
    "Raushofstr.",
    "Regensburger Str.",
    "Reinickendorfer Str.",
    "Renkgasse",
    "Rennbaumplatz",
    "Rennbaumstr.",
    "Reuschenberger Str.",
    "Reusrather Str.",
    "Reuterstr.",
    "Rheinallee",
    "Rheindorfer Str.",
    "Rheinstr.",
    "Rhein-Wupper-Platz",
    "Richard-Wagner-Str.",
    "Rilkestr.",
    "Ringstr.",
    "Robert-Blum-Str.",
    "Robert-Koch-Str.",
    "Robert-Medenwald-Str.",
    "Rolandstr.",
    "Romberg",
    "Röntgenstr.",
    "Roonstr.",
    "Ropenstall",
    "Ropenstaller Weg",
    "Rosenthal",
    "Rostocker Str.",
    "Rotdornweg",
    "Röttgerweg",
    "Rückertstr.",
    "Rudolf-Breitscheid-Str.",
    "Rudolf-Mann-Platz",
    "Rudolf-Stracke-Str.",
    "Ruhlachplatz",
    "Ruhlachstr.",
    "Rüttersweg",
    "Saalestr.",
    "Saarbrücker Str.",
    "Saarlauterner Str.",
    "Saarstr.",
    "Salamanderweg",
    "Samlandstr.",
    "Sanddornstr.",
    "Sandstr.",
    "Sauerbruchstr.",
    "Schäfershütte",
    "Scharnhorststr.",
    "Scheffershof",
    "Scheidemannstr.",
    "Schellingstr.",
    "Schenkendorfstr.",
    "Schießbergstr.",
    "Schillerstr.",
    "Schlangenhecke",
    "Schlebuscher Heide",
    "Schlebuscher Str.",
    "Schlebuschrath",
    "Schlehdornstr.",
    "Schleiermacherstr.",
    "Schloßstr.",
    "Schmalenbruch",
    "Schnepfenflucht",
    "Schöffenweg",
    "Schöllerstr.",
    "Schöne Aussicht",
    "Schöneberger Str.",
    "Schopenhauerstr.",
    "Schubertplatz",
    "Schubertstr.",
    "Schulberg",
    "Schulstr.",
    "Schumannstr.",
    "Schwalbenweg",
    "Schwarzastr.",
    "Sebastianusweg",
    "Semmelweisstr.",
    "Siebelplatz",
    "Siemensstr.",
    "Solinger Str.",
    "Sonderburger Str.",
    "Spandauer Str.",
    "Speestr.",
    "Sperberweg",
    "Sperlingsweg",
    "Spitzwegstr.",
    "Sporrenberger Mühle",
    "Spreestr.",
    "St. Ingberter Str.",
    "Starenweg",
    "Stauffenbergstr.",
    "Stefan-Zweig-Str.",
    "Stegerwaldstr.",
    "Steglitzer Str.",
    "Steinbücheler Feld",
    "Steinbücheler Str.",
    "Steinstr.",
    "Steinweg",
    "Stephan-Lochner-Str.",
    "Stephanusstr.",
    "Stettiner Str.",
    "Stixchesstr.",
    "Stöckenstr.",
    "Stralsunder Str.",
    "Straßburger Str.",
    "Stresemannplatz",
    "Strombergstr.",
    "Stromstr.",
    "Stüttekofener Str.",
    "Sudestr.",
    "Sürderstr.",
    "Syltstr.",
    "Talstr.",
    "Tannenbergstr.",
    "Tannenweg",
    "Taubenweg",
    "Teitscheider Weg",
    "Telegrafenstr.",
    "Teltower Str.",
    "Tempelhofer Str.",
    "Theodor-Adorno-Str.",
    "Theodor-Fliedner-Str.",
    "Theodor-Gierath-Str.",
    "Theodor-Haubach-Str.",
    "Theodor-Heuss-Ring",
    "Theodor-Storm-Str.",
    "Theodorstr.",
    "Thomas-Dehler-Str.",
    "Thomas-Morus-Str.",
    "Thomas-von-Aquin-Str.",
    "Tönges Feld",
    "Torstr.",
    "Treptower Str.",
    "Treuburger Str.",
    "Uhlandstr.",
    "Ulmenweg",
    "Ulmer Str.",
    "Ulrichstr.",
    "Ulrich-von-Hassell-Str.",
    "Umlag",
    "Unstrutstr.",
    "Unter dem Schildchen",
    "Unterölbach",
    "Unterstr.",
    "Uppersberg",
    "Van\\'t-Hoff-Str.",
    "Veit-Stoß-Str.",
    "Vereinsstr.",
    "Viktor-Meyer-Str.",
    "Vincent-van-Gogh-Str.",
    "Virchowstr.",
    "Voigtslach",
    "Volhardstr.",
    "Völklinger Str.",
    "Von-Brentano-Str.",
    "Von-Diergardt-Str.",
    "Von-Eichendorff-Str.",
    "Von-Ketteler-Str.",
    "Von-Knoeringen-Str.",
    "Von-Pettenkofer-Str.",
    "Von-Siebold-Str.",
    "Wacholderweg",
    "Waldstr.",
    "Walter-Flex-Str.",
    "Walter-Hempel-Str.",
    "Walter-Hochapfel-Str.",
    "Walter-Nernst-Str.",
    "Wannseestr.",
    "Warnowstr.",
    "Warthestr.",
    "Weddigenstr.",
    "Weichselstr.",
    "Weidenstr.",
    "Weidfeldstr.",
    "Weiherfeld",
    "Weiherstr.",
    "Weinhäuser Str.",
    "Weißdornweg",
    "Weißenseestr.",
    "Weizkamp",
    "Werftstr.",
    "Werkstättenstr.",
    "Werner-Heisenberg-Str.",
    "Werrastr.",
    "Weyerweg",
    "Widdauener Str.",
    "Wiebertshof",
    "Wiehbachtal",
    "Wiembachallee",
    "Wiesdorfer Platz",
    "Wiesenstr.",
    "Wilhelm-Busch-Str.",
    "Wilhelm-Hastrich-Str.",
    "Wilhelm-Leuschner-Str.",
    "Wilhelm-Liebknecht-Str.",
    "Wilhelmsgasse",
    "Wilhelmstr.",
    "Willi-Baumeister-Str.",
    "Willy-Brandt-Ring",
    "Winand-Rossi-Str.",
    "Windthorststr.",
    "Winkelweg",
    "Winterberg",
    "Wittenbergstr.",
    "Wolf-Vostell-Str.",
    "Wolkenburgstr.",
    "Wupperstr.",
    "Wuppertalstr.",
    "Wüstenhof",
    "Yitzhak-Rabin-Str.",
    "Zauberkuhle",
    "Zedernweg",
    "Zehlendorfer Str.",
    "Zehntenweg",
    "Zeisigweg",
    "Zeppelinstr.",
    "Zschopaustr.",
    "Zum Claashäuschen",
    "Zündhütchenweg",
    "Zur Alten Brauerei",
    "Zur alten Fabrik"
  ],
  "building_number": [
    "###",
    "##",
    "#",
    "##a",
    "##b",
    "##c"
  ],
  "secondary_address": [
    "Apt. ###",
    "Zimmer ###",
    "# OG"
  ],
  "postcode": [
    "#####",
    "#####"
  ],
  "state": [
    "Baden-Württemberg",
    "Bayern",
    "Berlin",
    "Brandenburg",
    "Bremen",
    "Hamburg",
    "Hessen",
    "Mecklenburg-Vorpommern",
    "Niedersachsen",
    "Nordrhein-Westfalen",
    "Rheinland-Pfalz",
    "Saarland",
    "Sachsen",
    "Sachsen-Anhalt",
    "Schleswig-Holstein",
    "Thüringen"
  ],
  "state_abbr": [
    "BW",
    "BY",
    "BE",
    "BB",
    "HB",
    "HH",
    "HE",
    "MV",
    "NI",
    "NW",
    "RP",
    "SL",
    "SN",
    "ST",
    "SH",
    "TH"
  ],
  "city": [
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ],
  "street_name": [
    "#{street_root}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Deutschland"
  ]
};
de.company = {
  "suffix": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "legal_form": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ]
};
de.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "info",
    "name",
    "net",
    "org",
    "de",
    "ch"
  ]
};
de.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ]
};
de.name = {
  "first_name": [
    "Aaron",
    "Abdul",
    "Abdullah",
    "Adam",
    "Adrian",
    "Adriano",
    "Ahmad",
    "Ahmed",
    "Ahmet",
    "Alan",
    "Albert",
    "Alessandro",
    "Alessio",
    "Alex",
    "Alexander",
    "Alfred",
    "Ali",
    "Amar",
    "Amir",
    "Amon",
    "Andre",
    "Andreas",
    "Andrew",
    "Angelo",
    "Ansgar",
    "Anthony",
    "Anton",
    "Antonio",
    "Arda",
    "Arian",
    "Armin",
    "Arne",
    "Arno",
    "Arthur",
    "Artur",
    "Arved",
    "Arvid",
    "Ayman",
    "Baran",
    "Baris",
    "Bastian",
    "Batuhan",
    "Bela",
    "Ben",
    "Benedikt",
    "Benjamin",
    "Bennet",
    "Bennett",
    "Benno",
    "Bent",
    "Berat",
    "Berkay",
    "Bernd",
    "Bilal",
    "Bjarne",
    "Björn",
    "Bo",
    "Boris",
    "Brandon",
    "Brian",
    "Bruno",
    "Bryan",
    "Burak",
    "Calvin",
    "Can",
    "Carl",
    "Carlo",
    "Carlos",
    "Caspar",
    "Cedric",
    "Cedrik",
    "Cem",
    "Charlie",
    "Chris",
    "Christian",
    "Christiano",
    "Christoph",
    "Christopher",
    "Claas",
    "Clemens",
    "Colin",
    "Collin",
    "Conner",
    "Connor",
    "Constantin",
    "Corvin",
    "Curt",
    "Damian",
    "Damien",
    "Daniel",
    "Danilo",
    "Danny",
    "Darian",
    "Dario",
    "Darius",
    "Darren",
    "David",
    "Davide",
    "Davin",
    "Dean",
    "Deniz",
    "Dennis",
    "Denny",
    "Devin",
    "Diego",
    "Dion",
    "Domenic",
    "Domenik",
    "Dominic",
    "Dominik",
    "Dorian",
    "Dustin",
    "Dylan",
    "Ecrin",
    "Eddi",
    "Eddy",
    "Edgar",
    "Edwin",
    "Efe",
    "Ege",
    "Elia",
    "Eliah",
    "Elias",
    "Elijah",
    "Emanuel",
    "Emil",
    "Emilian",
    "Emilio",
    "Emir",
    "Emirhan",
    "Emre",
    "Enes",
    "Enno",
    "Enrico",
    "Eren",
    "Eric",
    "Erik",
    "Etienne",
    "Fabian",
    "Fabien",
    "Fabio",
    "Fabrice",
    "Falk",
    "Felix",
    "Ferdinand",
    "Fiete",
    "Filip",
    "Finlay",
    "Finley",
    "Finn",
    "Finnley",
    "Florian",
    "Francesco",
    "Franz",
    "Frederic",
    "Frederick",
    "Frederik",
    "Friedrich",
    "Fritz",
    "Furkan",
    "Fynn",
    "Gabriel",
    "Georg",
    "Gerrit",
    "Gian",
    "Gianluca",
    "Gino",
    "Giuliano",
    "Giuseppe",
    "Gregor",
    "Gustav",
    "Hagen",
    "Hamza",
    "Hannes",
    "Hanno",
    "Hans",
    "Hasan",
    "Hassan",
    "Hauke",
    "Hendrik",
    "Hennes",
    "Henning",
    "Henri",
    "Henrick",
    "Henrik",
    "Henry",
    "Hugo",
    "Hussein",
    "Ian",
    "Ibrahim",
    "Ilias",
    "Ilja",
    "Ilyas",
    "Immanuel",
    "Ismael",
    "Ismail",
    "Ivan",
    "Iven",
    "Jack",
    "Jacob",
    "Jaden",
    "Jakob",
    "Jamal",
    "James",
    "Jamie",
    "Jan",
    "Janek",
    "Janis",
    "Janne",
    "Jannek",
    "Jannes",
    "Jannik",
    "Jannis",
    "Jano",
    "Janosch",
    "Jared",
    "Jari",
    "Jarne",
    "Jarno",
    "Jaron",
    "Jason",
    "Jasper",
    "Jay",
    "Jayden",
    "Jayson",
    "Jean",
    "Jens",
    "Jeremias",
    "Jeremie",
    "Jeremy",
    "Jermaine",
    "Jerome",
    "Jesper",
    "Jesse",
    "Jim",
    "Jimmy",
    "Joe",
    "Joel",
    "Joey",
    "Johann",
    "Johannes",
    "John",
    "Johnny",
    "Jon",
    "Jona",
    "Jonah",
    "Jonas",
    "Jonathan",
    "Jonte",
    "Joost",
    "Jordan",
    "Joris",
    "Joscha",
    "Joschua",
    "Josef",
    "Joseph",
    "Josh",
    "Joshua",
    "Josua",
    "Juan",
    "Julian",
    "Julien",
    "Julius",
    "Juri",
    "Justin",
    "Justus",
    "Kaan",
    "Kai",
    "Kalle",
    "Karim",
    "Karl",
    "Karlo",
    "Kay",
    "Keanu",
    "Kenan",
    "Kenny",
    "Keno",
    "Kerem",
    "Kerim",
    "Kevin",
    "Kian",
    "Kilian",
    "Kim",
    "Kimi",
    "Kjell",
    "Klaas",
    "Klemens",
    "Konrad",
    "Konstantin",
    "Koray",
    "Korbinian",
    "Kurt",
    "Lars",
    "Lasse",
    "Laurence",
    "Laurens",
    "Laurenz",
    "Laurin",
    "Lean",
    "Leander",
    "Leandro",
    "Leif",
    "Len",
    "Lenn",
    "Lennard",
    "Lennart",
    "Lennert",
    "Lennie",
    "Lennox",
    "Lenny",
    "Leo",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leonhard",
    "Leonidas",
    "Leopold",
    "Leroy",
    "Levent",
    "Levi",
    "Levin",
    "Lewin",
    "Lewis",
    "Liam",
    "Lian",
    "Lias",
    "Lino",
    "Linus",
    "Lio",
    "Lion",
    "Lionel",
    "Logan",
    "Lorenz",
    "Lorenzo",
    "Loris",
    "Louis",
    "Luan",
    "Luc",
    "Luca",
    "Lucas",
    "Lucian",
    "Lucien",
    "Ludwig",
    "Luis",
    "Luiz",
    "Luk",
    "Luka",
    "Lukas",
    "Luke",
    "Lutz",
    "Maddox",
    "Mads",
    "Magnus",
    "Maik",
    "Maksim",
    "Malik",
    "Malte",
    "Manuel",
    "Marc",
    "Marcel",
    "Marco",
    "Marcus",
    "Marek",
    "Marian",
    "Mario",
    "Marius",
    "Mark",
    "Marko",
    "Markus",
    "Marlo",
    "Marlon",
    "Marten",
    "Martin",
    "Marvin",
    "Marwin",
    "Mateo",
    "Mathis",
    "Matis",
    "Mats",
    "Matteo",
    "Mattes",
    "Matthias",
    "Matthis",
    "Matti",
    "Mattis",
    "Maurice",
    "Max",
    "Maxim",
    "Maximilian",
    "Mehmet",
    "Meik",
    "Melvin",
    "Merlin",
    "Mert",
    "Michael",
    "Michel",
    "Mick",
    "Miguel",
    "Mika",
    "Mikail",
    "Mike",
    "Milan",
    "Milo",
    "Mio",
    "Mirac",
    "Mirco",
    "Mirko",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moritz",
    "Morten",
    "Muhammed",
    "Murat",
    "Mustafa",
    "Nathan",
    "Nathanael",
    "Nelson",
    "Neo",
    "Nevio",
    "Nick",
    "Niclas",
    "Nico",
    "Nicolai",
    "Nicolas",
    "Niels",
    "Nikita",
    "Niklas",
    "Niko",
    "Nikolai",
    "Nikolas",
    "Nils",
    "Nino",
    "Noah",
    "Noel",
    "Norman",
    "Odin",
    "Oke",
    "Ole",
    "Oliver",
    "Omar",
    "Onur",
    "Oscar",
    "Oskar",
    "Pascal",
    "Patrice",
    "Patrick",
    "Paul",
    "Peer",
    "Pepe",
    "Peter",
    "Phil",
    "Philip",
    "Philipp",
    "Pierre",
    "Piet",
    "Pit",
    "Pius",
    "Quentin",
    "Quirin",
    "Rafael",
    "Raik",
    "Ramon",
    "Raphael",
    "Rasmus",
    "Raul",
    "Rayan",
    "René",
    "Ricardo",
    "Riccardo",
    "Richard",
    "Rick",
    "Rico",
    "Robert",
    "Robin",
    "Rocco",
    "Roman",
    "Romeo",
    "Ron",
    "Ruben",
    "Ryan",
    "Said",
    "Salih",
    "Sam",
    "Sami",
    "Sammy",
    "Samuel",
    "Sandro",
    "Santino",
    "Sascha",
    "Sean",
    "Sebastian",
    "Selim",
    "Semih",
    "Shawn",
    "Silas",
    "Simeon",
    "Simon",
    "Sinan",
    "Sky",
    "Stefan",
    "Steffen",
    "Stephan",
    "Steve",
    "Steven",
    "Sven",
    "Sönke",
    "Sören",
    "Taha",
    "Tamino",
    "Tammo",
    "Tarik",
    "Tayler",
    "Taylor",
    "Teo",
    "Theo",
    "Theodor",
    "Thies",
    "Thilo",
    "Thomas",
    "Thorben",
    "Thore",
    "Thorge",
    "Tiago",
    "Til",
    "Till",
    "Tillmann",
    "Tim",
    "Timm",
    "Timo",
    "Timon",
    "Timothy",
    "Tino",
    "Titus",
    "Tizian",
    "Tjark",
    "Tobias",
    "Tom",
    "Tommy",
    "Toni",
    "Tony",
    "Torben",
    "Tore",
    "Tristan",
    "Tyler",
    "Tyron",
    "Umut",
    "Valentin",
    "Valentino",
    "Veit",
    "Victor",
    "Viktor",
    "Vin",
    "Vincent",
    "Vito",
    "Vitus",
    "Wilhelm",
    "Willi",
    "William",
    "Willy",
    "Xaver",
    "Yannic",
    "Yannick",
    "Yannik",
    "Yannis",
    "Yasin",
    "Youssef",
    "Yunus",
    "Yusuf",
    "Yven",
    "Yves",
    "Ömer",
    "Aaliyah",
    "Abby",
    "Abigail",
    "Ada",
    "Adelina",
    "Adriana",
    "Aileen",
    "Aimee",
    "Alana",
    "Alea",
    "Alena",
    "Alessa",
    "Alessia",
    "Alexa",
    "Alexandra",
    "Alexia",
    "Alexis",
    "Aleyna",
    "Alia",
    "Alica",
    "Alice",
    "Alicia",
    "Alina",
    "Alisa",
    "Alisha",
    "Alissa",
    "Aliya",
    "Aliyah",
    "Allegra",
    "Alma",
    "Alyssa",
    "Amalia",
    "Amanda",
    "Amelia",
    "Amelie",
    "Amina",
    "Amira",
    "Amy",
    "Ana",
    "Anabel",
    "Anastasia",
    "Andrea",
    "Angela",
    "Angelina",
    "Angelique",
    "Anja",
    "Ann",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalena",
    "Anne",
    "Anneke",
    "Annelie",
    "Annemarie",
    "Anni",
    "Annie",
    "Annika",
    "Anny",
    "Anouk",
    "Antonia",
    "Arda",
    "Ariana",
    "Ariane",
    "Arwen",
    "Ashley",
    "Asya",
    "Aurelia",
    "Aurora",
    "Ava",
    "Ayleen",
    "Aylin",
    "Ayse",
    "Azra",
    "Betty",
    "Bianca",
    "Bianka",
    "Caitlin",
    "Cara",
    "Carina",
    "Carla",
    "Carlotta",
    "Carmen",
    "Carolin",
    "Carolina",
    "Caroline",
    "Cassandra",
    "Catharina",
    "Catrin",
    "Cecile",
    "Cecilia",
    "Celia",
    "Celina",
    "Celine",
    "Ceyda",
    "Ceylin",
    "Chantal",
    "Charleen",
    "Charlotta",
    "Charlotte",
    "Chayenne",
    "Cheyenne",
    "Chiara",
    "Christin",
    "Christina",
    "Cindy",
    "Claire",
    "Clara",
    "Clarissa",
    "Colleen",
    "Collien",
    "Cora",
    "Corinna",
    "Cosima",
    "Dana",
    "Daniela",
    "Daria",
    "Darleen",
    "Defne",
    "Delia",
    "Denise",
    "Diana",
    "Dilara",
    "Dina",
    "Dorothea",
    "Ecrin",
    "Eda",
    "Eileen",
    "Ela",
    "Elaine",
    "Elanur",
    "Elea",
    "Elena",
    "Eleni",
    "Eleonora",
    "Eliana",
    "Elif",
    "Elina",
    "Elisa",
    "Elisabeth",
    "Ella",
    "Ellen",
    "Elli",
    "Elly",
    "Elsa",
    "Emelie",
    "Emely",
    "Emilia",
    "Emilie",
    "Emily",
    "Emma",
    "Emmely",
    "Emmi",
    "Emmy",
    "Enie",
    "Enna",
    "Enya",
    "Esma",
    "Estelle",
    "Esther",
    "Eva",
    "Evelin",
    "Evelina",
    "Eveline",
    "Evelyn",
    "Fabienne",
    "Fatima",
    "Fatma",
    "Felicia",
    "Felicitas",
    "Felina",
    "Femke",
    "Fenja",
    "Fine",
    "Finia",
    "Finja",
    "Finnja",
    "Fiona",
    "Flora",
    "Florentine",
    "Francesca",
    "Franka",
    "Franziska",
    "Frederike",
    "Freya",
    "Frida",
    "Frieda",
    "Friederike",
    "Giada",
    "Gina",
    "Giulia",
    "Giuliana",
    "Greta",
    "Hailey",
    "Hana",
    "Hanna",
    "Hannah",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helin",
    "Henriette",
    "Henrike",
    "Hermine",
    "Ida",
    "Ilayda",
    "Imke",
    "Ina",
    "Ines",
    "Inga",
    "Inka",
    "Irem",
    "Isa",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Ivonne",
    "Jacqueline",
    "Jamie",
    "Jamila",
    "Jana",
    "Jane",
    "Janin",
    "Janina",
    "Janine",
    "Janna",
    "Janne",
    "Jara",
    "Jasmin",
    "Jasmina",
    "Jasmine",
    "Jella",
    "Jenna",
    "Jennifer",
    "Jenny",
    "Jessica",
    "Jessy",
    "Jette",
    "Jil",
    "Jill",
    "Joana",
    "Joanna",
    "Joelina",
    "Joeline",
    "Joelle",
    "Johanna",
    "Joleen",
    "Jolie",
    "Jolien",
    "Jolin",
    "Jolina",
    "Joline",
    "Jona",
    "Jonah",
    "Jonna",
    "Josefin",
    "Josefine",
    "Josephin",
    "Josephine",
    "Josie",
    "Josy",
    "Joy",
    "Joyce",
    "Judith",
    "Judy",
    "Jule",
    "Julia",
    "Juliana",
    "Juliane",
    "Julie",
    "Julienne",
    "Julika",
    "Julina",
    "Juna",
    "Justine",
    "Kaja",
    "Karina",
    "Karla",
    "Karlotta",
    "Karolina",
    "Karoline",
    "Kassandra",
    "Katarina",
    "Katharina",
    "Kathrin",
    "Katja",
    "Katrin",
    "Kaya",
    "Kayra",
    "Kiana",
    "Kiara",
    "Kim",
    "Kimberley",
    "Kimberly",
    "Kira",
    "Klara",
    "Korinna",
    "Kristin",
    "Kyra",
    "Laila",
    "Lana",
    "Lara",
    "Larissa",
    "Laura",
    "Laureen",
    "Lavinia",
    "Lea",
    "Leah",
    "Leana",
    "Leandra",
    "Leann",
    "Lee",
    "Leila",
    "Lena",
    "Lene",
    "Leni",
    "Lenia",
    "Lenja",
    "Lenya",
    "Leona",
    "Leoni",
    "Leonie",
    "Leonora",
    "Leticia",
    "Letizia",
    "Levke",
    "Leyla",
    "Lia",
    "Liah",
    "Liana",
    "Lili",
    "Lilia",
    "Lilian",
    "Liliana",
    "Lilith",
    "Lilli",
    "Lillian",
    "Lilly",
    "Lily",
    "Lina",
    "Linda",
    "Lindsay",
    "Line",
    "Linn",
    "Linnea",
    "Lisa",
    "Lisann",
    "Lisanne",
    "Liv",
    "Livia",
    "Liz",
    "Lola",
    "Loreen",
    "Lorena",
    "Lotta",
    "Lotte",
    "Louisa",
    "Louise",
    "Luana",
    "Luca",
    "Lucia",
    "Lucie",
    "Lucienne",
    "Lucy",
    "Luisa",
    "Luise",
    "Luka",
    "Luna",
    "Luzie",
    "Lya",
    "Lydia",
    "Lyn",
    "Lynn",
    "Madeleine",
    "Madita",
    "Madleen",
    "Madlen",
    "Magdalena",
    "Maike",
    "Mailin",
    "Maira",
    "Maja",
    "Malena",
    "Malia",
    "Malin",
    "Malina",
    "Mandy",
    "Mara",
    "Marah",
    "Mareike",
    "Maren",
    "Maria",
    "Mariam",
    "Marie",
    "Marieke",
    "Mariella",
    "Marika",
    "Marina",
    "Marisa",
    "Marissa",
    "Marit",
    "Marla",
    "Marleen",
    "Marlen",
    "Marlena",
    "Marlene",
    "Marta",
    "Martha",
    "Mary",
    "Maryam",
    "Mathilda",
    "Mathilde",
    "Matilda",
    "Maxi",
    "Maxima",
    "Maxine",
    "Maya",
    "Mayra",
    "Medina",
    "Medine",
    "Meike",
    "Melanie",
    "Melek",
    "Melike",
    "Melina",
    "Melinda",
    "Melis",
    "Melisa",
    "Melissa",
    "Merle",
    "Merve",
    "Meryem",
    "Mette",
    "Mia",
    "Michaela",
    "Michelle",
    "Mieke",
    "Mila",
    "Milana",
    "Milena",
    "Milla",
    "Mina",
    "Mira",
    "Miray",
    "Miriam",
    "Mirja",
    "Mona",
    "Monique",
    "Nadine",
    "Nadja",
    "Naemi",
    "Nancy",
    "Naomi",
    "Natalia",
    "Natalie",
    "Nathalie",
    "Neele",
    "Nela",
    "Nele",
    "Nelli",
    "Nelly",
    "Nia",
    "Nicole",
    "Nika",
    "Nike",
    "Nikita",
    "Nila",
    "Nina",
    "Nisa",
    "Noemi",
    "Nora",
    "Olivia",
    "Patricia",
    "Patrizia",
    "Paula",
    "Paulina",
    "Pauline",
    "Penelope",
    "Philine",
    "Phoebe",
    "Pia",
    "Rahel",
    "Rania",
    "Rebecca",
    "Rebekka",
    "Riana",
    "Rieke",
    "Rike",
    "Romina",
    "Romy",
    "Ronja",
    "Rosa",
    "Rosalie",
    "Ruby",
    "Sabrina",
    "Sahra",
    "Sally",
    "Salome",
    "Samantha",
    "Samia",
    "Samira",
    "Sandra",
    "Sandy",
    "Sanja",
    "Saphira",
    "Sara",
    "Sarah",
    "Saskia",
    "Selin",
    "Selina",
    "Selma",
    "Sena",
    "Sidney",
    "Sienna",
    "Silja",
    "Sina",
    "Sinja",
    "Smilla",
    "Sofia",
    "Sofie",
    "Sonja",
    "Sophia",
    "Sophie",
    "Soraya",
    "Stefanie",
    "Stella",
    "Stephanie",
    "Stina",
    "Sude",
    "Summer",
    "Susanne",
    "Svea",
    "Svenja",
    "Sydney",
    "Tabea",
    "Talea",
    "Talia",
    "Tamara",
    "Tamia",
    "Tamina",
    "Tanja",
    "Tara",
    "Tarja",
    "Teresa",
    "Tessa",
    "Thalea",
    "Thalia",
    "Thea",
    "Theresa",
    "Tia",
    "Tina",
    "Tomke",
    "Tuana",
    "Valentina",
    "Valeria",
    "Valerie",
    "Vanessa",
    "Vera",
    "Veronika",
    "Victoria",
    "Viktoria",
    "Viola",
    "Vivian",
    "Vivien",
    "Vivienne",
    "Wibke",
    "Wiebke",
    "Xenia",
    "Yara",
    "Yaren",
    "Yasmin",
    "Ylvi",
    "Ylvie",
    "Yvonne",
    "Zara",
    "Zehra",
    "Zeynep",
    "Zoe",
    "Zoey",
    "Zoé"
  ],
  "last_name": [
    "Abel",
    "Abicht",
    "Abraham",
    "Abramovic",
    "Abt",
    "Achilles",
    "Achkinadze",
    "Ackermann",
    "Adam",
    "Adams",
    "Ade",
    "Agostini",
    "Ahlke",
    "Ahrenberg",
    "Ahrens",
    "Aigner",
    "Albert",
    "Albrecht",
    "Alexa",
    "Alexander",
    "Alizadeh",
    "Allgeyer",
    "Amann",
    "Amberg",
    "Anding",
    "Anggreny",
    "Apitz",
    "Arendt",
    "Arens",
    "Arndt",
    "Aryee",
    "Aschenbroich",
    "Assmus",
    "Astafei",
    "Auer",
    "Axmann",
    "Baarck",
    "Bachmann",
    "Badane",
    "Bader",
    "Baganz",
    "Bahl",
    "Bak",
    "Balcer",
    "Balck",
    "Balkow",
    "Balnuweit",
    "Balzer",
    "Banse",
    "Barr",
    "Bartels",
    "Barth",
    "Barylla",
    "Baseda",
    "Battke",
    "Bauer",
    "Bauermeister",
    "Baumann",
    "Baumeister",
    "Bauschinger",
    "Bauschke",
    "Bayer",
    "Beavogui",
    "Beck",
    "Beckel",
    "Becker",
    "Beckmann",
    "Bedewitz",
    "Beele",
    "Beer",
    "Beggerow",
    "Beh",
    "Behr",
    "Behrenbruch",
    "Belz",
    "Bender",
    "Benecke",
    "Benner",
    "Benninger",
    "Benzing",
    "Berends",
    "Berger",
    "Berner",
    "Berning",
    "Bertenbreiter",
    "Best",
    "Bethke",
    "Betz",
    "Beushausen",
    "Beutelspacher",
    "Beyer",
    "Biba",
    "Bichler",
    "Bickel",
    "Biedermann",
    "Bieler",
    "Bielert",
    "Bienasch",
    "Bienias",
    "Biesenbach",
    "Bigdeli",
    "Birkemeyer",
    "Bittner",
    "Blank",
    "Blaschek",
    "Blassneck",
    "Bloch",
    "Blochwitz",
    "Blockhaus",
    "Blum",
    "Blume",
    "Bock",
    "Bode",
    "Bogdashin",
    "Bogenrieder",
    "Bohge",
    "Bolm",
    "Borgschulze",
    "Bork",
    "Bormann",
    "Bornscheuer",
    "Borrmann",
    "Borsch",
    "Boruschewski",
    "Bos",
    "Bosler",
    "Bourrouag",
    "Bouschen",
    "Boxhammer",
    "Boyde",
    "Bozsik",
    "Brand",
    "Brandenburg",
    "Brandis",
    "Brandt",
    "Brauer",
    "Braun",
    "Brehmer",
    "Breitenstein",
    "Bremer",
    "Bremser",
    "Brenner",
    "Brettschneider",
    "Breu",
    "Breuer",
    "Briesenick",
    "Bringmann",
    "Brinkmann",
    "Brix",
    "Broening",
    "Brosch",
    "Bruckmann",
    "Bruder",
    "Bruhns",
    "Brunner",
    "Bruns",
    "Bräutigam",
    "Brömme",
    "Brüggmann",
    "Buchholz",
    "Buchrucker",
    "Buder",
    "Bultmann",
    "Bunjes",
    "Burger",
    "Burghagen",
    "Burkhard",
    "Burkhardt",
    "Burmeister",
    "Busch",
    "Buschbaum",
    "Busemann",
    "Buss",
    "Busse",
    "Bussmann",
    "Byrd",
    "Bäcker",
    "Böhm",
    "Bönisch",
    "Börgeling",
    "Börner",
    "Böttner",
    "Büchele",
    "Bühler",
    "Büker",
    "Büngener",
    "Bürger",
    "Bürklein",
    "Büscher",
    "Büttner",
    "Camara",
    "Carlowitz",
    "Carlsohn",
    "Caspari",
    "Caspers",
    "Chapron",
    "Christ",
    "Cierpinski",
    "Clarius",
    "Cleem",
    "Cleve",
    "Co",
    "Conrad",
    "Cordes",
    "Cornelsen",
    "Cors",
    "Cotthardt",
    "Crews",
    "Cronjäger",
    "Crosskofp",
    "Da",
    "Dahm",
    "Dahmen",
    "Daimer",
    "Damaske",
    "Danneberg",
    "Danner",
    "Daub",
    "Daubner",
    "Daudrich",
    "Dauer",
    "Daum",
    "Dauth",
    "Dautzenberg",
    "De",
    "Decker",
    "Deckert",
    "Deerberg",
    "Dehmel",
    "Deja",
    "Delonge",
    "Demut",
    "Dengler",
    "Denner",
    "Denzinger",
    "Derr",
    "Dertmann",
    "Dethloff",
    "Deuschle",
    "Dieckmann",
    "Diedrich",
    "Diekmann",
    "Dienel",
    "Dies",
    "Dietrich",
    "Dietz",
    "Dietzsch",
    "Diezel",
    "Dilla",
    "Dingelstedt",
    "Dippl",
    "Dittmann",
    "Dittmar",
    "Dittmer",
    "Dix",
    "Dobbrunz",
    "Dobler",
    "Dohring",
    "Dolch",
    "Dold",
    "Dombrowski",
    "Donie",
    "Doskoczynski",
    "Dragu",
    "Drechsler",
    "Drees",
    "Dreher",
    "Dreier",
    "Dreissigacker",
    "Dressler",
    "Drews",
    "Duma",
    "Dutkiewicz",
    "Dyett",
    "Dylus",
    "Dächert",
    "Döbel",
    "Döring",
    "Dörner",
    "Dörre",
    "Dück",
    "Eberhard",
    "Eberhardt",
    "Ecker",
    "Eckhardt",
    "Edorh",
    "Effler",
    "Eggenmueller",
    "Ehm",
    "Ehmann",
    "Ehrig",
    "Eich",
    "Eichmann",
    "Eifert",
    "Einert",
    "Eisenlauer",
    "Ekpo",
    "Elbe",
    "Eleyth",
    "Elss",
    "Emert",
    "Emmelmann",
    "Ender",
    "Engel",
    "Engelen",
    "Engelmann",
    "Eplinius",
    "Erdmann",
    "Erhardt",
    "Erlei",
    "Erm",
    "Ernst",
    "Ertl",
    "Erwes",
    "Esenwein",
    "Esser",
    "Evers",
    "Everts",
    "Ewald",
    "Fahner",
    "Faller",
    "Falter",
    "Farber",
    "Fassbender",
    "Faulhaber",
    "Fehrig",
    "Feld",
    "Felke",
    "Feller",
    "Fenner",
    "Fenske",
    "Feuerbach",
    "Fietz",
    "Figl",
    "Figura",
    "Filipowski",
    "Filsinger",
    "Fincke",
    "Fink",
    "Finke",
    "Fischer",
    "Fitschen",
    "Fleischer",
    "Fleischmann",
    "Floder",
    "Florczak",
    "Flore",
    "Flottmann",
    "Forkel",
    "Forst",
    "Frahmeke",
    "Frank",
    "Franke",
    "Franta",
    "Frantz",
    "Franz",
    "Franzis",
    "Franzmann",
    "Frauen",
    "Frauendorf",
    "Freigang",
    "Freimann",
    "Freimuth",
    "Freisen",
    "Frenzel",
    "Frey",
    "Fricke",
    "Fried",
    "Friedek",
    "Friedenberg",
    "Friedmann",
    "Friedrich",
    "Friess",
    "Frisch",
    "Frohn",
    "Frosch",
    "Fuchs",
    "Fuhlbrügge",
    "Fusenig",
    "Fust",
    "Förster",
    "Gaba",
    "Gabius",
    "Gabler",
    "Gadschiew",
    "Gakstädter",
    "Galander",
    "Gamlin",
    "Gamper",
    "Gangnus",
    "Ganzmann",
    "Garatva",
    "Gast",
    "Gastel",
    "Gatzka",
    "Gauder",
    "Gebhardt",
    "Geese",
    "Gehre",
    "Gehrig",
    "Gehring",
    "Gehrke",
    "Geiger",
    "Geisler",
    "Geissler",
    "Gelling",
    "Gens",
    "Gerbennow",
    "Gerdel",
    "Gerhardt",
    "Gerschler",
    "Gerson",
    "Gesell",
    "Geyer",
    "Ghirmai",
    "Ghosh",
    "Giehl",
    "Gierisch",
    "Giesa",
    "Giesche",
    "Gilde",
    "Glatting",
    "Goebel",
    "Goedicke",
    "Goldbeck",
    "Goldfuss",
    "Goldkamp",
    "Goldkühle",
    "Goller",
    "Golling",
    "Gollnow",
    "Golomski",
    "Gombert",
    "Gotthardt",
    "Gottschalk",
    "Gotz",
    "Goy",
    "Gradzki",
    "Graf",
    "Grams",
    "Grasse",
    "Gratzky",
    "Grau",
    "Greb",
    "Green",
    "Greger",
    "Greithanner",
    "Greschner",
    "Griem",
    "Griese",
    "Grimm",
    "Gromisch",
    "Gross",
    "Grosser",
    "Grossheim",
    "Grosskopf",
    "Grothaus",
    "Grothkopp",
    "Grotke",
    "Grube",
    "Gruber",
    "Grundmann",
    "Gruning",
    "Gruszecki",
    "Gröss",
    "Grötzinger",
    "Grün",
    "Grüner",
    "Gummelt",
    "Gunkel",
    "Gunther",
    "Gutjahr",
    "Gutowicz",
    "Gutschank",
    "Göbel",
    "Göckeritz",
    "Göhler",
    "Görlich",
    "Görmer",
    "Götz",
    "Götzelmann",
    "Güldemeister",
    "Günther",
    "Günz",
    "Gürbig",
    "Haack",
    "Haaf",
    "Habel",
    "Hache",
    "Hackbusch",
    "Hackelbusch",
    "Hadfield",
    "Hadwich",
    "Haferkamp",
    "Hahn",
    "Hajek",
    "Hallmann",
    "Hamann",
    "Hanenberger",
    "Hannecker",
    "Hanniske",
    "Hansen",
    "Hardy",
    "Hargasser",
    "Harms",
    "Harnapp",
    "Harter",
    "Harting",
    "Hartlieb",
    "Hartmann",
    "Hartwig",
    "Hartz",
    "Haschke",
    "Hasler",
    "Hasse",
    "Hassfeld",
    "Haug",
    "Hauke",
    "Haupt",
    "Haverney",
    "Heberstreit",
    "Hechler",
    "Hecht",
    "Heck",
    "Hedermann",
    "Hehl",
    "Heidelmann",
    "Heidler",
    "Heinemann",
    "Heinig",
    "Heinke",
    "Heinrich",
    "Heinze",
    "Heiser",
    "Heist",
    "Hellmann",
    "Helm",
    "Helmke",
    "Helpling",
    "Hengmith",
    "Henkel",
    "Hennes",
    "Henry",
    "Hense",
    "Hensel",
    "Hentel",
    "Hentschel",
    "Hentschke",
    "Hepperle",
    "Herberger",
    "Herbrand",
    "Hering",
    "Hermann",
    "Hermecke",
    "Herms",
    "Herold",
    "Herrmann",
    "Herschmann",
    "Hertel",
    "Herweg",
    "Herwig",
    "Herzenberg",
    "Hess",
    "Hesse",
    "Hessek",
    "Hessler",
    "Hetzler",
    "Heuck",
    "Heydemüller",
    "Hiebl",
    "Hildebrand",
    "Hildenbrand",
    "Hilgendorf",
    "Hillard",
    "Hiller",
    "Hingsen",
    "Hingst",
    "Hinrichs",
    "Hirsch",
    "Hirschberg",
    "Hirt",
    "Hodea",
    "Hoffman",
    "Hoffmann",
    "Hofmann",
    "Hohenberger",
    "Hohl",
    "Hohn",
    "Hohnheiser",
    "Hold",
    "Holdt",
    "Holinski",
    "Holl",
    "Holtfreter",
    "Holz",
    "Holzdeppe",
    "Holzner",
    "Hommel",
    "Honz",
    "Hooss",
    "Hoppe",
    "Horak",
    "Horn",
    "Horna",
    "Hornung",
    "Hort",
    "Howard",
    "Huber",
    "Huckestein",
    "Hudak",
    "Huebel",
    "Hugo",
    "Huhn",
    "Hujo",
    "Huke",
    "Huls",
    "Humbert",
    "Huneke",
    "Huth",
    "Häber",
    "Häfner",
    "Höcke",
    "Höft",
    "Höhne",
    "Hönig",
    "Hördt",
    "Hübenbecker",
    "Hübl",
    "Hübner",
    "Hügel",
    "Hüttcher",
    "Hütter",
    "Ibe",
    "Ihly",
    "Illing",
    "Isak",
    "Isekenmeier",
    "Itt",
    "Jacob",
    "Jacobs",
    "Jagusch",
    "Jahn",
    "Jahnke",
    "Jakobs",
    "Jakubczyk",
    "Jambor",
    "Jamrozy",
    "Jander",
    "Janich",
    "Janke",
    "Jansen",
    "Jarets",
    "Jaros",
    "Jasinski",
    "Jasper",
    "Jegorov",
    "Jellinghaus",
    "Jeorga",
    "Jerschabek",
    "Jess",
    "John",
    "Jonas",
    "Jossa",
    "Jucken",
    "Jung",
    "Jungbluth",
    "Jungton",
    "Just",
    "Jürgens",
    "Kaczmarek",
    "Kaesmacher",
    "Kahl",
    "Kahlert",
    "Kahles",
    "Kahlmeyer",
    "Kaiser",
    "Kalinowski",
    "Kallabis",
    "Kallensee",
    "Kampf",
    "Kampschulte",
    "Kappe",
    "Kappler",
    "Karhoff",
    "Karrass",
    "Karst",
    "Karsten",
    "Karus",
    "Kass",
    "Kasten",
    "Kastner",
    "Katzinski",
    "Kaufmann",
    "Kaul",
    "Kausemann",
    "Kawohl",
    "Kazmarek",
    "Kedzierski",
    "Keil",
    "Keiner",
    "Keller",
    "Kelm",
    "Kempe",
    "Kemper",
    "Kempter",
    "Kerl",
    "Kern",
    "Kesselring",
    "Kesselschläger",
    "Kette",
    "Kettenis",
    "Keutel",
    "Kick",
    "Kiessling",
    "Kinadeter",
    "Kinzel",
    "Kinzy",
    "Kirch",
    "Kirst",
    "Kisabaka",
    "Klaas",
    "Klabuhn",
    "Klapper",
    "Klauder",
    "Klaus",
    "Kleeberg",
    "Kleiber",
    "Klein",
    "Kleinert",
    "Kleininger",
    "Kleinmann",
    "Kleinsteuber",
    "Kleiss",
    "Klemme",
    "Klimczak",
    "Klinger",
    "Klink",
    "Klopsch",
    "Klose",
    "Kloss",
    "Kluge",
    "Kluwe",
    "Knabe",
    "Kneifel",
    "Knetsch",
    "Knies",
    "Knippel",
    "Knobel",
    "Knoblich",
    "Knoll",
    "Knorr",
    "Knorscheidt",
    "Knut",
    "Kobs",
    "Koch",
    "Kochan",
    "Kock",
    "Koczulla",
    "Koderisch",
    "Koehl",
    "Koehler",
    "Koenig",
    "Koester",
    "Kofferschlager",
    "Koha",
    "Kohle",
    "Kohlmann",
    "Kohnle",
    "Kohrt",
    "Koj",
    "Kolb",
    "Koleiski",
    "Kolokas",
    "Komoll",
    "Konieczny",
    "Konig",
    "Konow",
    "Konya",
    "Koob",
    "Kopf",
    "Kosenkow",
    "Koster",
    "Koszewski",
    "Koubaa",
    "Kovacs",
    "Kowalick",
    "Kowalinski",
    "Kozakiewicz",
    "Krabbe",
    "Kraft",
    "Kral",
    "Kramer",
    "Krauel",
    "Kraus",
    "Krause",
    "Krauspe",
    "Kreb",
    "Krebs",
    "Kreissig",
    "Kresse",
    "Kreutz",
    "Krieger",
    "Krippner",
    "Krodinger",
    "Krohn",
    "Krol",
    "Kron",
    "Krueger",
    "Krug",
    "Kruger",
    "Krull",
    "Kruschinski",
    "Krämer",
    "Kröckert",
    "Kröger",
    "Krüger",
    "Kubera",
    "Kufahl",
    "Kuhlee",
    "Kuhnen",
    "Kulimann",
    "Kulma",
    "Kumbernuss",
    "Kummle",
    "Kunz",
    "Kupfer",
    "Kupprion",
    "Kuprion",
    "Kurnicki",
    "Kurrat",
    "Kurschilgen",
    "Kuschewitz",
    "Kuschmann",
    "Kuske",
    "Kustermann",
    "Kutscherauer",
    "Kutzner",
    "Kwadwo",
    "Kähler",
    "Käther",
    "Köhler",
    "Köhrbrück",
    "Köhre",
    "Kölotzei",
    "König",
    "Köpernick",
    "Köseoglu",
    "Kúhn",
    "Kúhnert",
    "Kühn",
    "Kühnel",
    "Kühnemund",
    "Kühnert",
    "Kühnke",
    "Küsters",
    "Küter",
    "Laack",
    "Lack",
    "Ladewig",
    "Lakomy",
    "Lammert",
    "Lamos",
    "Landmann",
    "Lang",
    "Lange",
    "Langfeld",
    "Langhirt",
    "Lanig",
    "Lauckner",
    "Lauinger",
    "Laurén",
    "Lausecker",
    "Laux",
    "Laws",
    "Lax",
    "Leberer",
    "Lehmann",
    "Lehner",
    "Leibold",
    "Leide",
    "Leimbach",
    "Leipold",
    "Leist",
    "Leiter",
    "Leiteritz",
    "Leitheim",
    "Leiwesmeier",
    "Lenfers",
    "Lenk",
    "Lenz",
    "Lenzen",
    "Leo",
    "Lepthin",
    "Lesch",
    "Leschnik",
    "Letzelter",
    "Lewin",
    "Lewke",
    "Leyckes",
    "Lg",
    "Lichtenfeld",
    "Lichtenhagen",
    "Lichtl",
    "Liebach",
    "Liebe",
    "Liebich",
    "Liebold",
    "Lieder",
    "Lienshöft",
    "Linden",
    "Lindenberg",
    "Lindenmayer",
    "Lindner",
    "Linke",
    "Linnenbaum",
    "Lippe",
    "Lipske",
    "Lipus",
    "Lischka",
    "Lobinger",
    "Logsch",
    "Lohmann",
    "Lohre",
    "Lohse",
    "Lokar",
    "Loogen",
    "Lorenz",
    "Losch",
    "Loska",
    "Lott",
    "Loy",
    "Lubina",
    "Ludolf",
    "Lufft",
    "Lukoschek",
    "Lutje",
    "Lutz",
    "Löser",
    "Löwa",
    "Lübke",
    "Maak",
    "Maczey",
    "Madetzky",
    "Madubuko",
    "Mai",
    "Maier",
    "Maisch",
    "Malek",
    "Malkus",
    "Mallmann",
    "Malucha",
    "Manns",
    "Manz",
    "Marahrens",
    "Marchewski",
    "Margis",
    "Markowski",
    "Marl",
    "Marner",
    "Marquart",
    "Marschek",
    "Martel",
    "Marten",
    "Martin",
    "Marx",
    "Marxen",
    "Mathes",
    "Mathies",
    "Mathiszik",
    "Matschke",
    "Mattern",
    "Matthes",
    "Matula",
    "Mau",
    "Maurer",
    "Mauroff",
    "May",
    "Maybach",
    "Mayer",
    "Mebold",
    "Mehl",
    "Mehlhorn",
    "Mehlorn",
    "Meier",
    "Meisch",
    "Meissner",
    "Meloni",
    "Melzer",
    "Menga",
    "Menne",
    "Mensah",
    "Mensing",
    "Merkel",
    "Merseburg",
    "Mertens",
    "Mesloh",
    "Metzger",
    "Metzner",
    "Mewes",
    "Meyer",
    "Michallek",
    "Michel",
    "Mielke",
    "Mikitenko",
    "Milde",
    "Minah",
    "Mintzlaff",
    "Mockenhaupt",
    "Moede",
    "Moedl",
    "Moeller",
    "Moguenara",
    "Mohr",
    "Mohrhard",
    "Molitor",
    "Moll",
    "Moller",
    "Molzan",
    "Montag",
    "Moormann",
    "Mordhorst",
    "Morgenstern",
    "Morhelfer",
    "Moritz",
    "Moser",
    "Motchebon",
    "Motzenbbäcker",
    "Mrugalla",
    "Muckenthaler",
    "Mues",
    "Muller",
    "Mulrain",
    "Mächtig",
    "Mäder",
    "Möcks",
    "Mögenburg",
    "Möhsner",
    "Möldner",
    "Möllenbeck",
    "Möller",
    "Möllinger",
    "Mörsch",
    "Mühleis",
    "Müller",
    "Münch",
    "Nabein",
    "Nabow",
    "Nagel",
    "Nannen",
    "Nastvogel",
    "Nau",
    "Naubert",
    "Naumann",
    "Ne",
    "Neimke",
    "Nerius",
    "Neubauer",
    "Neubert",
    "Neuendorf",
    "Neumair",
    "Neumann",
    "Neupert",
    "Neurohr",
    "Neuschwander",
    "Newton",
    "Ney",
    "Nicolay",
    "Niedermeier",
    "Nieklauson",
    "Niklaus",
    "Nitzsche",
    "Noack",
    "Nodler",
    "Nolte",
    "Normann",
    "Norris",
    "Northoff",
    "Nowak",
    "Nussbeck",
    "Nwachukwu",
    "Nytra",
    "Nöh",
    "Oberem",
    "Obergföll",
    "Obermaier",
    "Ochs",
    "Oeser",
    "Olbrich",
    "Onnen",
    "Ophey",
    "Oppong",
    "Orth",
    "Orthmann",
    "Oschkenat",
    "Osei",
    "Osenberg",
    "Ostendarp",
    "Ostwald",
    "Otte",
    "Otto",
    "Paesler",
    "Pajonk",
    "Pallentin",
    "Panzig",
    "Paschke",
    "Patzwahl",
    "Paukner",
    "Peselman",
    "Peter",
    "Peters",
    "Petzold",
    "Pfeiffer",
    "Pfennig",
    "Pfersich",
    "Pfingsten",
    "Pflieger",
    "Pflügner",
    "Philipp",
    "Pichlmaier",
    "Piesker",
    "Pietsch",
    "Pingpank",
    "Pinnock",
    "Pippig",
    "Pitschugin",
    "Plank",
    "Plass",
    "Platzer",
    "Plauk",
    "Plautz",
    "Pletsch",
    "Plotzitzka",
    "Poehn",
    "Poeschl",
    "Pogorzelski",
    "Pohl",
    "Pohland",
    "Pohle",
    "Polifka",
    "Polizzi",
    "Pollmächer",
    "Pomp",
    "Ponitzsch",
    "Porsche",
    "Porth",
    "Poschmann",
    "Poser",
    "Pottel",
    "Prah",
    "Prange",
    "Prediger",
    "Pressler",
    "Preuk",
    "Preuss",
    "Prey",
    "Priemer",
    "Proske",
    "Pusch",
    "Pöche",
    "Pöge",
    "Raabe",
    "Rabenstein",
    "Rach",
    "Radtke",
    "Rahn",
    "Ranftl",
    "Rangen",
    "Ranz",
    "Rapp",
    "Rath",
    "Rau",
    "Raubuch",
    "Raukuc",
    "Rautenkranz",
    "Rehwagen",
    "Reiber",
    "Reichardt",
    "Reichel",
    "Reichling",
    "Reif",
    "Reifenrath",
    "Reimann",
    "Reinberg",
    "Reinelt",
    "Reinhardt",
    "Reinke",
    "Reitze",
    "Renk",
    "Rentz",
    "Renz",
    "Reppin",
    "Restle",
    "Restorff",
    "Retzke",
    "Reuber",
    "Reumann",
    "Reus",
    "Reuss",
    "Reusse",
    "Rheder",
    "Rhoden",
    "Richards",
    "Richter",
    "Riedel",
    "Riediger",
    "Rieger",
    "Riekmann",
    "Riepl",
    "Riermeier",
    "Riester",
    "Riethmüller",
    "Rietmüller",
    "Rietscher",
    "Ringel",
    "Ringer",
    "Rink",
    "Ripken",
    "Ritosek",
    "Ritschel",
    "Ritter",
    "Rittweg",
    "Ritz",
    "Roba",
    "Rockmeier",
    "Rodehau",
    "Rodowski",
    "Roecker",
    "Roggatz",
    "Rohländer",
    "Rohrer",
    "Rokossa",
    "Roleder",
    "Roloff",
    "Roos",
    "Rosbach",
    "Roschinsky",
    "Rose",
    "Rosenauer",
    "Rosenbauer",
    "Rosenthal",
    "Rosksch",
    "Rossberg",
    "Rossler",
    "Roth",
    "Rother",
    "Ruch",
    "Ruckdeschel",
    "Rumpf",
    "Rupprecht",
    "Ruth",
    "Ryjikh",
    "Ryzih",
    "Rädler",
    "Räntsch",
    "Rödiger",
    "Röse",
    "Röttger",
    "Rücker",
    "Rüdiger",
    "Rüter",
    "Sachse",
    "Sack",
    "Saflanis",
    "Sagafe",
    "Sagonas",
    "Sahner",
    "Saile",
    "Sailer",
    "Salow",
    "Salzer",
    "Salzmann",
    "Sammert",
    "Sander",
    "Sarvari",
    "Sattelmaier",
    "Sauer",
    "Sauerland",
    "Saumweber",
    "Savoia",
    "Scc",
    "Schacht",
    "Schaefer",
    "Schaffarzik",
    "Schahbasian",
    "Scharf",
    "Schedler",
    "Scheer",
    "Schelk",
    "Schellenbeck",
    "Schembera",
    "Schenk",
    "Scherbarth",
    "Scherer",
    "Schersing",
    "Scherz",
    "Scheurer",
    "Scheuring",
    "Scheytt",
    "Schielke",
    "Schieskow",
    "Schildhauer",
    "Schilling",
    "Schima",
    "Schimmer",
    "Schindzielorz",
    "Schirmer",
    "Schirrmeister",
    "Schlachter",
    "Schlangen",
    "Schlawitz",
    "Schlechtweg",
    "Schley",
    "Schlicht",
    "Schlitzer",
    "Schmalzle",
    "Schmid",
    "Schmidt",
    "Schmidtchen",
    "Schmitt",
    "Schmitz",
    "Schmuhl",
    "Schneider",
    "Schnelting",
    "Schnieder",
    "Schniedermeier",
    "Schnürer",
    "Schoberg",
    "Scholz",
    "Schonberg",
    "Schondelmaier",
    "Schorr",
    "Schott",
    "Schottmann",
    "Schouren",
    "Schrader",
    "Schramm",
    "Schreck",
    "Schreiber",
    "Schreiner",
    "Schreiter",
    "Schroder",
    "Schröder",
    "Schuermann",
    "Schuff",
    "Schuhaj",
    "Schuldt",
    "Schult",
    "Schulte",
    "Schultz",
    "Schultze",
    "Schulz",
    "Schulze",
    "Schumacher",
    "Schumann",
    "Schupp",
    "Schuri",
    "Schuster",
    "Schwab",
    "Schwalm",
    "Schwanbeck",
    "Schwandke",
    "Schwanitz",
    "Schwarthoff",
    "Schwartz",
    "Schwarz",
    "Schwarzer",
    "Schwarzkopf",
    "Schwarzmeier",
    "Schwatlo",
    "Schweisfurth",
    "Schwennen",
    "Schwerdtner",
    "Schwidde",
    "Schwirkschlies",
    "Schwuchow",
    "Schäfer",
    "Schäffel",
    "Schäffer",
    "Schäning",
    "Schöckel",
    "Schönball",
    "Schönbeck",
    "Schönberg",
    "Schönebeck",
    "Schönenberger",
    "Schönfeld",
    "Schönherr",
    "Schönlebe",
    "Schötz",
    "Schüler",
    "Schüppel",
    "Schütz",
    "Schütze",
    "Seeger",
    "Seelig",
    "Sehls",
    "Seibold",
    "Seidel",
    "Seiders",
    "Seigel",
    "Seiler",
    "Seitz",
    "Semisch",
    "Senkel",
    "Sewald",
    "Siebel",
    "Siebert",
    "Siegling",
    "Sielemann",
    "Siemon",
    "Siener",
    "Sievers",
    "Siewert",
    "Sihler",
    "Sillah",
    "Simon",
    "Sinnhuber",
    "Sischka",
    "Skibicki",
    "Sladek",
    "Slotta",
    "Smieja",
    "Soboll",
    "Sokolowski",
    "Soller",
    "Sollner",
    "Sommer",
    "Somssich",
    "Sonn",
    "Sonnabend",
    "Spahn",
    "Spank",
    "Spelmeyer",
    "Spiegelburg",
    "Spielvogel",
    "Spinner",
    "Spitzmüller",
    "Splinter",
    "Sporrer",
    "Sprenger",
    "Spöttel",
    "Stahl",
    "Stang",
    "Stanger",
    "Stauss",
    "Steding",
    "Steffen",
    "Steffny",
    "Steidl",
    "Steigauf",
    "Stein",
    "Steinecke",
    "Steinert",
    "Steinkamp",
    "Steinmetz",
    "Stelkens",
    "Stengel",
    "Stengl",
    "Stenzel",
    "Stepanov",
    "Stephan",
    "Stern",
    "Steuk",
    "Stief",
    "Stifel",
    "Stoll",
    "Stolle",
    "Stolz",
    "Storl",
    "Storp",
    "Stoutjesdijk",
    "Stratmann",
    "Straub",
    "Strausa",
    "Streck",
    "Streese",
    "Strege",
    "Streit",
    "Streller",
    "Strieder",
    "Striezel",
    "Strogies",
    "Strohschank",
    "Strunz",
    "Strutz",
    "Stube",
    "Stöckert",
    "Stöppler",
    "Stöwer",
    "Stürmer",
    "Suffa",
    "Sujew",
    "Sussmann",
    "Suthe",
    "Sutschet",
    "Swillims",
    "Szendrei",
    "Sören",
    "Sürth",
    "Tafelmeier",
    "Tang",
    "Tasche",
    "Taufratshofer",
    "Tegethof",
    "Teichmann",
    "Tepper",
    "Terheiden",
    "Terlecki",
    "Teufel",
    "Theele",
    "Thieke",
    "Thimm",
    "Thiomas",
    "Thomas",
    "Thriene",
    "Thränhardt",
    "Thust",
    "Thyssen",
    "Thöne",
    "Tidow",
    "Tiedtke",
    "Tietze",
    "Tilgner",
    "Tillack",
    "Timmermann",
    "Tischler",
    "Tischmann",
    "Tittman",
    "Tivontschik",
    "Tonat",
    "Tonn",
    "Trampeli",
    "Trauth",
    "Trautmann",
    "Travan",
    "Treff",
    "Tremmel",
    "Tress",
    "Tsamonikian",
    "Tschiers",
    "Tschirch",
    "Tuch",
    "Tucholke",
    "Tudow",
    "Tuschmo",
    "Tächl",
    "Többen",
    "Töpfer",
    "Uhlemann",
    "Uhlig",
    "Uhrig",
    "Uibel",
    "Uliczka",
    "Ullmann",
    "Ullrich",
    "Umbach",
    "Umlauft",
    "Umminger",
    "Unger",
    "Unterpaintner",
    "Urban",
    "Urbaniak",
    "Urbansky",
    "Urhig",
    "Vahlensieck",
    "Van",
    "Vangermain",
    "Vater",
    "Venghaus",
    "Verniest",
    "Verzi",
    "Vey",
    "Viellehner",
    "Vieweg",
    "Voelkel",
    "Vogel",
    "Vogelgsang",
    "Vogt",
    "Voigt",
    "Vokuhl",
    "Volk",
    "Volker",
    "Volkmann",
    "Von",
    "Vona",
    "Vontein",
    "Wachenbrunner",
    "Wachtel",
    "Wagner",
    "Waibel",
    "Wakan",
    "Waldmann",
    "Wallner",
    "Wallstab",
    "Walter",
    "Walther",
    "Walton",
    "Walz",
    "Wanner",
    "Wartenberg",
    "Waschbüsch",
    "Wassilew",
    "Wassiluk",
    "Weber",
    "Wehrsen",
    "Weidlich",
    "Weidner",
    "Weigel",
    "Weight",
    "Weiler",
    "Weimer",
    "Weis",
    "Weiss",
    "Weller",
    "Welsch",
    "Welz",
    "Welzel",
    "Weniger",
    "Wenk",
    "Werle",
    "Werner",
    "Werrmann",
    "Wessel",
    "Wessinghage",
    "Weyel",
    "Wezel",
    "Wichmann",
    "Wickert",
    "Wiebe",
    "Wiechmann",
    "Wiegelmann",
    "Wierig",
    "Wiese",
    "Wieser",
    "Wilhelm",
    "Wilky",
    "Will",
    "Willwacher",
    "Wilts",
    "Wimmer",
    "Winkelmann",
    "Winkler",
    "Winter",
    "Wischek",
    "Wischer",
    "Wissing",
    "Wittich",
    "Wittl",
    "Wolf",
    "Wolfarth",
    "Wolff",
    "Wollenberg",
    "Wollmann",
    "Woytkowska",
    "Wujak",
    "Wurm",
    "Wyludda",
    "Wölpert",
    "Wöschler",
    "Wühn",
    "Wünsche",
    "Zach",
    "Zaczkiewicz",
    "Zahn",
    "Zaituc",
    "Zandt",
    "Zanner",
    "Zapletal",
    "Zauber",
    "Zeidler",
    "Zekl",
    "Zender",
    "Zeuch",
    "Zeyen",
    "Zeyhle",
    "Ziegler",
    "Zimanyi",
    "Zimmer",
    "Zimmermann",
    "Zinser",
    "Zintl",
    "Zipp",
    "Zipse",
    "Zschunke",
    "Zuber",
    "Zwiener",
    "Zümsande",
    "Östringer",
    "Überacker"
  ],
  "prefix": [
    "Hr.",
    "Fr.",
    "Dr.",
    "Prof. Dr."
  ],
  "nobility_title_prefix": [
    "zu",
    "von",
    "vom",
    "von der"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{nobility_title_prefix} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
de.phone_number = {
  "formats": [
    "(0###) #########",
    "(0####) #######",
    "+49-###-#######",
    "+49-####-########"
  ]
};
de.cell_phone = {
  "formats": [
    "+49-1##-#######",
    "+49-1###-########"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/de_AT.js":[function(require,module,exports){
var de_AT = {};
module["exports"] = de_AT;
de_AT.title = "German (Austria)";
de_AT.address = {
  "country": [
    "Ägypten",
    "Äquatorialguinea",
    "Äthiopien",
    "Österreich",
    "Afghanistan",
    "Albanien",
    "Algerien",
    "Amerikanisch-Samoa",
    "Amerikanische Jungferninseln",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarktis",
    "Antigua und Barbuda",
    "Argentinien",
    "Armenien",
    "Aruba",
    "Aserbaidschan",
    "Australien",
    "Bahamas",
    "Bahrain",
    "Bangladesch",
    "Barbados",
    "Belarus",
    "Belgien",
    "Belize",
    "Benin",
    "die Bermudas",
    "Bhutan",
    "Bolivien",
    "Bosnien und Herzegowina",
    "Botsuana",
    "Bouvetinsel",
    "Brasilien",
    "Britische Jungferninseln",
    "Britisches Territorium im Indischen Ozean",
    "Brunei Darussalam",
    "Bulgarien",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "China",
    "Cookinseln",
    "Costa Rica",
    "Dänemark",
    "Demokratische Republik Kongo",
    "Demokratische Volksrepublik Korea",
    "Deutschland",
    "Dominica",
    "Dominikanische Republik",
    "Dschibuti",
    "Ecuador",
    "El Salvador",
    "Eritrea",
    "Estland",
    "Färöer",
    "Falklandinseln",
    "Fidschi",
    "Finnland",
    "Frankreich",
    "Französisch-Guayana",
    "Französisch-Polynesien",
    "Französische Gebiete im südlichen Indischen Ozean",
    "Gabun",
    "Gambia",
    "Georgien",
    "Ghana",
    "Gibraltar",
    "Grönland",
    "Grenada",
    "Griechenland",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard und McDonaldinseln",
    "Honduras",
    "Hongkong",
    "Indien",
    "Indonesien",
    "Irak",
    "Iran",
    "Irland",
    "Island",
    "Israel",
    "Italien",
    "Jamaika",
    "Japan",
    "Jemen",
    "Jordanien",
    "Jugoslawien",
    "Kaimaninseln",
    "Kambodscha",
    "Kamerun",
    "Kanada",
    "Kap Verde",
    "Kasachstan",
    "Katar",
    "Kenia",
    "Kirgisistan",
    "Kiribati",
    "Kleinere amerikanische Überseeinseln",
    "Kokosinseln",
    "Kolumbien",
    "Komoren",
    "Kongo",
    "Kroatien",
    "Kuba",
    "Kuwait",
    "Laos",
    "Lesotho",
    "Lettland",
    "Libanon",
    "Liberia",
    "Libyen",
    "Liechtenstein",
    "Litauen",
    "Luxemburg",
    "Macau",
    "Madagaskar",
    "Malawi",
    "Malaysia",
    "Malediven",
    "Mali",
    "Malta",
    "ehemalige jugoslawische Republik Mazedonien",
    "Marokko",
    "Marshallinseln",
    "Martinique",
    "Mauretanien",
    "Mauritius",
    "Mayotte",
    "Mexiko",
    "Mikronesien",
    "Monaco",
    "Mongolei",
    "Montserrat",
    "Mosambik",
    "Myanmar",
    "Nördliche Marianen",
    "Namibia",
    "Nauru",
    "Nepal",
    "Neukaledonien",
    "Neuseeland",
    "Nicaragua",
    "Niederländische Antillen",
    "Niederlande",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolkinsel",
    "Norwegen",
    "Oman",
    "Osttimor",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Neuguinea",
    "Paraguay",
    "Peru",
    "Philippinen",
    "Pitcairninseln",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Réunion",
    "Republik Korea",
    "Republik Moldau",
    "Ruanda",
    "Rumänien",
    "Russische Föderation",
    "São Tomé und Príncipe",
    "Südafrika",
    "Südgeorgien und Südliche Sandwichinseln",
    "Salomonen",
    "Sambia",
    "Samoa",
    "San Marino",
    "Saudi-Arabien",
    "Schweden",
    "Schweiz",
    "Senegal",
    "Seychellen",
    "Sierra Leone",
    "Simbabwe",
    "Singapur",
    "Slowakei",
    "Slowenien",
    "Somalien",
    "Spanien",
    "Sri Lanka",
    "St. Helena",
    "St. Kitts und Nevis",
    "St. Lucia",
    "St. Pierre und Miquelon",
    "St. Vincent und die Grenadinen",
    "Sudan",
    "Surinam",
    "Svalbard und Jan Mayen",
    "Swasiland",
    "Syrien",
    "Türkei",
    "Tadschikistan",
    "Taiwan",
    "Tansania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad und Tobago",
    "Tschad",
    "Tschechische Republik",
    "Tunesien",
    "Turkmenistan",
    "Turks- und Caicosinseln",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "Ungarn",
    "Uruguay",
    "Usbekistan",
    "Vanuatu",
    "Vatikanstadt",
    "Venezuela",
    "Vereinigte Arabische Emirate",
    "Vereinigte Staaten",
    "Vereinigtes Königreich",
    "Vietnam",
    "Wallis und Futuna",
    "Weihnachtsinsel",
    "Westsahara",
    "Zentralafrikanische Republik",
    "Zypern"
  ],
  "street_root": [
    "Ahorn",
    "Ahorngasse (St. Andrä)",
    "Alleestraße (Poysbrunn)",
    "Alpenlandstraße",
    "Alte Poststraße",
    "Alte Ufergasse",
    "Am Kronawett (Hagenbrunn)",
    "Am Mühlwasser",
    "Am Rebenhang",
    "Am Sternweg",
    "Anton Wildgans-Straße",
    "Auer-von-Welsbach-Weg",
    "Auf der Stift",
    "Aufeldgasse",
    "Bahngasse",
    "Bahnhofstraße",
    "Bahnstraße (Gerhaus)",
    "Basteigasse",
    "Berggasse",
    "Bergstraße",
    "Birkenweg",
    "Blasiussteig",
    "Blattur",
    "Bruderhofgasse",
    "Brunnelligasse",
    "Bühelweg",
    "Darnautgasse",
    "Donaugasse",
    "Dorfplatz (Haselbach)",
    "Dr.-Oberreiter-Straße",
    "Dr.Karl Holoubek-Str.",
    "Drautal Bundesstraße",
    "Dürnrohrer Straße",
    "Ebenthalerstraße",
    "Eckgrabenweg",
    "Erlenstraße",
    "Erlenweg",
    "Eschenweg",
    "Etrichgasse",
    "Fassergasse",
    "Feichteggerwiese",
    "Feld-Weg",
    "Feldgasse",
    "Feldstapfe",
    "Fischpointweg",
    "Flachbergstraße",
    "Flurweg",
    "Franz Schubert-Gasse",
    "Franz-Schneeweiß-Weg",
    "Franz-von-Assisi-Straße",
    "Fritz-Pregl-Straße",
    "Fuchsgrubenweg",
    "Födlerweg",
    "Föhrenweg",
    "Fünfhaus (Paasdorf)",
    "Gabelsbergerstraße",
    "Gartenstraße",
    "Geigen",
    "Geigergasse",
    "Gemeindeaugasse",
    "Gemeindeplatz",
    "Georg-Aichinger-Straße",
    "Glanfeldbachweg",
    "Graben (Burgauberg)",
    "Grub",
    "Gröretgasse",
    "Grünbach",
    "Gösting",
    "Hainschwang",
    "Hans-Mauracher-Straße",
    "Hart",
    "Teichstraße",
    "Hauptplatz",
    "Hauptstraße",
    "Heideweg",
    "Heinrich Landauer Gasse",
    "Helenengasse",
    "Hermann von Gilmweg",
    "Hermann-Löns-Gasse",
    "Herminengasse",
    "Hernstorferstraße",
    "Hirsdorf",
    "Hochfeistritz",
    "Hochhaus Neue Donau",
    "Hof",
    "Hussovits Gasse",
    "Höggen",
    "Hütten",
    "Janzgasse",
    "Jochriemgutstraße",
    "Johann-Strauß-Gasse",
    "Julius-Raab-Straße",
    "Kahlenberger Straße",
    "Karl Kraft-Straße",
    "Kegelprielstraße",
    "Keltenberg-Eponaweg",
    "Kennedybrücke",
    "Kerpelystraße",
    "Kindergartenstraße",
    "Kinderheimgasse",
    "Kirchenplatz",
    "Kirchweg",
    "Klagenfurter Straße",
    "Klamm",
    "Kleinbaumgarten",
    "Klingergasse",
    "Koloniestraße",
    "Konrad-Duden-Gasse",
    "Krankenhausstraße",
    "Kubinstraße",
    "Köhldorfergasse",
    "Lackenweg",
    "Lange Mekotte",
    "Leifling",
    "Leopold Frank-Straße (Pellendorf)",
    "Lerchengasse (Pirka)",
    "Lichtensternsiedlung V",
    "Lindenhofstraße",
    "Lindenweg",
    "Luegstraße",
    "Maierhof",
    "Malerweg",
    "Mitterweg",
    "Mittlere Hauptstraße",
    "Moosbachgasse",
    "Morettigasse",
    "Musikpavillon Riezlern",
    "Mühlboden",
    "Mühle",
    "Mühlenweg",
    "Neustiftgasse",
    "Niederegg",
    "Niedergams",
    "Nordwestbahnbrücke",
    "Oberbödenalm",
    "Obere Berggasse",
    "Oedt",
    "Am Färberberg",
    "Ottogasse",
    "Paul Peters-Gasse",
    "Perspektivstraße",
    "Poppichl",
    "Privatweg",
    "Prixgasse",
    "Pyhra",
    "Radetzkystraße",
    "Raiden",
    "Reichensteinstraße",
    "Reitbauernstraße",
    "Reiterweg",
    "Reitschulgasse",
    "Ringweg",
    "Rupertistraße",
    "Römerstraße",
    "Römerweg",
    "Sackgasse",
    "Schaunbergerstraße",
    "Schloßweg",
    "Schulgasse (Langeck)",
    "Schönholdsiedlung",
    "Seeblick",
    "Seestraße",
    "Semriacherstraße",
    "Simling",
    "Sipbachzeller Straße",
    "Sonnenweg",
    "Spargelfeldgasse",
    "Spiesmayrweg",
    "Sportplatzstraße",
    "St.Ulrich",
    "Steilmannstraße",
    "Steingrüneredt",
    "Strassfeld",
    "Straßerau",
    "Stöpflweg",
    "Stüra",
    "Taferngasse",
    "Tennweg",
    "Thomas Koschat-Gasse",
    "Tiroler Straße",
    "Torrogasse",
    "Uferstraße (Schwarzau am Steinfeld)",
    "Unterdörfl",
    "Unterer Sonnrainweg",
    "Verwaltersiedlung",
    "Waldhang",
    "Wasen",
    "Weidenstraße",
    "Weiherweg",
    "Wettsteingasse",
    "Wiener Straße",
    "Windisch",
    "Zebragasse",
    "Zellerstraße",
    "Ziehrerstraße",
    "Zulechnerweg",
    "Zwergjoch",
    "Ötzbruck"
  ],
  "building_number": [
    "###",
    "##",
    "#",
    "##a",
    "##b",
    "##c"
  ],
  "secondary_address": [
    "Apt. ###",
    "Zimmer ###",
    "# OG"
  ],
  "postcode": [
    "####"
  ],
  "state": [
    "Burgenland",
    "Kärnten",
    "Niederösterreich",
    "Oberösterreich",
    "Salzburg",
    "Steiermark",
    "Tirol",
    "Vorarlberg",
    "Wien"
  ],
  "state_abbr": [
    "Bgld.",
    "Ktn.",
    "NÖ",
    "OÖ",
    "Sbg.",
    "Stmk.",
    "T",
    "Vbg.",
    "W"
  ],
  "city_name": [
    "Aigen im Mühlkreis",
    "Allerheiligen bei Wildon",
    "Altenfelden",
    "Arriach",
    "Axams",
    "Baumgartenberg",
    "Bergern im Dunkelsteinerwald",
    "Berndorf bei Salzburg",
    "Bregenz",
    "Breitenbach am Inn",
    "Deutsch-Wagram",
    "Dienten am Hochkönig",
    "Dietach",
    "Dornbirn",
    "Dürnkrut",
    "Eben im Pongau",
    "Ebenthal in Kärnten",
    "Eichgraben",
    "Eisenstadt",
    "Ellmau",
    "Feistritz am Wechsel",
    "Finkenberg",
    "Fiss",
    "Frantschach-St. Gertraud",
    "Fritzens",
    "Gams bei Hieflau",
    "Geiersberg",
    "Graz",
    "Großhöflein",
    "Gößnitz",
    "Hartl",
    "Hausleiten",
    "Herzogenburg",
    "Hinterhornbach",
    "Hochwolkersdorf",
    "Ilz",
    "Ilztal",
    "Innerbraz",
    "Innsbruck",
    "Itter",
    "Jagerberg",
    "Jeging",
    "Johnsbach",
    "Johnsdorf-Brunn",
    "Jungholz",
    "Kirchdorf am Inn",
    "Klagenfurt",
    "Kottes-Purk",
    "Krumau am Kamp",
    "Krumbach",
    "Lavamünd",
    "Lech",
    "Linz",
    "Ludesch",
    "Lödersdorf",
    "Marbach an der Donau",
    "Mattsee",
    "Mautern an der Donau",
    "Mauterndorf",
    "Mitterbach am Erlaufsee",
    "Neudorf bei Passail",
    "Neudorf bei Staatz",
    "Neukirchen an der Enknach",
    "Neustift an der Lafnitz",
    "Niederleis",
    "Oberndorf in Tirol",
    "Oberstorcha",
    "Oberwaltersdorf",
    "Oed-Oehling",
    "Ort im Innkreis",
    "Pilgersdorf",
    "Pitschgau",
    "Pollham",
    "Preitenegg",
    "Purbach am Neusiedler See",
    "Rabenwald",
    "Raiding",
    "Rastenfeld",
    "Ratten",
    "Rettenegg",
    "Salzburg",
    "Sankt Johann im Saggautal",
    "St. Peter am Kammersberg",
    "St. Pölten",
    "St. Veit an der Glan",
    "Taxenbach",
    "Tragwein",
    "Trebesing",
    "Trieben",
    "Turnau",
    "Ungerdorf",
    "Unterauersbach",
    "Unterstinkenbrunn",
    "Untertilliach",
    "Uttendorf",
    "Vals",
    "Velden am Wörther See",
    "Viehhofen",
    "Villach",
    "Vitis",
    "Waidhofen an der Thaya",
    "Waldkirchen am Wesen",
    "Weißkirchen an der Traun",
    "Wien",
    "Wimpassing im Schwarzatale",
    "Ybbs an der Donau",
    "Ybbsitz",
    "Yspertal",
    "Zeillern",
    "Zell am Pettenfirst",
    "Zell an der Pram",
    "Zerlach",
    "Zwölfaxing",
    "Öblarn",
    "Übelbach",
    "Überackern",
    "Übersaxen",
    "Übersbach"
  ],
  "city": [
    "#{city_name}"
  ],
  "street_name": [
    "#{street_root}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Österreich"
  ]
};
de_AT.company = {
  "suffix": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "legal_form": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ]
};
de_AT.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "info",
    "name",
    "net",
    "org",
    "de",
    "ch",
    "at"
  ]
};
de_AT.name = {
  "first_name": [
    "Aaron",
    "Abdul",
    "Abdullah",
    "Adam",
    "Adrian",
    "Adriano",
    "Ahmad",
    "Ahmed",
    "Ahmet",
    "Alan",
    "Albert",
    "Alessandro",
    "Alessio",
    "Alex",
    "Alexander",
    "Alfred",
    "Ali",
    "Amar",
    "Amir",
    "Amon",
    "Andre",
    "Andreas",
    "Andrew",
    "Angelo",
    "Ansgar",
    "Anthony",
    "Anton",
    "Antonio",
    "Arda",
    "Arian",
    "Armin",
    "Arne",
    "Arno",
    "Arthur",
    "Artur",
    "Arved",
    "Arvid",
    "Ayman",
    "Baran",
    "Baris",
    "Bastian",
    "Batuhan",
    "Bela",
    "Ben",
    "Benedikt",
    "Benjamin",
    "Bennet",
    "Bennett",
    "Benno",
    "Bent",
    "Berat",
    "Berkay",
    "Bernd",
    "Bilal",
    "Bjarne",
    "Björn",
    "Bo",
    "Boris",
    "Brandon",
    "Brian",
    "Bruno",
    "Bryan",
    "Burak",
    "Calvin",
    "Can",
    "Carl",
    "Carlo",
    "Carlos",
    "Caspar",
    "Cedric",
    "Cedrik",
    "Cem",
    "Charlie",
    "Chris",
    "Christian",
    "Christiano",
    "Christoph",
    "Christopher",
    "Claas",
    "Clemens",
    "Colin",
    "Collin",
    "Conner",
    "Connor",
    "Constantin",
    "Corvin",
    "Curt",
    "Damian",
    "Damien",
    "Daniel",
    "Danilo",
    "Danny",
    "Darian",
    "Dario",
    "Darius",
    "Darren",
    "David",
    "Davide",
    "Davin",
    "Dean",
    "Deniz",
    "Dennis",
    "Denny",
    "Devin",
    "Diego",
    "Dion",
    "Domenic",
    "Domenik",
    "Dominic",
    "Dominik",
    "Dorian",
    "Dustin",
    "Dylan",
    "Ecrin",
    "Eddi",
    "Eddy",
    "Edgar",
    "Edwin",
    "Efe",
    "Ege",
    "Elia",
    "Eliah",
    "Elias",
    "Elijah",
    "Emanuel",
    "Emil",
    "Emilian",
    "Emilio",
    "Emir",
    "Emirhan",
    "Emre",
    "Enes",
    "Enno",
    "Enrico",
    "Eren",
    "Eric",
    "Erik",
    "Etienne",
    "Fabian",
    "Fabien",
    "Fabio",
    "Fabrice",
    "Falk",
    "Felix",
    "Ferdinand",
    "Fiete",
    "Filip",
    "Finlay",
    "Finley",
    "Finn",
    "Finnley",
    "Florian",
    "Francesco",
    "Franz",
    "Frederic",
    "Frederick",
    "Frederik",
    "Friedrich",
    "Fritz",
    "Furkan",
    "Fynn",
    "Gabriel",
    "Georg",
    "Gerrit",
    "Gian",
    "Gianluca",
    "Gino",
    "Giuliano",
    "Giuseppe",
    "Gregor",
    "Gustav",
    "Hagen",
    "Hamza",
    "Hannes",
    "Hanno",
    "Hans",
    "Hasan",
    "Hassan",
    "Hauke",
    "Hendrik",
    "Hennes",
    "Henning",
    "Henri",
    "Henrick",
    "Henrik",
    "Henry",
    "Hugo",
    "Hussein",
    "Ian",
    "Ibrahim",
    "Ilias",
    "Ilja",
    "Ilyas",
    "Immanuel",
    "Ismael",
    "Ismail",
    "Ivan",
    "Iven",
    "Jack",
    "Jacob",
    "Jaden",
    "Jakob",
    "Jamal",
    "James",
    "Jamie",
    "Jan",
    "Janek",
    "Janis",
    "Janne",
    "Jannek",
    "Jannes",
    "Jannik",
    "Jannis",
    "Jano",
    "Janosch",
    "Jared",
    "Jari",
    "Jarne",
    "Jarno",
    "Jaron",
    "Jason",
    "Jasper",
    "Jay",
    "Jayden",
    "Jayson",
    "Jean",
    "Jens",
    "Jeremias",
    "Jeremie",
    "Jeremy",
    "Jermaine",
    "Jerome",
    "Jesper",
    "Jesse",
    "Jim",
    "Jimmy",
    "Joe",
    "Joel",
    "Joey",
    "Johann",
    "Johannes",
    "John",
    "Johnny",
    "Jon",
    "Jona",
    "Jonah",
    "Jonas",
    "Jonathan",
    "Jonte",
    "Joost",
    "Jordan",
    "Joris",
    "Joscha",
    "Joschua",
    "Josef",
    "Joseph",
    "Josh",
    "Joshua",
    "Josua",
    "Juan",
    "Julian",
    "Julien",
    "Julius",
    "Juri",
    "Justin",
    "Justus",
    "Kaan",
    "Kai",
    "Kalle",
    "Karim",
    "Karl",
    "Karlo",
    "Kay",
    "Keanu",
    "Kenan",
    "Kenny",
    "Keno",
    "Kerem",
    "Kerim",
    "Kevin",
    "Kian",
    "Kilian",
    "Kim",
    "Kimi",
    "Kjell",
    "Klaas",
    "Klemens",
    "Konrad",
    "Konstantin",
    "Koray",
    "Korbinian",
    "Kurt",
    "Lars",
    "Lasse",
    "Laurence",
    "Laurens",
    "Laurenz",
    "Laurin",
    "Lean",
    "Leander",
    "Leandro",
    "Leif",
    "Len",
    "Lenn",
    "Lennard",
    "Lennart",
    "Lennert",
    "Lennie",
    "Lennox",
    "Lenny",
    "Leo",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leonhard",
    "Leonidas",
    "Leopold",
    "Leroy",
    "Levent",
    "Levi",
    "Levin",
    "Lewin",
    "Lewis",
    "Liam",
    "Lian",
    "Lias",
    "Lino",
    "Linus",
    "Lio",
    "Lion",
    "Lionel",
    "Logan",
    "Lorenz",
    "Lorenzo",
    "Loris",
    "Louis",
    "Luan",
    "Luc",
    "Luca",
    "Lucas",
    "Lucian",
    "Lucien",
    "Ludwig",
    "Luis",
    "Luiz",
    "Luk",
    "Luka",
    "Lukas",
    "Luke",
    "Lutz",
    "Maddox",
    "Mads",
    "Magnus",
    "Maik",
    "Maksim",
    "Malik",
    "Malte",
    "Manuel",
    "Marc",
    "Marcel",
    "Marco",
    "Marcus",
    "Marek",
    "Marian",
    "Mario",
    "Marius",
    "Mark",
    "Marko",
    "Markus",
    "Marlo",
    "Marlon",
    "Marten",
    "Martin",
    "Marvin",
    "Marwin",
    "Mateo",
    "Mathis",
    "Matis",
    "Mats",
    "Matteo",
    "Mattes",
    "Matthias",
    "Matthis",
    "Matti",
    "Mattis",
    "Maurice",
    "Max",
    "Maxim",
    "Maximilian",
    "Mehmet",
    "Meik",
    "Melvin",
    "Merlin",
    "Mert",
    "Michael",
    "Michel",
    "Mick",
    "Miguel",
    "Mika",
    "Mikail",
    "Mike",
    "Milan",
    "Milo",
    "Mio",
    "Mirac",
    "Mirco",
    "Mirko",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moritz",
    "Morten",
    "Muhammed",
    "Murat",
    "Mustafa",
    "Nathan",
    "Nathanael",
    "Nelson",
    "Neo",
    "Nevio",
    "Nick",
    "Niclas",
    "Nico",
    "Nicolai",
    "Nicolas",
    "Niels",
    "Nikita",
    "Niklas",
    "Niko",
    "Nikolai",
    "Nikolas",
    "Nils",
    "Nino",
    "Noah",
    "Noel",
    "Norman",
    "Odin",
    "Oke",
    "Ole",
    "Oliver",
    "Omar",
    "Onur",
    "Oscar",
    "Oskar",
    "Pascal",
    "Patrice",
    "Patrick",
    "Paul",
    "Peer",
    "Pepe",
    "Peter",
    "Phil",
    "Philip",
    "Philipp",
    "Pierre",
    "Piet",
    "Pit",
    "Pius",
    "Quentin",
    "Quirin",
    "Rafael",
    "Raik",
    "Ramon",
    "Raphael",
    "Rasmus",
    "Raul",
    "Rayan",
    "René",
    "Ricardo",
    "Riccardo",
    "Richard",
    "Rick",
    "Rico",
    "Robert",
    "Robin",
    "Rocco",
    "Roman",
    "Romeo",
    "Ron",
    "Ruben",
    "Ryan",
    "Said",
    "Salih",
    "Sam",
    "Sami",
    "Sammy",
    "Samuel",
    "Sandro",
    "Santino",
    "Sascha",
    "Sean",
    "Sebastian",
    "Selim",
    "Semih",
    "Shawn",
    "Silas",
    "Simeon",
    "Simon",
    "Sinan",
    "Sky",
    "Stefan",
    "Steffen",
    "Stephan",
    "Steve",
    "Steven",
    "Sven",
    "Sönke",
    "Sören",
    "Taha",
    "Tamino",
    "Tammo",
    "Tarik",
    "Tayler",
    "Taylor",
    "Teo",
    "Theo",
    "Theodor",
    "Thies",
    "Thilo",
    "Thomas",
    "Thorben",
    "Thore",
    "Thorge",
    "Tiago",
    "Til",
    "Till",
    "Tillmann",
    "Tim",
    "Timm",
    "Timo",
    "Timon",
    "Timothy",
    "Tino",
    "Titus",
    "Tizian",
    "Tjark",
    "Tobias",
    "Tom",
    "Tommy",
    "Toni",
    "Tony",
    "Torben",
    "Tore",
    "Tristan",
    "Tyler",
    "Tyron",
    "Umut",
    "Valentin",
    "Valentino",
    "Veit",
    "Victor",
    "Viktor",
    "Vin",
    "Vincent",
    "Vito",
    "Vitus",
    "Wilhelm",
    "Willi",
    "William",
    "Willy",
    "Xaver",
    "Yannic",
    "Yannick",
    "Yannik",
    "Yannis",
    "Yasin",
    "Youssef",
    "Yunus",
    "Yusuf",
    "Yven",
    "Yves",
    "Ömer",
    "Aaliyah",
    "Abby",
    "Abigail",
    "Ada",
    "Adelina",
    "Adriana",
    "Aileen",
    "Aimee",
    "Alana",
    "Alea",
    "Alena",
    "Alessa",
    "Alessia",
    "Alexa",
    "Alexandra",
    "Alexia",
    "Alexis",
    "Aleyna",
    "Alia",
    "Alica",
    "Alice",
    "Alicia",
    "Alina",
    "Alisa",
    "Alisha",
    "Alissa",
    "Aliya",
    "Aliyah",
    "Allegra",
    "Alma",
    "Alyssa",
    "Amalia",
    "Amanda",
    "Amelia",
    "Amelie",
    "Amina",
    "Amira",
    "Amy",
    "Ana",
    "Anabel",
    "Anastasia",
    "Andrea",
    "Angela",
    "Angelina",
    "Angelique",
    "Anja",
    "Ann",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalena",
    "Anne",
    "Anneke",
    "Annelie",
    "Annemarie",
    "Anni",
    "Annie",
    "Annika",
    "Anny",
    "Anouk",
    "Antonia",
    "Arda",
    "Ariana",
    "Ariane",
    "Arwen",
    "Ashley",
    "Asya",
    "Aurelia",
    "Aurora",
    "Ava",
    "Ayleen",
    "Aylin",
    "Ayse",
    "Azra",
    "Betty",
    "Bianca",
    "Bianka",
    "Caitlin",
    "Cara",
    "Carina",
    "Carla",
    "Carlotta",
    "Carmen",
    "Carolin",
    "Carolina",
    "Caroline",
    "Cassandra",
    "Catharina",
    "Catrin",
    "Cecile",
    "Cecilia",
    "Celia",
    "Celina",
    "Celine",
    "Ceyda",
    "Ceylin",
    "Chantal",
    "Charleen",
    "Charlotta",
    "Charlotte",
    "Chayenne",
    "Cheyenne",
    "Chiara",
    "Christin",
    "Christina",
    "Cindy",
    "Claire",
    "Clara",
    "Clarissa",
    "Colleen",
    "Collien",
    "Cora",
    "Corinna",
    "Cosima",
    "Dana",
    "Daniela",
    "Daria",
    "Darleen",
    "Defne",
    "Delia",
    "Denise",
    "Diana",
    "Dilara",
    "Dina",
    "Dorothea",
    "Ecrin",
    "Eda",
    "Eileen",
    "Ela",
    "Elaine",
    "Elanur",
    "Elea",
    "Elena",
    "Eleni",
    "Eleonora",
    "Eliana",
    "Elif",
    "Elina",
    "Elisa",
    "Elisabeth",
    "Ella",
    "Ellen",
    "Elli",
    "Elly",
    "Elsa",
    "Emelie",
    "Emely",
    "Emilia",
    "Emilie",
    "Emily",
    "Emma",
    "Emmely",
    "Emmi",
    "Emmy",
    "Enie",
    "Enna",
    "Enya",
    "Esma",
    "Estelle",
    "Esther",
    "Eva",
    "Evelin",
    "Evelina",
    "Eveline",
    "Evelyn",
    "Fabienne",
    "Fatima",
    "Fatma",
    "Felicia",
    "Felicitas",
    "Felina",
    "Femke",
    "Fenja",
    "Fine",
    "Finia",
    "Finja",
    "Finnja",
    "Fiona",
    "Flora",
    "Florentine",
    "Francesca",
    "Franka",
    "Franziska",
    "Frederike",
    "Freya",
    "Frida",
    "Frieda",
    "Friederike",
    "Giada",
    "Gina",
    "Giulia",
    "Giuliana",
    "Greta",
    "Hailey",
    "Hana",
    "Hanna",
    "Hannah",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helin",
    "Henriette",
    "Henrike",
    "Hermine",
    "Ida",
    "Ilayda",
    "Imke",
    "Ina",
    "Ines",
    "Inga",
    "Inka",
    "Irem",
    "Isa",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Ivonne",
    "Jacqueline",
    "Jamie",
    "Jamila",
    "Jana",
    "Jane",
    "Janin",
    "Janina",
    "Janine",
    "Janna",
    "Janne",
    "Jara",
    "Jasmin",
    "Jasmina",
    "Jasmine",
    "Jella",
    "Jenna",
    "Jennifer",
    "Jenny",
    "Jessica",
    "Jessy",
    "Jette",
    "Jil",
    "Jill",
    "Joana",
    "Joanna",
    "Joelina",
    "Joeline",
    "Joelle",
    "Johanna",
    "Joleen",
    "Jolie",
    "Jolien",
    "Jolin",
    "Jolina",
    "Joline",
    "Jona",
    "Jonah",
    "Jonna",
    "Josefin",
    "Josefine",
    "Josephin",
    "Josephine",
    "Josie",
    "Josy",
    "Joy",
    "Joyce",
    "Judith",
    "Judy",
    "Jule",
    "Julia",
    "Juliana",
    "Juliane",
    "Julie",
    "Julienne",
    "Julika",
    "Julina",
    "Juna",
    "Justine",
    "Kaja",
    "Karina",
    "Karla",
    "Karlotta",
    "Karolina",
    "Karoline",
    "Kassandra",
    "Katarina",
    "Katharina",
    "Kathrin",
    "Katja",
    "Katrin",
    "Kaya",
    "Kayra",
    "Kiana",
    "Kiara",
    "Kim",
    "Kimberley",
    "Kimberly",
    "Kira",
    "Klara",
    "Korinna",
    "Kristin",
    "Kyra",
    "Laila",
    "Lana",
    "Lara",
    "Larissa",
    "Laura",
    "Laureen",
    "Lavinia",
    "Lea",
    "Leah",
    "Leana",
    "Leandra",
    "Leann",
    "Lee",
    "Leila",
    "Lena",
    "Lene",
    "Leni",
    "Lenia",
    "Lenja",
    "Lenya",
    "Leona",
    "Leoni",
    "Leonie",
    "Leonora",
    "Leticia",
    "Letizia",
    "Levke",
    "Leyla",
    "Lia",
    "Liah",
    "Liana",
    "Lili",
    "Lilia",
    "Lilian",
    "Liliana",
    "Lilith",
    "Lilli",
    "Lillian",
    "Lilly",
    "Lily",
    "Lina",
    "Linda",
    "Lindsay",
    "Line",
    "Linn",
    "Linnea",
    "Lisa",
    "Lisann",
    "Lisanne",
    "Liv",
    "Livia",
    "Liz",
    "Lola",
    "Loreen",
    "Lorena",
    "Lotta",
    "Lotte",
    "Louisa",
    "Louise",
    "Luana",
    "Luca",
    "Lucia",
    "Lucie",
    "Lucienne",
    "Lucy",
    "Luisa",
    "Luise",
    "Luka",
    "Luna",
    "Luzie",
    "Lya",
    "Lydia",
    "Lyn",
    "Lynn",
    "Madeleine",
    "Madita",
    "Madleen",
    "Madlen",
    "Magdalena",
    "Maike",
    "Mailin",
    "Maira",
    "Maja",
    "Malena",
    "Malia",
    "Malin",
    "Malina",
    "Mandy",
    "Mara",
    "Marah",
    "Mareike",
    "Maren",
    "Maria",
    "Mariam",
    "Marie",
    "Marieke",
    "Mariella",
    "Marika",
    "Marina",
    "Marisa",
    "Marissa",
    "Marit",
    "Marla",
    "Marleen",
    "Marlen",
    "Marlena",
    "Marlene",
    "Marta",
    "Martha",
    "Mary",
    "Maryam",
    "Mathilda",
    "Mathilde",
    "Matilda",
    "Maxi",
    "Maxima",
    "Maxine",
    "Maya",
    "Mayra",
    "Medina",
    "Medine",
    "Meike",
    "Melanie",
    "Melek",
    "Melike",
    "Melina",
    "Melinda",
    "Melis",
    "Melisa",
    "Melissa",
    "Merle",
    "Merve",
    "Meryem",
    "Mette",
    "Mia",
    "Michaela",
    "Michelle",
    "Mieke",
    "Mila",
    "Milana",
    "Milena",
    "Milla",
    "Mina",
    "Mira",
    "Miray",
    "Miriam",
    "Mirja",
    "Mona",
    "Monique",
    "Nadine",
    "Nadja",
    "Naemi",
    "Nancy",
    "Naomi",
    "Natalia",
    "Natalie",
    "Nathalie",
    "Neele",
    "Nela",
    "Nele",
    "Nelli",
    "Nelly",
    "Nia",
    "Nicole",
    "Nika",
    "Nike",
    "Nikita",
    "Nila",
    "Nina",
    "Nisa",
    "Noemi",
    "Nora",
    "Olivia",
    "Patricia",
    "Patrizia",
    "Paula",
    "Paulina",
    "Pauline",
    "Penelope",
    "Philine",
    "Phoebe",
    "Pia",
    "Rahel",
    "Rania",
    "Rebecca",
    "Rebekka",
    "Riana",
    "Rieke",
    "Rike",
    "Romina",
    "Romy",
    "Ronja",
    "Rosa",
    "Rosalie",
    "Ruby",
    "Sabrina",
    "Sahra",
    "Sally",
    "Salome",
    "Samantha",
    "Samia",
    "Samira",
    "Sandra",
    "Sandy",
    "Sanja",
    "Saphira",
    "Sara",
    "Sarah",
    "Saskia",
    "Selin",
    "Selina",
    "Selma",
    "Sena",
    "Sidney",
    "Sienna",
    "Silja",
    "Sina",
    "Sinja",
    "Smilla",
    "Sofia",
    "Sofie",
    "Sonja",
    "Sophia",
    "Sophie",
    "Soraya",
    "Stefanie",
    "Stella",
    "Stephanie",
    "Stina",
    "Sude",
    "Summer",
    "Susanne",
    "Svea",
    "Svenja",
    "Sydney",
    "Tabea",
    "Talea",
    "Talia",
    "Tamara",
    "Tamia",
    "Tamina",
    "Tanja",
    "Tara",
    "Tarja",
    "Teresa",
    "Tessa",
    "Thalea",
    "Thalia",
    "Thea",
    "Theresa",
    "Tia",
    "Tina",
    "Tomke",
    "Tuana",
    "Valentina",
    "Valeria",
    "Valerie",
    "Vanessa",
    "Vera",
    "Veronika",
    "Victoria",
    "Viktoria",
    "Viola",
    "Vivian",
    "Vivien",
    "Vivienne",
    "Wibke",
    "Wiebke",
    "Xenia",
    "Yara",
    "Yaren",
    "Yasmin",
    "Ylvi",
    "Ylvie",
    "Yvonne",
    "Zara",
    "Zehra",
    "Zeynep",
    "Zoe",
    "Zoey",
    "Zoé"
  ],
  "last_name": [
    "Abel",
    "Abicht",
    "Abraham",
    "Abramovic",
    "Abt",
    "Achilles",
    "Achkinadze",
    "Ackermann",
    "Adam",
    "Adams",
    "Ade",
    "Agostini",
    "Ahlke",
    "Ahrenberg",
    "Ahrens",
    "Aigner",
    "Albert",
    "Albrecht",
    "Alexa",
    "Alexander",
    "Alizadeh",
    "Allgeyer",
    "Amann",
    "Amberg",
    "Anding",
    "Anggreny",
    "Apitz",
    "Arendt",
    "Arens",
    "Arndt",
    "Aryee",
    "Aschenbroich",
    "Assmus",
    "Astafei",
    "Auer",
    "Axmann",
    "Baarck",
    "Bachmann",
    "Badane",
    "Bader",
    "Baganz",
    "Bahl",
    "Bak",
    "Balcer",
    "Balck",
    "Balkow",
    "Balnuweit",
    "Balzer",
    "Banse",
    "Barr",
    "Bartels",
    "Barth",
    "Barylla",
    "Baseda",
    "Battke",
    "Bauer",
    "Bauermeister",
    "Baumann",
    "Baumeister",
    "Bauschinger",
    "Bauschke",
    "Bayer",
    "Beavogui",
    "Beck",
    "Beckel",
    "Becker",
    "Beckmann",
    "Bedewitz",
    "Beele",
    "Beer",
    "Beggerow",
    "Beh",
    "Behr",
    "Behrenbruch",
    "Belz",
    "Bender",
    "Benecke",
    "Benner",
    "Benninger",
    "Benzing",
    "Berends",
    "Berger",
    "Berner",
    "Berning",
    "Bertenbreiter",
    "Best",
    "Bethke",
    "Betz",
    "Beushausen",
    "Beutelspacher",
    "Beyer",
    "Biba",
    "Bichler",
    "Bickel",
    "Biedermann",
    "Bieler",
    "Bielert",
    "Bienasch",
    "Bienias",
    "Biesenbach",
    "Bigdeli",
    "Birkemeyer",
    "Bittner",
    "Blank",
    "Blaschek",
    "Blassneck",
    "Bloch",
    "Blochwitz",
    "Blockhaus",
    "Blum",
    "Blume",
    "Bock",
    "Bode",
    "Bogdashin",
    "Bogenrieder",
    "Bohge",
    "Bolm",
    "Borgschulze",
    "Bork",
    "Bormann",
    "Bornscheuer",
    "Borrmann",
    "Borsch",
    "Boruschewski",
    "Bos",
    "Bosler",
    "Bourrouag",
    "Bouschen",
    "Boxhammer",
    "Boyde",
    "Bozsik",
    "Brand",
    "Brandenburg",
    "Brandis",
    "Brandt",
    "Brauer",
    "Braun",
    "Brehmer",
    "Breitenstein",
    "Bremer",
    "Bremser",
    "Brenner",
    "Brettschneider",
    "Breu",
    "Breuer",
    "Briesenick",
    "Bringmann",
    "Brinkmann",
    "Brix",
    "Broening",
    "Brosch",
    "Bruckmann",
    "Bruder",
    "Bruhns",
    "Brunner",
    "Bruns",
    "Bräutigam",
    "Brömme",
    "Brüggmann",
    "Buchholz",
    "Buchrucker",
    "Buder",
    "Bultmann",
    "Bunjes",
    "Burger",
    "Burghagen",
    "Burkhard",
    "Burkhardt",
    "Burmeister",
    "Busch",
    "Buschbaum",
    "Busemann",
    "Buss",
    "Busse",
    "Bussmann",
    "Byrd",
    "Bäcker",
    "Böhm",
    "Bönisch",
    "Börgeling",
    "Börner",
    "Böttner",
    "Büchele",
    "Bühler",
    "Büker",
    "Büngener",
    "Bürger",
    "Bürklein",
    "Büscher",
    "Büttner",
    "Camara",
    "Carlowitz",
    "Carlsohn",
    "Caspari",
    "Caspers",
    "Chapron",
    "Christ",
    "Cierpinski",
    "Clarius",
    "Cleem",
    "Cleve",
    "Co",
    "Conrad",
    "Cordes",
    "Cornelsen",
    "Cors",
    "Cotthardt",
    "Crews",
    "Cronjäger",
    "Crosskofp",
    "Da",
    "Dahm",
    "Dahmen",
    "Daimer",
    "Damaske",
    "Danneberg",
    "Danner",
    "Daub",
    "Daubner",
    "Daudrich",
    "Dauer",
    "Daum",
    "Dauth",
    "Dautzenberg",
    "De",
    "Decker",
    "Deckert",
    "Deerberg",
    "Dehmel",
    "Deja",
    "Delonge",
    "Demut",
    "Dengler",
    "Denner",
    "Denzinger",
    "Derr",
    "Dertmann",
    "Dethloff",
    "Deuschle",
    "Dieckmann",
    "Diedrich",
    "Diekmann",
    "Dienel",
    "Dies",
    "Dietrich",
    "Dietz",
    "Dietzsch",
    "Diezel",
    "Dilla",
    "Dingelstedt",
    "Dippl",
    "Dittmann",
    "Dittmar",
    "Dittmer",
    "Dix",
    "Dobbrunz",
    "Dobler",
    "Dohring",
    "Dolch",
    "Dold",
    "Dombrowski",
    "Donie",
    "Doskoczynski",
    "Dragu",
    "Drechsler",
    "Drees",
    "Dreher",
    "Dreier",
    "Dreissigacker",
    "Dressler",
    "Drews",
    "Duma",
    "Dutkiewicz",
    "Dyett",
    "Dylus",
    "Dächert",
    "Döbel",
    "Döring",
    "Dörner",
    "Dörre",
    "Dück",
    "Eberhard",
    "Eberhardt",
    "Ecker",
    "Eckhardt",
    "Edorh",
    "Effler",
    "Eggenmueller",
    "Ehm",
    "Ehmann",
    "Ehrig",
    "Eich",
    "Eichmann",
    "Eifert",
    "Einert",
    "Eisenlauer",
    "Ekpo",
    "Elbe",
    "Eleyth",
    "Elss",
    "Emert",
    "Emmelmann",
    "Ender",
    "Engel",
    "Engelen",
    "Engelmann",
    "Eplinius",
    "Erdmann",
    "Erhardt",
    "Erlei",
    "Erm",
    "Ernst",
    "Ertl",
    "Erwes",
    "Esenwein",
    "Esser",
    "Evers",
    "Everts",
    "Ewald",
    "Fahner",
    "Faller",
    "Falter",
    "Farber",
    "Fassbender",
    "Faulhaber",
    "Fehrig",
    "Feld",
    "Felke",
    "Feller",
    "Fenner",
    "Fenske",
    "Feuerbach",
    "Fietz",
    "Figl",
    "Figura",
    "Filipowski",
    "Filsinger",
    "Fincke",
    "Fink",
    "Finke",
    "Fischer",
    "Fitschen",
    "Fleischer",
    "Fleischmann",
    "Floder",
    "Florczak",
    "Flore",
    "Flottmann",
    "Forkel",
    "Forst",
    "Frahmeke",
    "Frank",
    "Franke",
    "Franta",
    "Frantz",
    "Franz",
    "Franzis",
    "Franzmann",
    "Frauen",
    "Frauendorf",
    "Freigang",
    "Freimann",
    "Freimuth",
    "Freisen",
    "Frenzel",
    "Frey",
    "Fricke",
    "Fried",
    "Friedek",
    "Friedenberg",
    "Friedmann",
    "Friedrich",
    "Friess",
    "Frisch",
    "Frohn",
    "Frosch",
    "Fuchs",
    "Fuhlbrügge",
    "Fusenig",
    "Fust",
    "Förster",
    "Gaba",
    "Gabius",
    "Gabler",
    "Gadschiew",
    "Gakstädter",
    "Galander",
    "Gamlin",
    "Gamper",
    "Gangnus",
    "Ganzmann",
    "Garatva",
    "Gast",
    "Gastel",
    "Gatzka",
    "Gauder",
    "Gebhardt",
    "Geese",
    "Gehre",
    "Gehrig",
    "Gehring",
    "Gehrke",
    "Geiger",
    "Geisler",
    "Geissler",
    "Gelling",
    "Gens",
    "Gerbennow",
    "Gerdel",
    "Gerhardt",
    "Gerschler",
    "Gerson",
    "Gesell",
    "Geyer",
    "Ghirmai",
    "Ghosh",
    "Giehl",
    "Gierisch",
    "Giesa",
    "Giesche",
    "Gilde",
    "Glatting",
    "Goebel",
    "Goedicke",
    "Goldbeck",
    "Goldfuss",
    "Goldkamp",
    "Goldkühle",
    "Goller",
    "Golling",
    "Gollnow",
    "Golomski",
    "Gombert",
    "Gotthardt",
    "Gottschalk",
    "Gotz",
    "Goy",
    "Gradzki",
    "Graf",
    "Grams",
    "Grasse",
    "Gratzky",
    "Grau",
    "Greb",
    "Green",
    "Greger",
    "Greithanner",
    "Greschner",
    "Griem",
    "Griese",
    "Grimm",
    "Gromisch",
    "Gross",
    "Grosser",
    "Grossheim",
    "Grosskopf",
    "Grothaus",
    "Grothkopp",
    "Grotke",
    "Grube",
    "Gruber",
    "Grundmann",
    "Gruning",
    "Gruszecki",
    "Gröss",
    "Grötzinger",
    "Grün",
    "Grüner",
    "Gummelt",
    "Gunkel",
    "Gunther",
    "Gutjahr",
    "Gutowicz",
    "Gutschank",
    "Göbel",
    "Göckeritz",
    "Göhler",
    "Görlich",
    "Görmer",
    "Götz",
    "Götzelmann",
    "Güldemeister",
    "Günther",
    "Günz",
    "Gürbig",
    "Haack",
    "Haaf",
    "Habel",
    "Hache",
    "Hackbusch",
    "Hackelbusch",
    "Hadfield",
    "Hadwich",
    "Haferkamp",
    "Hahn",
    "Hajek",
    "Hallmann",
    "Hamann",
    "Hanenberger",
    "Hannecker",
    "Hanniske",
    "Hansen",
    "Hardy",
    "Hargasser",
    "Harms",
    "Harnapp",
    "Harter",
    "Harting",
    "Hartlieb",
    "Hartmann",
    "Hartwig",
    "Hartz",
    "Haschke",
    "Hasler",
    "Hasse",
    "Hassfeld",
    "Haug",
    "Hauke",
    "Haupt",
    "Haverney",
    "Heberstreit",
    "Hechler",
    "Hecht",
    "Heck",
    "Hedermann",
    "Hehl",
    "Heidelmann",
    "Heidler",
    "Heinemann",
    "Heinig",
    "Heinke",
    "Heinrich",
    "Heinze",
    "Heiser",
    "Heist",
    "Hellmann",
    "Helm",
    "Helmke",
    "Helpling",
    "Hengmith",
    "Henkel",
    "Hennes",
    "Henry",
    "Hense",
    "Hensel",
    "Hentel",
    "Hentschel",
    "Hentschke",
    "Hepperle",
    "Herberger",
    "Herbrand",
    "Hering",
    "Hermann",
    "Hermecke",
    "Herms",
    "Herold",
    "Herrmann",
    "Herschmann",
    "Hertel",
    "Herweg",
    "Herwig",
    "Herzenberg",
    "Hess",
    "Hesse",
    "Hessek",
    "Hessler",
    "Hetzler",
    "Heuck",
    "Heydemüller",
    "Hiebl",
    "Hildebrand",
    "Hildenbrand",
    "Hilgendorf",
    "Hillard",
    "Hiller",
    "Hingsen",
    "Hingst",
    "Hinrichs",
    "Hirsch",
    "Hirschberg",
    "Hirt",
    "Hodea",
    "Hoffman",
    "Hoffmann",
    "Hofmann",
    "Hohenberger",
    "Hohl",
    "Hohn",
    "Hohnheiser",
    "Hold",
    "Holdt",
    "Holinski",
    "Holl",
    "Holtfreter",
    "Holz",
    "Holzdeppe",
    "Holzner",
    "Hommel",
    "Honz",
    "Hooss",
    "Hoppe",
    "Horak",
    "Horn",
    "Horna",
    "Hornung",
    "Hort",
    "Howard",
    "Huber",
    "Huckestein",
    "Hudak",
    "Huebel",
    "Hugo",
    "Huhn",
    "Hujo",
    "Huke",
    "Huls",
    "Humbert",
    "Huneke",
    "Huth",
    "Häber",
    "Häfner",
    "Höcke",
    "Höft",
    "Höhne",
    "Hönig",
    "Hördt",
    "Hübenbecker",
    "Hübl",
    "Hübner",
    "Hügel",
    "Hüttcher",
    "Hütter",
    "Ibe",
    "Ihly",
    "Illing",
    "Isak",
    "Isekenmeier",
    "Itt",
    "Jacob",
    "Jacobs",
    "Jagusch",
    "Jahn",
    "Jahnke",
    "Jakobs",
    "Jakubczyk",
    "Jambor",
    "Jamrozy",
    "Jander",
    "Janich",
    "Janke",
    "Jansen",
    "Jarets",
    "Jaros",
    "Jasinski",
    "Jasper",
    "Jegorov",
    "Jellinghaus",
    "Jeorga",
    "Jerschabek",
    "Jess",
    "John",
    "Jonas",
    "Jossa",
    "Jucken",
    "Jung",
    "Jungbluth",
    "Jungton",
    "Just",
    "Jürgens",
    "Kaczmarek",
    "Kaesmacher",
    "Kahl",
    "Kahlert",
    "Kahles",
    "Kahlmeyer",
    "Kaiser",
    "Kalinowski",
    "Kallabis",
    "Kallensee",
    "Kampf",
    "Kampschulte",
    "Kappe",
    "Kappler",
    "Karhoff",
    "Karrass",
    "Karst",
    "Karsten",
    "Karus",
    "Kass",
    "Kasten",
    "Kastner",
    "Katzinski",
    "Kaufmann",
    "Kaul",
    "Kausemann",
    "Kawohl",
    "Kazmarek",
    "Kedzierski",
    "Keil",
    "Keiner",
    "Keller",
    "Kelm",
    "Kempe",
    "Kemper",
    "Kempter",
    "Kerl",
    "Kern",
    "Kesselring",
    "Kesselschläger",
    "Kette",
    "Kettenis",
    "Keutel",
    "Kick",
    "Kiessling",
    "Kinadeter",
    "Kinzel",
    "Kinzy",
    "Kirch",
    "Kirst",
    "Kisabaka",
    "Klaas",
    "Klabuhn",
    "Klapper",
    "Klauder",
    "Klaus",
    "Kleeberg",
    "Kleiber",
    "Klein",
    "Kleinert",
    "Kleininger",
    "Kleinmann",
    "Kleinsteuber",
    "Kleiss",
    "Klemme",
    "Klimczak",
    "Klinger",
    "Klink",
    "Klopsch",
    "Klose",
    "Kloss",
    "Kluge",
    "Kluwe",
    "Knabe",
    "Kneifel",
    "Knetsch",
    "Knies",
    "Knippel",
    "Knobel",
    "Knoblich",
    "Knoll",
    "Knorr",
    "Knorscheidt",
    "Knut",
    "Kobs",
    "Koch",
    "Kochan",
    "Kock",
    "Koczulla",
    "Koderisch",
    "Koehl",
    "Koehler",
    "Koenig",
    "Koester",
    "Kofferschlager",
    "Koha",
    "Kohle",
    "Kohlmann",
    "Kohnle",
    "Kohrt",
    "Koj",
    "Kolb",
    "Koleiski",
    "Kolokas",
    "Komoll",
    "Konieczny",
    "Konig",
    "Konow",
    "Konya",
    "Koob",
    "Kopf",
    "Kosenkow",
    "Koster",
    "Koszewski",
    "Koubaa",
    "Kovacs",
    "Kowalick",
    "Kowalinski",
    "Kozakiewicz",
    "Krabbe",
    "Kraft",
    "Kral",
    "Kramer",
    "Krauel",
    "Kraus",
    "Krause",
    "Krauspe",
    "Kreb",
    "Krebs",
    "Kreissig",
    "Kresse",
    "Kreutz",
    "Krieger",
    "Krippner",
    "Krodinger",
    "Krohn",
    "Krol",
    "Kron",
    "Krueger",
    "Krug",
    "Kruger",
    "Krull",
    "Kruschinski",
    "Krämer",
    "Kröckert",
    "Kröger",
    "Krüger",
    "Kubera",
    "Kufahl",
    "Kuhlee",
    "Kuhnen",
    "Kulimann",
    "Kulma",
    "Kumbernuss",
    "Kummle",
    "Kunz",
    "Kupfer",
    "Kupprion",
    "Kuprion",
    "Kurnicki",
    "Kurrat",
    "Kurschilgen",
    "Kuschewitz",
    "Kuschmann",
    "Kuske",
    "Kustermann",
    "Kutscherauer",
    "Kutzner",
    "Kwadwo",
    "Kähler",
    "Käther",
    "Köhler",
    "Köhrbrück",
    "Köhre",
    "Kölotzei",
    "König",
    "Köpernick",
    "Köseoglu",
    "Kúhn",
    "Kúhnert",
    "Kühn",
    "Kühnel",
    "Kühnemund",
    "Kühnert",
    "Kühnke",
    "Küsters",
    "Küter",
    "Laack",
    "Lack",
    "Ladewig",
    "Lakomy",
    "Lammert",
    "Lamos",
    "Landmann",
    "Lang",
    "Lange",
    "Langfeld",
    "Langhirt",
    "Lanig",
    "Lauckner",
    "Lauinger",
    "Laurén",
    "Lausecker",
    "Laux",
    "Laws",
    "Lax",
    "Leberer",
    "Lehmann",
    "Lehner",
    "Leibold",
    "Leide",
    "Leimbach",
    "Leipold",
    "Leist",
    "Leiter",
    "Leiteritz",
    "Leitheim",
    "Leiwesmeier",
    "Lenfers",
    "Lenk",
    "Lenz",
    "Lenzen",
    "Leo",
    "Lepthin",
    "Lesch",
    "Leschnik",
    "Letzelter",
    "Lewin",
    "Lewke",
    "Leyckes",
    "Lg",
    "Lichtenfeld",
    "Lichtenhagen",
    "Lichtl",
    "Liebach",
    "Liebe",
    "Liebich",
    "Liebold",
    "Lieder",
    "Lienshöft",
    "Linden",
    "Lindenberg",
    "Lindenmayer",
    "Lindner",
    "Linke",
    "Linnenbaum",
    "Lippe",
    "Lipske",
    "Lipus",
    "Lischka",
    "Lobinger",
    "Logsch",
    "Lohmann",
    "Lohre",
    "Lohse",
    "Lokar",
    "Loogen",
    "Lorenz",
    "Losch",
    "Loska",
    "Lott",
    "Loy",
    "Lubina",
    "Ludolf",
    "Lufft",
    "Lukoschek",
    "Lutje",
    "Lutz",
    "Löser",
    "Löwa",
    "Lübke",
    "Maak",
    "Maczey",
    "Madetzky",
    "Madubuko",
    "Mai",
    "Maier",
    "Maisch",
    "Malek",
    "Malkus",
    "Mallmann",
    "Malucha",
    "Manns",
    "Manz",
    "Marahrens",
    "Marchewski",
    "Margis",
    "Markowski",
    "Marl",
    "Marner",
    "Marquart",
    "Marschek",
    "Martel",
    "Marten",
    "Martin",
    "Marx",
    "Marxen",
    "Mathes",
    "Mathies",
    "Mathiszik",
    "Matschke",
    "Mattern",
    "Matthes",
    "Matula",
    "Mau",
    "Maurer",
    "Mauroff",
    "May",
    "Maybach",
    "Mayer",
    "Mebold",
    "Mehl",
    "Mehlhorn",
    "Mehlorn",
    "Meier",
    "Meisch",
    "Meissner",
    "Meloni",
    "Melzer",
    "Menga",
    "Menne",
    "Mensah",
    "Mensing",
    "Merkel",
    "Merseburg",
    "Mertens",
    "Mesloh",
    "Metzger",
    "Metzner",
    "Mewes",
    "Meyer",
    "Michallek",
    "Michel",
    "Mielke",
    "Mikitenko",
    "Milde",
    "Minah",
    "Mintzlaff",
    "Mockenhaupt",
    "Moede",
    "Moedl",
    "Moeller",
    "Moguenara",
    "Mohr",
    "Mohrhard",
    "Molitor",
    "Moll",
    "Moller",
    "Molzan",
    "Montag",
    "Moormann",
    "Mordhorst",
    "Morgenstern",
    "Morhelfer",
    "Moritz",
    "Moser",
    "Motchebon",
    "Motzenbbäcker",
    "Mrugalla",
    "Muckenthaler",
    "Mues",
    "Muller",
    "Mulrain",
    "Mächtig",
    "Mäder",
    "Möcks",
    "Mögenburg",
    "Möhsner",
    "Möldner",
    "Möllenbeck",
    "Möller",
    "Möllinger",
    "Mörsch",
    "Mühleis",
    "Müller",
    "Münch",
    "Nabein",
    "Nabow",
    "Nagel",
    "Nannen",
    "Nastvogel",
    "Nau",
    "Naubert",
    "Naumann",
    "Ne",
    "Neimke",
    "Nerius",
    "Neubauer",
    "Neubert",
    "Neuendorf",
    "Neumair",
    "Neumann",
    "Neupert",
    "Neurohr",
    "Neuschwander",
    "Newton",
    "Ney",
    "Nicolay",
    "Niedermeier",
    "Nieklauson",
    "Niklaus",
    "Nitzsche",
    "Noack",
    "Nodler",
    "Nolte",
    "Normann",
    "Norris",
    "Northoff",
    "Nowak",
    "Nussbeck",
    "Nwachukwu",
    "Nytra",
    "Nöh",
    "Oberem",
    "Obergföll",
    "Obermaier",
    "Ochs",
    "Oeser",
    "Olbrich",
    "Onnen",
    "Ophey",
    "Oppong",
    "Orth",
    "Orthmann",
    "Oschkenat",
    "Osei",
    "Osenberg",
    "Ostendarp",
    "Ostwald",
    "Otte",
    "Otto",
    "Paesler",
    "Pajonk",
    "Pallentin",
    "Panzig",
    "Paschke",
    "Patzwahl",
    "Paukner",
    "Peselman",
    "Peter",
    "Peters",
    "Petzold",
    "Pfeiffer",
    "Pfennig",
    "Pfersich",
    "Pfingsten",
    "Pflieger",
    "Pflügner",
    "Philipp",
    "Pichlmaier",
    "Piesker",
    "Pietsch",
    "Pingpank",
    "Pinnock",
    "Pippig",
    "Pitschugin",
    "Plank",
    "Plass",
    "Platzer",
    "Plauk",
    "Plautz",
    "Pletsch",
    "Plotzitzka",
    "Poehn",
    "Poeschl",
    "Pogorzelski",
    "Pohl",
    "Pohland",
    "Pohle",
    "Polifka",
    "Polizzi",
    "Pollmächer",
    "Pomp",
    "Ponitzsch",
    "Porsche",
    "Porth",
    "Poschmann",
    "Poser",
    "Pottel",
    "Prah",
    "Prange",
    "Prediger",
    "Pressler",
    "Preuk",
    "Preuss",
    "Prey",
    "Priemer",
    "Proske",
    "Pusch",
    "Pöche",
    "Pöge",
    "Raabe",
    "Rabenstein",
    "Rach",
    "Radtke",
    "Rahn",
    "Ranftl",
    "Rangen",
    "Ranz",
    "Rapp",
    "Rath",
    "Rau",
    "Raubuch",
    "Raukuc",
    "Rautenkranz",
    "Rehwagen",
    "Reiber",
    "Reichardt",
    "Reichel",
    "Reichling",
    "Reif",
    "Reifenrath",
    "Reimann",
    "Reinberg",
    "Reinelt",
    "Reinhardt",
    "Reinke",
    "Reitze",
    "Renk",
    "Rentz",
    "Renz",
    "Reppin",
    "Restle",
    "Restorff",
    "Retzke",
    "Reuber",
    "Reumann",
    "Reus",
    "Reuss",
    "Reusse",
    "Rheder",
    "Rhoden",
    "Richards",
    "Richter",
    "Riedel",
    "Riediger",
    "Rieger",
    "Riekmann",
    "Riepl",
    "Riermeier",
    "Riester",
    "Riethmüller",
    "Rietmüller",
    "Rietscher",
    "Ringel",
    "Ringer",
    "Rink",
    "Ripken",
    "Ritosek",
    "Ritschel",
    "Ritter",
    "Rittweg",
    "Ritz",
    "Roba",
    "Rockmeier",
    "Rodehau",
    "Rodowski",
    "Roecker",
    "Roggatz",
    "Rohländer",
    "Rohrer",
    "Rokossa",
    "Roleder",
    "Roloff",
    "Roos",
    "Rosbach",
    "Roschinsky",
    "Rose",
    "Rosenauer",
    "Rosenbauer",
    "Rosenthal",
    "Rosksch",
    "Rossberg",
    "Rossler",
    "Roth",
    "Rother",
    "Ruch",
    "Ruckdeschel",
    "Rumpf",
    "Rupprecht",
    "Ruth",
    "Ryjikh",
    "Ryzih",
    "Rädler",
    "Räntsch",
    "Rödiger",
    "Röse",
    "Röttger",
    "Rücker",
    "Rüdiger",
    "Rüter",
    "Sachse",
    "Sack",
    "Saflanis",
    "Sagafe",
    "Sagonas",
    "Sahner",
    "Saile",
    "Sailer",
    "Salow",
    "Salzer",
    "Salzmann",
    "Sammert",
    "Sander",
    "Sarvari",
    "Sattelmaier",
    "Sauer",
    "Sauerland",
    "Saumweber",
    "Savoia",
    "Scc",
    "Schacht",
    "Schaefer",
    "Schaffarzik",
    "Schahbasian",
    "Scharf",
    "Schedler",
    "Scheer",
    "Schelk",
    "Schellenbeck",
    "Schembera",
    "Schenk",
    "Scherbarth",
    "Scherer",
    "Schersing",
    "Scherz",
    "Scheurer",
    "Scheuring",
    "Scheytt",
    "Schielke",
    "Schieskow",
    "Schildhauer",
    "Schilling",
    "Schima",
    "Schimmer",
    "Schindzielorz",
    "Schirmer",
    "Schirrmeister",
    "Schlachter",
    "Schlangen",
    "Schlawitz",
    "Schlechtweg",
    "Schley",
    "Schlicht",
    "Schlitzer",
    "Schmalzle",
    "Schmid",
    "Schmidt",
    "Schmidtchen",
    "Schmitt",
    "Schmitz",
    "Schmuhl",
    "Schneider",
    "Schnelting",
    "Schnieder",
    "Schniedermeier",
    "Schnürer",
    "Schoberg",
    "Scholz",
    "Schonberg",
    "Schondelmaier",
    "Schorr",
    "Schott",
    "Schottmann",
    "Schouren",
    "Schrader",
    "Schramm",
    "Schreck",
    "Schreiber",
    "Schreiner",
    "Schreiter",
    "Schroder",
    "Schröder",
    "Schuermann",
    "Schuff",
    "Schuhaj",
    "Schuldt",
    "Schult",
    "Schulte",
    "Schultz",
    "Schultze",
    "Schulz",
    "Schulze",
    "Schumacher",
    "Schumann",
    "Schupp",
    "Schuri",
    "Schuster",
    "Schwab",
    "Schwalm",
    "Schwanbeck",
    "Schwandke",
    "Schwanitz",
    "Schwarthoff",
    "Schwartz",
    "Schwarz",
    "Schwarzer",
    "Schwarzkopf",
    "Schwarzmeier",
    "Schwatlo",
    "Schweisfurth",
    "Schwennen",
    "Schwerdtner",
    "Schwidde",
    "Schwirkschlies",
    "Schwuchow",
    "Schäfer",
    "Schäffel",
    "Schäffer",
    "Schäning",
    "Schöckel",
    "Schönball",
    "Schönbeck",
    "Schönberg",
    "Schönebeck",
    "Schönenberger",
    "Schönfeld",
    "Schönherr",
    "Schönlebe",
    "Schötz",
    "Schüler",
    "Schüppel",
    "Schütz",
    "Schütze",
    "Seeger",
    "Seelig",
    "Sehls",
    "Seibold",
    "Seidel",
    "Seiders",
    "Seigel",
    "Seiler",
    "Seitz",
    "Semisch",
    "Senkel",
    "Sewald",
    "Siebel",
    "Siebert",
    "Siegling",
    "Sielemann",
    "Siemon",
    "Siener",
    "Sievers",
    "Siewert",
    "Sihler",
    "Sillah",
    "Simon",
    "Sinnhuber",
    "Sischka",
    "Skibicki",
    "Sladek",
    "Slotta",
    "Smieja",
    "Soboll",
    "Sokolowski",
    "Soller",
    "Sollner",
    "Sommer",
    "Somssich",
    "Sonn",
    "Sonnabend",
    "Spahn",
    "Spank",
    "Spelmeyer",
    "Spiegelburg",
    "Spielvogel",
    "Spinner",
    "Spitzmüller",
    "Splinter",
    "Sporrer",
    "Sprenger",
    "Spöttel",
    "Stahl",
    "Stang",
    "Stanger",
    "Stauss",
    "Steding",
    "Steffen",
    "Steffny",
    "Steidl",
    "Steigauf",
    "Stein",
    "Steinecke",
    "Steinert",
    "Steinkamp",
    "Steinmetz",
    "Stelkens",
    "Stengel",
    "Stengl",
    "Stenzel",
    "Stepanov",
    "Stephan",
    "Stern",
    "Steuk",
    "Stief",
    "Stifel",
    "Stoll",
    "Stolle",
    "Stolz",
    "Storl",
    "Storp",
    "Stoutjesdijk",
    "Stratmann",
    "Straub",
    "Strausa",
    "Streck",
    "Streese",
    "Strege",
    "Streit",
    "Streller",
    "Strieder",
    "Striezel",
    "Strogies",
    "Strohschank",
    "Strunz",
    "Strutz",
    "Stube",
    "Stöckert",
    "Stöppler",
    "Stöwer",
    "Stürmer",
    "Suffa",
    "Sujew",
    "Sussmann",
    "Suthe",
    "Sutschet",
    "Swillims",
    "Szendrei",
    "Sören",
    "Sürth",
    "Tafelmeier",
    "Tang",
    "Tasche",
    "Taufratshofer",
    "Tegethof",
    "Teichmann",
    "Tepper",
    "Terheiden",
    "Terlecki",
    "Teufel",
    "Theele",
    "Thieke",
    "Thimm",
    "Thiomas",
    "Thomas",
    "Thriene",
    "Thränhardt",
    "Thust",
    "Thyssen",
    "Thöne",
    "Tidow",
    "Tiedtke",
    "Tietze",
    "Tilgner",
    "Tillack",
    "Timmermann",
    "Tischler",
    "Tischmann",
    "Tittman",
    "Tivontschik",
    "Tonat",
    "Tonn",
    "Trampeli",
    "Trauth",
    "Trautmann",
    "Travan",
    "Treff",
    "Tremmel",
    "Tress",
    "Tsamonikian",
    "Tschiers",
    "Tschirch",
    "Tuch",
    "Tucholke",
    "Tudow",
    "Tuschmo",
    "Tächl",
    "Többen",
    "Töpfer",
    "Uhlemann",
    "Uhlig",
    "Uhrig",
    "Uibel",
    "Uliczka",
    "Ullmann",
    "Ullrich",
    "Umbach",
    "Umlauft",
    "Umminger",
    "Unger",
    "Unterpaintner",
    "Urban",
    "Urbaniak",
    "Urbansky",
    "Urhig",
    "Vahlensieck",
    "Van",
    "Vangermain",
    "Vater",
    "Venghaus",
    "Verniest",
    "Verzi",
    "Vey",
    "Viellehner",
    "Vieweg",
    "Voelkel",
    "Vogel",
    "Vogelgsang",
    "Vogt",
    "Voigt",
    "Vokuhl",
    "Volk",
    "Volker",
    "Volkmann",
    "Von",
    "Vona",
    "Vontein",
    "Wachenbrunner",
    "Wachtel",
    "Wagner",
    "Waibel",
    "Wakan",
    "Waldmann",
    "Wallner",
    "Wallstab",
    "Walter",
    "Walther",
    "Walton",
    "Walz",
    "Wanner",
    "Wartenberg",
    "Waschbüsch",
    "Wassilew",
    "Wassiluk",
    "Weber",
    "Wehrsen",
    "Weidlich",
    "Weidner",
    "Weigel",
    "Weight",
    "Weiler",
    "Weimer",
    "Weis",
    "Weiss",
    "Weller",
    "Welsch",
    "Welz",
    "Welzel",
    "Weniger",
    "Wenk",
    "Werle",
    "Werner",
    "Werrmann",
    "Wessel",
    "Wessinghage",
    "Weyel",
    "Wezel",
    "Wichmann",
    "Wickert",
    "Wiebe",
    "Wiechmann",
    "Wiegelmann",
    "Wierig",
    "Wiese",
    "Wieser",
    "Wilhelm",
    "Wilky",
    "Will",
    "Willwacher",
    "Wilts",
    "Wimmer",
    "Winkelmann",
    "Winkler",
    "Winter",
    "Wischek",
    "Wischer",
    "Wissing",
    "Wittich",
    "Wittl",
    "Wolf",
    "Wolfarth",
    "Wolff",
    "Wollenberg",
    "Wollmann",
    "Woytkowska",
    "Wujak",
    "Wurm",
    "Wyludda",
    "Wölpert",
    "Wöschler",
    "Wühn",
    "Wünsche",
    "Zach",
    "Zaczkiewicz",
    "Zahn",
    "Zaituc",
    "Zandt",
    "Zanner",
    "Zapletal",
    "Zauber",
    "Zeidler",
    "Zekl",
    "Zender",
    "Zeuch",
    "Zeyen",
    "Zeyhle",
    "Ziegler",
    "Zimanyi",
    "Zimmer",
    "Zimmermann",
    "Zinser",
    "Zintl",
    "Zipp",
    "Zipse",
    "Zschunke",
    "Zuber",
    "Zwiener",
    "Zümsande",
    "Östringer",
    "Überacker"
  ],
  "prefix": [
    "Dr.",
    "Prof. Dr."
  ],
  "nobility_title_prefix": [
    "zu",
    "von",
    "vom",
    "von der"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{nobility_title_prefix} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
de_AT.phone_number = {
  "formats": [
    "01 #######",
    "01#######",
    "+43-1-#######",
    "+431#######",
    "0#### ####",
    "0#########",
    "+43-####-####",
    "+43 ########"
  ]
};
de_AT.cell_phone = {
  "formats": [
    "+43-6##-#######",
    "06##-########",
    "+436#########",
    "06##########"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/de_CH.js":[function(require,module,exports){
var de_CH = {};
module["exports"] = de_CH;
de_CH.title = "German (Switzerland)";
de_CH.address = {
  "country_code": [
    "CH",
    "CH",
    "CH",
    "DE",
    "AT",
    "US",
    "LI",
    "US",
    "HK",
    "VN"
  ],
  "postcode": [
    "1###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###",
    "8###",
    "9###"
  ],
  "default_country": [
    "Schweiz"
  ]
};
de_CH.company = {
  "suffix": [
    "AG",
    "GmbH",
    "und Söhne",
    "und Partner",
    "& Co.",
    "Gruppe",
    "LLC",
    "Inc."
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ]
};
de_CH.internet = {
  "domain_suffix": [
    "com",
    "net",
    "biz",
    "ch",
    "de",
    "li",
    "at",
    "ch",
    "ch"
  ]
};
de_CH.phone_number = {
  "formats": [
    "0800 ### ###",
    "0800 ## ## ##",
    "0## ### ## ##",
    "0## ### ## ##",
    "+41 ## ### ## ##",
    "0900 ### ###",
    "076 ### ## ##",
    "+4178 ### ## ##",
    "0041 79 ### ## ##"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en.js":[function(require,module,exports){
var en = {};
module["exports"] = en;
en.title = "English";
en.separator = " & ";
en.address = {
  "city_prefix": [
    "North",
    "East",
    "West",
    "South",
    "New",
    "Lake",
    "Port"
  ],
  "city_suffix": [
    "town",
    "ton",
    "land",
    "ville",
    "berg",
    "burgh",
    "borough",
    "bury",
    "view",
    "port",
    "mouth",
    "stad",
    "furt",
    "chester",
    "mouth",
    "fort",
    "haven",
    "side",
    "shire"
  ],
  // TODO: get common County names in America and populate here
  "county": [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire"
  ],
  "country": [
    "Afghanistan",
    "Albania",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarctica (the territory South of 60 deg S)",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Bouvet Island (Bouvetoya)",
    "Brazil",
    "British Indian Ocean Territory (Chagos Archipelago)",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cambodia",
    "Cameroon",
    "Canada",
    "Cape Verde",
    "Cayman Islands",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Christmas Island",
    "Cocos (Keeling) Islands",
    "Colombia",
    "Comoros",
    "Congo",
    "Congo",
    "Cook Islands",
    "Costa Rica",
    "Cote d'Ivoire",
    "Croatia",
    "Cuba",
    "Cyprus",
    "Czech Republic",
    "Denmark",
    "Djibouti",
    "Dominica",
    "Dominican Republic",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Equatorial Guinea",
    "Eritrea",
    "Estonia",
    "Ethiopia",
    "Faroe Islands",
    "Falkland Islands (Malvinas)",
    "Fiji",
    "Finland",
    "France",
    "French Guiana",
    "French Polynesia",
    "French Southern Territories",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Holy See (Vatican City State)",
    "Honduras",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Ireland",
    "Isle of Man",
    "Israel",
    "Italy",
    "Jamaica",
    "Japan",
    "Jersey",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Democratic People's Republic of Korea",
    "Republic of Korea",
    "Kuwait",
    "Kyrgyz Republic",
    "Lao People's Democratic Republic",
    "Latvia",
    "Lebanon",
    "Lesotho",
    "Liberia",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands Antilles",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestinian Territory",
    "Panama",
    "Papua New Guinea",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn Islands",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Reunion",
    "Romania",
    "Russian Federation",
    "Rwanda",
    "Saint Barthelemy",
    "Saint Helena",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia (Slovak Republic)",
    "Slovenia",
    "Solomon Islands",
    "Somalia",
    "South Africa",
    "South Georgia and the South Sandwich Islands",
    "Spain",
    "Sri Lanka",
    "Sudan",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Syrian Arab Republic",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad and Tobago",
    "Tunisia",
    "Turkey",
    "Turkmenistan",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States of America",
    "United States Minor Outlying Islands",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Islands, British",
    "Virgin Islands, U.S.",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ],
  "country_code": [
    "AD",
    "AE",
    "AF",
    "AG",
    "AI",
    "AL",
    "AM",
    "AO",
    "AQ",
    "AR",
    "AS",
    "AT",
    "AU",
    "AW",
    "AX",
    "AZ",
    "BA",
    "BB",
    "BD",
    "BE",
    "BF",
    "BG",
    "BH",
    "BI",
    "BJ",
    "BL",
    "BM",
    "BN",
    "BO",
    "BQ",
    "BQ",
    "BR",
    "BS",
    "BT",
    "BV",
    "BW",
    "BY",
    "BZ",
    "CA",
    "CC",
    "CD",
    "CF",
    "CG",
    "CH",
    "CI",
    "CK",
    "CL",
    "CM",
    "CN",
    "CO",
    "CR",
    "CU",
    "CV",
    "CW",
    "CX",
    "CY",
    "CZ",
    "DE",
    "DJ",
    "DK",
    "DM",
    "DO",
    "DZ",
    "EC",
    "EE",
    "EG",
    "EH",
    "ER",
    "ES",
    "ET",
    "FI",
    "FJ",
    "FK",
    "FM",
    "FO",
    "FR",
    "GA",
    "GB",
    "GD",
    "GE",
    "GF",
    "GG",
    "GH",
    "GI",
    "GL",
    "GM",
    "GN",
    "GP",
    "GQ",
    "GR",
    "GS",
    "GT",
    "GU",
    "GW",
    "GY",
    "HK",
    "HM",
    "HN",
    "HR",
    "HT",
    "HU",
    "ID",
    "IE",
    "IL",
    "IM",
    "IN",
    "IO",
    "IQ",
    "IR",
    "IS",
    "IT",
    "JE",
    "JM",
    "JO",
    "JP",
    "KE",
    "KG",
    "KH",
    "KI",
    "KM",
    "KN",
    "KP",
    "KR",
    "KW",
    "KY",
    "KZ",
    "LA",
    "LB",
    "LC",
    "LI",
    "LK",
    "LR",
    "LS",
    "LT",
    "LU",
    "LV",
    "LY",
    "MA",
    "MC",
    "MD",
    "ME",
    "MF",
    "MG",
    "MH",
    "MK",
    "ML",
    "MM",
    "MN",
    "MO",
    "MP",
    "MQ",
    "MR",
    "MS",
    "MT",
    "MU",
    "MV",
    "MW",
    "MX",
    "MY",
    "MZ",
    "NA",
    "NC",
    "NE",
    "NF",
    "NG",
    "NI",
    "NL",
    "NO",
    "NP",
    "NR",
    "NU",
    "NZ",
    "OM",
    "PA",
    "PE",
    "PF",
    "PG",
    "PH",
    "PK",
    "PL",
    "PM",
    "PN",
    "PR",
    "PS",
    "PT",
    "PW",
    "PY",
    "QA",
    "RE",
    "RO",
    "RS",
    "RU",
    "RW",
    "SA",
    "SB",
    "SC",
    "SD",
    "SE",
    "SG",
    "SH",
    "SI",
    "SJ",
    "SK",
    "SL",
    "SM",
    "SN",
    "SO",
    "SR",
    "SS",
    "ST",
    "SV",
    "SX",
    "SY",
    "SZ",
    "TC",
    "TD",
    "TF",
    "TG",
    "TH",
    "TJ",
    "TK",
    "TL",
    "TM",
    "TN",
    "TO",
    "TR",
    "TT",
    "TV",
    "TW",
    "TZ",
    "UA",
    "UG",
    "UM",
    "US",
    "UY",
    "UZ",
    "VA",
    "VC",
    "VE",
    "VG",
    "VI",
    "VN",
    "VU",
    "WF",
    "WS",
    "YE",
    "YT",
    "ZA",
    "ZM",
    "ZW"
  ],
  "building_number": [
    "#####",
    "####",
    "###"
  ],
  "street_suffix": [
    "Alley",
    "Avenue",
    "Branch",
    "Bridge",
    "Brook",
    "Brooks",
    "Burg",
    "Burgs",
    "Bypass",
    "Camp",
    "Canyon",
    "Cape",
    "Causeway",
    "Center",
    "Centers",
    "Circle",
    "Circles",
    "Cliff",
    "Cliffs",
    "Club",
    "Common",
    "Corner",
    "Corners",
    "Course",
    "Court",
    "Courts",
    "Cove",
    "Coves",
    "Creek",
    "Crescent",
    "Crest",
    "Crossing",
    "Crossroad",
    "Curve",
    "Dale",
    "Dam",
    "Divide",
    "Drive",
    "Drive",
    "Drives",
    "Estate",
    "Estates",
    "Expressway",
    "Extension",
    "Extensions",
    "Fall",
    "Falls",
    "Ferry",
    "Field",
    "Fields",
    "Flat",
    "Flats",
    "Ford",
    "Fords",
    "Forest",
    "Forge",
    "Forges",
    "Fork",
    "Forks",
    "Fort",
    "Freeway",
    "Garden",
    "Gardens",
    "Gateway",
    "Glen",
    "Glens",
    "Green",
    "Greens",
    "Grove",
    "Groves",
    "Harbor",
    "Harbors",
    "Haven",
    "Heights",
    "Highway",
    "Hill",
    "Hills",
    "Hollow",
    "Inlet",
    "Inlet",
    "Island",
    "Island",
    "Islands",
    "Islands",
    "Isle",
    "Isle",
    "Junction",
    "Junctions",
    "Key",
    "Keys",
    "Knoll",
    "Knolls",
    "Lake",
    "Lakes",
    "Land",
    "Landing",
    "Lane",
    "Light",
    "Lights",
    "Loaf",
    "Lock",
    "Locks",
    "Locks",
    "Lodge",
    "Lodge",
    "Loop",
    "Mall",
    "Manor",
    "Manors",
    "Meadow",
    "Meadows",
    "Mews",
    "Mill",
    "Mills",
    "Mission",
    "Mission",
    "Motorway",
    "Mount",
    "Mountain",
    "Mountain",
    "Mountains",
    "Mountains",
    "Neck",
    "Orchard",
    "Oval",
    "Overpass",
    "Park",
    "Parks",
    "Parkway",
    "Parkways",
    "Pass",
    "Passage",
    "Path",
    "Pike",
    "Pine",
    "Pines",
    "Place",
    "Plain",
    "Plains",
    "Plains",
    "Plaza",
    "Plaza",
    "Point",
    "Points",
    "Port",
    "Port",
    "Ports",
    "Ports",
    "Prairie",
    "Prairie",
    "Radial",
    "Ramp",
    "Ranch",
    "Rapid",
    "Rapids",
    "Rest",
    "Ridge",
    "Ridges",
    "River",
    "Road",
    "Road",
    "Roads",
    "Roads",
    "Route",
    "Row",
    "Rue",
    "Run",
    "Shoal",
    "Shoals",
    "Shore",
    "Shores",
    "Skyway",
    "Spring",
    "Springs",
    "Springs",
    "Spur",
    "Spurs",
    "Square",
    "Square",
    "Squares",
    "Squares",
    "Station",
    "Station",
    "Stravenue",
    "Stravenue",
    "Stream",
    "Stream",
    "Street",
    "Street",
    "Streets",
    "Summit",
    "Summit",
    "Terrace",
    "Throughway",
    "Trace",
    "Track",
    "Trafficway",
    "Trail",
    "Trail",
    "Tunnel",
    "Tunnel",
    "Turnpike",
    "Turnpike",
    "Underpass",
    "Union",
    "Unions",
    "Valley",
    "Valleys",
    "Via",
    "Viaduct",
    "View",
    "Views",
    "Village",
    "Village",
    "Villages",
    "Ville",
    "Vista",
    "Vista",
    "Walk",
    "Walks",
    "Wall",
    "Way",
    "Ways",
    "Well",
    "Wells"
  ],
  "secondary_address": [
    "Apt. ###",
    "Suite ###"
  ],
  "postcode": [
    "#####",
    "#####-####"
  ],
  "postcode_by_state": [
    "#####",
    "#####-####"
  ],
  "state": [
    "Alabama",
    "Alaska",
    "Arizona",
    "Arkansas",
    "California",
    "Colorado",
    "Connecticut",
    "Delaware",
    "Florida",
    "Georgia",
    "Hawaii",
    "Idaho",
    "Illinois",
    "Indiana",
    "Iowa",
    "Kansas",
    "Kentucky",
    "Louisiana",
    "Maine",
    "Maryland",
    "Massachusetts",
    "Michigan",
    "Minnesota",
    "Mississippi",
    "Missouri",
    "Montana",
    "Nebraska",
    "Nevada",
    "New Hampshire",
    "New Jersey",
    "New Mexico",
    "New York",
    "North Carolina",
    "North Dakota",
    "Ohio",
    "Oklahoma",
    "Oregon",
    "Pennsylvania",
    "Rhode Island",
    "South Carolina",
    "South Dakota",
    "Tennessee",
    "Texas",
    "Utah",
    "Vermont",
    "Virginia",
    "Washington",
    "West Virginia",
    "Wisconsin",
    "Wyoming"
  ],
  "state_abbr": [
    "AL",
    "AK",
    "AZ",
    "AR",
    "CA",
    "CO",
    "CT",
    "DE",
    "FL",
    "GA",
    "HI",
    "ID",
    "IL",
    "IN",
    "IA",
    "KS",
    "KY",
    "LA",
    "ME",
    "MD",
    "MA",
    "MI",
    "MN",
    "MS",
    "MO",
    "MT",
    "NE",
    "NV",
    "NH",
    "NJ",
    "NM",
    "NY",
    "NC",
    "ND",
    "OH",
    "OK",
    "OR",
    "PA",
    "RI",
    "SC",
    "SD",
    "TN",
    "TX",
    "UT",
    "VT",
    "VA",
    "WA",
    "WV",
    "WI",
    "WY"
  ],
  "time_zone": [
    "Pacific/Midway",
    "Pacific/Pago_Pago",
    "Pacific/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europe/Dublin",
    "Europe/London",
    "Europe/Lisbon",
    "Europe/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europe/Belgrade",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Ljubljana",
    "Europe/Prague",
    "Europe/Sarajevo",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Amsterdam",
    "Europe/Berlin",
    "Europe/Berlin",
    "Europe/Rome",
    "Europe/Stockholm",
    "Europe/Vienna",
    "Africa/Algiers",
    "Europe/Bucharest",
    "Africa/Cairo",
    "Europe/Helsinki",
    "Europe/Kiev",
    "Europe/Riga",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Vilnius",
    "Europe/Athens",
    "Europe/Istanbul",
    "Europe/Minsk",
    "Asia/Jerusalem",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europe/Moscow",
    "Europe/Moscow",
    "Europe/Moscow",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacific/Guam",
    "Pacific/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacific/Noumea",
    "Pacific/Fiji",
    "Asia/Kamchatka",
    "Pacific/Majuro",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "Pacific/Tongatapu",
    "Pacific/Fakaofo",
    "Pacific/Apia"
  ],
  "city": [
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ],
  "street_name": [
    "#{Name.first_name} #{street_suffix}",
    "#{Name.last_name} #{street_suffix}"
  ],
  "street_address": [
    "#{building_number} #{street_name}"
  ],
  "default_country": [
    "United States of America"
  ]
};
en.credit_card = {
  "visa": [
    "/4###########L/",
    "/4###-####-####-###L/"
  ],
  "mastercard": [
    "/5[1-5]##-####-####-###L/",
    "/6771-89##-####-###L/"
  ],
  "discover": [
    "/6011-####-####-###L/",
    "/65##-####-####-###L/",
    "/64[4-9]#-####-####-###L/",
    "/6011-62##-####-####-###L/",
    "/65##-62##-####-####-###L/",
    "/64[4-9]#-62##-####-####-###L/"
  ],
  "american_express": [
    "/34##-######-####L/",
    "/37##-######-####L/"
  ],
  "diners_club": [
    "/30[0-5]#-######-###L/",
    "/368#-######-###L/"
  ],
  "jcb": [
    "/3528-####-####-###L/",
    "/3529-####-####-###L/",
    "/35[3-8]#-####-####-###L/"
  ],
  "switch": [
    "/6759-####-####-###L/",
    "/6759-####-####-####-#L/",
    "/6759-####-####-####-##L/"
  ],
  "solo": [
    "/6767-####-####-###L/",
    "/6767-####-####-####-#L/",
    "/6767-####-####-####-##L/"
  ],
  "dankort": "/5019-####-####-###L/",
  "maestro": [
    "/50#{9,16}L/",
    "/5[6-8]#{9,16}L/",
    "/56##{9,16}L/"
  ],
  "forbrugsforeningen": "/6007-22##-####-###L/",
  "laser": [
    "/6304###########L/",
    "/6706###########L/",
    "/6771###########L/",
    "/6709###########L/",
    "/6304#########{5,6}L/",
    "/6706#########{5,6}L/",
    "/6771#########{5,6}L/",
    "/6709#########{5,6}L/"
  ]
};
en.company = {
  "suffix": [
    "Inc",
    "and Sons",
    "LLC",
    "Group"
  ],
  "adjective": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
  ],
  "descriptor": [
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun": [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
   ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_adjective": [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich"
    ],
    "bs_noun": [
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
  ]
};
en.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};

//All this avatar have been authorized by its awesome users to be use on live websites (not just mockups)
//For more information, please visit: http://uifaces.com/authorized
var avatarUri = ["jarjan/128.jpg",
    "mahdif/128.jpg",
    "sprayaga/128.jpg",
    "ruzinav/128.jpg",
    "Skyhartman/128.jpg",
    "moscoz/128.jpg",
    "kurafire/128.jpg",
    "91bilal/128.jpg",
    "igorgarybaldi/128.jpg",
    "calebogden/128.jpg",
    "malykhinv/128.jpg",
    "joelhelin/128.jpg",
    "kushsolitary/128.jpg",
    "coreyweb/128.jpg",
    "snowshade/128.jpg",
    "areus/128.jpg",
    "holdenweb/128.jpg",
    "heyimjuani/128.jpg",
    "envex/128.jpg",
    "unterdreht/128.jpg",
    "collegeman/128.jpg",
    "peejfancher/128.jpg",
    "andyisonline/128.jpg",
    "ultragex/128.jpg",
    "fuck_you_two/128.jpg",
    "adellecharles/128.jpg",
    "ateneupopular/128.jpg",
    "ahmetalpbalkan/128.jpg",
    "Stievius/128.jpg",
    "kerem/128.jpg",
    "osvaldas/128.jpg",
    "angelceballos/128.jpg",
    "thierrykoblentz/128.jpg",
    "peterlandt/128.jpg",
    "catarino/128.jpg",
    "wr/128.jpg",
    "weglov/128.jpg",
    "brandclay/128.jpg",
    "flame_kaizar/128.jpg",
    "ahmetsulek/128.jpg",
    "nicolasfolliot/128.jpg",
    "jayrobinson/128.jpg",
    "victorerixon/128.jpg",
    "kolage/128.jpg",
    "michzen/128.jpg",
    "markjenkins/128.jpg",
    "nicolai_larsen/128.jpg",
    "gt/128.jpg",
    "noxdzine/128.jpg",
    "alagoon/128.jpg",
    "idiot/128.jpg",
    "mizko/128.jpg",
    "chadengle/128.jpg",
    "mutlu82/128.jpg",
    "simobenso/128.jpg",
    "vocino/128.jpg",
    "guiiipontes/128.jpg",
    "soyjavi/128.jpg",
    "joshaustin/128.jpg",
    "tomaslau/128.jpg",
    "VinThomas/128.jpg",
    "ManikRathee/128.jpg",
    "langate/128.jpg",
    "cemshid/128.jpg",
    "leemunroe/128.jpg",
    "_shahedk/128.jpg",
    "enda/128.jpg",
    "BillSKenney/128.jpg",
    "divya/128.jpg",
    "joshhemsley/128.jpg",
    "sindresorhus/128.jpg",
    "soffes/128.jpg",
    "9lessons/128.jpg",
    "linux29/128.jpg",
    "Chakintosh/128.jpg",
    "anaami/128.jpg",
    "joreira/128.jpg",
    "shadeed9/128.jpg",
    "scottkclark/128.jpg",
    "jedbridges/128.jpg",
    "salleedesign/128.jpg",
    "marakasina/128.jpg",
    "ariil/128.jpg",
    "BrianPurkiss/128.jpg",
    "michaelmartinho/128.jpg",
    "bublienko/128.jpg",
    "devankoshal/128.jpg",
    "ZacharyZorbas/128.jpg",
    "timmillwood/128.jpg",
    "joshuasortino/128.jpg",
    "damenleeturks/128.jpg",
    "tomas_janousek/128.jpg",
    "herrhaase/128.jpg",
    "RussellBishop/128.jpg",
    "brajeshwar/128.jpg",
    "nachtmeister/128.jpg",
    "cbracco/128.jpg",
    "bermonpainter/128.jpg",
    "abdullindenis/128.jpg",
    "isacosta/128.jpg",
    "suprb/128.jpg",
    "yalozhkin/128.jpg",
    "chandlervdw/128.jpg",
    "iamgarth/128.jpg",
    "_victa/128.jpg",
    "commadelimited/128.jpg",
    "roybarberuk/128.jpg",
    "axel/128.jpg",
    "vladarbatov/128.jpg",
    "ffbel/128.jpg",
    "syropian/128.jpg",
    "ankitind/128.jpg",
    "traneblow/128.jpg",
    "flashmurphy/128.jpg",
    "ChrisFarina78/128.jpg",
    "baliomega/128.jpg",
    "saschamt/128.jpg",
    "jm_denis/128.jpg",
    "anoff/128.jpg",
    "kennyadr/128.jpg",
    "chatyrko/128.jpg",
    "dingyi/128.jpg",
    "mds/128.jpg",
    "terryxlife/128.jpg",
    "aaroni/128.jpg",
    "kinday/128.jpg",
    "prrstn/128.jpg",
    "eduardostuart/128.jpg",
    "dhilipsiva/128.jpg",
    "GavicoInd/128.jpg",
    "baires/128.jpg",
    "rohixx/128.jpg",
    "bigmancho/128.jpg",
    "blakesimkins/128.jpg",
    "leeiio/128.jpg",
    "tjrus/128.jpg",
    "uberschizo/128.jpg",
    "kylefoundry/128.jpg",
    "claudioguglieri/128.jpg",
    "ripplemdk/128.jpg",
    "exentrich/128.jpg",
    "jakemoore/128.jpg",
    "joaoedumedeiros/128.jpg",
    "poormini/128.jpg",
    "tereshenkov/128.jpg",
    "keryilmaz/128.jpg",
    "haydn_woods/128.jpg",
    "rude/128.jpg",
    "llun/128.jpg",
    "sgaurav_baghel/128.jpg",
    "jamiebrittain/128.jpg",
    "badlittleduck/128.jpg",
    "pifagor/128.jpg",
    "agromov/128.jpg",
    "benefritz/128.jpg",
    "erwanhesry/128.jpg",
    "diesellaws/128.jpg",
    "jeremiaha/128.jpg",
    "koridhandy/128.jpg",
    "chaensel/128.jpg",
    "andrewcohen/128.jpg",
    "smaczny/128.jpg",
    "gonzalorobaina/128.jpg",
    "nandini_m/128.jpg",
    "sydlawrence/128.jpg",
    "cdharrison/128.jpg",
    "tgerken/128.jpg",
    "lewisainslie/128.jpg",
    "charliecwaite/128.jpg",
    "robbschiller/128.jpg",
    "flexrs/128.jpg",
    "mattdetails/128.jpg",
    "raquelwilson/128.jpg",
    "karsh/128.jpg",
    "mrmartineau/128.jpg",
    "opnsrce/128.jpg",
    "hgharrygo/128.jpg",
    "maximseshuk/128.jpg",
    "uxalex/128.jpg",
    "samihah/128.jpg",
    "chanpory/128.jpg",
    "sharvin/128.jpg",
    "josemarques/128.jpg",
    "jefffis/128.jpg",
    "krystalfister/128.jpg",
    "lokesh_coder/128.jpg",
    "thedamianhdez/128.jpg",
    "dpmachado/128.jpg",
    "funwatercat/128.jpg",
    "timothycd/128.jpg",
    "ivanfilipovbg/128.jpg",
    "picard102/128.jpg",
    "marcobarbosa/128.jpg",
    "krasnoukhov/128.jpg",
    "g3d/128.jpg",
    "ademilter/128.jpg",
    "rickdt/128.jpg",
    "operatino/128.jpg",
    "bungiwan/128.jpg",
    "hugomano/128.jpg",
    "logorado/128.jpg",
    "dc_user/128.jpg",
    "horaciobella/128.jpg",
    "SlaapMe/128.jpg",
    "teeragit/128.jpg",
    "iqonicd/128.jpg",
    "ilya_pestov/128.jpg",
    "andrewarrow/128.jpg",
    "ssiskind/128.jpg",
    "stan/128.jpg",
    "HenryHoffman/128.jpg",
    "rdsaunders/128.jpg",
    "adamsxu/128.jpg",
    "curiousoffice/128.jpg",
    "themadray/128.jpg",
    "michigangraham/128.jpg",
    "kohette/128.jpg",
    "nickfratter/128.jpg",
    "runningskull/128.jpg",
    "madysondesigns/128.jpg",
    "brenton_clarke/128.jpg",
    "jennyshen/128.jpg",
    "bradenhamm/128.jpg",
    "kurtinc/128.jpg",
    "amanruzaini/128.jpg",
    "coreyhaggard/128.jpg",
    "Karimmove/128.jpg",
    "aaronalfred/128.jpg",
    "wtrsld/128.jpg",
    "jitachi/128.jpg",
    "therealmarvin/128.jpg",
    "pmeissner/128.jpg",
    "ooomz/128.jpg",
    "chacky14/128.jpg",
    "jesseddy/128.jpg",
    "thinmatt/128.jpg",
    "shanehudson/128.jpg",
    "akmur/128.jpg",
    "IsaryAmairani/128.jpg",
    "arthurholcombe1/128.jpg",
    "andychipster/128.jpg",
    "boxmodel/128.jpg",
    "ehsandiary/128.jpg",
    "LucasPerdidao/128.jpg",
    "shalt0ni/128.jpg",
    "swaplord/128.jpg",
    "kaelifa/128.jpg",
    "plbabin/128.jpg",
    "guillemboti/128.jpg",
    "arindam_/128.jpg",
    "renbyrd/128.jpg",
    "thiagovernetti/128.jpg",
    "jmillspaysbills/128.jpg",
    "mikemai2awesome/128.jpg",
    "jervo/128.jpg",
    "mekal/128.jpg",
    "sta1ex/128.jpg",
    "robergd/128.jpg",
    "felipecsl/128.jpg",
    "andrea211087/128.jpg",
    "garand/128.jpg",
    "dhooyenga/128.jpg",
    "abovefunction/128.jpg",
    "pcridesagain/128.jpg",
    "randomlies/128.jpg",
    "BryanHorsey/128.jpg",
    "heykenneth/128.jpg",
    "dahparra/128.jpg",
    "allthingssmitty/128.jpg",
    "danvernon/128.jpg",
    "beweinreich/128.jpg",
    "increase/128.jpg",
    "falvarad/128.jpg",
    "alxndrustinov/128.jpg",
    "souuf/128.jpg",
    "orkuncaylar/128.jpg",
    "AM_Kn2/128.jpg",
    "gearpixels/128.jpg",
    "bassamology/128.jpg",
    "vimarethomas/128.jpg",
    "kosmar/128.jpg",
    "SULiik/128.jpg",
    "mrjamesnoble/128.jpg",
    "silvanmuhlemann/128.jpg",
    "shaneIxD/128.jpg",
    "nacho/128.jpg",
    "yigitpinarbasi/128.jpg",
    "buzzusborne/128.jpg",
    "aaronkwhite/128.jpg",
    "rmlewisuk/128.jpg",
    "giancarlon/128.jpg",
    "nbirckel/128.jpg",
    "d_nny_m_cher/128.jpg",
    "sdidonato/128.jpg",
    "atariboy/128.jpg",
    "abotap/128.jpg",
    "karalek/128.jpg",
    "psdesignuk/128.jpg",
    "ludwiczakpawel/128.jpg",
    "nemanjaivanovic/128.jpg",
    "baluli/128.jpg",
    "ahmadajmi/128.jpg",
    "vovkasolovev/128.jpg",
    "samgrover/128.jpg",
    "derienzo777/128.jpg",
    "jonathansimmons/128.jpg",
    "nelsonjoyce/128.jpg",
    "S0ufi4n3/128.jpg",
    "xtopherpaul/128.jpg",
    "oaktreemedia/128.jpg",
    "nateschulte/128.jpg",
    "findingjenny/128.jpg",
    "namankreative/128.jpg",
    "antonyzotov/128.jpg",
    "we_social/128.jpg",
    "leehambley/128.jpg",
    "solid_color/128.jpg",
    "abelcabans/128.jpg",
    "mbilderbach/128.jpg",
    "kkusaa/128.jpg",
    "jordyvdboom/128.jpg",
    "carlosgavina/128.jpg",
    "pechkinator/128.jpg",
    "vc27/128.jpg",
    "rdbannon/128.jpg",
    "croakx/128.jpg",
    "suribbles/128.jpg",
    "kerihenare/128.jpg",
    "catadeleon/128.jpg",
    "gcmorley/128.jpg",
    "duivvv/128.jpg",
    "saschadroste/128.jpg",
    "victorDubugras/128.jpg",
    "wintopia/128.jpg",
    "mattbilotti/128.jpg",
    "taylorling/128.jpg",
    "megdraws/128.jpg",
    "meln1ks/128.jpg",
    "mahmoudmetwally/128.jpg",
    "Silveredge9/128.jpg",
    "derekebradley/128.jpg",
    "happypeter1983/128.jpg",
    "travis_arnold/128.jpg",
    "artem_kostenko/128.jpg",
    "adobi/128.jpg",
    "daykiine/128.jpg",
    "alek_djuric/128.jpg",
    "scips/128.jpg",
    "miguelmendes/128.jpg",
    "justinrhee/128.jpg",
    "alsobrooks/128.jpg",
    "fronx/128.jpg",
    "mcflydesign/128.jpg",
    "santi_urso/128.jpg",
    "allfordesign/128.jpg",
    "stayuber/128.jpg",
    "bertboerland/128.jpg",
    "marosholly/128.jpg",
    "adamnac/128.jpg",
    "cynthiasavard/128.jpg",
    "muringa/128.jpg",
    "danro/128.jpg",
    "hiemil/128.jpg",
    "jackiesaik/128.jpg",
    "zacsnider/128.jpg",
    "iduuck/128.jpg",
    "antjanus/128.jpg",
    "aroon_sharma/128.jpg",
    "dshster/128.jpg",
    "thehacker/128.jpg",
    "michaelbrooksjr/128.jpg",
    "ryanmclaughlin/128.jpg",
    "clubb3rry/128.jpg",
    "taybenlor/128.jpg",
    "xripunov/128.jpg",
    "myastro/128.jpg",
    "adityasutomo/128.jpg",
    "digitalmaverick/128.jpg",
    "hjartstrorn/128.jpg",
    "itolmach/128.jpg",
    "vaughanmoffitt/128.jpg",
    "abdots/128.jpg",
    "isnifer/128.jpg",
    "sergeysafonov/128.jpg",
    "maz/128.jpg",
    "scrapdnb/128.jpg",
    "chrismj83/128.jpg",
    "vitorleal/128.jpg",
    "sokaniwaal/128.jpg",
    "zaki3d/128.jpg",
    "illyzoren/128.jpg",
    "mocabyte/128.jpg",
    "osmanince/128.jpg",
    "djsherman/128.jpg",
    "davidhemphill/128.jpg",
    "waghner/128.jpg",
    "necodymiconer/128.jpg",
    "praveen_vijaya/128.jpg",
    "fabbrucci/128.jpg",
    "cliffseal/128.jpg",
    "travishines/128.jpg",
    "kuldarkalvik/128.jpg",
    "Elt_n/128.jpg",
    "phillapier/128.jpg",
    "okseanjay/128.jpg",
    "id835559/128.jpg",
    "kudretkeskin/128.jpg",
    "anjhero/128.jpg",
    "duck4fuck/128.jpg",
    "scott_riley/128.jpg",
    "noufalibrahim/128.jpg",
    "h1brd/128.jpg",
    "borges_marcos/128.jpg",
    "devinhalladay/128.jpg",
    "ciaranr/128.jpg",
    "stefooo/128.jpg",
    "mikebeecham/128.jpg",
    "tonymillion/128.jpg",
    "joshuaraichur/128.jpg",
    "irae/128.jpg",
    "petrangr/128.jpg",
    "dmitriychuta/128.jpg",
    "charliegann/128.jpg",
    "arashmanteghi/128.jpg",
    "adhamdannaway/128.jpg",
    "ainsleywagon/128.jpg",
    "svenlen/128.jpg",
    "faisalabid/128.jpg",
    "beshur/128.jpg",
    "carlyson/128.jpg",
    "dutchnadia/128.jpg",
    "teddyzetterlund/128.jpg",
    "samuelkraft/128.jpg",
    "aoimedia/128.jpg",
    "toddrew/128.jpg",
    "codepoet_ru/128.jpg",
    "artvavs/128.jpg",
    "benoitboucart/128.jpg",
    "jomarmen/128.jpg",
    "kolmarlopez/128.jpg",
    "creartinc/128.jpg",
    "homka/128.jpg",
    "gaborenton/128.jpg",
    "robinclediere/128.jpg",
    "maximsorokin/128.jpg",
    "plasticine/128.jpg",
    "j2deme/128.jpg",
    "peachananr/128.jpg",
    "kapaluccio/128.jpg",
    "de_ascanio/128.jpg",
    "rikas/128.jpg",
    "dawidwu/128.jpg",
    "marcoramires/128.jpg",
    "angelcreative/128.jpg",
    "rpatey/128.jpg",
    "popey/128.jpg",
    "rehatkathuria/128.jpg",
    "the_purplebunny/128.jpg",
    "1markiz/128.jpg",
    "ajaxy_ru/128.jpg",
    "brenmurrell/128.jpg",
    "dudestein/128.jpg",
    "oskarlevinson/128.jpg",
    "victorstuber/128.jpg",
    "nehfy/128.jpg",
    "vicivadeline/128.jpg",
    "leandrovaranda/128.jpg",
    "scottgallant/128.jpg",
    "victor_haydin/128.jpg",
    "sawrb/128.jpg",
    "ryhanhassan/128.jpg",
    "amayvs/128.jpg",
    "a_brixen/128.jpg",
    "karolkrakowiak_/128.jpg",
    "herkulano/128.jpg",
    "geran7/128.jpg",
    "cggaurav/128.jpg",
    "chris_witko/128.jpg",
    "lososina/128.jpg",
    "polarity/128.jpg",
    "mattlat/128.jpg",
    "brandonburke/128.jpg",
    "constantx/128.jpg",
    "teylorfeliz/128.jpg",
    "craigelimeliah/128.jpg",
    "rachelreveley/128.jpg",
    "reabo101/128.jpg",
    "rahmeen/128.jpg",
    "ky/128.jpg",
    "rickyyean/128.jpg",
    "j04ntoh/128.jpg",
    "spbroma/128.jpg",
    "sebashton/128.jpg",
    "jpenico/128.jpg",
    "francis_vega/128.jpg",
    "oktayelipek/128.jpg",
    "kikillo/128.jpg",
    "fabbianz/128.jpg",
    "larrygerard/128.jpg",
    "BroumiYoussef/128.jpg",
    "0therplanet/128.jpg",
    "mbilalsiddique1/128.jpg",
    "ionuss/128.jpg",
    "grrr_nl/128.jpg",
    "liminha/128.jpg",
    "rawdiggie/128.jpg",
    "ryandownie/128.jpg",
    "sethlouey/128.jpg",
    "pixage/128.jpg",
    "arpitnj/128.jpg",
    "switmer777/128.jpg",
    "josevnclch/128.jpg",
    "kanickairaj/128.jpg",
    "puzik/128.jpg",
    "tbakdesigns/128.jpg",
    "besbujupi/128.jpg",
    "supjoey/128.jpg",
    "lowie/128.jpg",
    "linkibol/128.jpg",
    "balintorosz/128.jpg",
    "imcoding/128.jpg",
    "agustincruiz/128.jpg",
    "gusoto/128.jpg",
    "thomasschrijer/128.jpg",
    "superoutman/128.jpg",
    "kalmerrautam/128.jpg",
    "gabrielizalo/128.jpg",
    "gojeanyn/128.jpg",
    "davidbaldie/128.jpg",
    "_vojto/128.jpg",
    "laurengray/128.jpg",
    "jydesign/128.jpg",
    "mymyboy/128.jpg",
    "nellleo/128.jpg",
    "marciotoledo/128.jpg",
    "ninjad3m0/128.jpg",
    "to_soham/128.jpg",
    "hasslunsford/128.jpg",
    "muridrahhal/128.jpg",
    "levisan/128.jpg",
    "grahamkennery/128.jpg",
    "lepetitogre/128.jpg",
    "antongenkin/128.jpg",
    "nessoila/128.jpg",
    "amandabuzard/128.jpg",
    "safrankov/128.jpg",
    "cocolero/128.jpg",
    "dss49/128.jpg",
    "matt3224/128.jpg",
    "bluesix/128.jpg",
    "quailandquasar/128.jpg",
    "AlbertoCococi/128.jpg",
    "lepinski/128.jpg",
    "sementiy/128.jpg",
    "mhudobivnik/128.jpg",
    "thibaut_re/128.jpg",
    "olgary/128.jpg",
    "shojberg/128.jpg",
    "mtolokonnikov/128.jpg",
    "bereto/128.jpg",
    "naupintos/128.jpg",
    "wegotvices/128.jpg",
    "xadhix/128.jpg",
    "macxim/128.jpg",
    "rodnylobos/128.jpg",
    "madcampos/128.jpg",
    "madebyvadim/128.jpg",
    "bartoszdawydzik/128.jpg",
    "supervova/128.jpg",
    "markretzloff/128.jpg",
    "vonachoo/128.jpg",
    "darylws/128.jpg",
    "stevedesigner/128.jpg",
    "mylesb/128.jpg",
    "herbigt/128.jpg",
    "depaulawagner/128.jpg",
    "geshan/128.jpg",
    "gizmeedevil1991/128.jpg",
    "_scottburgess/128.jpg",
    "lisovsky/128.jpg",
    "davidsasda/128.jpg",
    "artd_sign/128.jpg",
    "YoungCutlass/128.jpg",
    "mgonto/128.jpg",
    "itstotallyamy/128.jpg",
    "victorquinn/128.jpg",
    "osmond/128.jpg",
    "oksanafrewer/128.jpg",
    "zauerkraut/128.jpg",
    "iamkeithmason/128.jpg",
    "nitinhayaran/128.jpg",
    "lmjabreu/128.jpg",
    "mandalareopens/128.jpg",
    "thinkleft/128.jpg",
    "ponchomendivil/128.jpg",
    "juamperro/128.jpg",
    "brunodesign1206/128.jpg",
    "caseycavanagh/128.jpg",
    "luxe/128.jpg",
    "dotgridline/128.jpg",
    "spedwig/128.jpg",
    "madewulf/128.jpg",
    "mattsapii/128.jpg",
    "helderleal/128.jpg",
    "chrisstumph/128.jpg",
    "jayphen/128.jpg",
    "nsamoylov/128.jpg",
    "chrisvanderkooi/128.jpg",
    "justme_timothyg/128.jpg",
    "otozk/128.jpg",
    "prinzadi/128.jpg",
    "gu5taf/128.jpg",
    "cyril_gaillard/128.jpg",
    "d_kobelyatsky/128.jpg",
    "daniloc/128.jpg",
    "nwdsha/128.jpg",
    "romanbulah/128.jpg",
    "skkirilov/128.jpg",
    "dvdwinden/128.jpg",
    "dannol/128.jpg",
    "thekevinjones/128.jpg",
    "jwalter14/128.jpg",
    "timgthomas/128.jpg",
    "buddhasource/128.jpg",
    "uxpiper/128.jpg",
    "thatonetommy/128.jpg",
    "diansigitp/128.jpg",
    "adrienths/128.jpg",
    "klimmka/128.jpg",
    "gkaam/128.jpg",
    "derekcramer/128.jpg",
    "jennyyo/128.jpg",
    "nerrsoft/128.jpg",
    "xalionmalik/128.jpg",
    "edhenderson/128.jpg",
    "keyuri85/128.jpg",
    "roxanejammet/128.jpg",
    "kimcool/128.jpg",
    "edkf/128.jpg",
    "matkins/128.jpg",
    "alessandroribe/128.jpg",
    "jacksonlatka/128.jpg",
    "lebronjennan/128.jpg",
    "kostaspt/128.jpg",
    "karlkanall/128.jpg",
    "moynihan/128.jpg",
    "danpliego/128.jpg",
    "saulihirvi/128.jpg",
    "wesleytrankin/128.jpg",
    "fjaguero/128.jpg",
    "bowbrick/128.jpg",
    "mashaaaaal/128.jpg",
    "yassiryahya/128.jpg",
    "dparrelli/128.jpg",
    "fotomagin/128.jpg",
    "aka_james/128.jpg",
    "denisepires/128.jpg",
    "iqbalperkasa/128.jpg",
    "martinansty/128.jpg",
    "jarsen/128.jpg",
    "r_oy/128.jpg",
    "justinrob/128.jpg",
    "gabrielrosser/128.jpg",
    "malgordon/128.jpg",
    "carlfairclough/128.jpg",
    "michaelabehsera/128.jpg",
    "pierrestoffe/128.jpg",
    "enjoythetau/128.jpg",
    "loganjlambert/128.jpg",
    "rpeezy/128.jpg",
    "coreyginnivan/128.jpg",
    "michalhron/128.jpg",
    "msveet/128.jpg",
    "lingeswaran/128.jpg",
    "kolsvein/128.jpg",
    "peter576/128.jpg",
    "reideiredale/128.jpg",
    "joeymurdah/128.jpg",
    "raphaelnikson/128.jpg",
    "mvdheuvel/128.jpg",
    "maxlinderman/128.jpg",
    "jimmuirhead/128.jpg",
    "begreative/128.jpg",
    "frankiefreesbie/128.jpg",
    "robturlinckx/128.jpg",
    "Talbi_ConSept/128.jpg",
    "longlivemyword/128.jpg",
    "vanchesz/128.jpg",
    "maiklam/128.jpg",
    "hermanobrother/128.jpg",
    "rez___a/128.jpg",
    "gregsqueeb/128.jpg",
    "greenbes/128.jpg",
    "_ragzor/128.jpg",
    "anthonysukow/128.jpg",
    "fluidbrush/128.jpg",
    "dactrtr/128.jpg",
    "jehnglynn/128.jpg",
    "bergmartin/128.jpg",
    "hugocornejo/128.jpg",
    "_kkga/128.jpg",
    "dzantievm/128.jpg",
    "sawalazar/128.jpg",
    "sovesove/128.jpg",
    "jonsgotwood/128.jpg",
    "byryan/128.jpg",
    "vytautas_a/128.jpg",
    "mizhgan/128.jpg",
    "cicerobr/128.jpg",
    "nilshelmersson/128.jpg",
    "d33pthought/128.jpg",
    "davecraige/128.jpg",
    "nckjrvs/128.jpg",
    "alexandermayes/128.jpg",
    "jcubic/128.jpg",
    "craigrcoles/128.jpg",
    "bagawarman/128.jpg",
    "rob_thomas10/128.jpg",
    "cofla/128.jpg",
    "maikelk/128.jpg",
    "rtgibbons/128.jpg",
    "russell_baylis/128.jpg",
    "mhesslow/128.jpg",
    "codysanfilippo/128.jpg",
    "webtanya/128.jpg",
    "madebybrenton/128.jpg",
    "dcalonaci/128.jpg",
    "perfectflow/128.jpg",
    "jjsiii/128.jpg",
    "saarabpreet/128.jpg",
    "kumarrajan12123/128.jpg",
    "iamsteffen/128.jpg",
    "themikenagle/128.jpg",
    "ceekaytweet/128.jpg",
    "larrybolt/128.jpg",
    "conspirator/128.jpg",
    "dallasbpeters/128.jpg",
    "n3dmax/128.jpg",
    "terpimost/128.jpg",
    "kirillz/128.jpg",
    "byrnecore/128.jpg",
    "j_drake_/128.jpg",
    "calebjoyce/128.jpg",
    "russoedu/128.jpg",
    "hoangloi/128.jpg",
    "tobysaxon/128.jpg",
    "gofrasdesign/128.jpg",
    "dimaposnyy/128.jpg",
    "tjisousa/128.jpg",
    "okandungel/128.jpg",
    "billyroshan/128.jpg",
    "oskamaya/128.jpg",
    "motionthinks/128.jpg",
    "knilob/128.jpg",
    "ashocka18/128.jpg",
    "marrimo/128.jpg",
    "bartjo/128.jpg",
    "omnizya/128.jpg",
    "ernestsemerda/128.jpg",
    "andreas_pr/128.jpg",
    "edgarchris99/128.jpg",
    "thomasgeisen/128.jpg",
    "gseguin/128.jpg",
    "joannefournier/128.jpg",
    "demersdesigns/128.jpg",
    "adammarsbar/128.jpg",
    "nasirwd/128.jpg",
    "n_tassone/128.jpg",
    "javorszky/128.jpg",
    "themrdave/128.jpg",
    "yecidsm/128.jpg",
    "nicollerich/128.jpg",
    "canapud/128.jpg",
    "nicoleglynn/128.jpg",
    "judzhin_miles/128.jpg",
    "designervzm/128.jpg",
    "kianoshp/128.jpg",
    "evandrix/128.jpg",
    "alterchuca/128.jpg",
    "dhrubo/128.jpg",
    "ma_tiax/128.jpg",
    "ssbb_me/128.jpg",
    "dorphern/128.jpg",
    "mauriolg/128.jpg",
    "bruno_mart/128.jpg",
    "mactopus/128.jpg",
    "the_winslet/128.jpg",
    "joemdesign/128.jpg",
    "Shriiiiimp/128.jpg",
    "jacobbennett/128.jpg",
    "nfedoroff/128.jpg",
    "iamglimy/128.jpg",
    "allagringaus/128.jpg",
    "aiiaiiaii/128.jpg",
    "olaolusoga/128.jpg",
    "buryaknick/128.jpg",
    "wim1k/128.jpg",
    "nicklacke/128.jpg",
    "a1chapone/128.jpg",
    "steynviljoen/128.jpg",
    "strikewan/128.jpg",
    "ryankirkman/128.jpg",
    "andrewabogado/128.jpg",
    "doooon/128.jpg",
    "jagan123/128.jpg",
    "ariffsetiawan/128.jpg",
    "elenadissi/128.jpg",
    "mwarkentin/128.jpg",
    "thierrymeier_/128.jpg",
    "r_garcia/128.jpg",
    "dmackerman/128.jpg",
    "borantula/128.jpg",
    "konus/128.jpg",
    "spacewood_/128.jpg",
    "ryuchi311/128.jpg",
    "evanshajed/128.jpg",
    "tristanlegros/128.jpg",
    "shoaib253/128.jpg",
    "aislinnkelly/128.jpg",
    "okcoker/128.jpg",
    "timpetricola/128.jpg",
    "sunshinedgirl/128.jpg",
    "chadami/128.jpg",
    "aleclarsoniv/128.jpg",
    "nomidesigns/128.jpg",
    "petebernardo/128.jpg",
    "scottiedude/128.jpg",
    "millinet/128.jpg",
    "imsoper/128.jpg",
    "imammuht/128.jpg",
    "benjamin_knight/128.jpg",
    "nepdud/128.jpg",
    "joki4/128.jpg",
    "lanceguyatt/128.jpg",
    "bboy1895/128.jpg",
    "amywebbb/128.jpg",
    "rweve/128.jpg",
    "haruintesettden/128.jpg",
    "ricburton/128.jpg",
    "nelshd/128.jpg",
    "batsirai/128.jpg",
    "primozcigler/128.jpg",
    "jffgrdnr/128.jpg",
    "8d3k/128.jpg",
    "geneseleznev/128.jpg",
    "al_li/128.jpg",
    "souperphly/128.jpg",
    "mslarkina/128.jpg",
    "2fockus/128.jpg",
    "cdavis565/128.jpg",
    "xiel/128.jpg",
    "turkutuuli/128.jpg",
    "uxward/128.jpg",
    "lebinoclard/128.jpg",
    "gauravjassal/128.jpg",
    "davidmerrique/128.jpg",
    "mdsisto/128.jpg",
    "andrewofficer/128.jpg",
    "kojourin/128.jpg",
    "dnirmal/128.jpg",
    "kevka/128.jpg",
    "mr_shiznit/128.jpg",
    "aluisio_azevedo/128.jpg",
    "cloudstudio/128.jpg",
    "danvierich/128.jpg",
    "alexivanichkin/128.jpg",
    "fran_mchamy/128.jpg",
    "perretmagali/128.jpg",
    "betraydan/128.jpg",
    "cadikkara/128.jpg",
    "matbeedotcom/128.jpg",
    "jeremyworboys/128.jpg",
    "bpartridge/128.jpg",
    "michaelkoper/128.jpg",
    "silv3rgvn/128.jpg",
    "alevizio/128.jpg",
    "johnsmithagency/128.jpg",
    "lawlbwoy/128.jpg",
    "vitor376/128.jpg",
    "desastrozo/128.jpg",
    "thimo_cz/128.jpg",
    "jasonmarkjones/128.jpg",
    "lhausermann/128.jpg",
    "xravil/128.jpg",
    "guischmitt/128.jpg",
    "vigobronx/128.jpg",
    "panghal0/128.jpg",
    "miguelkooreman/128.jpg",
    "surgeonist/128.jpg",
    "christianoliff/128.jpg",
    "caspergrl/128.jpg",
    "iamkarna/128.jpg",
    "ipavelek/128.jpg",
    "pierre_nel/128.jpg",
    "y2graphic/128.jpg",
    "sterlingrules/128.jpg",
    "elbuscainfo/128.jpg",
    "bennyjien/128.jpg",
    "stushona/128.jpg",
    "estebanuribe/128.jpg",
    "embrcecreations/128.jpg",
    "danillos/128.jpg",
    "elliotlewis/128.jpg",
    "charlesrpratt/128.jpg",
    "vladyn/128.jpg",
    "emmeffess/128.jpg",
    "carlosblanco_eu/128.jpg",
    "leonfedotov/128.jpg",
    "rangafangs/128.jpg",
    "chris_frees/128.jpg",
    "tgormtx/128.jpg",
    "bryan_topham/128.jpg",
    "jpscribbles/128.jpg",
    "mighty55/128.jpg",
    "carbontwelve/128.jpg",
    "isaacfifth/128.jpg",
    "iamjdeleon/128.jpg",
    "snowwrite/128.jpg",
    "barputro/128.jpg",
    "drewbyreese/128.jpg",
    "sachacorazzi/128.jpg",
    "bistrianiosip/128.jpg",
    "magoo04/128.jpg",
    "pehamondello/128.jpg",
    "yayteejay/128.jpg",
    "a_harris88/128.jpg",
    "algunsanabria/128.jpg",
    "zforrester/128.jpg",
    "ovall/128.jpg",
    "carlosjgsousa/128.jpg",
    "geobikas/128.jpg",
    "ah_lice/128.jpg",
    "looneydoodle/128.jpg",
    "nerdgr8/128.jpg",
    "ddggccaa/128.jpg",
    "zackeeler/128.jpg",
    "normanbox/128.jpg",
    "el_fuertisimo/128.jpg",
    "ismail_biltagi/128.jpg",
    "juangomezw/128.jpg",
    "jnmnrd/128.jpg",
    "patrickcoombe/128.jpg",
    "ryanjohnson_me/128.jpg",
    "markolschesky/128.jpg",
    "jeffgolenski/128.jpg",
    "kvasnic/128.jpg",
    "lindseyzilla/128.jpg",
    "gauchomatt/128.jpg",
    "afusinatto/128.jpg",
    "kevinoh/128.jpg",
    "okansurreel/128.jpg",
    "adamawesomeface/128.jpg",
    "emileboudeling/128.jpg",
    "arishi_/128.jpg",
    "juanmamartinez/128.jpg",
    "wikiziner/128.jpg",
    "danthms/128.jpg",
    "mkginfo/128.jpg",
    "terrorpixel/128.jpg",
    "curiousonaut/128.jpg",
    "prheemo/128.jpg",
    "michaelcolenso/128.jpg",
    "foczzi/128.jpg",
    "martip07/128.jpg",
    "thaodang17/128.jpg",
    "johncafazza/128.jpg",
    "robinlayfield/128.jpg",
    "franciscoamk/128.jpg",
    "abdulhyeuk/128.jpg",
    "marklamb/128.jpg",
    "edobene/128.jpg",
    "andresenfredrik/128.jpg",
    "mikaeljorhult/128.jpg",
    "chrisslowik/128.jpg",
    "vinciarts/128.jpg",
    "meelford/128.jpg",
    "elliotnolten/128.jpg",
    "yehudab/128.jpg",
    "vijaykarthik/128.jpg",
    "bfrohs/128.jpg",
    "josep_martins/128.jpg",
    "attacks/128.jpg",
    "sur4dye/128.jpg",
    "tumski/128.jpg",
    "instalox/128.jpg",
    "mangosango/128.jpg",
    "paulfarino/128.jpg",
    "kazaky999/128.jpg",
    "kiwiupover/128.jpg",
    "nvkznemo/128.jpg",
    "tom_even/128.jpg",
    "ratbus/128.jpg",
    "woodsman001/128.jpg",
    "joshmedeski/128.jpg",
    "thewillbeard/128.jpg",
    "psaikali/128.jpg",
    "joe_black/128.jpg",
    "aleinadsays/128.jpg",
    "marcusgorillius/128.jpg",
    "hota_v/128.jpg",
    "jghyllebert/128.jpg",
    "shinze/128.jpg",
    "janpalounek/128.jpg",
    "jeremiespoken/128.jpg",
    "her_ruu/128.jpg",
    "dansowter/128.jpg",
    "felipeapiress/128.jpg",
    "magugzbrand2d/128.jpg",
    "posterjob/128.jpg",
    "nathalie_fs/128.jpg",
    "bobbytwoshoes/128.jpg",
    "dreizle/128.jpg",
    "jeremymouton/128.jpg",
    "elisabethkjaer/128.jpg",
    "notbadart/128.jpg",
    "mohanrohith/128.jpg",
    "jlsolerdeltoro/128.jpg",
    "itskawsar/128.jpg",
    "slowspock/128.jpg",
    "zvchkelly/128.jpg",
    "wiljanslofstra/128.jpg",
    "craighenneberry/128.jpg",
    "trubeatto/128.jpg",
    "juaumlol/128.jpg",
    "samscouto/128.jpg",
    "BenouarradeM/128.jpg",
    "gipsy_raf/128.jpg",
    "netonet_il/128.jpg",
    "arkokoley/128.jpg",
    "itsajimithing/128.jpg",
    "smalonso/128.jpg",
    "victordeanda/128.jpg",
    "_dwite_/128.jpg",
    "richardgarretts/128.jpg",
    "gregrwilkinson/128.jpg",
    "anatolinicolae/128.jpg",
    "lu4sh1i/128.jpg",
    "stefanotirloni/128.jpg",
    "ostirbu/128.jpg",
    "darcystonge/128.jpg",
    "naitanamoreno/128.jpg",
    "michaelcomiskey/128.jpg",
    "adhiardana/128.jpg",
    "marcomano_/128.jpg",
    "davidcazalis/128.jpg",
    "falconerie/128.jpg",
    "gregkilian/128.jpg",
    "bcrad/128.jpg",
    "bolzanmarco/128.jpg",
    "low_res/128.jpg",
    "vlajki/128.jpg",
    "petar_prog/128.jpg",
    "jonkspr/128.jpg",
    "akmalfikri/128.jpg",
    "mfacchinello/128.jpg",
    "atanism/128.jpg",
    "harry_sistalam/128.jpg",
    "murrayswift/128.jpg",
    "bobwassermann/128.jpg",
    "gavr1l0/128.jpg",
    "madshensel/128.jpg",
    "mr_subtle/128.jpg",
    "deviljho_/128.jpg",
    "salimianoff/128.jpg",
    "joetruesdell/128.jpg",
    "twittypork/128.jpg",
    "airskylar/128.jpg",
    "dnezkumar/128.jpg",
    "dgajjar/128.jpg",
    "cherif_b/128.jpg",
    "salvafc/128.jpg",
    "louis_currie/128.jpg",
    "deeenright/128.jpg",
    "cybind/128.jpg",
    "eyronn/128.jpg",
    "vickyshits/128.jpg",
    "sweetdelisa/128.jpg",
    "cboller1/128.jpg",
    "andresdjasso/128.jpg",
    "melvindidit/128.jpg",
    "andysolomon/128.jpg",
    "thaisselenator_/128.jpg",
    "lvovenok/128.jpg",
    "giuliusa/128.jpg",
    "belyaev_rs/128.jpg",
    "overcloacked/128.jpg",
    "kamal_chaneman/128.jpg",
    "incubo82/128.jpg",
    "hellofeverrrr/128.jpg",
    "mhaligowski/128.jpg",
    "sunlandictwin/128.jpg",
    "bu7921/128.jpg",
    "andytlaw/128.jpg",
    "jeremery/128.jpg",
    "finchjke/128.jpg",
    "manigm/128.jpg",
    "umurgdk/128.jpg",
    "scottfeltham/128.jpg",
    "ganserene/128.jpg",
    "mutu_krish/128.jpg",
    "jodytaggart/128.jpg",
    "ntfblog/128.jpg",
    "tanveerrao/128.jpg",
    "hfalucas/128.jpg",
    "alxleroydeval/128.jpg",
    "kucingbelang4/128.jpg",
    "bargaorobalo/128.jpg",
    "colgruv/128.jpg",
    "stalewine/128.jpg",
    "kylefrost/128.jpg",
    "baumannzone/128.jpg",
    "angelcolberg/128.jpg",
    "sachingawas/128.jpg",
    "jjshaw14/128.jpg",
    "ramanathan_pdy/128.jpg",
    "johndezember/128.jpg",
    "nilshoenson/128.jpg",
    "brandonmorreale/128.jpg",
    "nutzumi/128.jpg",
    "brandonflatsoda/128.jpg",
    "sergeyalmone/128.jpg",
    "klefue/128.jpg",
    "kirangopal/128.jpg",
    "baumann_alex/128.jpg",
    "matthewkay_/128.jpg",
    "jay_wilburn/128.jpg",
    "shesgared/128.jpg",
    "apriendeau/128.jpg",
    "johnriordan/128.jpg",
    "wake_gs/128.jpg",
    "aleksitappura/128.jpg",
    "emsgulam/128.jpg",
    "xilantra/128.jpg",
    "imomenui/128.jpg",
    "sircalebgrove/128.jpg",
    "newbrushes/128.jpg",
    "hsinyo23/128.jpg",
    "m4rio/128.jpg",
    "katiemdaly/128.jpg",
    "s4f1/128.jpg",
    "ecommerceil/128.jpg",
    "marlinjayakody/128.jpg",
    "swooshycueb/128.jpg",
    "sangdth/128.jpg",
    "coderdiaz/128.jpg",
    "bluefx_/128.jpg",
    "vivekprvr/128.jpg",
    "sasha_shestakov/128.jpg",
    "eugeneeweb/128.jpg",
    "dgclegg/128.jpg",
    "n1ght_coder/128.jpg",
    "dixchen/128.jpg",
    "blakehawksworth/128.jpg",
    "trueblood_33/128.jpg",
    "hai_ninh_nguyen/128.jpg",
    "marclgonzales/128.jpg",
    "yesmeck/128.jpg",
    "stephcoue/128.jpg",
    "doronmalki/128.jpg",
    "ruehldesign/128.jpg",
    "anasnakawa/128.jpg",
    "kijanmaharjan/128.jpg",
    "wearesavas/128.jpg",
    "stefvdham/128.jpg",
    "tweetubhai/128.jpg",
    "alecarpentier/128.jpg",
    "fiterik/128.jpg",
    "antonyryndya/128.jpg",
    "d00maz/128.jpg",
    "theonlyzeke/128.jpg",
    "missaaamy/128.jpg",
    "carlosm/128.jpg",
    "manekenthe/128.jpg",
    "reetajayendra/128.jpg",
    "jeremyshimko/128.jpg",
    "justinrgraham/128.jpg",
    "stefanozoffoli/128.jpg",
    "overra/128.jpg",
    "mrebay007/128.jpg",
    "shvelo96/128.jpg",
    "pyronite/128.jpg",
    "thedjpetersen/128.jpg",
    "rtyukmaev/128.jpg",
    "_williamguerra/128.jpg",
    "albertaugustin/128.jpg",
    "vikashpathak18/128.jpg",
    "kevinjohndayy/128.jpg",
    "vj_demien/128.jpg",
    "colirpixoil/128.jpg",
    "goddardlewis/128.jpg",
    "laasli/128.jpg",
    "jqiuss/128.jpg",
    "heycamtaylor/128.jpg",
    "nastya_mane/128.jpg",
    "mastermindesign/128.jpg",
    "ccinojasso1/128.jpg",
    "nyancecom/128.jpg",
    "sandywoodruff/128.jpg",
    "bighanddesign/128.jpg",
    "sbtransparent/128.jpg",
    "aviddayentonbay/128.jpg",
    "richwild/128.jpg",
    "kaysix_dizzy/128.jpg",
    "tur8le/128.jpg",
    "seyedhossein1/128.jpg",
    "privetwagner/128.jpg",
    "emmandenn/128.jpg",
    "dev_essentials/128.jpg",
    "jmfsocial/128.jpg",
    "_yardenoon/128.jpg",
    "mateaodviteza/128.jpg",
    "weavermedia/128.jpg",
    "mufaddal_mw/128.jpg",
    "hafeeskhan/128.jpg",
    "ashernatali/128.jpg",
    "sulaqo/128.jpg",
    "eddiechen/128.jpg",
    "josecarlospsh/128.jpg",
    "vm_f/128.jpg",
    "enricocicconi/128.jpg",
    "danmartin70/128.jpg",
    "gmourier/128.jpg",
    "donjain/128.jpg",
    "mrxloka/128.jpg",
    "_pedropinho/128.jpg",
    "eitarafa/128.jpg",
    "oscarowusu/128.jpg",
    "ralph_lam/128.jpg",
    "panchajanyag/128.jpg",
    "woodydotmx/128.jpg",
    "jerrybai1907/128.jpg",
    "marshallchen_/128.jpg",
    "xamorep/128.jpg",
    "aio___/128.jpg",
    "chaabane_wail/128.jpg",
    "txcx/128.jpg",
    "akashsharma39/128.jpg",
    "falling_soul/128.jpg",
    "sainraja/128.jpg",
    "mugukamil/128.jpg",
    "johannesneu/128.jpg",
    "markwienands/128.jpg",
    "karthipanraj/128.jpg",
    "balakayuriy/128.jpg",
    "alan_zhang_/128.jpg",
    "layerssss/128.jpg",
    "kaspernordkvist/128.jpg",
    "mirfanqureshi/128.jpg",
    "hanna_smi/128.jpg",
    "VMilescu/128.jpg",
    "aeon56/128.jpg",
    "m_kalibry/128.jpg",
    "sreejithexp/128.jpg",
    "dicesales/128.jpg",
    "dhoot_amit/128.jpg",
    "smenov/128.jpg",
    "lonesomelemon/128.jpg",
    "vladimirdevic/128.jpg",
    "joelcipriano/128.jpg",
    "haligaliharun/128.jpg",
    "buleswapnil/128.jpg",
    "serefka/128.jpg",
    "ifarafonow/128.jpg",
    "vikasvinfotech/128.jpg",
    "urrutimeoli/128.jpg",
    "areandacom/128.jpg"
];

en.internet.avatar_uri = [];

for (var i = 0; i < avatarUri.length; i++) {
  en.internet.avatar_uri.push("https://s3.amazonaws.com/uifaces/faces/twitter/" + avatarUri[i]);
};

en.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
en.name = {
  "first_name": [
    "Aaliyah",
    "Aaron",
    "Abagail",
    "Abbey",
    "Abbie",
    "Abbigail",
    "Abby",
    "Abdiel",
    "Abdul",
    "Abdullah",
    "Abe",
    "Abel",
    "Abelardo",
    "Abigail",
    "Abigale",
    "Abigayle",
    "Abner",
    "Abraham",
    "Ada",
    "Adah",
    "Adalberto",
    "Adaline",
    "Adam",
    "Adan",
    "Addie",
    "Addison",
    "Adela",
    "Adelbert",
    "Adele",
    "Adelia",
    "Adeline",
    "Adell",
    "Adella",
    "Adelle",
    "Aditya",
    "Adolf",
    "Adolfo",
    "Adolph",
    "Adolphus",
    "Adonis",
    "Adrain",
    "Adrian",
    "Adriana",
    "Adrianna",
    "Adriel",
    "Adrien",
    "Adrienne",
    "Afton",
    "Aglae",
    "Agnes",
    "Agustin",
    "Agustina",
    "Ahmad",
    "Ahmed",
    "Aida",
    "Aidan",
    "Aiden",
    "Aileen",
    "Aimee",
    "Aisha",
    "Aiyana",
    "Akeem",
    "Al",
    "Alaina",
    "Alan",
    "Alana",
    "Alanis",
    "Alanna",
    "Alayna",
    "Alba",
    "Albert",
    "Alberta",
    "Albertha",
    "Alberto",
    "Albin",
    "Albina",
    "Alda",
    "Alden",
    "Alec",
    "Aleen",
    "Alejandra",
    "Alejandrin",
    "Alek",
    "Alena",
    "Alene",
    "Alessandra",
    "Alessandro",
    "Alessia",
    "Aletha",
    "Alex",
    "Alexa",
    "Alexander",
    "Alexandra",
    "Alexandre",
    "Alexandrea",
    "Alexandria",
    "Alexandrine",
    "Alexandro",
    "Alexane",
    "Alexanne",
    "Alexie",
    "Alexis",
    "Alexys",
    "Alexzander",
    "Alf",
    "Alfonso",
    "Alfonzo",
    "Alford",
    "Alfred",
    "Alfreda",
    "Alfredo",
    "Ali",
    "Alia",
    "Alice",
    "Alicia",
    "Alisa",
    "Alisha",
    "Alison",
    "Alivia",
    "Aliya",
    "Aliyah",
    "Aliza",
    "Alize",
    "Allan",
    "Allen",
    "Allene",
    "Allie",
    "Allison",
    "Ally",
    "Alphonso",
    "Alta",
    "Althea",
    "Alva",
    "Alvah",
    "Alvena",
    "Alvera",
    "Alverta",
    "Alvina",
    "Alvis",
    "Alyce",
    "Alycia",
    "Alysa",
    "Alysha",
    "Alyson",
    "Alysson",
    "Amalia",
    "Amanda",
    "Amani",
    "Amara",
    "Amari",
    "Amaya",
    "Amber",
    "Ambrose",
    "Amelia",
    "Amelie",
    "Amely",
    "America",
    "Americo",
    "Amie",
    "Amina",
    "Amir",
    "Amira",
    "Amiya",
    "Amos",
    "Amparo",
    "Amy",
    "Amya",
    "Ana",
    "Anabel",
    "Anabelle",
    "Anahi",
    "Anais",
    "Anastacio",
    "Anastasia",
    "Anderson",
    "Andre",
    "Andreane",
    "Andreanne",
    "Andres",
    "Andrew",
    "Andy",
    "Angel",
    "Angela",
    "Angelica",
    "Angelina",
    "Angeline",
    "Angelita",
    "Angelo",
    "Angie",
    "Angus",
    "Anibal",
    "Anika",
    "Anissa",
    "Anita",
    "Aniya",
    "Aniyah",
    "Anjali",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalise",
    "Annamae",
    "Annamarie",
    "Anne",
    "Annetta",
    "Annette",
    "Annie",
    "Ansel",
    "Ansley",
    "Anthony",
    "Antoinette",
    "Antone",
    "Antonetta",
    "Antonette",
    "Antonia",
    "Antonietta",
    "Antonina",
    "Antonio",
    "Antwan",
    "Antwon",
    "Anya",
    "April",
    "Ara",
    "Araceli",
    "Aracely",
    "Arch",
    "Archibald",
    "Ardella",
    "Arden",
    "Ardith",
    "Arely",
    "Ari",
    "Ariane",
    "Arianna",
    "Aric",
    "Ariel",
    "Arielle",
    "Arjun",
    "Arlene",
    "Arlie",
    "Arlo",
    "Armand",
    "Armando",
    "Armani",
    "Arnaldo",
    "Arne",
    "Arno",
    "Arnold",
    "Arnoldo",
    "Arnulfo",
    "Aron",
    "Art",
    "Arthur",
    "Arturo",
    "Arvel",
    "Arvid",
    "Arvilla",
    "Aryanna",
    "Asa",
    "Asha",
    "Ashlee",
    "Ashleigh",
    "Ashley",
    "Ashly",
    "Ashlynn",
    "Ashton",
    "Ashtyn",
    "Asia",
    "Assunta",
    "Astrid",
    "Athena",
    "Aubree",
    "Aubrey",
    "Audie",
    "Audra",
    "Audreanne",
    "Audrey",
    "August",
    "Augusta",
    "Augustine",
    "Augustus",
    "Aurelia",
    "Aurelie",
    "Aurelio",
    "Aurore",
    "Austen",
    "Austin",
    "Austyn",
    "Autumn",
    "Ava",
    "Avery",
    "Avis",
    "Axel",
    "Ayana",
    "Ayden",
    "Ayla",
    "Aylin",
    "Baby",
    "Bailee",
    "Bailey",
    "Barbara",
    "Barney",
    "Baron",
    "Barrett",
    "Barry",
    "Bart",
    "Bartholome",
    "Barton",
    "Baylee",
    "Beatrice",
    "Beau",
    "Beaulah",
    "Bell",
    "Bella",
    "Belle",
    "Ben",
    "Benedict",
    "Benjamin",
    "Bennett",
    "Bennie",
    "Benny",
    "Benton",
    "Berenice",
    "Bernadette",
    "Bernadine",
    "Bernard",
    "Bernardo",
    "Berneice",
    "Bernhard",
    "Bernice",
    "Bernie",
    "Berniece",
    "Bernita",
    "Berry",
    "Bert",
    "Berta",
    "Bertha",
    "Bertram",
    "Bertrand",
    "Beryl",
    "Bessie",
    "Beth",
    "Bethany",
    "Bethel",
    "Betsy",
    "Bette",
    "Bettie",
    "Betty",
    "Bettye",
    "Beulah",
    "Beverly",
    "Bianka",
    "Bill",
    "Billie",
    "Billy",
    "Birdie",
    "Blair",
    "Blaise",
    "Blake",
    "Blanca",
    "Blanche",
    "Blaze",
    "Bo",
    "Bobbie",
    "Bobby",
    "Bonita",
    "Bonnie",
    "Boris",
    "Boyd",
    "Brad",
    "Braden",
    "Bradford",
    "Bradley",
    "Bradly",
    "Brady",
    "Braeden",
    "Brain",
    "Brandi",
    "Brando",
    "Brandon",
    "Brandt",
    "Brandy",
    "Brandyn",
    "Brannon",
    "Branson",
    "Brant",
    "Braulio",
    "Braxton",
    "Brayan",
    "Breana",
    "Breanna",
    "Breanne",
    "Brenda",
    "Brendan",
    "Brenden",
    "Brendon",
    "Brenna",
    "Brennan",
    "Brennon",
    "Brent",
    "Bret",
    "Brett",
    "Bria",
    "Brian",
    "Briana",
    "Brianne",
    "Brice",
    "Bridget",
    "Bridgette",
    "Bridie",
    "Brielle",
    "Brigitte",
    "Brionna",
    "Brisa",
    "Britney",
    "Brittany",
    "Brock",
    "Broderick",
    "Brody",
    "Brook",
    "Brooke",
    "Brooklyn",
    "Brooks",
    "Brown",
    "Bruce",
    "Bryana",
    "Bryce",
    "Brycen",
    "Bryon",
    "Buck",
    "Bud",
    "Buddy",
    "Buford",
    "Bulah",
    "Burdette",
    "Burley",
    "Burnice",
    "Buster",
    "Cade",
    "Caden",
    "Caesar",
    "Caitlyn",
    "Cale",
    "Caleb",
    "Caleigh",
    "Cali",
    "Calista",
    "Callie",
    "Camden",
    "Cameron",
    "Camila",
    "Camilla",
    "Camille",
    "Camren",
    "Camron",
    "Camryn",
    "Camylle",
    "Candace",
    "Candelario",
    "Candice",
    "Candida",
    "Candido",
    "Cara",
    "Carey",
    "Carissa",
    "Carlee",
    "Carleton",
    "Carley",
    "Carli",
    "Carlie",
    "Carlo",
    "Carlos",
    "Carlotta",
    "Carmel",
    "Carmela",
    "Carmella",
    "Carmelo",
    "Carmen",
    "Carmine",
    "Carol",
    "Carolanne",
    "Carole",
    "Carolina",
    "Caroline",
    "Carolyn",
    "Carolyne",
    "Carrie",
    "Carroll",
    "Carson",
    "Carter",
    "Cary",
    "Casandra",
    "Casey",
    "Casimer",
    "Casimir",
    "Casper",
    "Cassandra",
    "Cassandre",
    "Cassidy",
    "Cassie",
    "Catalina",
    "Caterina",
    "Catharine",
    "Catherine",
    "Cathrine",
    "Cathryn",
    "Cathy",
    "Cayla",
    "Ceasar",
    "Cecelia",
    "Cecil",
    "Cecile",
    "Cecilia",
    "Cedrick",
    "Celestine",
    "Celestino",
    "Celia",
    "Celine",
    "Cesar",
    "Chad",
    "Chadd",
    "Chadrick",
    "Chaim",
    "Chance",
    "Chandler",
    "Chanel",
    "Chanelle",
    "Charity",
    "Charlene",
    "Charles",
    "Charley",
    "Charlie",
    "Charlotte",
    "Chase",
    "Chasity",
    "Chauncey",
    "Chaya",
    "Chaz",
    "Chelsea",
    "Chelsey",
    "Chelsie",
    "Chesley",
    "Chester",
    "Chet",
    "Cheyanne",
    "Cheyenne",
    "Chloe",
    "Chris",
    "Christ",
    "Christa",
    "Christelle",
    "Christian",
    "Christiana",
    "Christina",
    "Christine",
    "Christop",
    "Christophe",
    "Christopher",
    "Christy",
    "Chyna",
    "Ciara",
    "Cicero",
    "Cielo",
    "Cierra",
    "Cindy",
    "Citlalli",
    "Clair",
    "Claire",
    "Clara",
    "Clarabelle",
    "Clare",
    "Clarissa",
    "Clark",
    "Claud",
    "Claude",
    "Claudia",
    "Claudie",
    "Claudine",
    "Clay",
    "Clemens",
    "Clement",
    "Clementina",
    "Clementine",
    "Clemmie",
    "Cleo",
    "Cleora",
    "Cleta",
    "Cletus",
    "Cleve",
    "Cleveland",
    "Clifford",
    "Clifton",
    "Clint",
    "Clinton",
    "Clotilde",
    "Clovis",
    "Cloyd",
    "Clyde",
    "Coby",
    "Cody",
    "Colby",
    "Cole",
    "Coleman",
    "Colin",
    "Colleen",
    "Collin",
    "Colt",
    "Colten",
    "Colton",
    "Columbus",
    "Concepcion",
    "Conner",
    "Connie",
    "Connor",
    "Conor",
    "Conrad",
    "Constance",
    "Constantin",
    "Consuelo",
    "Cooper",
    "Cora",
    "Coralie",
    "Corbin",
    "Cordelia",
    "Cordell",
    "Cordia",
    "Cordie",
    "Corene",
    "Corine",
    "Cornelius",
    "Cornell",
    "Corrine",
    "Cortez",
    "Cortney",
    "Cory",
    "Coty",
    "Courtney",
    "Coy",
    "Craig",
    "Crawford",
    "Creola",
    "Cristal",
    "Cristian",
    "Cristina",
    "Cristobal",
    "Cristopher",
    "Cruz",
    "Crystal",
    "Crystel",
    "Cullen",
    "Curt",
    "Curtis",
    "Cydney",
    "Cynthia",
    "Cyril",
    "Cyrus",
    "Dagmar",
    "Dahlia",
    "Daija",
    "Daisha",
    "Daisy",
    "Dakota",
    "Dale",
    "Dallas",
    "Dallin",
    "Dalton",
    "Damaris",
    "Dameon",
    "Damian",
    "Damien",
    "Damion",
    "Damon",
    "Dan",
    "Dana",
    "Dandre",
    "Dane",
    "D'angelo",
    "Dangelo",
    "Danial",
    "Daniela",
    "Daniella",
    "Danielle",
    "Danika",
    "Dannie",
    "Danny",
    "Dante",
    "Danyka",
    "Daphne",
    "Daphnee",
    "Daphney",
    "Darby",
    "Daren",
    "Darian",
    "Dariana",
    "Darien",
    "Dario",
    "Darion",
    "Darius",
    "Darlene",
    "Daron",
    "Darrel",
    "Darrell",
    "Darren",
    "Darrick",
    "Darrin",
    "Darrion",
    "Darron",
    "Darryl",
    "Darwin",
    "Daryl",
    "Dashawn",
    "Dasia",
    "Dave",
    "David",
    "Davin",
    "Davion",
    "Davon",
    "Davonte",
    "Dawn",
    "Dawson",
    "Dax",
    "Dayana",
    "Dayna",
    "Dayne",
    "Dayton",
    "Dean",
    "Deangelo",
    "Deanna",
    "Deborah",
    "Declan",
    "Dedric",
    "Dedrick",
    "Dee",
    "Deion",
    "Deja",
    "Dejah",
    "Dejon",
    "Dejuan",
    "Delaney",
    "Delbert",
    "Delfina",
    "Delia",
    "Delilah",
    "Dell",
    "Della",
    "Delmer",
    "Delores",
    "Delpha",
    "Delphia",
    "Delphine",
    "Delta",
    "Demarco",
    "Demarcus",
    "Demario",
    "Demetris",
    "Demetrius",
    "Demond",
    "Dena",
    "Denis",
    "Dennis",
    "Deon",
    "Deondre",
    "Deontae",
    "Deonte",
    "Dereck",
    "Derek",
    "Derick",
    "Deron",
    "Derrick",
    "Deshaun",
    "Deshawn",
    "Desiree",
    "Desmond",
    "Dessie",
    "Destany",
    "Destin",
    "Destinee",
    "Destiney",
    "Destini",
    "Destiny",
    "Devan",
    "Devante",
    "Deven",
    "Devin",
    "Devon",
    "Devonte",
    "Devyn",
    "Dewayne",
    "Dewitt",
    "Dexter",
    "Diamond",
    "Diana",
    "Dianna",
    "Diego",
    "Dillan",
    "Dillon",
    "Dimitri",
    "Dina",
    "Dino",
    "Dion",
    "Dixie",
    "Dock",
    "Dolly",
    "Dolores",
    "Domenic",
    "Domenica",
    "Domenick",
    "Domenico",
    "Domingo",
    "Dominic",
    "Dominique",
    "Don",
    "Donald",
    "Donato",
    "Donavon",
    "Donna",
    "Donnell",
    "Donnie",
    "Donny",
    "Dora",
    "Dorcas",
    "Dorian",
    "Doris",
    "Dorothea",
    "Dorothy",
    "Dorris",
    "Dortha",
    "Dorthy",
    "Doug",
    "Douglas",
    "Dovie",
    "Doyle",
    "Drake",
    "Drew",
    "Duane",
    "Dudley",
    "Dulce",
    "Duncan",
    "Durward",
    "Dustin",
    "Dusty",
    "Dwight",
    "Dylan",
    "Earl",
    "Earlene",
    "Earline",
    "Earnest",
    "Earnestine",
    "Easter",
    "Easton",
    "Ebba",
    "Ebony",
    "Ed",
    "Eda",
    "Edd",
    "Eddie",
    "Eden",
    "Edgar",
    "Edgardo",
    "Edison",
    "Edmond",
    "Edmund",
    "Edna",
    "Eduardo",
    "Edward",
    "Edwardo",
    "Edwin",
    "Edwina",
    "Edyth",
    "Edythe",
    "Effie",
    "Efrain",
    "Efren",
    "Eileen",
    "Einar",
    "Eino",
    "Eladio",
    "Elaina",
    "Elbert",
    "Elda",
    "Eldon",
    "Eldora",
    "Eldred",
    "Eldridge",
    "Eleanora",
    "Eleanore",
    "Eleazar",
    "Electa",
    "Elena",
    "Elenor",
    "Elenora",
    "Eleonore",
    "Elfrieda",
    "Eli",
    "Elian",
    "Eliane",
    "Elias",
    "Eliezer",
    "Elijah",
    "Elinor",
    "Elinore",
    "Elisa",
    "Elisabeth",
    "Elise",
    "Eliseo",
    "Elisha",
    "Elissa",
    "Eliza",
    "Elizabeth",
    "Ella",
    "Ellen",
    "Ellie",
    "Elliot",
    "Elliott",
    "Ellis",
    "Ellsworth",
    "Elmer",
    "Elmira",
    "Elmo",
    "Elmore",
    "Elna",
    "Elnora",
    "Elody",
    "Eloisa",
    "Eloise",
    "Elouise",
    "Eloy",
    "Elroy",
    "Elsa",
    "Else",
    "Elsie",
    "Elta",
    "Elton",
    "Elva",
    "Elvera",
    "Elvie",
    "Elvis",
    "Elwin",
    "Elwyn",
    "Elyse",
    "Elyssa",
    "Elza",
    "Emanuel",
    "Emelia",
    "Emelie",
    "Emely",
    "Emerald",
    "Emerson",
    "Emery",
    "Emie",
    "Emil",
    "Emile",
    "Emilia",
    "Emiliano",
    "Emilie",
    "Emilio",
    "Emily",
    "Emma",
    "Emmalee",
    "Emmanuel",
    "Emmanuelle",
    "Emmet",
    "Emmett",
    "Emmie",
    "Emmitt",
    "Emmy",
    "Emory",
    "Ena",
    "Enid",
    "Enoch",
    "Enola",
    "Enos",
    "Enrico",
    "Enrique",
    "Ephraim",
    "Era",
    "Eriberto",
    "Eric",
    "Erica",
    "Erich",
    "Erick",
    "Ericka",
    "Erik",
    "Erika",
    "Erin",
    "Erling",
    "Erna",
    "Ernest",
    "Ernestina",
    "Ernestine",
    "Ernesto",
    "Ernie",
    "Ervin",
    "Erwin",
    "Eryn",
    "Esmeralda",
    "Esperanza",
    "Esta",
    "Esteban",
    "Estefania",
    "Estel",
    "Estell",
    "Estella",
    "Estelle",
    "Estevan",
    "Esther",
    "Estrella",
    "Etha",
    "Ethan",
    "Ethel",
    "Ethelyn",
    "Ethyl",
    "Ettie",
    "Eudora",
    "Eugene",
    "Eugenia",
    "Eula",
    "Eulah",
    "Eulalia",
    "Euna",
    "Eunice",
    "Eusebio",
    "Eva",
    "Evalyn",
    "Evan",
    "Evangeline",
    "Evans",
    "Eve",
    "Eveline",
    "Evelyn",
    "Everardo",
    "Everett",
    "Everette",
    "Evert",
    "Evie",
    "Ewald",
    "Ewell",
    "Ezekiel",
    "Ezequiel",
    "Ezra",
    "Fabian",
    "Fabiola",
    "Fae",
    "Fannie",
    "Fanny",
    "Fatima",
    "Faustino",
    "Fausto",
    "Favian",
    "Fay",
    "Faye",
    "Federico",
    "Felicia",
    "Felicita",
    "Felicity",
    "Felipa",
    "Felipe",
    "Felix",
    "Felton",
    "Fermin",
    "Fern",
    "Fernando",
    "Ferne",
    "Fidel",
    "Filiberto",
    "Filomena",
    "Finn",
    "Fiona",
    "Flavie",
    "Flavio",
    "Fleta",
    "Fletcher",
    "Flo",
    "Florence",
    "Florencio",
    "Florian",
    "Florida",
    "Florine",
    "Flossie",
    "Floy",
    "Floyd",
    "Ford",
    "Forest",
    "Forrest",
    "Foster",
    "Frances",
    "Francesca",
    "Francesco",
    "Francis",
    "Francisca",
    "Francisco",
    "Franco",
    "Frank",
    "Frankie",
    "Franz",
    "Fred",
    "Freda",
    "Freddie",
    "Freddy",
    "Frederic",
    "Frederick",
    "Frederik",
    "Frederique",
    "Fredrick",
    "Fredy",
    "Freeda",
    "Freeman",
    "Freida",
    "Frida",
    "Frieda",
    "Friedrich",
    "Fritz",
    "Furman",
    "Gabe",
    "Gabriel",
    "Gabriella",
    "Gabrielle",
    "Gaetano",
    "Gage",
    "Gail",
    "Gardner",
    "Garett",
    "Garfield",
    "Garland",
    "Garnet",
    "Garnett",
    "Garret",
    "Garrett",
    "Garrick",
    "Garrison",
    "Garry",
    "Garth",
    "Gaston",
    "Gavin",
    "Gay",
    "Gayle",
    "Gaylord",
    "Gene",
    "General",
    "Genesis",
    "Genevieve",
    "Gennaro",
    "Genoveva",
    "Geo",
    "Geoffrey",
    "George",
    "Georgette",
    "Georgiana",
    "Georgianna",
    "Geovanni",
    "Geovanny",
    "Geovany",
    "Gerald",
    "Geraldine",
    "Gerard",
    "Gerardo",
    "Gerda",
    "Gerhard",
    "Germaine",
    "German",
    "Gerry",
    "Gerson",
    "Gertrude",
    "Gia",
    "Gianni",
    "Gideon",
    "Gilbert",
    "Gilberto",
    "Gilda",
    "Giles",
    "Gillian",
    "Gina",
    "Gino",
    "Giovani",
    "Giovanna",
    "Giovanni",
    "Giovanny",
    "Gisselle",
    "Giuseppe",
    "Gladyce",
    "Gladys",
    "Glen",
    "Glenda",
    "Glenna",
    "Glennie",
    "Gloria",
    "Godfrey",
    "Golda",
    "Golden",
    "Gonzalo",
    "Gordon",
    "Grace",
    "Gracie",
    "Graciela",
    "Grady",
    "Graham",
    "Grant",
    "Granville",
    "Grayce",
    "Grayson",
    "Green",
    "Greg",
    "Gregg",
    "Gregoria",
    "Gregorio",
    "Gregory",
    "Greta",
    "Gretchen",
    "Greyson",
    "Griffin",
    "Grover",
    "Guadalupe",
    "Gudrun",
    "Guido",
    "Guillermo",
    "Guiseppe",
    "Gunnar",
    "Gunner",
    "Gus",
    "Gussie",
    "Gust",
    "Gustave",
    "Guy",
    "Gwen",
    "Gwendolyn",
    "Hadley",
    "Hailee",
    "Hailey",
    "Hailie",
    "Hal",
    "Haleigh",
    "Haley",
    "Halie",
    "Halle",
    "Hallie",
    "Hank",
    "Hanna",
    "Hannah",
    "Hans",
    "Hardy",
    "Harley",
    "Harmon",
    "Harmony",
    "Harold",
    "Harrison",
    "Harry",
    "Harvey",
    "Haskell",
    "Hassan",
    "Hassie",
    "Hattie",
    "Haven",
    "Hayden",
    "Haylee",
    "Hayley",
    "Haylie",
    "Hazel",
    "Hazle",
    "Heath",
    "Heather",
    "Heaven",
    "Heber",
    "Hector",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helga",
    "Hellen",
    "Helmer",
    "Heloise",
    "Henderson",
    "Henri",
    "Henriette",
    "Henry",
    "Herbert",
    "Herman",
    "Hermann",
    "Hermina",
    "Herminia",
    "Herminio",
    "Hershel",
    "Herta",
    "Hertha",
    "Hester",
    "Hettie",
    "Hilario",
    "Hilbert",
    "Hilda",
    "Hildegard",
    "Hillard",
    "Hillary",
    "Hilma",
    "Hilton",
    "Hipolito",
    "Hiram",
    "Hobart",
    "Holden",
    "Hollie",
    "Hollis",
    "Holly",
    "Hope",
    "Horace",
    "Horacio",
    "Hortense",
    "Hosea",
    "Houston",
    "Howard",
    "Howell",
    "Hoyt",
    "Hubert",
    "Hudson",
    "Hugh",
    "Hulda",
    "Humberto",
    "Hunter",
    "Hyman",
    "Ian",
    "Ibrahim",
    "Icie",
    "Ida",
    "Idell",
    "Idella",
    "Ignacio",
    "Ignatius",
    "Ike",
    "Ila",
    "Ilene",
    "Iliana",
    "Ima",
    "Imani",
    "Imelda",
    "Immanuel",
    "Imogene",
    "Ines",
    "Irma",
    "Irving",
    "Irwin",
    "Isaac",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Isac",
    "Isadore",
    "Isai",
    "Isaiah",
    "Isaias",
    "Isidro",
    "Ismael",
    "Isobel",
    "Isom",
    "Israel",
    "Issac",
    "Itzel",
    "Iva",
    "Ivah",
    "Ivory",
    "Ivy",
    "Izabella",
    "Izaiah",
    "Jabari",
    "Jace",
    "Jacey",
    "Jacinthe",
    "Jacinto",
    "Jack",
    "Jackeline",
    "Jackie",
    "Jacklyn",
    "Jackson",
    "Jacky",
    "Jaclyn",
    "Jacquelyn",
    "Jacques",
    "Jacynthe",
    "Jada",
    "Jade",
    "Jaden",
    "Jadon",
    "Jadyn",
    "Jaeden",
    "Jaida",
    "Jaiden",
    "Jailyn",
    "Jaime",
    "Jairo",
    "Jakayla",
    "Jake",
    "Jakob",
    "Jaleel",
    "Jalen",
    "Jalon",
    "Jalyn",
    "Jamaal",
    "Jamal",
    "Jamar",
    "Jamarcus",
    "Jamel",
    "Jameson",
    "Jamey",
    "Jamie",
    "Jamil",
    "Jamir",
    "Jamison",
    "Jammie",
    "Jan",
    "Jana",
    "Janae",
    "Jane",
    "Janelle",
    "Janessa",
    "Janet",
    "Janice",
    "Janick",
    "Janie",
    "Janis",
    "Janiya",
    "Jannie",
    "Jany",
    "Jaquan",
    "Jaquelin",
    "Jaqueline",
    "Jared",
    "Jaren",
    "Jarod",
    "Jaron",
    "Jarred",
    "Jarrell",
    "Jarret",
    "Jarrett",
    "Jarrod",
    "Jarvis",
    "Jasen",
    "Jasmin",
    "Jason",
    "Jasper",
    "Jaunita",
    "Javier",
    "Javon",
    "Javonte",
    "Jay",
    "Jayce",
    "Jaycee",
    "Jayda",
    "Jayde",
    "Jayden",
    "Jaydon",
    "Jaylan",
    "Jaylen",
    "Jaylin",
    "Jaylon",
    "Jayme",
    "Jayne",
    "Jayson",
    "Jazlyn",
    "Jazmin",
    "Jazmyn",
    "Jazmyne",
    "Jean",
    "Jeanette",
    "Jeanie",
    "Jeanne",
    "Jed",
    "Jedediah",
    "Jedidiah",
    "Jeff",
    "Jefferey",
    "Jeffery",
    "Jeffrey",
    "Jeffry",
    "Jena",
    "Jenifer",
    "Jennie",
    "Jennifer",
    "Jennings",
    "Jennyfer",
    "Jensen",
    "Jerad",
    "Jerald",
    "Jeramie",
    "Jeramy",
    "Jerel",
    "Jeremie",
    "Jeremy",
    "Jermain",
    "Jermaine",
    "Jermey",
    "Jerod",
    "Jerome",
    "Jeromy",
    "Jerrell",
    "Jerrod",
    "Jerrold",
    "Jerry",
    "Jess",
    "Jesse",
    "Jessica",
    "Jessie",
    "Jessika",
    "Jessy",
    "Jessyca",
    "Jesus",
    "Jett",
    "Jettie",
    "Jevon",
    "Jewel",
    "Jewell",
    "Jillian",
    "Jimmie",
    "Jimmy",
    "Jo",
    "Joan",
    "Joana",
    "Joanie",
    "Joanne",
    "Joannie",
    "Joanny",
    "Joany",
    "Joaquin",
    "Jocelyn",
    "Jodie",
    "Jody",
    "Joe",
    "Joel",
    "Joelle",
    "Joesph",
    "Joey",
    "Johan",
    "Johann",
    "Johanna",
    "Johathan",
    "John",
    "Johnathan",
    "Johnathon",
    "Johnnie",
    "Johnny",
    "Johnpaul",
    "Johnson",
    "Jolie",
    "Jon",
    "Jonas",
    "Jonatan",
    "Jonathan",
    "Jonathon",
    "Jordan",
    "Jordane",
    "Jordi",
    "Jordon",
    "Jordy",
    "Jordyn",
    "Jorge",
    "Jose",
    "Josefa",
    "Josefina",
    "Joseph",
    "Josephine",
    "Josh",
    "Joshua",
    "Joshuah",
    "Josiah",
    "Josiane",
    "Josianne",
    "Josie",
    "Josue",
    "Jovan",
    "Jovani",
    "Jovanny",
    "Jovany",
    "Joy",
    "Joyce",
    "Juana",
    "Juanita",
    "Judah",
    "Judd",
    "Jude",
    "Judge",
    "Judson",
    "Judy",
    "Jules",
    "Julia",
    "Julian",
    "Juliana",
    "Julianne",
    "Julie",
    "Julien",
    "Juliet",
    "Julio",
    "Julius",
    "June",
    "Junior",
    "Junius",
    "Justen",
    "Justice",
    "Justina",
    "Justine",
    "Juston",
    "Justus",
    "Justyn",
    "Juvenal",
    "Juwan",
    "Kacey",
    "Kaci",
    "Kacie",
    "Kade",
    "Kaden",
    "Kadin",
    "Kaela",
    "Kaelyn",
    "Kaia",
    "Kailee",
    "Kailey",
    "Kailyn",
    "Kaitlin",
    "Kaitlyn",
    "Kale",
    "Kaleb",
    "Kaleigh",
    "Kaley",
    "Kali",
    "Kallie",
    "Kameron",
    "Kamille",
    "Kamren",
    "Kamron",
    "Kamryn",
    "Kane",
    "Kara",
    "Kareem",
    "Karelle",
    "Karen",
    "Kari",
    "Kariane",
    "Karianne",
    "Karina",
    "Karine",
    "Karl",
    "Karlee",
    "Karley",
    "Karli",
    "Karlie",
    "Karolann",
    "Karson",
    "Kasandra",
    "Kasey",
    "Kassandra",
    "Katarina",
    "Katelin",
    "Katelyn",
    "Katelynn",
    "Katharina",
    "Katherine",
    "Katheryn",
    "Kathleen",
    "Kathlyn",
    "Kathryn",
    "Kathryne",
    "Katlyn",
    "Katlynn",
    "Katrina",
    "Katrine",
    "Kattie",
    "Kavon",
    "Kay",
    "Kaya",
    "Kaycee",
    "Kayden",
    "Kayla",
    "Kaylah",
    "Kaylee",
    "Kayleigh",
    "Kayley",
    "Kayli",
    "Kaylie",
    "Kaylin",
    "Keagan",
    "Keanu",
    "Keara",
    "Keaton",
    "Keegan",
    "Keeley",
    "Keely",
    "Keenan",
    "Keira",
    "Keith",
    "Kellen",
    "Kelley",
    "Kelli",
    "Kellie",
    "Kelly",
    "Kelsi",
    "Kelsie",
    "Kelton",
    "Kelvin",
    "Ken",
    "Kendall",
    "Kendra",
    "Kendrick",
    "Kenna",
    "Kennedi",
    "Kennedy",
    "Kenneth",
    "Kennith",
    "Kenny",
    "Kenton",
    "Kenya",
    "Kenyatta",
    "Kenyon",
    "Keon",
    "Keshaun",
    "Keshawn",
    "Keven",
    "Kevin",
    "Kevon",
    "Keyon",
    "Keyshawn",
    "Khalid",
    "Khalil",
    "Kian",
    "Kiana",
    "Kianna",
    "Kiara",
    "Kiarra",
    "Kiel",
    "Kiera",
    "Kieran",
    "Kiley",
    "Kim",
    "Kimberly",
    "King",
    "Kip",
    "Kira",
    "Kirk",
    "Kirsten",
    "Kirstin",
    "Kitty",
    "Kobe",
    "Koby",
    "Kody",
    "Kolby",
    "Kole",
    "Korbin",
    "Korey",
    "Kory",
    "Kraig",
    "Kris",
    "Krista",
    "Kristian",
    "Kristin",
    "Kristina",
    "Kristofer",
    "Kristoffer",
    "Kristopher",
    "Kristy",
    "Krystal",
    "Krystel",
    "Krystina",
    "Kurt",
    "Kurtis",
    "Kyla",
    "Kyle",
    "Kylee",
    "Kyleigh",
    "Kyler",
    "Kylie",
    "Kyra",
    "Lacey",
    "Lacy",
    "Ladarius",
    "Lafayette",
    "Laila",
    "Laisha",
    "Lamar",
    "Lambert",
    "Lamont",
    "Lance",
    "Landen",
    "Lane",
    "Laney",
    "Larissa",
    "Laron",
    "Larry",
    "Larue",
    "Laura",
    "Laurel",
    "Lauren",
    "Laurence",
    "Lauretta",
    "Lauriane",
    "Laurianne",
    "Laurie",
    "Laurine",
    "Laury",
    "Lauryn",
    "Lavada",
    "Lavern",
    "Laverna",
    "Laverne",
    "Lavina",
    "Lavinia",
    "Lavon",
    "Lavonne",
    "Lawrence",
    "Lawson",
    "Layla",
    "Layne",
    "Lazaro",
    "Lea",
    "Leann",
    "Leanna",
    "Leanne",
    "Leatha",
    "Leda",
    "Lee",
    "Leif",
    "Leila",
    "Leilani",
    "Lela",
    "Lelah",
    "Leland",
    "Lelia",
    "Lempi",
    "Lemuel",
    "Lenna",
    "Lennie",
    "Lenny",
    "Lenora",
    "Lenore",
    "Leo",
    "Leola",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leone",
    "Leonel",
    "Leonie",
    "Leonor",
    "Leonora",
    "Leopold",
    "Leopoldo",
    "Leora",
    "Lera",
    "Lesley",
    "Leslie",
    "Lesly",
    "Lessie",
    "Lester",
    "Leta",
    "Letha",
    "Letitia",
    "Levi",
    "Lew",
    "Lewis",
    "Lexi",
    "Lexie",
    "Lexus",
    "Lia",
    "Liam",
    "Liana",
    "Libbie",
    "Libby",
    "Lila",
    "Lilian",
    "Liliana",
    "Liliane",
    "Lilla",
    "Lillian",
    "Lilliana",
    "Lillie",
    "Lilly",
    "Lily",
    "Lilyan",
    "Lina",
    "Lincoln",
    "Linda",
    "Lindsay",
    "Lindsey",
    "Linnea",
    "Linnie",
    "Linwood",
    "Lionel",
    "Lisa",
    "Lisandro",
    "Lisette",
    "Litzy",
    "Liza",
    "Lizeth",
    "Lizzie",
    "Llewellyn",
    "Lloyd",
    "Logan",
    "Lois",
    "Lola",
    "Lolita",
    "Loma",
    "Lon",
    "London",
    "Lonie",
    "Lonnie",
    "Lonny",
    "Lonzo",
    "Lora",
    "Loraine",
    "Loren",
    "Lorena",
    "Lorenz",
    "Lorenza",
    "Lorenzo",
    "Lori",
    "Lorine",
    "Lorna",
    "Lottie",
    "Lou",
    "Louie",
    "Louisa",
    "Lourdes",
    "Louvenia",
    "Lowell",
    "Loy",
    "Loyal",
    "Loyce",
    "Lucas",
    "Luciano",
    "Lucie",
    "Lucienne",
    "Lucile",
    "Lucinda",
    "Lucio",
    "Lucious",
    "Lucius",
    "Lucy",
    "Ludie",
    "Ludwig",
    "Lue",
    "Luella",
    "Luigi",
    "Luis",
    "Luisa",
    "Lukas",
    "Lula",
    "Lulu",
    "Luna",
    "Lupe",
    "Lura",
    "Lurline",
    "Luther",
    "Luz",
    "Lyda",
    "Lydia",
    "Lyla",
    "Lynn",
    "Lyric",
    "Lysanne",
    "Mabel",
    "Mabelle",
    "Mable",
    "Mac",
    "Macey",
    "Maci",
    "Macie",
    "Mack",
    "Mackenzie",
    "Macy",
    "Madaline",
    "Madalyn",
    "Maddison",
    "Madeline",
    "Madelyn",
    "Madelynn",
    "Madge",
    "Madie",
    "Madilyn",
    "Madisen",
    "Madison",
    "Madisyn",
    "Madonna",
    "Madyson",
    "Mae",
    "Maegan",
    "Maeve",
    "Mafalda",
    "Magali",
    "Magdalen",
    "Magdalena",
    "Maggie",
    "Magnolia",
    "Magnus",
    "Maia",
    "Maida",
    "Maiya",
    "Major",
    "Makayla",
    "Makenna",
    "Makenzie",
    "Malachi",
    "Malcolm",
    "Malika",
    "Malinda",
    "Mallie",
    "Mallory",
    "Malvina",
    "Mandy",
    "Manley",
    "Manuel",
    "Manuela",
    "Mara",
    "Marc",
    "Marcel",
    "Marcelina",
    "Marcelino",
    "Marcella",
    "Marcelle",
    "Marcellus",
    "Marcelo",
    "Marcia",
    "Marco",
    "Marcos",
    "Marcus",
    "Margaret",
    "Margarete",
    "Margarett",
    "Margaretta",
    "Margarette",
    "Margarita",
    "Marge",
    "Margie",
    "Margot",
    "Margret",
    "Marguerite",
    "Maria",
    "Mariah",
    "Mariam",
    "Marian",
    "Mariana",
    "Mariane",
    "Marianna",
    "Marianne",
    "Mariano",
    "Maribel",
    "Marie",
    "Mariela",
    "Marielle",
    "Marietta",
    "Marilie",
    "Marilou",
    "Marilyne",
    "Marina",
    "Mario",
    "Marion",
    "Marisa",
    "Marisol",
    "Maritza",
    "Marjolaine",
    "Marjorie",
    "Marjory",
    "Mark",
    "Markus",
    "Marlee",
    "Marlen",
    "Marlene",
    "Marley",
    "Marlin",
    "Marlon",
    "Marques",
    "Marquis",
    "Marquise",
    "Marshall",
    "Marta",
    "Martin",
    "Martina",
    "Martine",
    "Marty",
    "Marvin",
    "Mary",
    "Maryam",
    "Maryjane",
    "Maryse",
    "Mason",
    "Mateo",
    "Mathew",
    "Mathias",
    "Mathilde",
    "Matilda",
    "Matilde",
    "Matt",
    "Matteo",
    "Mattie",
    "Maud",
    "Maude",
    "Maudie",
    "Maureen",
    "Maurice",
    "Mauricio",
    "Maurine",
    "Maverick",
    "Mavis",
    "Max",
    "Maxie",
    "Maxime",
    "Maximilian",
    "Maximillia",
    "Maximillian",
    "Maximo",
    "Maximus",
    "Maxine",
    "Maxwell",
    "May",
    "Maya",
    "Maybell",
    "Maybelle",
    "Maye",
    "Maymie",
    "Maynard",
    "Mayra",
    "Mazie",
    "Mckayla",
    "Mckenna",
    "Mckenzie",
    "Meagan",
    "Meaghan",
    "Meda",
    "Megane",
    "Meggie",
    "Meghan",
    "Mekhi",
    "Melany",
    "Melba",
    "Melisa",
    "Melissa",
    "Mellie",
    "Melody",
    "Melvin",
    "Melvina",
    "Melyna",
    "Melyssa",
    "Mercedes",
    "Meredith",
    "Merl",
    "Merle",
    "Merlin",
    "Merritt",
    "Mertie",
    "Mervin",
    "Meta",
    "Mia",
    "Micaela",
    "Micah",
    "Michael",
    "Michaela",
    "Michale",
    "Micheal",
    "Michel",
    "Michele",
    "Michelle",
    "Miguel",
    "Mikayla",
    "Mike",
    "Mikel",
    "Milan",
    "Miles",
    "Milford",
    "Miller",
    "Millie",
    "Milo",
    "Milton",
    "Mina",
    "Minerva",
    "Minnie",
    "Miracle",
    "Mireille",
    "Mireya",
    "Misael",
    "Missouri",
    "Misty",
    "Mitchel",
    "Mitchell",
    "Mittie",
    "Modesta",
    "Modesto",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moises",
    "Mollie",
    "Molly",
    "Mona",
    "Monica",
    "Monique",
    "Monroe",
    "Monserrat",
    "Monserrate",
    "Montana",
    "Monte",
    "Monty",
    "Morgan",
    "Moriah",
    "Morris",
    "Mortimer",
    "Morton",
    "Mose",
    "Moses",
    "Moshe",
    "Mossie",
    "Mozell",
    "Mozelle",
    "Muhammad",
    "Muriel",
    "Murl",
    "Murphy",
    "Murray",
    "Mustafa",
    "Mya",
    "Myah",
    "Mylene",
    "Myles",
    "Myra",
    "Myriam",
    "Myrl",
    "Myrna",
    "Myron",
    "Myrtice",
    "Myrtie",
    "Myrtis",
    "Myrtle",
    "Nadia",
    "Nakia",
    "Name",
    "Nannie",
    "Naomi",
    "Naomie",
    "Napoleon",
    "Narciso",
    "Nash",
    "Nasir",
    "Nat",
    "Natalia",
    "Natalie",
    "Natasha",
    "Nathan",
    "Nathanael",
    "Nathanial",
    "Nathaniel",
    "Nathen",
    "Nayeli",
    "Neal",
    "Ned",
    "Nedra",
    "Neha",
    "Neil",
    "Nelda",
    "Nella",
    "Nelle",
    "Nellie",
    "Nels",
    "Nelson",
    "Neoma",
    "Nestor",
    "Nettie",
    "Neva",
    "Newell",
    "Newton",
    "Nia",
    "Nicholas",
    "Nicholaus",
    "Nichole",
    "Nick",
    "Nicklaus",
    "Nickolas",
    "Nico",
    "Nicola",
    "Nicolas",
    "Nicole",
    "Nicolette",
    "Nigel",
    "Nikita",
    "Nikki",
    "Nikko",
    "Niko",
    "Nikolas",
    "Nils",
    "Nina",
    "Noah",
    "Noble",
    "Noe",
    "Noel",
    "Noelia",
    "Noemi",
    "Noemie",
    "Noemy",
    "Nola",
    "Nolan",
    "Nona",
    "Nora",
    "Norbert",
    "Norberto",
    "Norene",
    "Norma",
    "Norris",
    "Norval",
    "Norwood",
    "Nova",
    "Novella",
    "Nya",
    "Nyah",
    "Nyasia",
    "Obie",
    "Oceane",
    "Ocie",
    "Octavia",
    "Oda",
    "Odell",
    "Odessa",
    "Odie",
    "Ofelia",
    "Okey",
    "Ola",
    "Olaf",
    "Ole",
    "Olen",
    "Oleta",
    "Olga",
    "Olin",
    "Oliver",
    "Ollie",
    "Oma",
    "Omari",
    "Omer",
    "Ona",
    "Onie",
    "Opal",
    "Ophelia",
    "Ora",
    "Oral",
    "Oran",
    "Oren",
    "Orie",
    "Orin",
    "Orion",
    "Orland",
    "Orlando",
    "Orlo",
    "Orpha",
    "Orrin",
    "Orval",
    "Orville",
    "Osbaldo",
    "Osborne",
    "Oscar",
    "Osvaldo",
    "Oswald",
    "Oswaldo",
    "Otha",
    "Otho",
    "Otilia",
    "Otis",
    "Ottilie",
    "Ottis",
    "Otto",
    "Ova",
    "Owen",
    "Ozella",
    "Pablo",
    "Paige",
    "Palma",
    "Pamela",
    "Pansy",
    "Paolo",
    "Paris",
    "Parker",
    "Pascale",
    "Pasquale",
    "Pat",
    "Patience",
    "Patricia",
    "Patrick",
    "Patsy",
    "Pattie",
    "Paul",
    "Paula",
    "Pauline",
    "Paxton",
    "Payton",
    "Pearl",
    "Pearlie",
    "Pearline",
    "Pedro",
    "Peggie",
    "Penelope",
    "Percival",
    "Percy",
    "Perry",
    "Pete",
    "Peter",
    "Petra",
    "Peyton",
    "Philip",
    "Phoebe",
    "Phyllis",
    "Pierce",
    "Pierre",
    "Pietro",
    "Pink",
    "Pinkie",
    "Piper",
    "Polly",
    "Porter",
    "Precious",
    "Presley",
    "Preston",
    "Price",
    "Prince",
    "Princess",
    "Priscilla",
    "Providenci",
    "Prudence",
    "Queen",
    "Queenie",
    "Quentin",
    "Quincy",
    "Quinn",
    "Quinten",
    "Quinton",
    "Rachael",
    "Rachel",
    "Rachelle",
    "Rae",
    "Raegan",
    "Rafael",
    "Rafaela",
    "Raheem",
    "Rahsaan",
    "Rahul",
    "Raina",
    "Raleigh",
    "Ralph",
    "Ramiro",
    "Ramon",
    "Ramona",
    "Randal",
    "Randall",
    "Randi",
    "Randy",
    "Ransom",
    "Raoul",
    "Raphael",
    "Raphaelle",
    "Raquel",
    "Rashad",
    "Rashawn",
    "Rasheed",
    "Raul",
    "Raven",
    "Ray",
    "Raymond",
    "Raymundo",
    "Reagan",
    "Reanna",
    "Reba",
    "Rebeca",
    "Rebecca",
    "Rebeka",
    "Rebekah",
    "Reece",
    "Reed",
    "Reese",
    "Regan",
    "Reggie",
    "Reginald",
    "Reid",
    "Reilly",
    "Reina",
    "Reinhold",
    "Remington",
    "Rene",
    "Renee",
    "Ressie",
    "Reta",
    "Retha",
    "Retta",
    "Reuben",
    "Reva",
    "Rex",
    "Rey",
    "Reyes",
    "Reymundo",
    "Reyna",
    "Reynold",
    "Rhea",
    "Rhett",
    "Rhianna",
    "Rhiannon",
    "Rhoda",
    "Ricardo",
    "Richard",
    "Richie",
    "Richmond",
    "Rick",
    "Rickey",
    "Rickie",
    "Ricky",
    "Rico",
    "Rigoberto",
    "Riley",
    "Rita",
    "River",
    "Robb",
    "Robbie",
    "Robert",
    "Roberta",
    "Roberto",
    "Robin",
    "Robyn",
    "Rocio",
    "Rocky",
    "Rod",
    "Roderick",
    "Rodger",
    "Rodolfo",
    "Rodrick",
    "Rodrigo",
    "Roel",
    "Rogelio",
    "Roger",
    "Rogers",
    "Rolando",
    "Rollin",
    "Roma",
    "Romaine",
    "Roman",
    "Ron",
    "Ronaldo",
    "Ronny",
    "Roosevelt",
    "Rory",
    "Rosa",
    "Rosalee",
    "Rosalia",
    "Rosalind",
    "Rosalinda",
    "Rosalyn",
    "Rosamond",
    "Rosanna",
    "Rosario",
    "Roscoe",
    "Rose",
    "Rosella",
    "Roselyn",
    "Rosemarie",
    "Rosemary",
    "Rosendo",
    "Rosetta",
    "Rosie",
    "Rosina",
    "Roslyn",
    "Ross",
    "Rossie",
    "Rowan",
    "Rowena",
    "Rowland",
    "Roxane",
    "Roxanne",
    "Roy",
    "Royal",
    "Royce",
    "Rozella",
    "Ruben",
    "Rubie",
    "Ruby",
    "Rubye",
    "Rudolph",
    "Rudy",
    "Rupert",
    "Russ",
    "Russel",
    "Russell",
    "Rusty",
    "Ruth",
    "Ruthe",
    "Ruthie",
    "Ryan",
    "Ryann",
    "Ryder",
    "Rylan",
    "Rylee",
    "Ryleigh",
    "Ryley",
    "Sabina",
    "Sabrina",
    "Sabryna",
    "Sadie",
    "Sadye",
    "Sage",
    "Saige",
    "Sallie",
    "Sally",
    "Salma",
    "Salvador",
    "Salvatore",
    "Sam",
    "Samanta",
    "Samantha",
    "Samara",
    "Samir",
    "Sammie",
    "Sammy",
    "Samson",
    "Sandra",
    "Sandrine",
    "Sandy",
    "Sanford",
    "Santa",
    "Santiago",
    "Santina",
    "Santino",
    "Santos",
    "Sarah",
    "Sarai",
    "Sarina",
    "Sasha",
    "Saul",
    "Savanah",
    "Savanna",
    "Savannah",
    "Savion",
    "Scarlett",
    "Schuyler",
    "Scot",
    "Scottie",
    "Scotty",
    "Seamus",
    "Sean",
    "Sebastian",
    "Sedrick",
    "Selena",
    "Selina",
    "Selmer",
    "Serena",
    "Serenity",
    "Seth",
    "Shad",
    "Shaina",
    "Shakira",
    "Shana",
    "Shane",
    "Shanel",
    "Shanelle",
    "Shania",
    "Shanie",
    "Shaniya",
    "Shanna",
    "Shannon",
    "Shanny",
    "Shanon",
    "Shany",
    "Sharon",
    "Shaun",
    "Shawn",
    "Shawna",
    "Shaylee",
    "Shayna",
    "Shayne",
    "Shea",
    "Sheila",
    "Sheldon",
    "Shemar",
    "Sheridan",
    "Sherman",
    "Sherwood",
    "Shirley",
    "Shyann",
    "Shyanne",
    "Sibyl",
    "Sid",
    "Sidney",
    "Sienna",
    "Sierra",
    "Sigmund",
    "Sigrid",
    "Sigurd",
    "Silas",
    "Sim",
    "Simeon",
    "Simone",
    "Sincere",
    "Sister",
    "Skye",
    "Skyla",
    "Skylar",
    "Sofia",
    "Soledad",
    "Solon",
    "Sonia",
    "Sonny",
    "Sonya",
    "Sophia",
    "Sophie",
    "Spencer",
    "Stacey",
    "Stacy",
    "Stan",
    "Stanford",
    "Stanley",
    "Stanton",
    "Stefan",
    "Stefanie",
    "Stella",
    "Stephan",
    "Stephania",
    "Stephanie",
    "Stephany",
    "Stephen",
    "Stephon",
    "Sterling",
    "Steve",
    "Stevie",
    "Stewart",
    "Stone",
    "Stuart",
    "Summer",
    "Sunny",
    "Susan",
    "Susana",
    "Susanna",
    "Susie",
    "Suzanne",
    "Sven",
    "Syble",
    "Sydnee",
    "Sydney",
    "Sydni",
    "Sydnie",
    "Sylvan",
    "Sylvester",
    "Sylvia",
    "Tabitha",
    "Tad",
    "Talia",
    "Talon",
    "Tamara",
    "Tamia",
    "Tania",
    "Tanner",
    "Tanya",
    "Tara",
    "Taryn",
    "Tate",
    "Tatum",
    "Tatyana",
    "Taurean",
    "Tavares",
    "Taya",
    "Taylor",
    "Teagan",
    "Ted",
    "Telly",
    "Terence",
    "Teresa",
    "Terrance",
    "Terrell",
    "Terrence",
    "Terrill",
    "Terry",
    "Tess",
    "Tessie",
    "Tevin",
    "Thad",
    "Thaddeus",
    "Thalia",
    "Thea",
    "Thelma",
    "Theo",
    "Theodora",
    "Theodore",
    "Theresa",
    "Therese",
    "Theresia",
    "Theron",
    "Thomas",
    "Thora",
    "Thurman",
    "Tia",
    "Tiana",
    "Tianna",
    "Tiara",
    "Tierra",
    "Tiffany",
    "Tillman",
    "Timmothy",
    "Timmy",
    "Timothy",
    "Tina",
    "Tito",
    "Titus",
    "Tobin",
    "Toby",
    "Tod",
    "Tom",
    "Tomas",
    "Tomasa",
    "Tommie",
    "Toney",
    "Toni",
    "Tony",
    "Torey",
    "Torrance",
    "Torrey",
    "Toy",
    "Trace",
    "Tracey",
    "Tracy",
    "Travis",
    "Travon",
    "Tre",
    "Tremaine",
    "Tremayne",
    "Trent",
    "Trenton",
    "Tressa",
    "Tressie",
    "Treva",
    "Trever",
    "Trevion",
    "Trevor",
    "Trey",
    "Trinity",
    "Trisha",
    "Tristian",
    "Tristin",
    "Triston",
    "Troy",
    "Trudie",
    "Trycia",
    "Trystan",
    "Turner",
    "Twila",
    "Tyler",
    "Tyra",
    "Tyree",
    "Tyreek",
    "Tyrel",
    "Tyrell",
    "Tyrese",
    "Tyrique",
    "Tyshawn",
    "Tyson",
    "Ubaldo",
    "Ulices",
    "Ulises",
    "Una",
    "Unique",
    "Urban",
    "Uriah",
    "Uriel",
    "Ursula",
    "Vada",
    "Valentin",
    "Valentina",
    "Valentine",
    "Valerie",
    "Vallie",
    "Van",
    "Vance",
    "Vanessa",
    "Vaughn",
    "Veda",
    "Velda",
    "Vella",
    "Velma",
    "Velva",
    "Vena",
    "Verda",
    "Verdie",
    "Vergie",
    "Verla",
    "Verlie",
    "Vern",
    "Verna",
    "Verner",
    "Vernice",
    "Vernie",
    "Vernon",
    "Verona",
    "Veronica",
    "Vesta",
    "Vicenta",
    "Vicente",
    "Vickie",
    "Vicky",
    "Victor",
    "Victoria",
    "Vida",
    "Vidal",
    "Vilma",
    "Vince",
    "Vincent",
    "Vincenza",
    "Vincenzo",
    "Vinnie",
    "Viola",
    "Violet",
    "Violette",
    "Virgie",
    "Virgil",
    "Virginia",
    "Virginie",
    "Vita",
    "Vito",
    "Viva",
    "Vivian",
    "Viviane",
    "Vivianne",
    "Vivien",
    "Vivienne",
    "Vladimir",
    "Wade",
    "Waino",
    "Waldo",
    "Walker",
    "Wallace",
    "Walter",
    "Walton",
    "Wanda",
    "Ward",
    "Warren",
    "Watson",
    "Wava",
    "Waylon",
    "Wayne",
    "Webster",
    "Weldon",
    "Wellington",
    "Wendell",
    "Wendy",
    "Werner",
    "Westley",
    "Weston",
    "Whitney",
    "Wilber",
    "Wilbert",
    "Wilburn",
    "Wiley",
    "Wilford",
    "Wilfred",
    "Wilfredo",
    "Wilfrid",
    "Wilhelm",
    "Wilhelmine",
    "Will",
    "Willa",
    "Willard",
    "William",
    "Willie",
    "Willis",
    "Willow",
    "Willy",
    "Wilma",
    "Wilmer",
    "Wilson",
    "Wilton",
    "Winfield",
    "Winifred",
    "Winnifred",
    "Winona",
    "Winston",
    "Woodrow",
    "Wyatt",
    "Wyman",
    "Xander",
    "Xavier",
    "Xzavier",
    "Yadira",
    "Yasmeen",
    "Yasmin",
    "Yasmine",
    "Yazmin",
    "Yesenia",
    "Yessenia",
    "Yolanda",
    "Yoshiko",
    "Yvette",
    "Yvonne",
    "Zachariah",
    "Zachary",
    "Zachery",
    "Zack",
    "Zackary",
    "Zackery",
    "Zakary",
    "Zander",
    "Zane",
    "Zaria",
    "Zechariah",
    "Zelda",
    "Zella",
    "Zelma",
    "Zena",
    "Zetta",
    "Zion",
    "Zita",
    "Zoe",
    "Zoey",
    "Zoie",
    "Zoila",
    "Zola",
    "Zora",
    "Zula"
  ],
  "last_name": [
    "Abbott",
    "Abernathy",
    "Abshire",
    "Adams",
    "Altenwerth",
    "Anderson",
    "Ankunding",
    "Armstrong",
    "Auer",
    "Aufderhar",
    "Bahringer",
    "Bailey",
    "Balistreri",
    "Barrows",
    "Bartell",
    "Bartoletti",
    "Barton",
    "Bashirian",
    "Batz",
    "Bauch",
    "Baumbach",
    "Bayer",
    "Beahan",
    "Beatty",
    "Bechtelar",
    "Becker",
    "Bednar",
    "Beer",
    "Beier",
    "Berge",
    "Bergnaum",
    "Bergstrom",
    "Bernhard",
    "Bernier",
    "Bins",
    "Blanda",
    "Blick",
    "Block",
    "Bode",
    "Boehm",
    "Bogan",
    "Bogisich",
    "Borer",
    "Bosco",
    "Botsford",
    "Boyer",
    "Boyle",
    "Bradtke",
    "Brakus",
    "Braun",
    "Breitenberg",
    "Brekke",
    "Brown",
    "Bruen",
    "Buckridge",
    "Carroll",
    "Carter",
    "Cartwright",
    "Casper",
    "Cassin",
    "Champlin",
    "Christiansen",
    "Cole",
    "Collier",
    "Collins",
    "Conn",
    "Connelly",
    "Conroy",
    "Considine",
    "Corkery",
    "Cormier",
    "Corwin",
    "Cremin",
    "Crist",
    "Crona",
    "Cronin",
    "Crooks",
    "Cruickshank",
    "Cummerata",
    "Cummings",
    "Dach",
    "D'Amore",
    "Daniel",
    "Dare",
    "Daugherty",
    "Davis",
    "Deckow",
    "Denesik",
    "Dibbert",
    "Dickens",
    "Dicki",
    "Dickinson",
    "Dietrich",
    "Donnelly",
    "Dooley",
    "Douglas",
    "Doyle",
    "DuBuque",
    "Durgan",
    "Ebert",
    "Effertz",
    "Eichmann",
    "Emard",
    "Emmerich",
    "Erdman",
    "Ernser",
    "Fadel",
    "Fahey",
    "Farrell",
    "Fay",
    "Feeney",
    "Feest",
    "Feil",
    "Ferry",
    "Fisher",
    "Flatley",
    "Frami",
    "Franecki",
    "Friesen",
    "Fritsch",
    "Funk",
    "Gaylord",
    "Gerhold",
    "Gerlach",
    "Gibson",
    "Gislason",
    "Gleason",
    "Gleichner",
    "Glover",
    "Goldner",
    "Goodwin",
    "Gorczany",
    "Gottlieb",
    "Goyette",
    "Grady",
    "Graham",
    "Grant",
    "Green",
    "Greenfelder",
    "Greenholt",
    "Grimes",
    "Gulgowski",
    "Gusikowski",
    "Gutkowski",
    "Gutmann",
    "Haag",
    "Hackett",
    "Hagenes",
    "Hahn",
    "Haley",
    "Halvorson",
    "Hamill",
    "Hammes",
    "Hand",
    "Hane",
    "Hansen",
    "Harber",
    "Harris",
    "Hartmann",
    "Harvey",
    "Hauck",
    "Hayes",
    "Heaney",
    "Heathcote",
    "Hegmann",
    "Heidenreich",
    "Heller",
    "Herman",
    "Hermann",
    "Hermiston",
    "Herzog",
    "Hessel",
    "Hettinger",
    "Hickle",
    "Hilll",
    "Hills",
    "Hilpert",
    "Hintz",
    "Hirthe",
    "Hodkiewicz",
    "Hoeger",
    "Homenick",
    "Hoppe",
    "Howe",
    "Howell",
    "Hudson",
    "Huel",
    "Huels",
    "Hyatt",
    "Jacobi",
    "Jacobs",
    "Jacobson",
    "Jakubowski",
    "Jaskolski",
    "Jast",
    "Jenkins",
    "Jerde",
    "Johns",
    "Johnson",
    "Johnston",
    "Jones",
    "Kassulke",
    "Kautzer",
    "Keebler",
    "Keeling",
    "Kemmer",
    "Kerluke",
    "Kertzmann",
    "Kessler",
    "Kiehn",
    "Kihn",
    "Kilback",
    "King",
    "Kirlin",
    "Klein",
    "Kling",
    "Klocko",
    "Koch",
    "Koelpin",
    "Koepp",
    "Kohler",
    "Konopelski",
    "Koss",
    "Kovacek",
    "Kozey",
    "Krajcik",
    "Kreiger",
    "Kris",
    "Kshlerin",
    "Kub",
    "Kuhic",
    "Kuhlman",
    "Kuhn",
    "Kulas",
    "Kunde",
    "Kunze",
    "Kuphal",
    "Kutch",
    "Kuvalis",
    "Labadie",
    "Lakin",
    "Lang",
    "Langosh",
    "Langworth",
    "Larkin",
    "Larson",
    "Leannon",
    "Lebsack",
    "Ledner",
    "Leffler",
    "Legros",
    "Lehner",
    "Lemke",
    "Lesch",
    "Leuschke",
    "Lind",
    "Lindgren",
    "Littel",
    "Little",
    "Lockman",
    "Lowe",
    "Lubowitz",
    "Lueilwitz",
    "Luettgen",
    "Lynch",
    "Macejkovic",
    "MacGyver",
    "Maggio",
    "Mann",
    "Mante",
    "Marks",
    "Marquardt",
    "Marvin",
    "Mayer",
    "Mayert",
    "McClure",
    "McCullough",
    "McDermott",
    "McGlynn",
    "McKenzie",
    "McLaughlin",
    "Medhurst",
    "Mertz",
    "Metz",
    "Miller",
    "Mills",
    "Mitchell",
    "Moen",
    "Mohr",
    "Monahan",
    "Moore",
    "Morar",
    "Morissette",
    "Mosciski",
    "Mraz",
    "Mueller",
    "Muller",
    "Murazik",
    "Murphy",
    "Murray",
    "Nader",
    "Nicolas",
    "Nienow",
    "Nikolaus",
    "Nitzsche",
    "Nolan",
    "Oberbrunner",
    "O'Connell",
    "O'Conner",
    "O'Hara",
    "O'Keefe",
    "O'Kon",
    "Okuneva",
    "Olson",
    "Ondricka",
    "O'Reilly",
    "Orn",
    "Ortiz",
    "Osinski",
    "Pacocha",
    "Padberg",
    "Pagac",
    "Parisian",
    "Parker",
    "Paucek",
    "Pfannerstill",
    "Pfeffer",
    "Pollich",
    "Pouros",
    "Powlowski",
    "Predovic",
    "Price",
    "Prohaska",
    "Prosacco",
    "Purdy",
    "Quigley",
    "Quitzon",
    "Rath",
    "Ratke",
    "Rau",
    "Raynor",
    "Reichel",
    "Reichert",
    "Reilly",
    "Reinger",
    "Rempel",
    "Renner",
    "Reynolds",
    "Rice",
    "Rippin",
    "Ritchie",
    "Robel",
    "Roberts",
    "Rodriguez",
    "Rogahn",
    "Rohan",
    "Rolfson",
    "Romaguera",
    "Roob",
    "Rosenbaum",
    "Rowe",
    "Ruecker",
    "Runolfsdottir",
    "Runolfsson",
    "Runte",
    "Russel",
    "Rutherford",
    "Ryan",
    "Sanford",
    "Satterfield",
    "Sauer",
    "Sawayn",
    "Schaden",
    "Schaefer",
    "Schamberger",
    "Schiller",
    "Schimmel",
    "Schinner",
    "Schmeler",
    "Schmidt",
    "Schmitt",
    "Schneider",
    "Schoen",
    "Schowalter",
    "Schroeder",
    "Schulist",
    "Schultz",
    "Schumm",
    "Schuppe",
    "Schuster",
    "Senger",
    "Shanahan",
    "Shields",
    "Simonis",
    "Sipes",
    "Skiles",
    "Smith",
    "Smitham",
    "Spencer",
    "Spinka",
    "Sporer",
    "Stamm",
    "Stanton",
    "Stark",
    "Stehr",
    "Steuber",
    "Stiedemann",
    "Stokes",
    "Stoltenberg",
    "Stracke",
    "Streich",
    "Stroman",
    "Strosin",
    "Swaniawski",
    "Swift",
    "Terry",
    "Thiel",
    "Thompson",
    "Tillman",
    "Torp",
    "Torphy",
    "Towne",
    "Toy",
    "Trantow",
    "Tremblay",
    "Treutel",
    "Tromp",
    "Turcotte",
    "Turner",
    "Ullrich",
    "Upton",
    "Vandervort",
    "Veum",
    "Volkman",
    "Von",
    "VonRueden",
    "Waelchi",
    "Walker",
    "Walsh",
    "Walter",
    "Ward",
    "Waters",
    "Watsica",
    "Weber",
    "Wehner",
    "Weimann",
    "Weissnat",
    "Welch",
    "West",
    "White",
    "Wiegand",
    "Wilderman",
    "Wilkinson",
    "Will",
    "Williamson",
    "Willms",
    "Windler",
    "Wintheiser",
    "Wisoky",
    "Wisozk",
    "Witting",
    "Wiza",
    "Wolf",
    "Wolff",
    "Wuckert",
    "Wunsch",
    "Wyman",
    "Yost",
    "Yundt",
    "Zboncak",
    "Zemlak",
    "Ziemann",
    "Zieme",
    "Zulauf"
  ],
  "prefix": [
    "Mr.",
    "Mrs.",
    "Ms.",
    "Miss",
    "Dr."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "MD",
    "DDS",
    "PhD",
    "DVM"
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
en.phone_number = {
  "formats": [
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####",
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####",
    "###-###-#### x###",
    "(###) ###-#### x###",
    "1-###-###-#### x###",
    "###.###.#### x###",
    "###-###-#### x####",
    "(###) ###-#### x####",
    "1-###-###-#### x####",
    "###.###.#### x####",
    "###-###-#### x#####",
    "(###) ###-#### x#####",
    "1-###-###-#### x#####",
    "###.###.#### x#####"
  ]
};
en.cell_phone = {
  "formats": [
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####"
  ]
};
en.business = {
  "credit_card_numbers": [
    "1234-2121-1221-1211",
    "1212-1221-1121-1234",
    "1211-1221-1234-2201",
    "1228-1221-1221-1431"
  ],
  "credit_card_expiry_dates": [
    "2011-10-12",
    "2012-11-12",
    "2015-11-11",
    "2013-9-12"
  ],
  "credit_card_types": [
    "visa",
    "mastercard",
    "americanexpress",
    "discover"
  ]
};
en.commerce = {
  "color": [
    "red",
    "green",
    "blue",
    "yellow",
    "purple",
    "mint green",
    "teal",
    "white",
    "black",
    "orange",
    "pink",
    "grey",
    "maroon",
    "violet",
    "turquoise",
    "tan",
    "sky blue",
    "salmon",
    "plum",
    "orchid",
    "olive",
    "magenta",
    "lime",
    "ivory",
    "indigo",
    "gold",
    "fuchsia",
    "cyan",
    "azure",
    "lavender",
    "silver"
  ],
  "department": [
    "Books",
    "Movies",
    "Music",
    "Games",
    "Electronics",
    "Computers",
    "Home",
    "Garden",
    "Tools",
    "Grocery",
    "Health",
    "Beauty",
    "Toys",
    "Kids",
    "Baby",
    "Clothing",
    "Shoes",
    "Jewelery",
    "Sports",
    "Outdoors",
    "Automotive",
    "Industrial"
  ],
  "product_name": {
    "adjective": [
      "Small",
      "Ergonomic",
      "Rustic",
      "Intelligent",
      "Gorgeous",
      "Incredible",
      "Fantastic",
      "Practical",
      "Sleek",
      "Awesome"
    ],
    "material": [
      "Steel",
      "Wooden",
      "Concrete",
      "Plastic",
      "Cotton",
      "Granite",
      "Rubber"
    ],
    "product": [
      "Chair",
      "Car",
      "Computer",
      "Gloves",
      "Pants",
      "Shirt",
      "Table",
      "Shoes",
      "Hat"
    ]
  }
};
en.team = {
  "creature": [
    "ants",
    "bats",
    "bears",
    "bees",
    "birds",
    "buffalo",
    "cats",
    "chickens",
    "cattle",
    "dogs",
    "dolphins",
    "ducks",
    "elephants",
    "fishes",
    "foxes",
    "frogs",
    "geese",
    "goats",
    "horses",
    "kangaroos",
    "lions",
    "monkeys",
    "owls",
    "oxen",
    "penguins",
    "people",
    "pigs",
    "rabbits",
    "sheep",
    "tigers",
    "whales",
    "wolves",
    "zebras",
    "banshees",
    "crows",
    "black cats",
    "chimeras",
    "ghosts",
    "conspirators",
    "dragons",
    "dwarves",
    "elves",
    "enchanters",
    "exorcists",
    "sons",
    "foes",
    "giants",
    "gnomes",
    "goblins",
    "gooses",
    "griffins",
    "lycanthropes",
    "nemesis",
    "ogres",
    "oracles",
    "prophets",
    "sorcerors",
    "spiders",
    "spirits",
    "vampires",
    "warlocks",
    "vixens",
    "werewolves",
    "witches",
    "worshipers",
    "zombies",
    "druids"
  ],
  "name": [
    "#{Address.state} #{creature}"
  ]
};
en.hacker = {
  "abbreviation": [
    "TCP",
    "HTTP",
    "SDD",
    "RAM",
    "GB",
    "CSS",
    "SSL",
    "AGP",
    "SQL",
    "FTP",
    "PCI",
    "AI",
    "ADP",
    "RSS",
    "XML",
    "EXE",
    "COM",
    "HDD",
    "THX",
    "SMTP",
    "SMS",
    "USB",
    "PNG",
    "SAS",
    "IB",
    "SCSI",
    "JSON",
    "XSS",
    "JBOD"
  ],
  "adjective": [
    "auxiliary",
    "primary",
    "back-end",
    "digital",
    "open-source",
    "virtual",
    "cross-platform",
    "redundant",
    "online",
    "haptic",
    "multi-byte",
    "bluetooth",
    "wireless",
    "1080p",
    "neural",
    "optical",
    "solid state",
    "mobile"
  ],
  "noun": [
    "driver",
    "protocol",
    "bandwidth",
    "panel",
    "microchip",
    "program",
    "port",
    "card",
    "array",
    "interface",
    "system",
    "sensor",
    "firewall",
    "hard drive",
    "pixel",
    "alarm",
    "feed",
    "monitor",
    "application",
    "transmitter",
    "bus",
    "circuit",
    "capacitor",
    "matrix"
  ],
  "verb": [
    "back up",
    "bypass",
    "hack",
    "override",
    "compress",
    "copy",
    "navigate",
    "index",
    "connect",
    "generate",
    "quantify",
    "calculate",
    "synthesize",
    "input",
    "transmit",
    "program",
    "reboot",
    "parse"
  ],
  "ingverb": [
    "backing up",
    "bypassing",
    "hacking",
    "overriding",
    "compressing",
    "copying",
    "navigating",
    "indexing",
    "connecting",
    "generating",
    "quantifying",
    "calculating",
    "synthesizing",
    "transmitting",
    "programming",
    "parsing"
  ]
};
en.app = {
  "name": [
    "Redhold",
    "Treeflex",
    "Trippledex",
    "Kanlam",
    "Bigtax",
    "Daltfresh",
    "Toughjoyfax",
    "Mat Lam Tam",
    "Otcom",
    "Tres-Zap",
    "Y-Solowarm",
    "Tresom",
    "Voltsillam",
    "Biodex",
    "Greenlam",
    "Viva",
    "Matsoft",
    "Temp",
    "Zoolab",
    "Subin",
    "Rank",
    "Job",
    "Stringtough",
    "Tin",
    "It",
    "Home Ing",
    "Zamit",
    "Sonsing",
    "Konklab",
    "Alpha",
    "Latlux",
    "Voyatouch",
    "Alphazap",
    "Holdlamis",
    "Zaam-Dox",
    "Sub-Ex",
    "Quo Lux",
    "Bamity",
    "Ventosanzap",
    "Lotstring",
    "Hatity",
    "Tempsoft",
    "Overhold",
    "Fixflex",
    "Konklux",
    "Zontrax",
    "Tampflex",
    "Span",
    "Namfix",
    "Transcof",
    "Stim",
    "Fix San",
    "Sonair",
    "Stronghold",
    "Fintone",
    "Y-find",
    "Opela",
    "Lotlux",
    "Ronstring",
    "Zathin",
    "Duobam",
    "Keylex"
  ],
  "version": [
    "0.#.#",
    "0.##",
    "#.##",
    "#.#",
    "#.#.#"
  ],
  "author": [
    "#{Name.name}",
    "#{Company.name}"
  ]
};

en.finance = {};
en.finance.account_type = ["Checking","Savings","Money Market", "Investment", "Home Loan", "Credit Card", "Auto Loan", "Personal Loan"];
en.finance.transaction_type = ["deposit", "withdrawal", "payment", "invoice"];

en.finance.currency = {
  "UAE Dirham": {
    "code": "AED",
    "symbol": ""
  },
  "Afghani": {
    "code": "AFN",
    "symbol": "؋"
  },
  "Lek": {
    "code": "ALL",
    "symbol": "Lek"
  },
  "Armenian Dram": {
    "code": "AMD",
    "symbol": ""
  },
  "Netherlands Antillian Guilder": {
    "code": "ANG",
    "symbol": "ƒ"
  },
  "Kwanza": {
    "code": "AOA",
    "symbol": ""
  },
  "Argentine Peso": {
    "code": "ARS",
    "symbol": "$"
  },
  "Australian Dollar": {
    "code": "AUD",
    "symbol": "$"
  },
  "Aruban Guilder": {
    "code": "AWG",
    "symbol": "ƒ"
  },
  "Azerbaijanian Manat": {
    "code": "AZN",
    "symbol": "ман"
  },
  "Convertible Marks": {
    "code": "BAM",
    "symbol": "KM"
  },
  "Barbados Dollar": {
    "code": "BBD",
    "symbol": "$"
  },
  "Taka": {
    "code": "BDT",
    "symbol": ""
  },
  "Bulgarian Lev": {
    "code": "BGN",
    "symbol": "лв"
  },
  "Bahraini Dinar": {
    "code": "BHD",
    "symbol": ""
  },
  "Burundi Franc": {
    "code": "BIF",
    "symbol": ""
  },
  "Bermudian Dollar (customarily known as Bermuda Dollar)": {
    "code": "BMD",
    "symbol": "$"
  },
  "Brunei Dollar": {
    "code": "BND",
    "symbol": "$"
  },
  "Boliviano Mvdol": {
    "code": "BOB BOV",
    "symbol": "$b"
  },
  "Brazilian Real": {
    "code": "BRL",
    "symbol": "R$"
  },
  "Bahamian Dollar": {
    "code": "BSD",
    "symbol": "$"
  },
  "Pula": {
    "code": "BWP",
    "symbol": "P"
  },
  "Belarussian Ruble": {
    "code": "BYR",
    "symbol": "p."
  },
  "Belize Dollar": {
    "code": "BZD",
    "symbol": "BZ$"
  },
  "Canadian Dollar": {
    "code": "CAD",
    "symbol": "$"
  },
  "Congolese Franc": {
    "code": "CDF",
    "symbol": ""
  },
  "Swiss Franc": {
    "code": "CHF",
    "symbol": "CHF"
  },
  "Chilean Peso Unidades de fomento": {
    "code": "CLP CLF",
    "symbol": "$"
  },
  "Yuan Renminbi": {
    "code": "CNY",
    "symbol": "¥"
  },
  "Colombian Peso Unidad de Valor Real": {
    "code": "COP COU",
    "symbol": "$"
  },
  "Costa Rican Colon": {
    "code": "CRC",
    "symbol": "₡"
  },
  "Cuban Peso Peso Convertible": {
    "code": "CUP CUC",
    "symbol": "₱"
  },
  "Cape Verde Escudo": {
    "code": "CVE",
    "symbol": ""
  },
  "Czech Koruna": {
    "code": "CZK",
    "symbol": "Kč"
  },
  "Djibouti Franc": {
    "code": "DJF",
    "symbol": ""
  },
  "Danish Krone": {
    "code": "DKK",
    "symbol": "kr"
  },
  "Dominican Peso": {
    "code": "DOP",
    "symbol": "RD$"
  },
  "Algerian Dinar": {
    "code": "DZD",
    "symbol": ""
  },
  "Kroon": {
    "code": "EEK",
    "symbol": ""
  },
  "Egyptian Pound": {
    "code": "EGP",
    "symbol": "£"
  },
  "Nakfa": {
    "code": "ERN",
    "symbol": ""
  },
  "Ethiopian Birr": {
    "code": "ETB",
    "symbol": ""
  },
  "Euro": {
    "code": "EUR",
    "symbol": "€"
  },
  "Fiji Dollar": {
    "code": "FJD",
    "symbol": "$"
  },
  "Falkland Islands Pound": {
    "code": "FKP",
    "symbol": "£"
  },
  "Pound Sterling": {
    "code": "GBP",
    "symbol": "£"
  },
  "Lari": {
    "code": "GEL",
    "symbol": ""
  },
  "Cedi": {
    "code": "GHS",
    "symbol": ""
  },
  "Gibraltar Pound": {
    "code": "GIP",
    "symbol": "£"
  },
  "Dalasi": {
    "code": "GMD",
    "symbol": ""
  },
  "Guinea Franc": {
    "code": "GNF",
    "symbol": ""
  },
  "Quetzal": {
    "code": "GTQ",
    "symbol": "Q"
  },
  "Guyana Dollar": {
    "code": "GYD",
    "symbol": "$"
  },
  "Hong Kong Dollar": {
    "code": "HKD",
    "symbol": "$"
  },
  "Lempira": {
    "code": "HNL",
    "symbol": "L"
  },
  "Croatian Kuna": {
    "code": "HRK",
    "symbol": "kn"
  },
  "Gourde US Dollar": {
    "code": "HTG USD",
    "symbol": ""
  },
  "Forint": {
    "code": "HUF",
    "symbol": "Ft"
  },
  "Rupiah": {
    "code": "IDR",
    "symbol": "Rp"
  },
  "New Israeli Sheqel": {
    "code": "ILS",
    "symbol": "₪"
  },
  "Indian Rupee": {
    "code": "INR",
    "symbol": ""
  },
  "Indian Rupee Ngultrum": {
    "code": "INR BTN",
    "symbol": ""
  },
  "Iraqi Dinar": {
    "code": "IQD",
    "symbol": ""
  },
  "Iranian Rial": {
    "code": "IRR",
    "symbol": "﷼"
  },
  "Iceland Krona": {
    "code": "ISK",
    "symbol": "kr"
  },
  "Jamaican Dollar": {
    "code": "JMD",
    "symbol": "J$"
  },
  "Jordanian Dinar": {
    "code": "JOD",
    "symbol": ""
  },
  "Yen": {
    "code": "JPY",
    "symbol": "¥"
  },
  "Kenyan Shilling": {
    "code": "KES",
    "symbol": ""
  },
  "Som": {
    "code": "KGS",
    "symbol": "лв"
  },
  "Riel": {
    "code": "KHR",
    "symbol": "៛"
  },
  "Comoro Franc": {
    "code": "KMF",
    "symbol": ""
  },
  "North Korean Won": {
    "code": "KPW",
    "symbol": "₩"
  },
  "Won": {
    "code": "KRW",
    "symbol": "₩"
  },
  "Kuwaiti Dinar": {
    "code": "KWD",
    "symbol": ""
  },
  "Cayman Islands Dollar": {
    "code": "KYD",
    "symbol": "$"
  },
  "Tenge": {
    "code": "KZT",
    "symbol": "лв"
  },
  "Kip": {
    "code": "LAK",
    "symbol": "₭"
  },
  "Lebanese Pound": {
    "code": "LBP",
    "symbol": "£"
  },
  "Sri Lanka Rupee": {
    "code": "LKR",
    "symbol": "₨"
  },
  "Liberian Dollar": {
    "code": "LRD",
    "symbol": "$"
  },
  "Lithuanian Litas": {
    "code": "LTL",
    "symbol": "Lt"
  },
  "Latvian Lats": {
    "code": "LVL",
    "symbol": "Ls"
  },
  "Libyan Dinar": {
    "code": "LYD",
    "symbol": ""
  },
  "Moroccan Dirham": {
    "code": "MAD",
    "symbol": ""
  },
  "Moldovan Leu": {
    "code": "MDL",
    "symbol": ""
  },
  "Malagasy Ariary": {
    "code": "MGA",
    "symbol": ""
  },
  "Denar": {
    "code": "MKD",
    "symbol": "ден"
  },
  "Kyat": {
    "code": "MMK",
    "symbol": ""
  },
  "Tugrik": {
    "code": "MNT",
    "symbol": "₮"
  },
  "Pataca": {
    "code": "MOP",
    "symbol": ""
  },
  "Ouguiya": {
    "code": "MRO",
    "symbol": ""
  },
  "Mauritius Rupee": {
    "code": "MUR",
    "symbol": "₨"
  },
  "Rufiyaa": {
    "code": "MVR",
    "symbol": ""
  },
  "Kwacha": {
    "code": "MWK",
    "symbol": ""
  },
  "Mexican Peso Mexican Unidad de Inversion (UDI)": {
    "code": "MXN MXV",
    "symbol": "$"
  },
  "Malaysian Ringgit": {
    "code": "MYR",
    "symbol": "RM"
  },
  "Metical": {
    "code": "MZN",
    "symbol": "MT"
  },
  "Naira": {
    "code": "NGN",
    "symbol": "₦"
  },
  "Cordoba Oro": {
    "code": "NIO",
    "symbol": "C$"
  },
  "Norwegian Krone": {
    "code": "NOK",
    "symbol": "kr"
  },
  "Nepalese Rupee": {
    "code": "NPR",
    "symbol": "₨"
  },
  "New Zealand Dollar": {
    "code": "NZD",
    "symbol": "$"
  },
  "Rial Omani": {
    "code": "OMR",
    "symbol": "﷼"
  },
  "Balboa US Dollar": {
    "code": "PAB USD",
    "symbol": "B/."
  },
  "Nuevo Sol": {
    "code": "PEN",
    "symbol": "S/."
  },
  "Kina": {
    "code": "PGK",
    "symbol": ""
  },
  "Philippine Peso": {
    "code": "PHP",
    "symbol": "Php"
  },
  "Pakistan Rupee": {
    "code": "PKR",
    "symbol": "₨"
  },
  "Zloty": {
    "code": "PLN",
    "symbol": "zł"
  },
  "Guarani": {
    "code": "PYG",
    "symbol": "Gs"
  },
  "Qatari Rial": {
    "code": "QAR",
    "symbol": "﷼"
  },
  "New Leu": {
    "code": "RON",
    "symbol": "lei"
  },
  "Serbian Dinar": {
    "code": "RSD",
    "symbol": "Дин."
  },
  "Russian Ruble": {
    "code": "RUB",
    "symbol": "руб"
  },
  "Rwanda Franc": {
    "code": "RWF",
    "symbol": ""
  },
  "Saudi Riyal": {
    "code": "SAR",
    "symbol": "﷼"
  },
  "Solomon Islands Dollar": {
    "code": "SBD",
    "symbol": "$"
  },
  "Seychelles Rupee": {
    "code": "SCR",
    "symbol": "₨"
  },
  "Sudanese Pound": {
    "code": "SDG",
    "symbol": ""
  },
  "Swedish Krona": {
    "code": "SEK",
    "symbol": "kr"
  },
  "Singapore Dollar": {
    "code": "SGD",
    "symbol": "$"
  },
  "Saint Helena Pound": {
    "code": "SHP",
    "symbol": "£"
  },
  "Leone": {
    "code": "SLL",
    "symbol": ""
  },
  "Somali Shilling": {
    "code": "SOS",
    "symbol": "S"
  },
  "Surinam Dollar": {
    "code": "SRD",
    "symbol": "$"
  },
  "Dobra": {
    "code": "STD",
    "symbol": ""
  },
  "El Salvador Colon US Dollar": {
    "code": "SVC USD",
    "symbol": "$"
  },
  "Syrian Pound": {
    "code": "SYP",
    "symbol": "£"
  },
  "Lilangeni": {
    "code": "SZL",
    "symbol": ""
  },
  "Baht": {
    "code": "THB",
    "symbol": "฿"
  },
  "Somoni": {
    "code": "TJS",
    "symbol": ""
  },
  "Manat": {
    "code": "TMT",
    "symbol": ""
  },
  "Tunisian Dinar": {
    "code": "TND",
    "symbol": ""
  },
  "Pa'anga": {
    "code": "TOP",
    "symbol": ""
  },
  "Turkish Lira": {
    "code": "TRY",
    "symbol": "TL"
  },
  "Trinidad and Tobago Dollar": {
    "code": "TTD",
    "symbol": "TT$"
  },
  "New Taiwan Dollar": {
    "code": "TWD",
    "symbol": "NT$"
  },
  "Tanzanian Shilling": {
    "code": "TZS",
    "symbol": ""
  },
  "Hryvnia": {
    "code": "UAH",
    "symbol": "₴"
  },
  "Uganda Shilling": {
    "code": "UGX",
    "symbol": ""
  },
  "US Dollar": {
    "code": "USD",
    "symbol": "$"
  },
  "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
    "code": "UYU UYI",
    "symbol": "$U"
  },
  "Uzbekistan Sum": {
    "code": "UZS",
    "symbol": "лв"
  },
  "Bolivar Fuerte": {
    "code": "VEF",
    "symbol": "Bs"
  },
  "Dong": {
    "code": "VND",
    "symbol": "₫"
  },
  "Vatu": {
    "code": "VUV",
    "symbol": ""
  },
  "Tala": {
    "code": "WST",
    "symbol": ""
  },
  "CFA Franc BEAC": {
    "code": "XAF",
    "symbol": ""
  },
  "Silver": {
    "code": "XAG",
    "symbol": ""
  },
  "Gold": {
    "code": "XAU",
    "symbol": ""
  },
  "Bond Markets Units European Composite Unit (EURCO)": {
    "code": "XBA",
    "symbol": ""
  },
  "European Monetary Unit (E.M.U.-6)": {
    "code": "XBB",
    "symbol": ""
  },
  "European Unit of Account 9(E.U.A.-9)": {
    "code": "XBC",
    "symbol": ""
  },
  "European Unit of Account 17(E.U.A.-17)": {
    "code": "XBD",
    "symbol": ""
  },
  "East Caribbean Dollar": {
    "code": "XCD",
    "symbol": "$"
  },
  "SDR": {
    "code": "XDR",
    "symbol": ""
  },
  "UIC-Franc": {
    "code": "XFU",
    "symbol": ""
  },
  "CFA Franc BCEAO": {
    "code": "XOF",
    "symbol": ""
  },
  "Palladium": {
    "code": "XPD",
    "symbol": ""
  },
  "CFP Franc": {
    "code": "XPF",
    "symbol": ""
  },
  "Platinum": {
    "code": "XPT",
    "symbol": ""
  },
  "Codes specifically reserved for testing purposes": {
    "code": "XTS",
    "symbol": ""
  },
  "Yemeni Rial": {
    "code": "YER",
    "symbol": "﷼"
  },
  "Rand": {
    "code": "ZAR",
    "symbol": "R"
  },
  "Rand Loti": {
    "code": "ZAR LSL",
    "symbol": ""
  },
  "Rand Namibia Dollar": {
    "code": "ZAR NAD",
    "symbol": ""
  },
  "Zambian Kwacha": {
    "code": "ZMK",
    "symbol": ""
  },
  "Zimbabwe Dollar": {
    "code": "ZWL",
    "symbol": ""
  }
};
},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_AU.js":[function(require,module,exports){
var en_AU = {};
module["exports"] = en_AU;
en_AU.title = "Australia (English)";
en_AU.name = {
  "first_name": [
    "William",
    "Jack",
    "Oliver",
    "Joshua",
    "Thomas",
    "Lachlan",
    "Cooper",
    "Noah",
    "Ethan",
    "Lucas",
    "James",
    "Samuel",
    "Jacob",
    "Liam",
    "Alexander",
    "Benjamin",
    "Max",
    "Isaac",
    "Daniel",
    "Riley",
    "Ryan",
    "Charlie",
    "Tyler",
    "Jake",
    "Matthew",
    "Xavier",
    "Harry",
    "Jayden",
    "Nicholas",
    "Harrison",
    "Levi",
    "Luke",
    "Adam",
    "Henry",
    "Aiden",
    "Dylan",
    "Oscar",
    "Michael",
    "Jackson",
    "Logan",
    "Joseph",
    "Blake",
    "Nathan",
    "Connor",
    "Elijah",
    "Nate",
    "Archie",
    "Bailey",
    "Marcus",
    "Cameron",
    "Jordan",
    "Zachary",
    "Caleb",
    "Hunter",
    "Ashton",
    "Toby",
    "Aidan",
    "Hayden",
    "Mason",
    "Hamish",
    "Edward",
    "Angus",
    "Eli",
    "Sebastian",
    "Christian",
    "Patrick",
    "Andrew",
    "Anthony",
    "Luca",
    "Kai",
    "Beau",
    "Alex",
    "George",
    "Callum",
    "Finn",
    "Zac",
    "Mitchell",
    "Jett",
    "Jesse",
    "Gabriel",
    "Leo",
    "Declan",
    "Charles",
    "Jasper",
    "Jonathan",
    "Aaron",
    "Hugo",
    "David",
    "Christopher",
    "Chase",
    "Owen",
    "Justin",
    "Ali",
    "Darcy",
    "Lincoln",
    "Cody",
    "Phoenix",
    "Sam",
    "John",
    "Joel",
    "Isabella",
    "Ruby",
    "Chloe",
    "Olivia",
    "Charlotte",
    "Mia",
    "Lily",
    "Emily",
    "Ella",
    "Sienna",
    "Sophie",
    "Amelia",
    "Grace",
    "Ava",
    "Zoe",
    "Emma",
    "Sophia",
    "Matilda",
    "Hannah",
    "Jessica",
    "Lucy",
    "Georgia",
    "Sarah",
    "Abigail",
    "Zara",
    "Eva",
    "Scarlett",
    "Jasmine",
    "Chelsea",
    "Lilly",
    "Ivy",
    "Isla",
    "Evie",
    "Isabelle",
    "Maddison",
    "Layla",
    "Summer",
    "Annabelle",
    "Alexis",
    "Elizabeth",
    "Bella",
    "Holly",
    "Lara",
    "Madison",
    "Alyssa",
    "Maya",
    "Tahlia",
    "Claire",
    "Hayley",
    "Imogen",
    "Jade",
    "Ellie",
    "Sofia",
    "Addison",
    "Molly",
    "Phoebe",
    "Alice",
    "Savannah",
    "Gabriella",
    "Kayla",
    "Mikayla",
    "Abbey",
    "Eliza",
    "Willow",
    "Alexandra",
    "Poppy",
    "Samantha",
    "Stella",
    "Amy",
    "Amelie",
    "Anna",
    "Piper",
    "Gemma",
    "Isabel",
    "Victoria",
    "Stephanie",
    "Caitlin",
    "Heidi",
    "Paige",
    "Rose",
    "Amber",
    "Audrey",
    "Claudia",
    "Taylor",
    "Madeline",
    "Angelina",
    "Natalie",
    "Charli",
    "Lauren",
    "Ashley",
    "Violet",
    "Mackenzie",
    "Abby",
    "Skye",
    "Lillian",
    "Alana",
    "Lola",
    "Leah",
    "Eve",
    "Kiara"
  ],
  "last_name": [
    "Smith",
    "Jones",
    "Williams",
    "Brown",
    "Wilson",
    "Taylor",
    "Johnson",
    "White",
    "Martin",
    "Anderson",
    "Thompson",
    "Nguyen",
    "Thomas",
    "Walker",
    "Harris",
    "Lee",
    "Ryan",
    "Robinson",
    "Kelly",
    "King",
    "Davis",
    "Wright",
    "Evans",
    "Roberts",
    "Green",
    "Hall",
    "Wood",
    "Jackson",
    "Clarke",
    "Patel",
    "Khan",
    "Lewis",
    "James",
    "Phillips",
    "Mason",
    "Mitchell",
    "Rose",
    "Davies",
    "Rodriguez",
    "Cox",
    "Alexander",
    "Garden",
    "Campbell",
    "Johnston",
    "Moore",
    "Smyth",
    "O'neill",
    "Doherty",
    "Stewart",
    "Quinn",
    "Murphy",
    "Graham",
    "Mclaughlin",
    "Hamilton",
    "Murray",
    "Hughes",
    "Robertson",
    "Thomson",
    "Scott",
    "Macdonald",
    "Reid",
    "Clark",
    "Ross",
    "Young",
    "Watson",
    "Paterson",
    "Morrison",
    "Morgan",
    "Griffiths",
    "Edwards",
    "Rees",
    "Jenkins",
    "Owen",
    "Price",
    "Moss",
    "Richards",
    "Abbott",
    "Adams",
    "Armstrong",
    "Bahringer",
    "Bailey",
    "Barrows",
    "Bartell",
    "Bartoletti",
    "Barton",
    "Bauch",
    "Baumbach",
    "Bayer",
    "Beahan",
    "Beatty",
    "Becker",
    "Beier",
    "Berge",
    "Bergstrom",
    "Bode",
    "Bogan",
    "Borer",
    "Bosco",
    "Botsford",
    "Boyer",
    "Boyle",
    "Braun",
    "Bruen",
    "Carroll",
    "Carter",
    "Cartwright",
    "Casper",
    "Cassin",
    "Champlin",
    "Christiansen",
    "Cole",
    "Collier",
    "Collins",
    "Connelly",
    "Conroy",
    "Corkery",
    "Cormier",
    "Corwin",
    "Cronin",
    "Crooks",
    "Cruickshank",
    "Cummings",
    "D'amore",
    "Daniel",
    "Dare",
    "Daugherty",
    "Dickens",
    "Dickinson",
    "Dietrich",
    "Donnelly",
    "Dooley",
    "Douglas",
    "Doyle",
    "Durgan",
    "Ebert",
    "Emard",
    "Emmerich",
    "Erdman",
    "Ernser",
    "Fadel",
    "Fahey",
    "Farrell",
    "Fay",
    "Feeney",
    "Feil",
    "Ferry",
    "Fisher",
    "Flatley",
    "Gibson",
    "Gleason",
    "Glover",
    "Goldner",
    "Goodwin",
    "Grady",
    "Grant",
    "Greenfelder",
    "Greenholt",
    "Grimes",
    "Gutmann",
    "Hackett",
    "Hahn",
    "Haley",
    "Hammes",
    "Hand",
    "Hane",
    "Hansen",
    "Harber",
    "Hartmann",
    "Harvey",
    "Hayes",
    "Heaney",
    "Heathcote",
    "Heller",
    "Hermann",
    "Hermiston",
    "Hessel",
    "Hettinger",
    "Hickle",
    "Hill",
    "Hills",
    "Hoppe",
    "Howe",
    "Howell",
    "Hudson",
    "Huel",
    "Hyatt",
    "Jacobi",
    "Jacobs",
    "Jacobson",
    "Jerde",
    "Johns",
    "Keeling",
    "Kemmer",
    "Kessler",
    "Kiehn",
    "Kirlin",
    "Klein",
    "Koch",
    "Koelpin",
    "Kohler",
    "Koss",
    "Kovacek",
    "Kreiger",
    "Kris",
    "Kuhlman",
    "Kuhn",
    "Kulas",
    "Kunde",
    "Kutch",
    "Lakin",
    "Lang",
    "Langworth",
    "Larkin",
    "Larson",
    "Leannon",
    "Leffler",
    "Little",
    "Lockman",
    "Lowe",
    "Lynch",
    "Mann",
    "Marks",
    "Marvin",
    "Mayer",
    "Mccullough",
    "Mcdermott",
    "Mckenzie",
    "Miller",
    "Mills",
    "Monahan",
    "Morissette",
    "Mueller",
    "Muller",
    "Nader",
    "Nicolas",
    "Nolan",
    "O'connell",
    "O'conner",
    "O'hara",
    "O'keefe",
    "Olson",
    "O'reilly",
    "Parisian",
    "Parker",
    "Quigley",
    "Reilly",
    "Reynolds",
    "Rice",
    "Ritchie",
    "Rohan",
    "Rolfson",
    "Rowe",
    "Russel",
    "Rutherford",
    "Sanford",
    "Sauer",
    "Schmidt",
    "Schmitt",
    "Schneider",
    "Schroeder",
    "Schultz",
    "Shields",
    "Smitham",
    "Spencer",
    "Stanton",
    "Stark",
    "Stokes",
    "Swift",
    "Tillman",
    "Towne",
    "Tremblay",
    "Tromp",
    "Turcotte",
    "Turner",
    "Walsh",
    "Walter",
    "Ward",
    "Waters",
    "Weber",
    "Welch",
    "West",
    "Wilderman",
    "Wilkinson",
    "Williamson",
    "Windler",
    "Wolf"
  ]
};
en_AU.company = {
  "suffix": [
    "Pty Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers",
    "Partners"
  ]
};
en_AU.internet = {
  "domain_suffix": [
    "com.au",
    "com",
    "net.au",
    "net",
    "org.au",
    "org"
  ]
};
en_AU.address = {
  "state_abbr": [
    "NSW",
    "QLD",
    "NT",
    "SA",
    "WA",
    "TAS",
    "ACT",
    "VIC"
  ],
  "state": [
    "New South Wales",
    "Queensland",
    "Northern Territory",
    "South Australia",
    "Western Australia",
    "Tasmania",
    "Australian Capital Territory",
    "Victoria"
  ],
  "postcode": [
    "0###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###"
  ],
  "building_number": [
    "####",
    "###",
    "##"
  ],
  "street_suffix": [
    "Avenue",
    "Boulevard",
    "Circle",
    "Circuit",
    "Court",
    "Crescent",
    "Crest",
    "Drive",
    "Estate Dr",
    "Grove",
    "Hill",
    "Island",
    "Junction",
    "Knoll",
    "Lane",
    "Loop",
    "Mall",
    "Manor",
    "Meadow",
    "Mews",
    "Parade",
    "Parkway",
    "Pass",
    "Place",
    "Plaza",
    "Ridge",
    "Road",
    "Run",
    "Square",
    "Station St",
    "Street",
    "Summit",
    "Terrace",
    "Track",
    "Trail",
    "View Rd",
    "Way"
  ],
  "default_country": [
    "Australia"
  ]
};
en_AU.phone_number = {
  "formats": [
    "0# #### ####",
    "+61 # #### ####",
    "04## ### ###",
    "+61 4## ### ###"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_BORK.js":[function(require,module,exports){
var en_BORK = {};
module["exports"] = en_BORK;
en_BORK.title = "Bork (English)";
en_BORK.lorem = {
  "words": [
    "Boot",
    "I",
    "Nu",
    "Nur",
    "Tu",
    "Um",
    "a",
    "becoose-a",
    "boot",
    "bork",
    "burn",
    "chuuses",
    "cumplete-a",
    "cun",
    "cunseqooences",
    "curcoomstunces",
    "dee",
    "deeslikes",
    "denuoonceeng",
    "desures",
    "du",
    "eccuoont",
    "ectooel",
    "edfuntege-a",
    "efueeds",
    "egeeen",
    "ell",
    "ere-a",
    "feend",
    "foolt",
    "frum",
    "geefe-a",
    "gesh",
    "greet",
    "heem",
    "heppeeness",
    "hes",
    "hoo",
    "hoomun",
    "idea",
    "ifer",
    "in",
    "incuoonter",
    "injuy",
    "itselff",
    "ixcept",
    "ixemple-a",
    "ixerceese-a",
    "ixpleeen",
    "ixplurer",
    "ixpuoond",
    "ixtremely",
    "knoo",
    "lebureeuoos",
    "lufes",
    "meestekee",
    "mester-booeelder",
    "moost",
    "mun",
    "nu",
    "nut",
    "oobteeen",
    "oocceseeunelly",
    "ooccoor",
    "ooff",
    "oone-a",
    "oor",
    "peeen",
    "peeenffool",
    "physeecel",
    "pleesoore-a",
    "poorsooe-a",
    "poorsooes",
    "preeesing",
    "prucoore-a",
    "prudooces",
    "reeght",
    "reshunelly",
    "resooltunt",
    "sume-a",
    "teecheengs",
    "teke-a",
    "thees",
    "thet",
    "thuse-a",
    "treefiel",
    "troot",
    "tu",
    "tueel",
    "und",
    "undertekes",
    "unnuyeeng",
    "uny",
    "unyune-a",
    "us",
    "veell",
    "veet",
    "ves",
    "vheech",
    "vhu",
    "yuoo",
    "zee",
    "zeere-a"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_CA.js":[function(require,module,exports){
var en_CA = {};
module["exports"] = en_CA;
en_CA.title = "Canada (English)";
en_CA.address = {
  "postcode": [
    "?#? #?#",
    "?#?#?#"
  ],
  "state": [
    "Alberta",
    "British Columbia",
    "Manitoba",
    "New Brunswick",
    "Newfoundland and Labrador",
    "Nova Scotia",
    "Northwest Territories",
    "Nunavut",
    "Ontario",
    "Prince Edward Island",
    "Quebec",
    "Saskatchewan",
    "Yukon"
  ],
  "state_abbr": [
    "AB",
    "BC",
    "MB",
    "NB",
    "NL",
    "NS",
    "NU",
    "NT",
    "ON",
    "PE",
    "QC",
    "SK",
    "YK"
  ],
  "default_country": [
    "Canada"
  ]
};
en_CA.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.ca",
    "hotmail.com"
  ],
  "domain_suffix": [
    "ca",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};
en_CA.phone_number = {
  "formats": [
    "###-###-####",
    "(###)###-####",
    "###.###.####",
    "1-###-###-####",
    "###-###-#### x###",
    "(###)###-#### x###",
    "1-###-###-#### x###",
    "###.###.#### x###",
    "###-###-#### x####",
    "(###)###-#### x####",
    "1-###-###-#### x####",
    "###.###.#### x####",
    "###-###-#### x#####",
    "(###)###-#### x#####",
    "1-###-###-#### x#####",
    "###.###.#### x#####"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_GB.js":[function(require,module,exports){
var en_GB = {};
module["exports"] = en_GB;
en_GB.title = "Great Britain (English)";
en_GB.address = {
  "postcode": "/[A-PR-UWYZ][A-HK-Y]?[0-9][ABEHMNPRVWXY0-9]? [0-9][ABD-HJLN-UW-Z]{2}/",
  "county": [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire",
    "Central",
    "Cheshire",
    "Cleveland",
    "Clwyd",
    "Cornwall",
    "County Antrim",
    "County Armagh",
    "County Down",
    "County Fermanagh",
    "County Londonderry",
    "County Tyrone",
    "Cumbria",
    "Derbyshire",
    "Devon",
    "Dorset",
    "Dumfries and Galloway",
    "Durham",
    "Dyfed",
    "East Sussex",
    "Essex",
    "Fife",
    "Gloucestershire",
    "Grampian",
    "Greater Manchester",
    "Gwent",
    "Gwynedd County",
    "Hampshire",
    "Herefordshire",
    "Hertfordshire",
    "Highlands and Islands",
    "Humberside",
    "Isle of Wight",
    "Kent",
    "Lancashire",
    "Leicestershire",
    "Lincolnshire",
    "Lothian",
    "Merseyside",
    "Mid Glamorgan",
    "Norfolk",
    "North Yorkshire",
    "Northamptonshire",
    "Northumberland",
    "Nottinghamshire",
    "Oxfordshire",
    "Powys",
    "Rutland",
    "Shropshire",
    "Somerset",
    "South Glamorgan",
    "South Yorkshire",
    "Staffordshire",
    "Strathclyde",
    "Suffolk",
    "Surrey",
    "Tayside",
    "Tyne and Wear",
    "Warwickshire",
    "West Glamorgan",
    "West Midlands",
    "West Sussex",
    "West Yorkshire",
    "Wiltshire",
    "Worcestershire"
  ],
  "uk_country": [
    "England",
    "Scotland",
    "Wales",
    "Northern Ireland"
  ],
  "default_country": [
    "England",
    "Scotland",
    "Wales",
    "Northern Ireland"
  ]
};
en_GB.internet = {
  "domain_suffix": [
    "co.uk",
    "com",
    "biz",
    "info",
    "name"
  ]
};
en_GB.phone_number = {
  "formats": [
    "01#### #####",
    "01### ######",
    "01#1 ### ####",
    "011# ### ####",
    "02# #### ####",
    "03## ### ####",
    "055 #### ####",
    "056 #### ####",
    "0800 ### ####",
    "08## ### ####",
    "09## ### ####",
    "016977 ####",
    "01### #####",
    "0500 ######",
    "0800 ######"
  ]
};
en_GB.cell_phone = {
  "formats": [
    "074## ######",
    "075## ######",
    "076## ######",
    "077## ######",
    "078## ######",
    "079## ######"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_IND.js":[function(require,module,exports){
var en_IND = {};
module["exports"] = en_IND;
en_IND.title = "India (English)";
en_IND.name = {
  "first_name": [
    "Aadrika",
    "Aanandinii",
    "Aaratrika",
    "Aarya",
    "Arya",
    "Aashritha",
    "Aatmaja",
    "Atmaja",
    "Abhaya",
    "Adwitiya",
    "Agrata",
    "Ahilya",
    "Ahalya",
    "Aishani",
    "Akshainie",
    "Akshata",
    "Akshita",
    "Akula",
    "Ambar",
    "Amodini",
    "Amrita",
    "Amritambu",
    "Anala",
    "Anamika",
    "Ananda",
    "Anandamayi",
    "Ananta",
    "Anila",
    "Anjali",
    "Anjushri",
    "Anjushree",
    "Annapurna",
    "Anshula",
    "Anuja",
    "Anusuya",
    "Anasuya",
    "Anasooya",
    "Anwesha",
    "Apsara",
    "Aruna",
    "Asha",
    "Aasa",
    "Aasha",
    "Aslesha",
    "Atreyi",
    "Atreyee",
    "Avani",
    "Abani",
    "Avantika",
    "Ayushmati",
    "Baidehi",
    "Vaidehi",
    "Bala",
    "Baala",
    "Balamani",
    "Basanti",
    "Vasanti",
    "Bela",
    "Bhadra",
    "Bhagirathi",
    "Bhagwanti",
    "Bhagwati",
    "Bhamini",
    "Bhanumati",
    "Bhaanumati",
    "Bhargavi",
    "Bhavani",
    "Bhilangana",
    "Bilwa",
    "Bilva",
    "Buddhana",
    "Chakrika",
    "Chanda",
    "Chandi",
    "Chandni",
    "Chandini",
    "Chandani",
    "Chandra",
    "Chandira",
    "Chandrabhaga",
    "Chandrakala",
    "Chandrakin",
    "Chandramani",
    "Chandrani",
    "Chandraprabha",
    "Chandraswaroopa",
    "Chandravati",
    "Chapala",
    "Charumati",
    "Charvi",
    "Chatura",
    "Chitrali",
    "Chitramala",
    "Chitrangada",
    "Daksha",
    "Dakshayani",
    "Damayanti",
    "Darshwana",
    "Deepali",
    "Dipali",
    "Deeptimoyee",
    "Deeptimayee",
    "Devangana",
    "Devani",
    "Devasree",
    "Devi",
    "Daevi",
    "Devika",
    "Daevika",
    "Dhaanyalakshmi",
    "Dhanalakshmi",
    "Dhana",
    "Dhanadeepa",
    "Dhara",
    "Dharani",
    "Dharitri",
    "Dhatri",
    "Diksha",
    "Deeksha",
    "Divya",
    "Draupadi",
    "Dulari",
    "Durga",
    "Durgeshwari",
    "Ekaparnika",
    "Elakshi",
    "Enakshi",
    "Esha",
    "Eshana",
    "Eshita",
    "Gautami",
    "Gayatri",
    "Geeta",
    "Geetanjali",
    "Gitanjali",
    "Gemine",
    "Gemini",
    "Girja",
    "Girija",
    "Gita",
    "Hamsini",
    "Harinakshi",
    "Harita",
    "Heema",
    "Himadri",
    "Himani",
    "Hiranya",
    "Indira",
    "Jaimini",
    "Jaya",
    "Jyoti",
    "Jyotsana",
    "Kali",
    "Kalinda",
    "Kalpana",
    "Kalyani",
    "Kama",
    "Kamala",
    "Kamla",
    "Kanchan",
    "Kanishka",
    "Kanti",
    "Kashyapi",
    "Kumari",
    "Kumuda",
    "Lakshmi",
    "Laxmi",
    "Lalita",
    "Lavanya",
    "Leela",
    "Lila",
    "Leela",
    "Madhuri",
    "Malti",
    "Malati",
    "Mandakini",
    "Mandaakin",
    "Mangala",
    "Mangalya",
    "Mani",
    "Manisha",
    "Manjusha",
    "Meena",
    "Mina",
    "Meenakshi",
    "Minakshi",
    "Menka",
    "Menaka",
    "Mohana",
    "Mohini",
    "Nalini",
    "Nikita",
    "Ojaswini",
    "Omana",
    "Oormila",
    "Urmila",
    "Opalina",
    "Opaline",
    "Padma",
    "Parvati",
    "Poornima",
    "Purnima",
    "Pramila",
    "Prasanna",
    "Preity",
    "Prema",
    "Priya",
    "Priyala",
    "Pushti",
    "Radha",
    "Rageswari",
    "Rageshwari",
    "Rajinder",
    "Ramaa",
    "Rati",
    "Rita",
    "Rohana",
    "Rukhmani",
    "Rukmin",
    "Rupinder",
    "Sanya",
    "Sarada",
    "Sharda",
    "Sarala",
    "Sarla",
    "Saraswati",
    "Sarisha",
    "Saroja",
    "Shakti",
    "Shakuntala",
    "Shanti",
    "Sharmila",
    "Shashi",
    "Shashikala",
    "Sheela",
    "Shivakari",
    "Shobhana",
    "Shresth",
    "Shresthi",
    "Shreya",
    "Shreyashi",
    "Shridevi",
    "Shrishti",
    "Shubha",
    "Shubhaprada",
    "Siddhi",
    "Sitara",
    "Sloka",
    "Smita",
    "Smriti",
    "Soma",
    "Subhashini",
    "Subhasini",
    "Sucheta",
    "Sudeva",
    "Sujata",
    "Sukanya",
    "Suma",
    "Suma",
    "Sumitra",
    "Sunita",
    "Suryakantam",
    "Sushma",
    "Swara",
    "Swarnalata",
    "Sweta",
    "Shwet",
    "Tanirika",
    "Tanushree",
    "Tanushri",
    "Tanushri",
    "Tanya",
    "Tara",
    "Trisha",
    "Uma",
    "Usha",
    "Vaijayanti",
    "Vaijayanthi",
    "Baijayanti",
    "Vaishvi",
    "Vaishnavi",
    "Vaishno",
    "Varalakshmi",
    "Vasudha",
    "Vasundhara",
    "Veda",
    "Vedanshi",
    "Vidya",
    "Vimala",
    "Vrinda",
    "Vrund",
    "Aadi",
    "Aadidev",
    "Aadinath",
    "Aaditya",
    "Aagam",
    "Aagney",
    "Aamod",
    "Aanandaswarup",
    "Anand Swarup",
    "Aanjaneya",
    "Anjaneya",
    "Aaryan",
    "Aryan",
    "Aatmaj",
    "Aatreya",
    "Aayushmaan",
    "Aayushman",
    "Abhaidev",
    "Abhaya",
    "Abhirath",
    "Abhisyanta",
    "Acaryatanaya",
    "Achalesvara",
    "Acharyanandana",
    "Acharyasuta",
    "Achintya",
    "Achyut",
    "Adheesh",
    "Adhiraj",
    "Adhrit",
    "Adikavi",
    "Adinath",
    "Aditeya",
    "Aditya",
    "Adityanandan",
    "Adityanandana",
    "Adripathi",
    "Advaya",
    "Agasti",
    "Agastya",
    "Agneya",
    "Aagneya",
    "Agnimitra",
    "Agniprava",
    "Agnivesh",
    "Agrata",
    "Ajit",
    "Ajeet",
    "Akroor",
    "Akshaj",
    "Akshat",
    "Akshayakeerti",
    "Alok",
    "Aalok",
    "Amaranaath",
    "Amarnath",
    "Amaresh",
    "Ambar",
    "Ameyatma",
    "Amish",
    "Amogh",
    "Amrit",
    "Anaadi",
    "Anagh",
    "Anal",
    "Anand",
    "Aanand",
    "Anang",
    "Anil",
    "Anilaabh",
    "Anilabh",
    "Anish",
    "Ankal",
    "Anunay",
    "Anurag",
    "Anuraag",
    "Archan",
    "Arindam",
    "Arjun",
    "Arnesh",
    "Arun",
    "Ashlesh",
    "Ashok",
    "Atmanand",
    "Atmananda",
    "Avadhesh",
    "Baalaaditya",
    "Baladitya",
    "Baalagopaal",
    "Balgopal",
    "Balagopal",
    "Bahula",
    "Bakula",
    "Bala",
    "Balaaditya",
    "Balachandra",
    "Balagovind",
    "Bandhu",
    "Bandhul",
    "Bankim",
    "Bankimchandra",
    "Bhadrak",
    "Bhadraksh",
    "Bhadran",
    "Bhagavaan",
    "Bhagvan",
    "Bharadwaj",
    "Bhardwaj",
    "Bharat",
    "Bhargava",
    "Bhasvan",
    "Bhaasvan",
    "Bhaswar",
    "Bhaaswar",
    "Bhaumik",
    "Bhaves",
    "Bheeshma",
    "Bhisham",
    "Bhishma",
    "Bhima",
    "Bhoj",
    "Bhramar",
    "Bhudev",
    "Bhudeva",
    "Bhupati",
    "Bhoopati",
    "Bhoopat",
    "Bhupen",
    "Bhushan",
    "Bhooshan",
    "Bhushit",
    "Bhooshit",
    "Bhuvanesh",
    "Bhuvaneshwar",
    "Bilva",
    "Bodhan",
    "Brahma",
    "Brahmabrata",
    "Brahmanandam",
    "Brahmaanand",
    "Brahmdev",
    "Brajendra",
    "Brajesh",
    "Brijesh",
    "Birjesh",
    "Budhil",
    "Chakor",
    "Chakradhar",
    "Chakravartee",
    "Chakravarti",
    "Chanakya",
    "Chaanakya",
    "Chandak",
    "Chandan",
    "Chandra",
    "Chandraayan",
    "Chandrabhan",
    "Chandradev",
    "Chandraketu",
    "Chandramauli",
    "Chandramohan",
    "Chandran",
    "Chandranath",
    "Chapal",
    "Charak",
    "Charuchandra",
    "Chaaruchandra",
    "Charuvrat",
    "Chatur",
    "Chaturaanan",
    "Chaturbhuj",
    "Chetan",
    "Chaten",
    "Chaitan",
    "Chetanaanand",
    "Chidaakaash",
    "Chidaatma",
    "Chidambar",
    "Chidambaram",
    "Chidananda",
    "Chinmayanand",
    "Chinmayananda",
    "Chiranjeev",
    "Chiranjeeve",
    "Chitraksh",
    "Daiwik",
    "Daksha",
    "Damodara",
    "Dandak",
    "Dandapaani",
    "Darshan",
    "Datta",
    "Dayaamay",
    "Dayamayee",
    "Dayaananda",
    "Dayaanidhi",
    "Kin",
    "Deenabandhu",
    "Deepan",
    "Deepankar",
    "Dipankar",
    "Deependra",
    "Dipendra",
    "Deepesh",
    "Dipesh",
    "Deeptanshu",
    "Deeptendu",
    "Diptendu",
    "Deeptiman",
    "Deeptimoy",
    "Deeptimay",
    "Dev",
    "Deb",
    "Devadatt",
    "Devagya",
    "Devajyoti",
    "Devak",
    "Devdan",
    "Deven",
    "Devesh",
    "Deveshwar",
    "Devi",
    "Devvrat",
    "Dhananjay",
    "Dhanapati",
    "Dhanpati",
    "Dhanesh",
    "Dhanu",
    "Dhanvin",
    "Dharmaketu",
    "Dhruv",
    "Dhyanesh",
    "Dhyaneshwar",
    "Digambar",
    "Digambara",
    "Dinakar",
    "Dinkar",
    "Dinesh",
    "Divaakar",
    "Divakar",
    "Deevakar",
    "Divjot",
    "Dron",
    "Drona",
    "Dwaipayan",
    "Dwaipayana",
    "Eekalabya",
    "Ekalavya",
    "Ekaksh",
    "Ekaaksh",
    "Ekaling",
    "Ekdant",
    "Ekadant",
    "Gajaadhar",
    "Gajadhar",
    "Gajbaahu",
    "Gajabahu",
    "Ganak",
    "Ganaka",
    "Ganapati",
    "Gandharv",
    "Gandharva",
    "Ganesh",
    "Gangesh",
    "Garud",
    "Garuda",
    "Gati",
    "Gatik",
    "Gaurang",
    "Gauraang",
    "Gauranga",
    "Gouranga",
    "Gautam",
    "Gautama",
    "Goutam",
    "Ghanaanand",
    "Ghanshyam",
    "Ghanashyam",
    "Giri",
    "Girik",
    "Girika",
    "Girindra",
    "Giriraaj",
    "Giriraj",
    "Girish",
    "Gopal",
    "Gopaal",
    "Gopi",
    "Gopee",
    "Gorakhnath",
    "Gorakhanatha",
    "Goswamee",
    "Goswami",
    "Gotum",
    "Gautam",
    "Govinda",
    "Gobinda",
    "Gudakesha",
    "Gudakesa",
    "Gurdev",
    "Guru",
    "Hari",
    "Harinarayan",
    "Harit",
    "Himadri",
    "Hiranmay",
    "Hiranmaya",
    "Hiranya",
    "Inder",
    "Indra",
    "Indra",
    "Jagadish",
    "Jagadisha",
    "Jagathi",
    "Jagdeep",
    "Jagdish",
    "Jagmeet",
    "Jahnu",
    "Jai",
    "Javas",
    "Jay",
    "Jitendra",
    "Jitender",
    "Jyotis",
    "Kailash",
    "Kama",
    "Kamalesh",
    "Kamlesh",
    "Kanak",
    "Kanaka",
    "Kannan",
    "Kannen",
    "Karan",
    "Karthik",
    "Kartik",
    "Karunanidhi",
    "Kashyap",
    "Kiran",
    "Kirti",
    "Keerti",
    "Krishna",
    "Krishnadas",
    "Krishnadasa",
    "Kumar",
    "Lai",
    "Lakshman",
    "Laxman",
    "Lakshmidhar",
    "Lakshminath",
    "Lal",
    "Laal",
    "Mahendra",
    "Mohinder",
    "Mahesh",
    "Maheswar",
    "Mani",
    "Manik",
    "Manikya",
    "Manoj",
    "Marut",
    "Mayoor",
    "Meghnad",
    "Meghnath",
    "Mohan",
    "Mukesh",
    "Mukul",
    "Nagabhushanam",
    "Nanda",
    "Narayan",
    "Narendra",
    "Narinder",
    "Naveen",
    "Navin",
    "Nawal",
    "Naval",
    "Nimit",
    "Niranjan",
    "Nirbhay",
    "Niro",
    "Param",
    "Paramartha",
    "Pran",
    "Pranay",
    "Prasad",
    "Prathamesh",
    "Prayag",
    "Prem",
    "Puneet",
    "Purushottam",
    "Rahul",
    "Raj",
    "Rajan",
    "Rajendra",
    "Rajinder",
    "Rajiv",
    "Rakesh",
    "Ramesh",
    "Rameshwar",
    "Ranjit",
    "Ranjeet",
    "Ravi",
    "Ritesh",
    "Rohan",
    "Rohit",
    "Rudra",
    "Sachin",
    "Sameer",
    "Samir",
    "Sanjay",
    "Sanka",
    "Sarvin",
    "Satish",
    "Satyen",
    "Shankar",
    "Shantanu",
    "Shashi",
    "Sher",
    "Shiv",
    "Siddarth",
    "Siddhran",
    "Som",
    "Somu",
    "Somnath",
    "Subhash",
    "Subodh",
    "Suman",
    "Suresh",
    "Surya",
    "Suryakant",
    "Suryakanta",
    "Sushil",
    "Susheel",
    "Swami",
    "Swapnil",
    "Tapan",
    "Tara",
    "Tarun",
    "Tej",
    "Tejas",
    "Trilochan",
    "Trilochana",
    "Trilok",
    "Trilokesh",
    "Triloki",
    "Triloki Nath",
    "Trilokanath",
    "Tushar",
    "Udai",
    "Udit",
    "Ujjawal",
    "Ujjwal",
    "Umang",
    "Upendra",
    "Uttam",
    "Vasudev",
    "Vasudeva",
    "Vedang",
    "Vedanga",
    "Vidhya",
    "Vidur",
    "Vidhur",
    "Vijay",
    "Vimal",
    "Vinay",
    "Vishnu",
    "Bishnu",
    "Vishwamitra",
    "Vyas",
    "Yogendra",
    "Yoginder",
    "Yogesh"
  ],
  "last_name": [
    "Abbott",
    "Achari",
    "Acharya",
    "Adiga",
    "Agarwal",
    "Ahluwalia",
    "Ahuja",
    "Arora",
    "Asan",
    "Bandopadhyay",
    "Banerjee",
    "Bharadwaj",
    "Bhat",
    "Butt",
    "Bhattacharya",
    "Bhattathiri",
    "Chaturvedi",
    "Chattopadhyay",
    "Chopra",
    "Desai",
    "Deshpande",
    "Devar",
    "Dhawan",
    "Dubashi",
    "Dutta",
    "Dwivedi",
    "Embranthiri",
    "Ganaka",
    "Gandhi",
    "Gill",
    "Gowda",
    "Guha",
    "Guneta",
    "Gupta",
    "Iyer",
    "Iyengar",
    "Jain",
    "Jha",
    "Johar",
    "Joshi",
    "Kakkar",
    "Kaniyar",
    "Kapoor",
    "Kaul",
    "Kaur",
    "Khan",
    "Khanna",
    "Khatri",
    "Kocchar",
    "Mahajan",
    "Malik",
    "Marar",
    "Menon",
    "Mehra",
    "Mehrotra",
    "Mishra",
    "Mukhopadhyay",
    "Nayar",
    "Naik",
    "Nair",
    "Nambeesan",
    "Namboothiri",
    "Nehru",
    "Pandey",
    "Panicker",
    "Patel",
    "Patil",
    "Pilla",
    "Pillai",
    "Pothuvaal",
    "Prajapat",
    "Rana",
    "Reddy",
    "Saini",
    "Sethi",
    "Shah",
    "Sharma",
    "Shukla",
    "Singh",
    "Sinha",
    "Somayaji",
    "Tagore",
    "Talwar",
    "Tandon",
    "Trivedi",
    "Varrier",
    "Varma",
    "Varman",
    "Verma"
  ]
};
en_IND.address = {
  "postcode": [
    "?#? #?#"
  ],
  "state": [
    "Andra Pradesh",
    "Arunachal Pradesh",
    "Assam",
    "Bihar",
    "Chhattisgarh",
    "Goa",
    "Gujarat",
    "Haryana",
    "Himachal Pradesh",
    "Jammu and Kashmir",
    "Jharkhand",
    "Karnataka",
    "Kerala",
    "Madya Pradesh",
    "Maharashtra",
    "Manipur",
    "Meghalaya",
    "Mizoram",
    "Nagaland",
    "Orissa",
    "Punjab",
    "Rajasthan",
    "Sikkim",
    "Tamil Nadu",
    "Tripura",
    "Uttaranchal",
    "Uttar Pradesh",
    "West Bengal",
    "Andaman and Nicobar Islands",
    "Chandigarh",
    "Dadar and Nagar Haveli",
    "Daman and Diu",
    "Delhi",
    "Lakshadweep",
    "Pondicherry"
  ],
  "state_abbr": [
    "AP",
    "AR",
    "AS",
    "BR",
    "CG",
    "DL",
    "GA",
    "GJ",
    "HR",
    "HP",
    "JK",
    "JS",
    "KA",
    "KL",
    "MP",
    "MH",
    "MN",
    "ML",
    "MZ",
    "NL",
    "OR",
    "PB",
    "RJ",
    "SK",
    "TN",
    "TR",
    "UK",
    "UP",
    "WB",
    "AN",
    "CH",
    "DN",
    "DD",
    "LD",
    "PY"
  ],
  "default_country": [
    "India",
    "Indian Republic",
    "Bharat",
    "Hindustan"
  ]
};
en_IND.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.co.in",
    "hotmail.com"
  ],
  "domain_suffix": [
    "in",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org",
    "co.in"
  ]
};
en_IND.company = {
  "suffix": [
    "Pvt Ltd",
    "Limited",
    "Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers"
  ]
};
en_IND.phone_number = {
  "formats": [
    "+91###-###-####",
    "+91##########",
    "+91-###-#######"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_US.js":[function(require,module,exports){
var en_US = {};
module["exports"] = en_US;
en_US.title = "United States (English)";
en_US.internet = {
  "domain_suffix": [
    "com",
    "us",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};
en_US.address = {
  "default_country": [
    "United States",
    "United States of America",
    "USA"
  ],
  "postcode_by_state": {
    "AL": "350##",
    "AK": "995##",
    "AS": "967##",
    "AZ": "850##",
    "AR": "717##",
    "CA": "900##",
    "CO": "800##",
    "CT": "061##",
    "DC": "204##",
    "DE": "198##",
    "FL": "322##",
    "GA": "301##",
    "HI": "967##",
    "ID": "832##",
    "IL": "600##",
    "IN": "463##",
    "IA": "510##",
    "KS": "666##",
    "KY": "404##",
    "LA": "701##",
    "ME": "042##",
    "MD": "210##",
    "MA": "026##",
    "MI": "480##",
    "MN": "555##",
    "MS": "387##",
    "MO": "650##",
    "MT": "590##",
    "NE": "688##",
    "NV": "898##",
    "NH": "036##",
    "NJ": "076##",
    "NM": "880##",
    "NY": "122##",
    "NC": "288##",
    "ND": "586##",
    "OH": "444##",
    "OK": "730##",
    "OR": "979##",
    "PA": "186##",
    "RI": "029##",
    "SC": "299##",
    "SD": "577##",
    "TN": "383##",
    "TX": "798##",
    "UT": "847##",
    "VT": "050##",
    "VA": "222##",
    "WA": "990##",
    "WV": "247##",
    "WI": "549##",
    "WY": "831##"
  }
};
en_US.phone_number = {
  "area_code": [
    "201",
    "202",
    "203",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "212",
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "224",
    "225",
    "227",
    "228",
    "229",
    "231",
    "234",
    "239",
    "240",
    "248",
    "251",
    "252",
    "253",
    "254",
    "256",
    "260",
    "262",
    "267",
    "269",
    "270",
    "276",
    "281",
    "283",
    "301",
    "302",
    "303",
    "304",
    "305",
    "307",
    "308",
    "309",
    "310",
    "312",
    "313",
    "314",
    "315",
    "316",
    "317",
    "318",
    "319",
    "320",
    "321",
    "323",
    "330",
    "331",
    "334",
    "336",
    "337",
    "339",
    "347",
    "351",
    "352",
    "360",
    "361",
    "386",
    "401",
    "402",
    "404",
    "405",
    "406",
    "407",
    "408",
    "409",
    "410",
    "412",
    "413",
    "414",
    "415",
    "417",
    "419",
    "423",
    "424",
    "425",
    "434",
    "435",
    "440",
    "443",
    "445",
    "464",
    "469",
    "470",
    "475",
    "478",
    "479",
    "480",
    "484",
    "501",
    "502",
    "503",
    "504",
    "505",
    "507",
    "508",
    "509",
    "510",
    "512",
    "513",
    "515",
    "516",
    "517",
    "518",
    "520",
    "530",
    "540",
    "541",
    "551",
    "557",
    "559",
    "561",
    "562",
    "563",
    "564",
    "567",
    "570",
    "571",
    "573",
    "574",
    "580",
    "585",
    "586",
    "601",
    "602",
    "603",
    "605",
    "606",
    "607",
    "608",
    "609",
    "610",
    "612",
    "614",
    "615",
    "616",
    "617",
    "618",
    "619",
    "620",
    "623",
    "626",
    "630",
    "631",
    "636",
    "641",
    "646",
    "650",
    "651",
    "660",
    "661",
    "662",
    "667",
    "678",
    "682",
    "701",
    "702",
    "703",
    "704",
    "706",
    "707",
    "708",
    "712",
    "713",
    "714",
    "715",
    "716",
    "717",
    "718",
    "719",
    "720",
    "724",
    "727",
    "731",
    "732",
    "734",
    "737",
    "740",
    "754",
    "757",
    "760",
    "763",
    "765",
    "770",
    "772",
    "773",
    "774",
    "775",
    "781",
    "785",
    "786",
    "801",
    "802",
    "803",
    "804",
    "805",
    "806",
    "808",
    "810",
    "812",
    "813",
    "814",
    "815",
    "816",
    "817",
    "818",
    "828",
    "830",
    "831",
    "832",
    "835",
    "843",
    "845",
    "847",
    "848",
    "850",
    "856",
    "857",
    "858",
    "859",
    "860",
    "862",
    "863",
    "864",
    "865",
    "870",
    "872",
    "878",
    "901",
    "903",
    "904",
    "906",
    "907",
    "908",
    "909",
    "910",
    "912",
    "913",
    "914",
    "915",
    "916",
    "917",
    "918",
    "919",
    "920",
    "925",
    "928",
    "931",
    "936",
    "937",
    "940",
    "941",
    "947",
    "949",
    "952",
    "954",
    "956",
    "959",
    "970",
    "971",
    "972",
    "973",
    "975",
    "978",
    "979",
    "980",
    "984",
    "985",
    "989"
  ],
  "exchange_code": [
    "201",
    "202",
    "203",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "212",
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "224",
    "225",
    "227",
    "228",
    "229",
    "231",
    "234",
    "239",
    "240",
    "248",
    "251",
    "252",
    "253",
    "254",
    "256",
    "260",
    "262",
    "267",
    "269",
    "270",
    "276",
    "281",
    "283",
    "301",
    "302",
    "303",
    "304",
    "305",
    "307",
    "308",
    "309",
    "310",
    "312",
    "313",
    "314",
    "315",
    "316",
    "317",
    "318",
    "319",
    "320",
    "321",
    "323",
    "330",
    "331",
    "334",
    "336",
    "337",
    "339",
    "347",
    "351",
    "352",
    "360",
    "361",
    "386",
    "401",
    "402",
    "404",
    "405",
    "406",
    "407",
    "408",
    "409",
    "410",
    "412",
    "413",
    "414",
    "415",
    "417",
    "419",
    "423",
    "424",
    "425",
    "434",
    "435",
    "440",
    "443",
    "445",
    "464",
    "469",
    "470",
    "475",
    "478",
    "479",
    "480",
    "484",
    "501",
    "502",
    "503",
    "504",
    "505",
    "507",
    "508",
    "509",
    "510",
    "512",
    "513",
    "515",
    "516",
    "517",
    "518",
    "520",
    "530",
    "540",
    "541",
    "551",
    "557",
    "559",
    "561",
    "562",
    "563",
    "564",
    "567",
    "570",
    "571",
    "573",
    "574",
    "580",
    "585",
    "586",
    "601",
    "602",
    "603",
    "605",
    "606",
    "607",
    "608",
    "609",
    "610",
    "612",
    "614",
    "615",
    "616",
    "617",
    "618",
    "619",
    "620",
    "623",
    "626",
    "630",
    "631",
    "636",
    "641",
    "646",
    "650",
    "651",
    "660",
    "661",
    "662",
    "667",
    "678",
    "682",
    "701",
    "702",
    "703",
    "704",
    "706",
    "707",
    "708",
    "712",
    "713",
    "714",
    "715",
    "716",
    "717",
    "718",
    "719",
    "720",
    "724",
    "727",
    "731",
    "732",
    "734",
    "737",
    "740",
    "754",
    "757",
    "760",
    "763",
    "765",
    "770",
    "772",
    "773",
    "774",
    "775",
    "781",
    "785",
    "786",
    "801",
    "802",
    "803",
    "804",
    "805",
    "806",
    "808",
    "810",
    "812",
    "813",
    "814",
    "815",
    "816",
    "817",
    "818",
    "828",
    "830",
    "831",
    "832",
    "835",
    "843",
    "845",
    "847",
    "848",
    "850",
    "856",
    "857",
    "858",
    "859",
    "860",
    "862",
    "863",
    "864",
    "865",
    "870",
    "872",
    "878",
    "901",
    "903",
    "904",
    "906",
    "907",
    "908",
    "909",
    "910",
    "912",
    "913",
    "914",
    "915",
    "916",
    "917",
    "918",
    "919",
    "920",
    "925",
    "928",
    "931",
    "936",
    "937",
    "940",
    "941",
    "947",
    "949",
    "952",
    "954",
    "956",
    "959",
    "970",
    "971",
    "972",
    "973",
    "975",
    "978",
    "979",
    "980",
    "984",
    "985",
    "989"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/en_au_ocker.js":[function(require,module,exports){
var en_au_ocker = {};
module["exports"] = en_au_ocker;
en_au_ocker.title = "Australia Ocker (English)";
en_au_ocker.name = {
  "first_name": [
    "Charlotte",
    "Ava",
    "Chloe",
    "Emily",
    "Olivia",
    "Zoe",
    "Lily",
    "Sophie",
    "Amelia",
    "Sofia",
    "Ella",
    "Isabella",
    "Ruby",
    "Sienna",
    "Mia+3",
    "Grace",
    "Emma",
    "Ivy",
    "Layla",
    "Abigail",
    "Isla",
    "Hannah",
    "Zara",
    "Lucy",
    "Evie",
    "Annabelle",
    "Madison",
    "Alice",
    "Georgia",
    "Maya",
    "Madeline",
    "Audrey",
    "Scarlett",
    "Isabelle",
    "Chelsea",
    "Mila",
    "Holly",
    "Indiana",
    "Poppy",
    "Harper",
    "Sarah",
    "Alyssa",
    "Jasmine",
    "Imogen",
    "Hayley",
    "Pheobe",
    "Eva",
    "Evelyn",
    "Mackenzie",
    "Ayla",
    "Oliver",
    "Jack",
    "Jackson",
    "William",
    "Ethan",
    "Charlie",
    "Lucas",
    "Cooper",
    "Lachlan",
    "Noah",
    "Liam",
    "Alexander",
    "Max",
    "Isaac",
    "Thomas",
    "Xavier",
    "Oscar",
    "Benjamin",
    "Aiden",
    "Mason",
    "Samuel",
    "James",
    "Levi",
    "Riley",
    "Harrison",
    "Ryan",
    "Henry",
    "Jacob",
    "Joshua",
    "Leo",
    "Zach",
    "Harry",
    "Hunter",
    "Flynn",
    "Archie",
    "Tyler",
    "Elijah",
    "Hayden",
    "Jayden",
    "Blake",
    "Archer",
    "Ashton",
    "Sebastian",
    "Zachery",
    "Lincoln",
    "Mitchell",
    "Luca",
    "Nathan",
    "Kai",
    "Connor",
    "Tom",
    "Nigel",
    "Matt",
    "Sean"
  ],
  "last_name": [
    "Smith",
    "Jones",
    "Williams",
    "Brown",
    "Wilson",
    "Taylor",
    "Morton",
    "White",
    "Martin",
    "Anderson",
    "Thompson",
    "Nguyen",
    "Thomas",
    "Walker",
    "Harris",
    "Lee",
    "Ryan",
    "Robinson",
    "Kelly",
    "King",
    "Rausch",
    "Ridge",
    "Connolly",
    "LeQuesne"
  ],
  "ocker_first_name": [
    "Bazza",
    "Bluey",
    "Davo",
    "Johno",
    "Shano",
    "Shazza"
  ]
};
en_au_ocker.company = {
  "suffix": [
    "Pty Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers",
    "Partners"
  ]
};
en_au_ocker.internet = {
  "domain_suffix": [
    "com.au",
    "com",
    "net.au",
    "net",
    "org.au",
    "org"
  ]
};
en_au_ocker.address = {
  "street_root": [
    "Ramsay Street",
    "Bonnie Doon",
    "Cavill Avenue",
    "Queen Street"
  ],
  "street_name": [
    "#{street_root}"
  ],
  "city_prefix": [
    "Bondi",
    "Burleigh Heads",
    "Carlton",
    "Fitzroy",
    "Fremantle",
    "Glenelg",
    "Manly",
    "Noosa",
    "Stones Corner",
    "St Kilda",
    "Surry Hills",
    "Yarra Valley"
  ],
  "city": [
    "#{city_prefix}"
  ],
  "state_abbr": [
    "NSW",
    "QLD",
    "NT",
    "SA",
    "WA",
    "TAS",
    "ACT",
    "VIC"
  ],
  "region": [
    "South East Queensland",
    "Wide Bay Burnett",
    "Margaret River",
    "Port Pirie",
    "Gippsland",
    "Elizabeth",
    "Barossa"
  ],
  "state": [
    "New South Wales",
    "Queensland",
    "Northern Territory",
    "South Australia",
    "Western Australia",
    "Tasmania",
    "Australian Capital Territory",
    "Victoria"
  ],
  "postcode": [
    "0###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###"
  ],
  "building_number": [
    "####",
    "###",
    "##"
  ],
  "street_suffix": [
    "Avenue",
    "Boulevard",
    "Circle",
    "Circuit",
    "Court",
    "Crescent",
    "Crest",
    "Drive",
    "Estate Dr",
    "Grove",
    "Hill",
    "Island",
    "Junction",
    "Knoll",
    "Lane",
    "Loop",
    "Mall",
    "Manor",
    "Meadow",
    "Mews",
    "Parade",
    "Parkway",
    "Pass",
    "Place",
    "Plaza",
    "Ridge",
    "Road",
    "Run",
    "Square",
    "Station St",
    "Street",
    "Summit",
    "Terrace",
    "Track",
    "Trail",
    "View Rd",
    "Way"
  ],
  "default_country": [
    "Australia"
  ]
};
en_au_ocker.phone_number = {
  "formats": [
    "0# #### ####",
    "+61 # #### ####",
    "04## ### ###",
    "+61 4## ### ###"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/es.js":[function(require,module,exports){
var es = {};
module["exports"] = es;
es.title = "Spanish";
es.address = {
  "city_prefix": [
    "Parla",
    "Telde",
    "Baracaldo",
    "San Fernando",
    "Torrevieja",
    "Lugo",
    "Santiago de Compostela",
    "Gerona",
    "Cáceres",
    "Lorca",
    "Coslada",
    "Talavera de la Reina",
    "El Puerto de Santa María",
    "Cornellá de Llobregat",
    "Avilés",
    "Palencia",
    "Gecho",
    "Orihuela",
    "Pontevedra",
    "Pozuelo de Alarcón",
    "Toledo",
    "El Ejido",
    "Guadalajara",
    "Gandía",
    "Ceuta",
    "Ferrol",
    "Chiclana de la Frontera",
    "Manresa",
    "Roquetas de Mar",
    "Ciudad Real",
    "Rubí",
    "Benidorm",
    "San Sebastían de los Reyes",
    "Ponferrada",
    "Zamora",
    "Alcalá de Guadaira",
    "Fuengirola",
    "Mijas",
    "Sanlúcar de Barrameda",
    "La Línea de la Concepción",
    "Majadahonda",
    "Sagunto",
    "El Prat de LLobregat",
    "Viladecans",
    "Linares",
    "Alcoy",
    "Irún",
    "Estepona",
    "Torremolinos",
    "Rivas-Vaciamadrid",
    "Molina de Segura",
    "Paterna",
    "Granollers",
    "Santa Lucía de Tirajana",
    "Motril",
    "Cerdañola del Vallés",
    "Arrecife",
    "Segovia",
    "Torrelavega",
    "Elda",
    "Mérida",
    "Ávila",
    "Valdemoro",
    "Cuenta",
    "Collado Villalba",
    "Benalmádena",
    "Mollet del Vallés",
    "Puertollano",
    "Madrid",
    "Barcelona",
    "Valencia",
    "Sevilla",
    "Zaragoza",
    "Málaga",
    "Murcia",
    "Palma de Mallorca",
    "Las Palmas de Gran Canaria",
    "Bilbao",
    "Córdoba",
    "Alicante",
    "Valladolid",
    "Vigo",
    "Gijón",
    "Hospitalet de LLobregat",
    "La Coruña",
    "Granada",
    "Vitoria",
    "Elche",
    "Santa Cruz de Tenerife",
    "Oviedo",
    "Badalona",
    "Cartagena",
    "Móstoles",
    "Jerez de la Frontera",
    "Tarrasa",
    "Sabadell",
    "Alcalá de Henares",
    "Pamplona",
    "Fuenlabrada",
    "Almería",
    "San Sebastián",
    "Leganés",
    "Santander",
    "Burgos",
    "Castellón de la Plana",
    "Alcorcón",
    "Albacete",
    "Getafe",
    "Salamanca",
    "Huelva",
    "Logroño",
    "Badajoz",
    "San Cristróbal de la Laguna",
    "León",
    "Tarragona",
    "Cádiz",
    "Lérida",
    "Marbella",
    "Mataró",
    "Dos Hermanas",
    "Santa Coloma de Gramanet",
    "Jaén",
    "Algeciras",
    "Torrejón de Ardoz",
    "Orense",
    "Alcobendas",
    "Reus",
    "Calahorra",
    "Inca"
  ],
  "country": [
    "Afganistán",
    "Albania",
    "Argelia",
    "Andorra",
    "Angola",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbayán",
    "Bahamas",
    "Barein",
    "Bangladesh",
    "Barbados",
    "Bielorusia",
    "Bélgica",
    "Belice",
    "Bermuda",
    "Bután",
    "Bolivia",
    "Bosnia Herzegovina",
    "Botswana",
    "Brasil",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Camboya",
    "Camerún",
    "Canada",
    "Cabo Verde",
    "Islas Caimán",
    "Chad",
    "Chile",
    "China",
    "Isla de Navidad",
    "Colombia",
    "Comodos",
    "Congo",
    "Costa Rica",
    "Costa de Marfil",
    "Croacia",
    "Cuba",
    "Chipre",
    "República Checa",
    "Dinamarca",
    "Dominica",
    "República Dominicana",
    "Ecuador",
    "Egipto",
    "El Salvador",
    "Guinea Ecuatorial",
    "Eritrea",
    "Estonia",
    "Etiopía",
    "Islas Faro",
    "Fiji",
    "Finlandia",
    "Francia",
    "Gabón",
    "Gambia",
    "Georgia",
    "Alemania",
    "Ghana",
    "Grecia",
    "Groenlandia",
    "Granada",
    "Guadalupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bisau",
    "Guayana",
    "Haiti",
    "Honduras",
    "Hong Kong",
    "Hungria",
    "Islandia",
    "India",
    "Indonesia",
    "Iran",
    "Irak",
    "Irlanda",
    "Italia",
    "Jamaica",
    "Japón",
    "Jordania",
    "Kazajistan",
    "Kenia",
    "Kiribati",
    "Corea",
    "Kuwait",
    "Letonia",
    "Líbano",
    "Liberia",
    "Liechtenstein",
    "Lituania",
    "Luxemburgo",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malasia",
    "Maldivas",
    "Mali",
    "Malta",
    "Martinica",
    "Mauritania",
    "Méjico",
    "Micronesia",
    "Moldavia",
    "Mónaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Marruecos",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Holanda",
    "Nueva Zelanda",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Noruega",
    "Omán",
    "Pakistan",
    "Panamá",
    "Papúa Nueva Guinea",
    "Paraguay",
    "Perú",
    "Filipinas",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Rusia",
    "Ruanda",
    "Samoa",
    "San Marino",
    "Santo Tomé y Principe",
    "Arabia Saudí",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leona",
    "Singapur",
    "Eslovaquia",
    "Eslovenia",
    "Somalia",
    "España",
    "Sri Lanka",
    "Sudán",
    "Suriname",
    "Suecia",
    "Suiza",
    "Siria",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Tailandia",
    "Timor-Leste",
    "Togo",
    "Tonga",
    "Trinidad y Tobago",
    "Tunez",
    "Turquia",
    "Uganda",
    "Ucrania",
    "Emiratos Árabes Unidos",
    "Reino Unido",
    "Estados Unidos de América",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ],
  "building_number": [
    " s/n.",
    ", #",
    ", ##",
    " #",
    " ##"
  ],
  "street_suffix": [
    "Aldea",
    "Apartamento",
    "Arrabal",
    "Arroyo",
    "Avenida",
    "Bajada",
    "Barranco",
    "Barrio",
    "Bloque",
    "Calle",
    "Calleja",
    "Camino",
    "Carretera",
    "Caserio",
    "Colegio",
    "Colonia",
    "Conjunto",
    "Cuesta",
    "Chalet",
    "Edificio",
    "Entrada",
    "Escalinata",
    "Explanada",
    "Extramuros",
    "Extrarradio",
    "Ferrocarril",
    "Glorieta",
    "Gran Subida",
    "Grupo",
    "Huerta",
    "Jardines",
    "Lado",
    "Lugar",
    "Manzana",
    "Masía",
    "Mercado",
    "Monte",
    "Muelle",
    "Municipio",
    "Parcela",
    "Parque",
    "Partida",
    "Pasaje",
    "Paseo",
    "Plaza",
    "Poblado",
    "Polígono",
    "Prolongación",
    "Puente",
    "Puerta",
    "Quinta",
    "Ramal",
    "Rambla",
    "Rampa",
    "Riera",
    "Rincón",
    "Ronda",
    "Rua",
    "Salida",
    "Sector",
    "Sección",
    "Senda",
    "Solar",
    "Subida",
    "Terrenos",
    "Torrente",
    "Travesía",
    "Urbanización",
    "Vía",
    "Vía Pública"
  ],
  "secondary_address": [
    "Esc. ###",
    "Puerta ###"
  ],
  "postcode": [
    "#####"
  ],
  "province": [
    "Álava",
    "Albacete",
    "Alicante",
    "Almería",
    "Asturias",
    "Ávila",
    "Badajoz",
    "Barcelona",
    "Burgos",
    "Cantabria",
    "Castellón",
    "Ciudad Real",
    "Cuenca",
    "Cáceres",
    "Cádiz",
    "Córdoba",
    "Gerona",
    "Granada",
    "Guadalajara",
    "Guipúzcoa",
    "Huelva",
    "Huesca",
    "Islas Baleares",
    "Jaén",
    "La Coruña",
    "La Rioja",
    "Las Palmas",
    "León",
    "Lugo",
    "lérida",
    "Madrid",
    "Murcia",
    "Málaga",
    "Navarra",
    "Orense",
    "Palencia",
    "Pontevedra",
    "Salamanca",
    "Santa Cruz de Tenerife",
    "Segovia",
    "Sevilla",
    "Soria",
    "Tarragona",
    "Teruel",
    "Toledo",
    "Valencia",
    "Valladolid",
    "Vizcaya",
    "Zamora",
    "Zaragoza"
  ],
  "state": [
    "Andalucía",
    "Aragón",
    "Principado de Asturias",
    "Baleares",
    "Canarias",
    "Cantabria",
    "Castilla-La Mancha",
    "Castilla y León",
    "Cataluña",
    "Comunidad Valenciana",
    "Extremadura",
    "Galicia",
    "La Rioja",
    "Comunidad de Madrid",
    "Navarra",
    "País Vasco",
    "Región de Murcia"
  ],
  "state_abbr": [
    "And",
    "Ara",
    "Ast",
    "Bal",
    "Can",
    "Cbr",
    "Man",
    "Leo",
    "Cat",
    "Com",
    "Ext",
    "Gal",
    "Rio",
    "Mad",
    "Nav",
    "Vas",
    "Mur"
  ],
  "time_zone": [
    "Pacífico/Midway",
    "Pacífico/Pago_Pago",
    "Pacífico/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europa/Dublin",
    "Europa/London",
    "Europa/Lisbon",
    "Europa/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europa/Belgrade",
    "Europa/Bratislava",
    "Europa/Budapest",
    "Europa/Ljubljana",
    "Europa/Prague",
    "Europa/Sarajevo",
    "Europa/Skopje",
    "Europa/Warsaw",
    "Europa/Zagreb",
    "Europa/Brussels",
    "Europa/Copenhagen",
    "Europa/Madrid",
    "Europa/Paris",
    "Europa/Amsterdam",
    "Europa/Berlin",
    "Europa/Berlin",
    "Europa/Rome",
    "Europa/Stockholm",
    "Europa/Vienna",
    "Africa/Algiers",
    "Europa/Bucharest",
    "Africa/Cairo",
    "Europa/Helsinki",
    "Europa/Kiev",
    "Europa/Riga",
    "Europa/Sofia",
    "Europa/Tallinn",
    "Europa/Vilnius",
    "Europa/Athens",
    "Europa/Istanbul",
    "Europa/Minsk",
    "Asia/Jerusalen",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europa/Moscú",
    "Europa/Moscú",
    "Europa/Moscú",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacífico/Guam",
    "Pacífico/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacífico/Noumea",
    "Pacífico/Fiji",
    "Asia/Kamchatka",
    "Pacífico/Majuro",
    "Pacífico/Auckland",
    "Pacífico/Auckland",
    "Pacífico/Tongatapu",
    "Pacífico/Fakaofo",
    "Pacífico/Apia"
  ],
  "city": [
    "#{city_prefix}"
  ],
  "street_name": [
    "#{street_suffix} #{Name.first_name}",
    "#{street_suffix} #{Name.first_name} #{Name.last_name}"
  ],
  "street_address": [
    "#{street_name}#{building_number}",
    "#{street_name}#{building_number} #{secondary_address}"
  ],
  "default_country": [
    "España"
  ]
};
es.company = {
  "suffix": [
    "S.L.",
    "e Hijos",
    "S.A.",
    "Hermanos"
  ],
  "noun": [
      "habilidad",
      "acceso",
      "adaptador",
      "algoritmo",
      "alianza",
      "analista",
      "aplicación",
      "enfoque",
      "arquitectura",
      "archivo",
      "inteligencia artificial",
      "array",
      "actitud",
      "medición",
      "gestión presupuestaria",
      "capacidad",
      "desafío",
      "circuito",
      "colaboración",
      "complejidad",
      "concepto",
      "conglomeración",
      "contingencia",
      "núcleo",
      "fidelidad",
      "base de datos",
      "data-warehouse",
      "definición",
      "emulación",
      "codificar",
      "encriptar",
      "extranet",
      "firmware",
      "flexibilidad",
      "focus group",
      "previsión",
      "base de trabajo",
      "función",
      "funcionalidad",
      "Interfaz Gráfica",
      "groupware",
      "Interfaz gráfico de usuario",
      "hardware",
      "Soporte",
      "jerarquía",
      "conjunto",
      "implementación",
      "infraestructura",
      "iniciativa",
      "instalación",
      "conjunto de instrucciones",
      "interfaz",
      "intranet",
      "base del conocimiento",
      "red de area local",
      "aprovechar",
      "matrices",
      "metodologías",
      "middleware",
      "migración",
      "modelo",
      "moderador",
      "monitorizar",
      "arquitectura abierta",
      "sistema abierto",
      "orquestar",
      "paradigma",
      "paralelismo",
      "política",
      "portal",
      "estructura de precios",
      "proceso de mejora",
      "producto",
      "productividad",
      "proyecto",
      "proyección",
      "protocolo",
      "línea segura",
      "software",
      "solución",
      "estandardización",
      "estrategia",
      "estructura",
      "éxito",
      "superestructura",
      "soporte",
      "sinergia",
      "mediante",
      "marco de tiempo",
      "caja de herramientas",
      "utilización",
      "website",
      "fuerza de trabajo"
    ],
    "descriptor": [
      "24 horas",
      "24/7",
      "3rd generación",
      "4th generación",
      "5th generación",
      "6th generación",
      "analizada",
      "asimétrica",
      "asíncrona",
      "monitorizada por red",
      "bidireccional",
      "bifurcada",
      "generada por el cliente",
      "cliente servidor",
      "coherente",
      "cohesiva",
      "compuesto",
      "sensible al contexto",
      "basado en el contexto",
      "basado en contenido",
      "dedicada",
      "generado por la demanda",
      "didactica",
      "direccional",
      "discreta",
      "dinámica",
      "potenciada",
      "acompasada",
      "ejecutiva",
      "explícita",
      "tolerante a fallos",
      "innovadora",
      "amplio ábanico",
      "global",
      "heurística",
      "alto nivel",
      "holística",
      "homogénea",
      "hibrida",
      "incremental",
      "intangible",
      "interactiva",
      "intermedia",
      "local",
      "logística",
      "maximizada",
      "metódica",
      "misión crítica",
      "móbil",
      "modular",
      "motivadora",
      "multimedia",
      "multiestado",
      "multitarea",
      "nacional",
      "basado en necesidades",
      "neutral",
      "nueva generación",
      "no-volátil",
      "orientado a objetos",
      "óptima",
      "optimizada",
      "radical",
      "tiempo real",
      "recíproca",
      "regional",
      "escalable",
      "secundaria",
      "orientada a soluciones",
      "estable",
      "estatica",
      "sistemática",
      "sistémica",
      "tangible",
      "terciaria",
      "transicional",
      "uniforme",
      "valor añadido",
      "vía web",
      "defectos cero",
      "tolerancia cero"
    ],
    "adjective": [
      "Adaptativo",
      "Avanzado",
      "Asimilado",
      "Automatizado",
      "Equilibrado",
      "Centrado en el negocio",
      "Centralizado",
      "Clonado",
      "Compatible",
      "Configurable",
      "Multi grupo",
      "Multi plataforma",
      "Centrado en el usuario",
      "Configurable",
      "Descentralizado",
      "Digitalizado",
      "Distribuido",
      "Diverso",
      "Reducido",
      "Mejorado",
      "Para toda la empresa",
      "Ergonomico",
      "Exclusivo",
      "Expandido",
      "Extendido",
      "Cara a cara",
      "Enfocado",
      "Totalmente configurable",
      "Fundamental",
      "Orígenes",
      "Horizontal",
      "Implementado",
      "Innovador",
      "Integrado",
      "Intuitivo",
      "Inverso",
      "Gestionado",
      "Obligatorio",
      "Monitorizado",
      "Multi canal",
      "Multi lateral",
      "Multi capa",
      "En red",
      "Orientado a objetos",
      "Open-source",
      "Operativo",
      "Optimizado",
      "Opcional",
      "Organico",
      "Organizado",
      "Perseverando",
      "Persistente",
      "en fases",
      "Polarizado",
      "Pre-emptivo",
      "Proactivo",
      "Enfocado a benficios",
      "Profundo",
      "Programable",
      "Progresivo",
      "Public-key",
      "Enfocado en la calidad",
      "Reactivo",
      "Realineado",
      "Re-contextualizado",
      "Re-implementado",
      "Reducido",
      "Ingenieria inversa",
      "Robusto",
      "Fácil",
      "Seguro",
      "Auto proporciona",
      "Compartible",
      "Intercambiable",
      "Sincronizado",
      "Orientado a equipos",
      "Total",
      "Universal",
      "Mejorado",
      "Actualizable",
      "Centrado en el usuario",
      "Amigable",
      "Versatil",
      "Virtual",
      "Visionario"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} y #{Name.last_name}",
    "#{Name.last_name} #{Name.last_name} #{suffix}",
    "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
  ]
};
es.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "es",
    "info",
    "com.es",
    "org"
  ]
};
es.name = {
  "first_name": [
    "Adán",
    "Agustín",
    "Alberto",
    "Alejandro",
    "Alfonso",
    "Alfredo",
    "Andrés",
    "Antonio",
    "Armando",
    "Arturo",
    "Benito",
    "Benjamín",
    "Bernardo",
    "Carlos",
    "César",
    "Claudio",
    "Clemente",
    "Cristian",
    "Cristobal",
    "Daniel",
    "David",
    "Diego",
    "Eduardo",
    "Emilio",
    "Enrique",
    "Ernesto",
    "Esteban",
    "Federico",
    "Felipe",
    "Fernando",
    "Francisco",
    "Gabriel",
    "Gerardo",
    "Germán",
    "Gilberto",
    "Gonzalo",
    "Gregorio",
    "Guillermo",
    "Gustavo",
    "Hernán",
    "Homero",
    "Horacio",
    "Hugo",
    "Ignacio",
    "Jacobo",
    "Jaime",
    "Javier",
    "Jerónimo",
    "Jesús",
    "Joaquín",
    "Jorge",
    "Jorge Luis",
    "José",
    "José Eduardo",
    "José Emilio",
    "José Luis",
    "José María",
    "Juan",
    "Juan Carlos",
    "Julio",
    "Julio César",
    "Lorenzo",
    "Lucas",
    "Luis",
    "Luis Miguel",
    "Manuel",
    "Marco Antonio",
    "Marcos",
    "Mariano",
    "Mario",
    "Martín",
    "Mateo",
    "Miguel",
    "Miguel Ángel",
    "Nicolás",
    "Octavio",
    "Óscar",
    "Pablo",
    "Patricio",
    "Pedro",
    "Rafael",
    "Ramiro",
    "Ramón",
    "Raúl",
    "Ricardo",
    "Roberto",
    "Rodrigo",
    "Rubén",
    "Salvador",
    "Samuel",
    "Sancho",
    "Santiago",
    "Sergio",
    "Teodoro",
    "Timoteo",
    "Tomás",
    "Vicente",
    "Víctor",
    "Adela",
    "Adriana",
    "Alejandra",
    "Alicia",
    "Amalia",
    "Ana",
    "Ana Luisa",
    "Ana María",
    "Andrea",
    "Anita",
    "Ángela",
    "Antonia",
    "Ariadna",
    "Barbara",
    "Beatriz",
    "Berta",
    "Blanca",
    "Caridad",
    "Carla",
    "Carlota",
    "Carmen",
    "Carolina",
    "Catalina",
    "Cecilia",
    "Clara",
    "Claudia",
    "Concepción",
    "Conchita",
    "Cristina",
    "Daniela",
    "Débora",
    "Diana",
    "Dolores",
    "Lola",
    "Dorotea",
    "Elena",
    "Elisa",
    "Eloisa",
    "Elsa",
    "Elvira",
    "Emilia",
    "Esperanza",
    "Estela",
    "Ester",
    "Eva",
    "Florencia",
    "Francisca",
    "Gabriela",
    "Gloria",
    "Graciela",
    "Guadalupe",
    "Guillermina",
    "Inés",
    "Irene",
    "Isabel",
    "Isabela",
    "Josefina",
    "Juana",
    "Julia",
    "Laura",
    "Leonor",
    "Leticia",
    "Lilia",
    "Lorena",
    "Lourdes",
    "Lucia",
    "Luisa",
    "Luz",
    "Magdalena",
    "Manuela",
    "Marcela",
    "Margarita",
    "María",
    "María del Carmen",
    "María Cristina",
    "María Elena",
    "María Eugenia",
    "María José",
    "María Luisa",
    "María Soledad",
    "María Teresa",
    "Mariana",
    "Maricarmen",
    "Marilu",
    "Marisol",
    "Marta",
    "Mayte",
    "Mercedes",
    "Micaela",
    "Mónica",
    "Natalia",
    "Norma",
    "Olivia",
    "Patricia",
    "Pilar",
    "Ramona",
    "Raquel",
    "Rebeca",
    "Reina",
    "Rocio",
    "Rosa",
    "Rosalia",
    "Rosario",
    "Sara",
    "Silvia",
    "Sofia",
    "Soledad",
    "Sonia",
    "Susana",
    "Teresa",
    "Verónica",
    "Victoria",
    "Virginia",
    "Yolanda"
  ],
  "last_name": [
    "Abeyta",
    "Abrego",
    "Abreu",
    "Acevedo",
    "Acosta",
    "Acuña",
    "Adame",
    "Adorno",
    "Agosto",
    "Aguayo",
    "Águilar",
    "Aguilera",
    "Aguirre",
    "Alanis",
    "Alaniz",
    "Alarcón",
    "Alba",
    "Alcala",
    "Alcántar",
    "Alcaraz",
    "Alejandro",
    "Alemán",
    "Alfaro",
    "Alicea",
    "Almanza",
    "Almaraz",
    "Almonte",
    "Alonso",
    "Alonzo",
    "Altamirano",
    "Alva",
    "Alvarado",
    "Alvarez",
    "Amador",
    "Amaya",
    "Anaya",
    "Anguiano",
    "Angulo",
    "Aparicio",
    "Apodaca",
    "Aponte",
    "Aragón",
    "Araña",
    "Aranda",
    "Arce",
    "Archuleta",
    "Arellano",
    "Arenas",
    "Arevalo",
    "Arguello",
    "Arias",
    "Armas",
    "Armendáriz",
    "Armenta",
    "Armijo",
    "Arredondo",
    "Arreola",
    "Arriaga",
    "Arroyo",
    "Arteaga",
    "Atencio",
    "Ávalos",
    "Ávila",
    "Avilés",
    "Ayala",
    "Baca",
    "Badillo",
    "Báez",
    "Baeza",
    "Bahena",
    "Balderas",
    "Ballesteros",
    "Banda",
    "Bañuelos",
    "Barajas",
    "Barela",
    "Barragán",
    "Barraza",
    "Barrera",
    "Barreto",
    "Barrientos",
    "Barrios",
    "Batista",
    "Becerra",
    "Beltrán",
    "Benavides",
    "Benavídez",
    "Benítez",
    "Bermúdez",
    "Bernal",
    "Berríos",
    "Bétancourt",
    "Blanco",
    "Bonilla",
    "Borrego",
    "Botello",
    "Bravo",
    "Briones",
    "Briseño",
    "Brito",
    "Bueno",
    "Burgos",
    "Bustamante",
    "Bustos",
    "Caballero",
    "Cabán",
    "Cabrera",
    "Cadena",
    "Caldera",
    "Calderón",
    "Calvillo",
    "Camacho",
    "Camarillo",
    "Campos",
    "Canales",
    "Candelaria",
    "Cano",
    "Cantú",
    "Caraballo",
    "Carbajal",
    "Cardenas",
    "Cardona",
    "Carmona",
    "Carranza",
    "Carrasco",
    "Carrasquillo",
    "Carreón",
    "Carrera",
    "Carrero",
    "Carrillo",
    "Carrion",
    "Carvajal",
    "Casanova",
    "Casares",
    "Casárez",
    "Casas",
    "Casillas",
    "Castañeda",
    "Castellanos",
    "Castillo",
    "Castro",
    "Cavazos",
    "Cazares",
    "Ceballos",
    "Cedillo",
    "Ceja",
    "Centeno",
    "Cepeda",
    "Cerda",
    "Cervantes",
    "Cervántez",
    "Chacón",
    "Chapa",
    "Chavarría",
    "Chávez",
    "Cintrón",
    "Cisneros",
    "Collado",
    "Collazo",
    "Colón",
    "Colunga",
    "Concepción",
    "Contreras",
    "Cordero",
    "Córdova",
    "Cornejo",
    "Corona",
    "Coronado",
    "Corral",
    "Corrales",
    "Correa",
    "Cortés",
    "Cortez",
    "Cotto",
    "Covarrubias",
    "Crespo",
    "Cruz",
    "Cuellar",
    "Curiel",
    "Dávila",
    "de Anda",
    "de Jesús",
    "Delacrúz",
    "Delafuente",
    "Delagarza",
    "Delao",
    "Delapaz",
    "Delarosa",
    "Delatorre",
    "Deleón",
    "Delgadillo",
    "Delgado",
    "Delrío",
    "Delvalle",
    "Díaz",
    "Domínguez",
    "Domínquez",
    "Duarte",
    "Dueñas",
    "Duran",
    "Echevarría",
    "Elizondo",
    "Enríquez",
    "Escalante",
    "Escamilla",
    "Escobar",
    "Escobedo",
    "Esparza",
    "Espinal",
    "Espino",
    "Espinosa",
    "Espinoza",
    "Esquibel",
    "Esquivel",
    "Estévez",
    "Estrada",
    "Fajardo",
    "Farías",
    "Feliciano",
    "Fernández",
    "Ferrer",
    "Fierro",
    "Figueroa",
    "Flores",
    "Flórez",
    "Fonseca",
    "Franco",
    "Frías",
    "Fuentes",
    "Gaitán",
    "Galarza",
    "Galindo",
    "Gallardo",
    "Gallegos",
    "Galván",
    "Gálvez",
    "Gamboa",
    "Gamez",
    "Gaona",
    "Garay",
    "García",
    "Garibay",
    "Garica",
    "Garrido",
    "Garza",
    "Gastélum",
    "Gaytán",
    "Gil",
    "Girón",
    "Godínez",
    "Godoy",
    "Gómez",
    "Gonzales",
    "González",
    "Gollum",
    "Gracia",
    "Granado",
    "Granados",
    "Griego",
    "Grijalva",
    "Guajardo",
    "Guardado",
    "Guerra",
    "Guerrero",
    "Guevara",
    "Guillen",
    "Gurule",
    "Gutiérrez",
    "Guzmán",
    "Haro",
    "Henríquez",
    "Heredia",
    "Hernádez",
    "Hernandes",
    "Hernández",
    "Herrera",
    "Hidalgo",
    "Hinojosa",
    "Holguín",
    "Huerta",
    "Hurtado",
    "Ibarra",
    "Iglesias",
    "Irizarry",
    "Jaime",
    "Jaimes",
    "Jáquez",
    "Jaramillo",
    "Jasso",
    "Jiménez",
    "Jimínez",
    "Juárez",
    "Jurado",
    "Laboy",
    "Lara",
    "Laureano",
    "Leal",
    "Lebrón",
    "Ledesma",
    "Leiva",
    "Lemus",
    "León",
    "Lerma",
    "Leyva",
    "Limón",
    "Linares",
    "Lira",
    "Llamas",
    "Loera",
    "Lomeli",
    "Longoria",
    "López",
    "Lovato",
    "Loya",
    "Lozada",
    "Lozano",
    "Lucero",
    "Lucio",
    "Luevano",
    "Lugo",
    "Luna",
    "Macías",
    "Madera",
    "Madrid",
    "Madrigal",
    "Maestas",
    "Magaña",
    "Malave",
    "Maldonado",
    "Manzanares",
    "Mares",
    "Marín",
    "Márquez",
    "Marrero",
    "Marroquín",
    "Martínez",
    "Mascareñas",
    "Mata",
    "Mateo",
    "Matías",
    "Matos",
    "Maya",
    "Mayorga",
    "Medina",
    "Medrano",
    "Mejía",
    "Meléndez",
    "Melgar",
    "Mena",
    "Menchaca",
    "Méndez",
    "Mendoza",
    "Menéndez",
    "Meraz",
    "Mercado",
    "Merino",
    "Mesa",
    "Meza",
    "Miramontes",
    "Miranda",
    "Mireles",
    "Mojica",
    "Molina",
    "Mondragón",
    "Monroy",
    "Montalvo",
    "Montañez",
    "Montaño",
    "Montemayor",
    "Montenegro",
    "Montero",
    "Montes",
    "Montez",
    "Montoya",
    "Mora",
    "Morales",
    "Moreno",
    "Mota",
    "Moya",
    "Munguía",
    "Muñiz",
    "Muñoz",
    "Murillo",
    "Muro",
    "Nájera",
    "Naranjo",
    "Narváez",
    "Nava",
    "Navarrete",
    "Navarro",
    "Nazario",
    "Negrete",
    "Negrón",
    "Nevárez",
    "Nieto",
    "Nieves",
    "Niño",
    "Noriega",
    "Núñez",
    "Ocampo",
    "Ocasio",
    "Ochoa",
    "Ojeda",
    "Olivares",
    "Olivárez",
    "Olivas",
    "Olivera",
    "Olivo",
    "Olmos",
    "Olvera",
    "Ontiveros",
    "Oquendo",
    "Ordóñez",
    "Orellana",
    "Ornelas",
    "Orosco",
    "Orozco",
    "Orta",
    "Ortega",
    "Ortiz",
    "Osorio",
    "Otero",
    "Ozuna",
    "Pabón",
    "Pacheco",
    "Padilla",
    "Padrón",
    "Páez",
    "Pagan",
    "Palacios",
    "Palomino",
    "Palomo",
    "Pantoja",
    "Paredes",
    "Parra",
    "Partida",
    "Patiño",
    "Paz",
    "Pedraza",
    "Pedroza",
    "Pelayo",
    "Peña",
    "Perales",
    "Peralta",
    "Perea",
    "Peres",
    "Pérez",
    "Pichardo",
    "Piña",
    "Pineda",
    "Pizarro",
    "Polanco",
    "Ponce",
    "Porras",
    "Portillo",
    "Posada",
    "Prado",
    "Preciado",
    "Prieto",
    "Puente",
    "Puga",
    "Pulido",
    "Quesada",
    "Quezada",
    "Quiñones",
    "Quiñónez",
    "Quintana",
    "Quintanilla",
    "Quintero",
    "Quiroz",
    "Rael",
    "Ramírez",
    "Ramón",
    "Ramos",
    "Rangel",
    "Rascón",
    "Raya",
    "Razo",
    "Regalado",
    "Rendón",
    "Rentería",
    "Reséndez",
    "Reyes",
    "Reyna",
    "Reynoso",
    "Rico",
    "Rincón",
    "Riojas",
    "Ríos",
    "Rivas",
    "Rivera",
    "Rivero",
    "Robledo",
    "Robles",
    "Rocha",
    "Rodarte",
    "Rodrígez",
    "Rodríguez",
    "Rodríquez",
    "Rojas",
    "Rojo",
    "Roldán",
    "Rolón",
    "Romero",
    "Romo",
    "Roque",
    "Rosado",
    "Rosales",
    "Rosario",
    "Rosas",
    "Roybal",
    "Rubio",
    "Ruelas",
    "Ruiz",
    "Saavedra",
    "Sáenz",
    "Saiz",
    "Salas",
    "Salazar",
    "Salcedo",
    "Salcido",
    "Saldaña",
    "Saldivar",
    "Salgado",
    "Salinas",
    "Samaniego",
    "Sanabria",
    "Sanches",
    "Sánchez",
    "Sandoval",
    "Santacruz",
    "Santana",
    "Santiago",
    "Santillán",
    "Sarabia",
    "Sauceda",
    "Saucedo",
    "Sedillo",
    "Segovia",
    "Segura",
    "Sepúlveda",
    "Serna",
    "Serrano",
    "Serrato",
    "Sevilla",
    "Sierra",
    "Sisneros",
    "Solano",
    "Solís",
    "Soliz",
    "Solorio",
    "Solorzano",
    "Soria",
    "Sosa",
    "Sotelo",
    "Soto",
    "Suárez",
    "Tafoya",
    "Tamayo",
    "Tamez",
    "Tapia",
    "Tejada",
    "Tejeda",
    "Téllez",
    "Tello",
    "Terán",
    "Terrazas",
    "Tijerina",
    "Tirado",
    "Toledo",
    "Toro",
    "Torres",
    "Tórrez",
    "Tovar",
    "Trejo",
    "Treviño",
    "Trujillo",
    "Ulibarri",
    "Ulloa",
    "Urbina",
    "Ureña",
    "Urías",
    "Uribe",
    "Urrutia",
    "Vaca",
    "Valadez",
    "Valdés",
    "Valdez",
    "Valdivia",
    "Valencia",
    "Valentín",
    "Valenzuela",
    "Valladares",
    "Valle",
    "Vallejo",
    "Valles",
    "Valverde",
    "Vanegas",
    "Varela",
    "Vargas",
    "Vásquez",
    "Vázquez",
    "Vega",
    "Vela",
    "Velasco",
    "Velásquez",
    "Velázquez",
    "Vélez",
    "Véliz",
    "Venegas",
    "Vera",
    "Verdugo",
    "Verduzco",
    "Vergara",
    "Viera",
    "Vigil",
    "Villa",
    "Villagómez",
    "Villalobos",
    "Villalpando",
    "Villanueva",
    "Villareal",
    "Villarreal",
    "Villaseñor",
    "Villegas",
    "Yáñez",
    "Ybarra",
    "Zambrano",
    "Zamora",
    "Zamudio",
    "Zapata",
    "Zaragoza",
    "Zarate",
    "Zavala",
    "Zayas",
    "Zelaya",
    "Zepeda",
    "Zúñiga"
  ],
  "prefix": [
    "Sr.",
    "Sra.",
    "Sta."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "MD",
    "DDS",
    "PhD",
    "DVM"
  ],
  "title": {
    "descriptor": [
      "Jefe",
      "Senior",
      "Directo",
      "Corporativo",
      "Dinánmico",
      "Futuro",
      "Producto",
      "Nacional",
      "Regional",
      "Distrito",
      "Central",
      "Global",
      "Cliente",
      "Inversor",
      "International",
      "Heredado",
      "Adelante",
      "Interno",
      "Humano",
      "Gerente",
      "Director"
    ],
    "level": [
      "Soluciones",
      "Programa",
      "Marca",
      "Seguridada",
      "Investigación",
      "Marketing",
      "Normas",
      "Implementación",
      "Integración",
      "Funcionalidad",
      "Respuesta",
      "Paradigma",
      "Tácticas",
      "Identidad",
      "Mercados",
      "Grupo",
      "División",
      "Aplicaciones",
      "Optimización",
      "Operaciones",
      "Infraestructura",
      "Intranet",
      "Comunicaciones",
      "Web",
      "Calidad",
      "Seguro",
      "Mobilidad",
      "Cuentas",
      "Datos",
      "Creativo",
      "Configuración",
      "Contabilidad",
      "Interacciones",
      "Factores",
      "Usabilidad",
      "Métricas"
    ],
    "job": [
      "Supervisor",
      "Asociado",
      "Ejecutivo",
      "Relacciones",
      "Oficial",
      "Gerente",
      "Ingeniero",
      "Especialista",
      "Director",
      "Coordinador",
      "Administrador",
      "Arquitecto",
      "Analista",
      "Diseñador",
      "Planificador",
      "Técnico",
      "Funcionario",
      "Desarrollador",
      "Productor",
      "Consultor",
      "Asistente",
      "Facilitador",
      "Agente",
      "Representante",
      "Estratega"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}"
  ]
};
es.phone_number = {
  "formats": [
    "9##-###-###",
    "9##.###.###",
    "9## ### ###",
    "9########"
  ]
};
es.cell_phone = {
  "formats": [
    "6##-###-###",
    "6##.###.###",
    "6## ### ###",
    "6########"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/fa.js":[function(require,module,exports){
var fa = {};
module["exports"] = fa;
fa.title = "Farsi";
fa.name = {
  "first_name": [
    "آبان دخت",
    "آبتین",
    "آتوسا",
    "آفر",
    "آفره دخت",
    "آذرنوش‌",
    "آذین",
    "آراه",
    "آرزو",
    "آرش",
    "آرتین",
    "آرتام",
    "آرتمن",
    "آرشام",
    "آرمان",
    "آرمین",
    "آرمیتا",
    "آریا فر",
    "آریا",
    "آریا مهر",
    "آرین",
    "آزاده",
    "آزرم",
    "آزرمدخت",
    "آزیتا",
    "آناهیتا",
    "آونگ",
    "آهو",
    "آیدا",
    "اتسز",
    "اختر",
    "ارد",
    "ارد شیر",
    "اردوان",
    "ارژن",
    "ارژنگ",
    "ارسلان",
    "ارغوان",
    "ارمغان",
    "ارنواز",
    "اروانه",
    "استر",
    "اسفندیار",
    "اشکان",
    "اشکبوس",
    "افسانه",
    "افسون",
    "افشین",
    "امید",
    "انوش (‌ آنوشا )",
    "انوشروان",
    "اورنگ",
    "اوژن",
    "اوستا",
    "اهورا",
    "ایاز",
    "ایران",
    "ایراندخت",
    "ایرج",
    "ایزدیار",
    "بابک",
    "باپوک",
    "باربد",
    "بارمان",
    "بامداد",
    "بامشاد",
    "بانو",
    "بختیار",
    "برانوش",
    "بردیا",
    "برزو",
    "برزویه",
    "برزین",
    "برمک",
    "بزرگمهر",
    "بنفشه",
    "بوژان",
    "بویان",
    "بهار",
    "بهارک",
    "بهاره",
    "بهتاش",
    "بهداد",
    "بهرام",
    "بهدیس",
    "بهرخ",
    "بهرنگ",
    "بهروز",
    "بهزاد",
    "بهشاد",
    "بهمن",
    "بهناز",
    "بهنام",
    "بهنود",
    "بهنوش",
    "بیتا",
    "بیژن",
    "پارسا",
    "پاکان",
    "پاکتن",
    "پاکدخت",
    "پانته آ",
    "پدرام",
    "پرتو",
    "پرشنگ",
    "پرتو",
    "پرستو",
    "پرویز",
    "پردیس",
    "پرهام",
    "پژمان",
    "پژوا",
    "پرنیا",
    "پشنگ",
    "پروانه",
    "پروین",
    "پری",
    "پریچهر",
    "پریدخت",
    "پریسا",
    "پرناز",
    "پریوش",
    "پریا",
    "پوپک",
    "پوران",
    "پوراندخت",
    "پوریا",
    "پولاد",
    "پویا",
    "پونه",
    "پیام",
    "پیروز",
    "پیمان",
    "تابان",
    "تاباندخت",
    "تاجی",
    "تارا",
    "تاویار",
    "ترانه",
    "تناز",
    "توران",
    "توراندخت",
    "تورج",
    "تورتک",
    "توفان",
    "توژال",
    "تیر داد",
    "تینا",
    "تینو",
    "جابان",
    "جامین",
    "جاوید",
    "جریره",
    "جمشید",
    "جوان",
    "جویا",
    "جهان",
    "جهانبخت",
    "جهانبخش",
    "جهاندار",
    "جهانگیر",
    "جهان بانو",
    "جهاندخت",
    "جهان ناز",
    "جیران",
    "چابک",
    "چالاک",
    "چاوش",
    "چترا",
    "چوبین",
    "چهرزاد",
    "خاوردخت",
    "خداداد",
    "خدایار",
    "خرم",
    "خرمدخت",
    "خسرو",
    "خشایار",
    "خورشید",
    "دادمهر",
    "دارا",
    "داراب",
    "داریا",
    "داریوش",
    "دانوش",
    "داور‌",
    "دایان",
    "دریا",
    "دل آرا",
    "دل آویز",
    "دلارام",
    "دل انگیز",
    "دلبر",
    "دلبند",
    "دلربا",
    "دلشاد",
    "دلکش",
    "دلناز",
    "دلنواز",
    "دورشاسب",
    "دنیا",
    "دیااکو",
    "دیانوش",
    "دیبا",
    "دیبا دخت",
    "رابو",
    "رابین",
    "رادبانو",
    "رادمان",
    "رازبان",
    "راژانه",
    "راسا",
    "رامتین",
    "رامش",
    "رامشگر",
    "رامونا",
    "رامیار",
    "رامیلا",
    "رامین",
    "راویار",
    "رژینا",
    "رخپاک",
    "رخسار",
    "رخشانه",
    "رخشنده",
    "رزمیار",
    "رستم",
    "رکسانا",
    "روبینا",
    "رودابه",
    "روزبه",
    "روشنک",
    "روناک",
    "رهام",
    "رهی",
    "ریبار",
    "راسپینا",
    "زادبخت",
    "زاد به",
    "زاد چهر",
    "زاد فر",
    "زال",
    "زادماسب",
    "زاوا",
    "زردشت",
    "زرنگار",
    "زری",
    "زرین",
    "زرینه",
    "زمانه",
    "زونا",
    "زیبا",
    "زیبار",
    "زیما",
    "زینو",
    "ژاله",
    "ژالان",
    "ژیار",
    "ژینا",
    "ژیوار",
    "سارا",
    "سارک",
    "سارنگ",
    "ساره",
    "ساسان",
    "ساغر",
    "سام",
    "سامان",
    "سانا",
    "ساناز",
    "سانیار",
    "ساویز",
    "ساهی",
    "ساینا",
    "سایه",
    "سپنتا",
    "سپند",
    "سپهر",
    "سپهرداد",
    "سپیدار",
    "سپید بانو",
    "سپیده",
    "ستاره",
    "ستی",
    "سرافراز",
    "سرور",
    "سروش",
    "سرور",
    "سوبا",
    "سوبار",
    "سنبله",
    "سودابه",
    "سوری",
    "سورن",
    "سورنا",
    "سوزان",
    "سوزه",
    "سوسن",
    "سومار",
    "سولان",
    "سولماز",
    "سوگند",
    "سهراب",
    "سهره",
    "سهند",
    "سیامک",
    "سیاوش",
    "سیبوبه ‌",
    "سیما",
    "سیمدخت",
    "سینا",
    "سیمین",
    "سیمین دخت",
    "شاپرک",
    "شادی",
    "شادمهر",
    "شاران",
    "شاهپور",
    "شاهدخت",
    "شاهرخ",
    "شاهین",
    "شاهیندخت",
    "شایسته",
    "شباهنگ",
    "شب بو",
    "شبدیز",
    "شبنم",
    "شراره",
    "شرمین",
    "شروین",
    "شکوفه",
    "شکفته",
    "شمشاد",
    "شمین",
    "شوان",
    "شمیلا",
    "شورانگیز",
    "شوری",
    "شهاب",
    "شهبار",
    "شهباز",
    "شهبال",
    "شهپر",
    "شهداد",
    "شهرآرا",
    "شهرام",
    "شهربانو",
    "شهرزاد",
    "شهرناز",
    "شهرنوش",
    "شهره",
    "شهریار",
    "شهرزاد",
    "شهلا",
    "شهنواز",
    "شهین",
    "شیبا",
    "شیدا",
    "شیده",
    "شیردل",
    "شیرزاد",
    "شیرنگ",
    "شیرو",
    "شیرین دخت",
    "شیما",
    "شینا",
    "شیرین",
    "شیوا",
    "طوس",
    "طوطی",
    "طهماسب",
    "طهمورث",
    "غوغا",
    "غنچه",
    "فتانه",
    "فدا",
    "فراز",
    "فرامرز",
    "فرانک",
    "فراهان",
    "فربد",
    "فربغ",
    "فرجاد",
    "فرخ",
    "فرخ پی",
    "فرخ داد",
    "فرخ رو",
    "فرخ زاد",
    "فرخ لقا",
    "فرخ مهر",
    "فرداد",
    "فردیس",
    "فرین",
    "فرزاد",
    "فرزام",
    "فرزان",
    "فرزانه",
    "فرزین",
    "فرشاد",
    "فرشته",
    "فرشید",
    "فرمان",
    "فرناز",
    "فرنگیس",
    "فرنود",
    "فرنوش",
    "فرنیا",
    "فروتن",
    "فرود",
    "فروز",
    "فروزان",
    "فروزش",
    "فروزنده",
    "فروغ",
    "فرهاد",
    "فرهنگ",
    "فرهود",
    "فربار",
    "فریبا",
    "فرید",
    "فریدخت",
    "فریدون",
    "فریمان",
    "فریناز",
    "فرینوش",
    "فریوش",
    "فیروز",
    "فیروزه",
    "قابوس",
    "قباد",
    "قدسی",
    "کابان",
    "کابوک",
    "کارا",
    "کارو",
    "کاراکو",
    "کامبخت",
    "کامبخش",
    "کامبیز",
    "کامجو",
    "کامدین",
    "کامران",
    "کامراوا",
    "کامک",
    "کامنوش",
    "کامیار",
    "کانیار",
    "کاووس",
    "کاوه",
    "کتایون",
    "کرشمه",
    "کسری",
    "کلاله",
    "کمبوجیه",
    "کوشا",
    "کهبد",
    "کهرام",
    "کهزاد",
    "کیارش",
    "کیان",
    "کیانا",
    "کیانچهر",
    "کیاندخت",
    "کیانوش",
    "کیاوش",
    "کیخسرو",
    "کیقباد",
    "کیکاووس",
    "کیوان",
    "کیوان دخت",
    "کیومرث",
    "کیهان",
    "کیاندخت",
    "کیهانه",
    "گرد آفرید",
    "گردان",
    "گرشا",
    "گرشاسب",
    "گرشین",
    "گرگین",
    "گزل",
    "گشتاسب",
    "گشسب",
    "گشسب بانو",
    "گل",
    "گل آذین",
    "گل آرا‌",
    "گلاره",
    "گل افروز",
    "گلاله",
    "گل اندام",
    "گلاویز",
    "گلباد",
    "گلبار",
    "گلبام",
    "گلبان",
    "گلبانو",
    "گلبرگ",
    "گلبو",
    "گلبهار",
    "گلبیز",
    "گلپاره",
    "گلپر",
    "گلپری",
    "گلپوش",
    "گل پونه",
    "گلچین",
    "گلدخت",
    "گلدیس",
    "گلربا",
    "گلرخ",
    "گلرنگ",
    "گلرو",
    "گلشن",
    "گلریز",
    "گلزاد",
    "گلزار",
    "گلسا",
    "گلشید",
    "گلنار",
    "گلناز",
    "گلنسا",
    "گلنواز",
    "گلنوش",
    "گلی",
    "گودرز",
    "گوماتو",
    "گهر چهر",
    "گوهر ناز",
    "گیتی",
    "گیسو",
    "گیلدا",
    "گیو",
    "لادن",
    "لاله",
    "لاله رخ",
    "لاله دخت",
    "لبخند",
    "لقاء",
    "لومانا",
    "لهراسب",
    "مارال",
    "ماری",
    "مازیار",
    "ماکان",
    "مامک",
    "مانا",
    "ماندانا",
    "مانوش",
    "مانی",
    "مانیا",
    "ماهان",
    "ماهاندخت",
    "ماه برزین",
    "ماه جهان",
    "ماهچهر",
    "ماهدخت",
    "ماهور",
    "ماهرخ",
    "ماهزاد",
    "مردآویز",
    "مرداس",
    "مرزبان",
    "مرمر",
    "مزدک",
    "مژده",
    "مژگان",
    "مستان",
    "مستانه",
    "مشکاندخت",
    "مشکناز",
    "مشکین دخت",
    "منیژه",
    "منوچهر",
    "مهبانو",
    "مهبد",
    "مه داد",
    "مهتاب",
    "مهدیس",
    "مه جبین",
    "مه دخت",
    "مهر آذر",
    "مهر آرا",
    "مهر آسا",
    "مهر آفاق",
    "مهر افرین",
    "مهرآب",
    "مهرداد",
    "مهر افزون",
    "مهرام",
    "مهران",
    "مهراندخت",
    "مهراندیش",
    "مهرانفر",
    "مهرانگیز",
    "مهرداد",
    "مهر دخت",
    "مهرزاده ‌",
    "مهرناز",
    "مهرنوش",
    "مهرنکار",
    "مهرنیا",
    "مهروز",
    "مهری",
    "مهریار",
    "مهسا",
    "مهستی",
    "مه سیما",
    "مهشاد",
    "مهشید",
    "مهنام",
    "مهناز",
    "مهنوش",
    "مهوش",
    "مهیار",
    "مهین",
    "مهین دخت",
    "میترا",
    "میخک",
    "مینا",
    "مینا دخت",
    "مینو",
    "مینودخت",
    "مینو فر",
    "نادر",
    "ناز آفرین",
    "نازبانو",
    "نازپرور",
    "نازچهر",
    "نازفر",
    "نازلی",
    "نازی",
    "نازیدخت",
    "نامور",
    "ناهید",
    "ندا",
    "نرسی",
    "نرگس",
    "نرمک",
    "نرمین",
    "نریمان",
    "نسترن",
    "نسرین",
    "نسرین دخت",
    "نسرین نوش",
    "نکیسا",
    "نگار",
    "نگاره",
    "نگارین",
    "نگین",
    "نوا",
    "نوش",
    "نوش آذر",
    "نوش آور",
    "نوشا",
    "نوش آفرین",
    "نوشدخت",
    "نوشروان",
    "نوشفر",
    "نوشناز",
    "نوشین",
    "نوید",
    "نوین",
    "نوین دخت",
    "نیش ا",
    "نیک بین",
    "نیک پی",
    "نیک چهر",
    "نیک خواه",
    "نیکداد",
    "نیکدخت",
    "نیکدل",
    "نیکزاد",
    "نیلوفر",
    "نیما",
    "وامق",
    "ورجاوند",
    "وریا",
    "وشمگیر",
    "وهرز",
    "وهسودان",
    "ویدا",
    "ویس",
    "ویشتاسب",
    "ویگن",
    "هژیر",
    "هخامنش",
    "هربد( هیربد )",
    "هرمز",
    "همایون",
    "هما",
    "همادخت",
    "همدم",
    "همراز",
    "همراه",
    "هنگامه",
    "هوتن",
    "هور",
    "هورتاش",
    "هورچهر",
    "هورداد",
    "هوردخت",
    "هورزاد",
    "هورمند",
    "هوروش",
    "هوشنگ",
    "هوشیار",
    "هومان",
    "هومن",
    "هونام",
    "هویدا",
    "هیتاسب",
    "هیرمند",
    "هیما",
    "هیوا",
    "یادگار",
    "یاسمن ( یاسمین )",
    "یاشار",
    "یاور",
    "یزدان",
    "یگانه",
    "یوشیتا"
  ],
  "last_name": [
    "عارف",
    "عاشوری",
    "عالی",
    "عبادی",
    "عبدالکریمی",
    "عبدالملکی",
    "عراقی",
    "عزیزی",
    "عصار",
    "عقیلی",
    "علم",
    "علم‌الهدی",
    "علی عسگری",
    "علی‌آبادی",
    "علیا",
    "علی‌پور",
    "علی‌زمانی",
    "عنایت",
    "غضنفری",
    "غنی",
    "فارسی",
    "فاطمی",
    "فانی",
    "فتاحی",
    "فرامرزی",
    "فرج",
    "فرشیدورد",
    "فرمانفرمائیان",
    "فروتن",
    "فرهنگ",
    "فریاد",
    "فنایی",
    "فنی‌زاده",
    "فولادوند",
    "فهمیده",
    "قاضی",
    "قانعی",
    "قانونی",
    "قمیشی",
    "قنبری",
    "قهرمان",
    "قهرمانی",
    "قهرمانیان",
    "قهستانی",
    "کاشی",
    "کاکاوند",
    "کامکار",
    "کاملی",
    "کاویانی",
    "کدیور",
    "کردبچه",
    "کرمانی",
    "کریمی",
    "کلباسی",
    "کمالی",
    "کوشکی",
    "کهنمویی",
    "کیان",
    "کیانی (نام خانوادگی)",
    "کیمیایی",
    "گل محمدی",
    "گلپایگانی",
    "گنجی",
    "لاجوردی",
    "لاچینی",
    "لاهوتی",
    "لنکرانی",
    "لوکس",
    "مجاهد",
    "مجتبایی",
    "مجتبوی",
    "مجتهد شبستری",
    "مجتهدی",
    "مجرد",
    "محجوب",
    "محجوبی",
    "محدثی",
    "محمدرضایی",
    "محمدی",
    "مددی",
    "مرادخانی",
    "مرتضوی",
    "مستوفی",
    "مشا",
    "مصاحب",
    "مصباح",
    "مصباح‌زاده",
    "مطهری",
    "مظفر",
    "معارف",
    "معروف",
    "معین",
    "مفتاح",
    "مفتح",
    "مقدم",
    "ملایری",
    "ملک",
    "ملکیان",
    "منوچهری",
    "موحد",
    "موسوی",
    "موسویان",
    "مهاجرانی",
    "مهدی‌پور",
    "میرباقری",
    "میردامادی",
    "میرزاده",
    "میرسپاسی",
    "میزبانی",
    "ناظری",
    "نامور",
    "نجفی",
    "ندوشن",
    "نراقی",
    "نعمت‌زاده",
    "نقدی",
    "نقیب‌زاده",
    "نواب",
    "نوبخت",
    "نوبختی",
    "نهاوندی",
    "نیشابوری",
    "نیلوفری",
    "واثقی",
    "واعظ",
    "واعظ‌زاده",
    "واعظی",
    "وکیلی",
    "هاشمی",
    "هاشمی رفسنجانی",
    "هاشمیان",
    "هامون",
    "هدایت",
    "هراتی",
    "هروی",
    "همایون",
    "همت",
    "همدانی",
    "هوشیار",
    "هومن",
    "یاحقی",
    "یادگار",
    "یثربی",
    "یلدا"
  ],
  "prefix": [
    "آقای",
    "خانم",
    "دکتر"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/fr.js":[function(require,module,exports){
var fr = {};
module["exports"] = fr;
fr.title = "French";
fr.address = {
  "building_number": [
    "####",
    "###",
    "##",
    "#"
  ],
  "street_prefix": [
    "Allée, Voie",
    "Rue",
    "Avenue",
    "Boulevard",
    "Quai",
    "Passage",
    "Impasse",
    "Place"
  ],
  "secondary_address": [
    "Apt. ###",
    "# étage"
  ],
  "postcode": [
    "#####"
  ],
  "state": [
    "Alsace",
    "Aquitaine",
    "Auvergne",
    "Basse-Normandie",
    "Bourgogne",
    "Bretagne",
    "Centre",
    "Champagne-Ardenne",
    "Corse",
    "Franche-Comté",
    "Haute-Normandie",
    "Île-de-France",
    "Languedoc-Roussillon",
    "Limousin",
    "Lorraine",
    "Midi-Pyrénées",
    "Nord-Pas-de-Calais",
    "Pays de la Loire",
    "Picardie",
    "Poitou-Charentes",
    "Provence-Alpes-Côte d'Azur",
    "Rhône-Alpes"
  ],
  "city_name": [
    "Paris",
    "Marseille",
    "Lyon",
    "Toulouse",
    "Nice",
    "Nantes",
    "Strasbourg",
    "Montpellier",
    "Bordeaux",
    "Lille13",
    "Rennes",
    "Reims",
    "Le Havre",
    "Saint-Étienne",
    "Toulon",
    "Grenoble",
    "Dijon",
    "Angers",
    "Saint-Denis",
    "Villeurbanne",
    "Le Mans",
    "Aix-en-Provence",
    "Brest",
    "Nîmes",
    "Limoges",
    "Clermont-Ferrand",
    "Tours",
    "Amiens",
    "Metz",
    "Perpignan",
    "Besançon",
    "Orléans",
    "Boulogne-Billancourt",
    "Mulhouse",
    "Rouen",
    "Caen",
    "Nancy",
    "Saint-Denis",
    "Saint-Paul",
    "Montreuil",
    "Argenteuil",
    "Roubaix",
    "Dunkerque14",
    "Tourcoing",
    "Nanterre",
    "Avignon",
    "Créteil",
    "Poitiers",
    "Fort-de-France",
    "Courbevoie",
    "Versailles",
    "Vitry-sur-Seine",
    "Colombes",
    "Pau",
    "Aulnay-sous-Bois",
    "Asnières-sur-Seine",
    "Rueil-Malmaison",
    "Saint-Pierre",
    "Antibes",
    "Saint-Maur-des-Fossés",
    "Champigny-sur-Marne",
    "La Rochelle",
    "Aubervilliers",
    "Calais",
    "Cannes",
    "Le Tampon",
    "Béziers",
    "Colmar",
    "Bourges",
    "Drancy",
    "Mérignac",
    "Saint-Nazaire",
    "Valence",
    "Ajaccio",
    "Issy-les-Moulineaux",
    "Villeneuve-d'Ascq",
    "Levallois-Perret",
    "Noisy-le-Grand",
    "Quimper",
    "La Seyne-sur-Mer",
    "Antony",
    "Troyes",
    "Neuilly-sur-Seine",
    "Sarcelles",
    "Les Abymes",
    "Vénissieux",
    "Clichy",
    "Lorient",
    "Pessac",
    "Ivry-sur-Seine",
    "Cergy",
    "Cayenne",
    "Niort",
    "Chambéry",
    "Montauban",
    "Saint-Quentin",
    "Villejuif",
    "Hyères",
    "Beauvais",
    "Cholet"
  ],
  "city": [
    "#{city_name}"
  ],
  "street_suffix": [
    "de l'Abbaye",
    "Adolphe Mille",
    "d'Alésia",
    "d'Argenteuil",
    "d'Assas",
    "du Bac",
    "de Paris",
    "La Boétie",
    "Bonaparte",
    "de la Bûcherie",
    "de Caumartin",
    "Charlemagne",
    "du Chat-qui-Pêche",
    "de la Chaussée-d'Antin",
    "du Dahomey",
    "Dauphine",
    "Delesseux",
    "du Faubourg Saint-Honoré",
    "du Faubourg-Saint-Denis",
    "de la Ferronnerie",
    "des Francs-Bourgeois",
    "des Grands Augustins",
    "de la Harpe",
    "du Havre",
    "de la Huchette",
    "Joubert",
    "Laffitte",
    "Lepic",
    "des Lombards",
    "Marcadet",
    "Molière",
    "Monsieur-le-Prince",
    "de Montmorency",
    "Montorgueil",
    "Mouffetard",
    "de Nesle",
    "Oberkampf",
    "de l'Odéon",
    "d'Orsel",
    "de la Paix",
    "des Panoramas",
    "Pastourelle",
    "Pierre Charron",
    "de la Pompe",
    "de Presbourg",
    "de Provence",
    "de Richelieu",
    "de Rivoli",
    "des Rosiers",
    "Royale",
    "d'Abbeville",
    "Saint-Honoré",
    "Saint-Bernard",
    "Saint-Denis",
    "Saint-Dominique",
    "Saint-Jacques",
    "Saint-Séverin",
    "des Saussaies",
    "de Seine",
    "de Solférino",
    "Du Sommerard",
    "de Tilsitt",
    "Vaneau",
    "de Vaugirard",
    "de la Victoire",
    "Zadkine"
  ],
  "street_name": [
    "#{street_prefix} #{street_suffix}"
  ],
  "street_address": [
    "#{building_number} #{street_name}"
  ],
  "default_country": [
    "France"
  ]
};
fr.company = {
  "suffix": [
    "SARL",
    "SA",
    "EURL",
    "SAS",
    "SEM",
    "SCOP",
    "GIE",
    "EI"
  ],
  "adjective": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
    ],
    "descriptor":
    [
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun":
    [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
  ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_adjective":
    [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich"
    ],
    "bs_noun": [
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} et #{Name.last_name}"
  ]
};
fr.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.fr",
    "hotmail.fr"
  ],
  "domain_suffix": [
    "com",
    "fr",
    "eu",
    "info",
    "name",
    "net",
    "org"
  ]
};
fr.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
fr.name = {
  "first_name": [
    "Enzo",
    "Lucas",
    "Mathis",
    "Nathan",
    "Thomas",
    "Hugo",
    "Théo",
    "Tom",
    "Louis",
    "Raphaël",
    "Clément",
    "Léo",
    "Mathéo",
    "Maxime",
    "Alexandre",
    "Antoine",
    "Yanis",
    "Paul",
    "Baptiste",
    "Alexis",
    "Gabriel",
    "Arthur",
    "Jules",
    "Ethan",
    "Noah",
    "Quentin",
    "Axel",
    "Evan",
    "Mattéo",
    "Romain",
    "Valentin",
    "Maxence",
    "Noa",
    "Adam",
    "Nicolas",
    "Julien",
    "Mael",
    "Pierre",
    "Rayan",
    "Victor",
    "Mohamed",
    "Adrien",
    "Kylian",
    "Sacha",
    "Benjamin",
    "Léa",
    "Clara",
    "Manon",
    "Chloé",
    "Camille",
    "Ines",
    "Sarah",
    "Jade",
    "Lola",
    "Anaïs",
    "Lucie",
    "Océane",
    "Lilou",
    "Marie",
    "Eva",
    "Romane",
    "Lisa",
    "Zoe",
    "Julie",
    "Mathilde",
    "Louise",
    "Juliette",
    "Clémence",
    "Célia",
    "Laura",
    "Lena",
    "Maëlys",
    "Charlotte",
    "Ambre",
    "Maeva",
    "Pauline",
    "Lina",
    "Jeanne",
    "Lou",
    "Noémie",
    "Justine",
    "Louna",
    "Elisa",
    "Alice",
    "Emilie",
    "Carla",
    "Maëlle",
    "Alicia",
    "Mélissa"
  ],
  "last_name": [
    "Martin",
    "Bernard",
    "Dubois",
    "Thomas",
    "Robert",
    "Richard",
    "Petit",
    "Durand",
    "Leroy",
    "Moreau",
    "Simon",
    "Laurent",
    "Lefebvre",
    "Michel",
    "Garcia",
    "David",
    "Bertrand",
    "Roux",
    "Vincent",
    "Fournier",
    "Morel",
    "Girard",
    "Andre",
    "Lefevre",
    "Mercier",
    "Dupont",
    "Lambert",
    "Bonnet",
    "Francois",
    "Martinez",
    "Legrand",
    "Garnier",
    "Faure",
    "Rousseau",
    "Blanc",
    "Guerin",
    "Muller",
    "Henry",
    "Roussel",
    "Nicolas",
    "Perrin",
    "Morin",
    "Mathieu",
    "Clement",
    "Gauthier",
    "Dumont",
    "Lopez",
    "Fontaine",
    "Chevalier",
    "Robin",
    "Masson",
    "Sanchez",
    "Gerard",
    "Nguyen",
    "Boyer",
    "Denis",
    "Lemaire",
    "Duval",
    "Joly",
    "Gautier",
    "Roger",
    "Roche",
    "Roy",
    "Noel",
    "Meyer",
    "Lucas",
    "Meunier",
    "Jean",
    "Perez",
    "Marchand",
    "Dufour",
    "Blanchard",
    "Marie",
    "Barbier",
    "Brun",
    "Dumas",
    "Brunet",
    "Schmitt",
    "Leroux",
    "Colin",
    "Fernandez",
    "Pierre",
    "Renard",
    "Arnaud",
    "Rolland",
    "Caron",
    "Aubert",
    "Giraud",
    "Leclerc",
    "Vidal",
    "Bourgeois",
    "Renaud",
    "Lemoine",
    "Picard",
    "Gaillard",
    "Philippe",
    "Leclercq",
    "Lacroix",
    "Fabre",
    "Dupuis",
    "Olivier",
    "Rodriguez",
    "Da silva",
    "Hubert",
    "Louis",
    "Charles",
    "Guillot",
    "Riviere",
    "Le gall",
    "Guillaume",
    "Adam",
    "Rey",
    "Moulin",
    "Gonzalez",
    "Berger",
    "Lecomte",
    "Menard",
    "Fleury",
    "Deschamps",
    "Carpentier",
    "Julien",
    "Benoit",
    "Paris",
    "Maillard",
    "Marchal",
    "Aubry",
    "Vasseur",
    "Le roux",
    "Renault",
    "Jacquet",
    "Collet",
    "Prevost",
    "Poirier",
    "Charpentier",
    "Royer",
    "Huet",
    "Baron",
    "Dupuy",
    "Pons",
    "Paul",
    "Laine",
    "Carre",
    "Breton",
    "Remy",
    "Schneider",
    "Perrot",
    "Guyot",
    "Barre",
    "Marty",
    "Cousin"
  ],
  "prefix": [
    "M",
    "Mme",
    "Mlle",
    "Dr",
    "Prof"
  ],
  "title": {
    "job": [
      "Superviseur",
      "Executif",
      "Manager",
      "Ingenieur",
      "Specialiste",
      "Directeur",
      "Coordinateur",
      "Administrateur",
      "Architecte",
      "Analyste",
      "Designer",
      "Technicien",
      "Developpeur",
      "Producteur",
      "Consultant",
      "Assistant",
      "Agent",
      "Stagiaire"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{last_name} #{first_name}"
  ]
};
fr.phone_number = {
  "formats": [
    "01########",
    "02########",
    "03########",
    "04########",
    "05########",
    "06########",
    "07########",
    "+33 1########",
    "+33 2########",
    "+33 3########",
    "+33 4########",
    "+33 5########",
    "+33 6########",
    "+33 7########"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/it.js":[function(require,module,exports){
var it = {};
module["exports"] = it;
it.title = "Italian";
it.address = {
  "city_prefix": [
    "San",
    "Borgo",
    "Sesto",
    "Quarto",
    "Settimo"
  ],
  "city_suffix": [
    "a mare",
    "lido",
    "ligure",
    "del friuli",
    "salentino",
    "calabro",
    "veneto",
    "nell'emilia",
    "umbro",
    "laziale",
    "terme",
    "sardo"
  ],
  "country": [
    "Afghanistan",
    "Albania",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antartide (territori a sud del 60° parallelo)",
    "Antigua e Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Bielorussia",
    "Belgio",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia e Herzegovina",
    "Botswana",
    "Bouvet Island (Bouvetoya)",
    "Brasile",
    "Territorio dell'arcipelago indiano",
    "Isole Vergini Britanniche",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cambogia",
    "Cameroon",
    "Canada",
    "Capo Verde",
    "Isole Cayman",
    "Repubblica Centrale Africana",
    "Chad",
    "Cile",
    "Cina",
    "Isola di Pasqua",
    "Isola di Cocos (Keeling)",
    "Colombia",
    "Comoros",
    "Congo",
    "Isole Cook",
    "Costa Rica",
    "Costa d'Avorio",
    "Croazia",
    "Cuba",
    "Cipro",
    "Repubblica Ceca",
    "Danimarca",
    "Gibuti",
    "Repubblica Dominicana",
    "Equador",
    "Egitto",
    "El Salvador",
    "Guinea Equatoriale",
    "Eritrea",
    "Estonia",
    "Etiopia",
    "Isole Faroe",
    "Isole Falkland (Malvinas)",
    "Fiji",
    "Finlandia",
    "Francia",
    "Guyana Francese",
    "Polinesia Francese",
    "Territori Francesi del sud",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germania",
    "Ghana",
    "Gibilterra",
    "Grecia",
    "Groenlandia",
    "Grenada",
    "Guadalupa",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Città del Vaticano",
    "Honduras",
    "Hong Kong",
    "Ungheria",
    "Islanda",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Irlanda",
    "Isola di Man",
    "Israele",
    "Italia",
    "Giamaica",
    "Giappone",
    "Jersey",
    "Giordania",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Korea",
    "Kuwait",
    "Republicca Kirgiza",
    "Repubblica del Laos",
    "Latvia",
    "Libano",
    "Lesotho",
    "Liberia",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lituania",
    "Lussemburgo",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malesia",
    "Maldive",
    "Mali",
    "Malta",
    "Isole Marshall",
    "Martinica",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Messico",
    "Micronesia",
    "Moldova",
    "Principato di Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Marocco",
    "Mozambico",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Antille Olandesi",
    "Olanda",
    "Nuova Caledonia",
    "Nuova Zelanda",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Isole Norfolk",
    "Northern Mariana Islands",
    "Norvegia",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestina",
    "Panama",
    "Papua Nuova Guinea",
    "Paraguay",
    "Peru",
    "Filippine",
    "Pitcairn Islands",
    "Polonia",
    "Portogallo",
    "Porto Rico",
    "Qatar",
    "Reunion",
    "Romania",
    "Russia",
    "Rwanda",
    "San Bartolomeo",
    "Sant'Elena",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Arabia Saudita",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovenia",
    "Isole Solomon",
    "Somalia",
    "Sud Africa",
    "Georgia del sud e South Sandwich Islands",
    "Spagna",
    "Sri Lanka",
    "Sudan",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Svezia",
    "Svizzera",
    "Siria",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Tailandia",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad e Tobago",
    "Tunisia",
    "Turchia",
    "Turkmenistan",
    "Isole di Turks and Caicos",
    "Tuvalu",
    "Uganda",
    "Ucraina",
    "Emirati Arabi Uniti",
    "Regno Unito",
    "Stati Uniti d'America",
    "United States Minor Outlying Islands",
    "Isole Vergini Statunitensi",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ],
  "building_number": [
    "###",
    "##",
    "#"
  ],
  "street_suffix": [
    "Piazza",
    "Strada",
    "Via",
    "Borgo",
    "Contrada",
    "Rotonda",
    "Incrocio"
  ],
  "secondary_address": [
    "Appartamento ##",
    "Piano #"
  ],
  "postcode": [
    "#####"
  ],
  "state": [
    "Agrigento",
    "Alessandria",
    "Ancona",
    "Aosta",
    "Arezzo",
    "Ascoli Piceno",
    "Asti",
    "Avellino",
    "Bari",
    "Barletta-Andria-Trani",
    "Belluno",
    "Benevento",
    "Bergamo",
    "Biella",
    "Bologna",
    "Bolzano",
    "Brescia",
    "Brindisi",
    "Cagliari",
    "Caltanissetta",
    "Campobasso",
    "Carbonia-Iglesias",
    "Caserta",
    "Catania",
    "Catanzaro",
    "Chieti",
    "Como",
    "Cosenza",
    "Cremona",
    "Crotone",
    "Cuneo",
    "Enna",
    "Fermo",
    "Ferrara",
    "Firenze",
    "Foggia",
    "Forlì-Cesena",
    "Frosinone",
    "Genova",
    "Gorizia",
    "Grosseto",
    "Imperia",
    "Isernia",
    "La Spezia",
    "L'Aquila",
    "Latina",
    "Lecce",
    "Lecco",
    "Livorno",
    "Lodi",
    "Lucca",
    "Macerata",
    "Mantova",
    "Massa-Carrara",
    "Matera",
    "Messina",
    "Milano",
    "Modena",
    "Monza e della Brianza",
    "Napoli",
    "Novara",
    "Nuoro",
    "Olbia-Tempio",
    "Oristano",
    "Padova",
    "Palermo",
    "Parma",
    "Pavia",
    "Perugia",
    "Pesaro e Urbino",
    "Pescara",
    "Piacenza",
    "Pisa",
    "Pistoia",
    "Pordenone",
    "Potenza",
    "Prato",
    "Ragusa",
    "Ravenna",
    "Reggio Calabria",
    "Reggio Emilia",
    "Rieti",
    "Rimini",
    "Roma",
    "Rovigo",
    "Salerno",
    "Medio Campidano",
    "Sassari",
    "Savona",
    "Siena",
    "Siracusa",
    "Sondrio",
    "Taranto",
    "Teramo",
    "Terni",
    "Torino",
    "Ogliastra",
    "Trapani",
    "Trento",
    "Treviso",
    "Trieste",
    "Udine",
    "Varese",
    "Venezia",
    "Verbano-Cusio-Ossola",
    "Vercelli",
    "Verona",
    "Vibo Valentia",
    "Vicenza",
    "Viterbo"
  ],
  "state_abbr": [
    "AG",
    "AL",
    "AN",
    "AO",
    "AR",
    "AP",
    "AT",
    "AV",
    "BA",
    "BT",
    "BL",
    "BN",
    "BG",
    "BI",
    "BO",
    "BZ",
    "BS",
    "BR",
    "CA",
    "CL",
    "CB",
    "CI",
    "CE",
    "CT",
    "CZ",
    "CH",
    "CO",
    "CS",
    "CR",
    "KR",
    "CN",
    "EN",
    "FM",
    "FE",
    "FI",
    "FG",
    "FC",
    "FR",
    "GE",
    "GO",
    "GR",
    "IM",
    "IS",
    "SP",
    "AQ",
    "LT",
    "LE",
    "LC",
    "LI",
    "LO",
    "LU",
    "MC",
    "MN",
    "MS",
    "MT",
    "ME",
    "MI",
    "MO",
    "MB",
    "NA",
    "NO",
    "NU",
    "OT",
    "OR",
    "PD",
    "PA",
    "PR",
    "PV",
    "PG",
    "PU",
    "PE",
    "PC",
    "PI",
    "PT",
    "PN",
    "PZ",
    "PO",
    "RG",
    "RA",
    "RC",
    "RE",
    "RI",
    "RN",
    "RM",
    "RO",
    "SA",
    "VS",
    "SS",
    "SV",
    "SI",
    "SR",
    "SO",
    "TA",
    "TE",
    "TR",
    "TO",
    "OG",
    "TP",
    "TN",
    "TV",
    "TS",
    "UD",
    "VA",
    "VE",
    "VB",
    "VC",
    "VR",
    "VV",
    "VI",
    "VT"
  ],
  "city": [
    "#{city_prefix} #{Name.first_name} #{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name} #{city_suffix}",
    "#{Name.last_name} #{city_suffix}"
  ],
  "street_name": [
    "#{street_suffix} #{Name.first_name}",
    "#{street_suffix} #{Name.last_name}"
  ],
  "street_address": [
    "#{street_name} #{building_number}",
    "#{street_name} #{building_number}, #{secondary_address}"
  ],
  "default_country": [
    "Italia"
  ]
};
it.company = {
  "suffix": [
    "SPA",
    "e figli",
    "Group",
    "s.r.l."
  ],
  "noun": [
      "Abilità",
      "Access",
      "Adattatore",
      "Algoritmo",
      "Alleanza",
      "Analizzatore",
      "Applicazione",
      "Approccio",
      "Architettura",
      "Archivio",
      "Intelligenza artificiale",
      "Array",
      "Attitudine",
      "Benchmark",
      "Capacità",
      "Sfida",
      "Circuito",
      "Collaborazione",
      "Complessità",
      "Concetto",
      "Conglomerato",
      "Contingenza",
      "Core",
      "Database",
      "Data-warehouse",
      "Definizione",
      "Emulazione",
      "Codifica",
      "Criptazione",
      "Firmware",
      "Flessibilità",
      "Previsione",
      "Frame",
      "framework",
      "Funzione",
      "Funzionalità",
      "Interfaccia grafica",
      "Hardware",
      "Help-desk",
      "Gerarchia",
      "Hub",
      "Implementazione",
      "Infrastruttura",
      "Iniziativa",
      "Installazione",
      "Set di istruzioni",
      "Interfaccia",
      "Soluzione internet",
      "Intranet",
      "Conoscenza base",
      "Matrici",
      "Matrice",
      "Metodologia",
      "Middleware",
      "Migrazione",
      "Modello",
      "Moderazione",
      "Monitoraggio",
      "Moratoria",
      "Rete",
      "Architettura aperta",
      "Sistema aperto",
      "Orchestrazione",
      "Paradigma",
      "Parallelismo",
      "Policy",
      "Portale",
      "Struttura di prezzo",
      "Prodotto",
      "Produttività",
      "Progetto",
      "Proiezione",
      "Protocollo",
      "Servizio clienti",
      "Software",
      "Soluzione",
      "Standardizzazione",
      "Strategia",
      "Struttura",
      "Successo",
      "Sovrastruttura",
      "Supporto",
      "Sinergia",
      "Task-force",
      "Finestra temporale",
      "Strumenti",
      "Utilizzazione",
      "Sito web",
      "Forza lavoro"
    ],
    "descriptor":[
      "adattiva",
      "avanzata",
      "migliorata",
      "assimilata",
      "automatizzata",
      "bilanciata",
      "centralizzata",
      "compatibile",
      "configurabile",
      "cross-platform",
      "decentralizzata",
      "digitalizzata",
      "distribuita",
      "piccola",
      "ergonomica",
      "esclusiva",
      "espansa",
      "estesa",
      "configurabile",
      "fondamentale",
      "orizzontale",
      "implementata",
      "innovativa",
      "integrata",
      "intuitiva",
      "inversa",
      "gestita",
      "obbligatoria",
      "monitorata",
      "multi-canale",
      "multi-laterale",
      "open-source",
      "operativa",
      "ottimizzata",
      "organica",
      "persistente",
      "polarizzata",
      "proattiva",
      "programmabile",
      "progressiva",
      "reattiva",
      "riallineata",
      "ricontestualizzata",
      "ridotta",
      "robusta",
      "sicura",
      "condivisibile",
      "stand-alone",
      "switchabile",
      "sincronizzata",
      "sinergica",
      "totale",
      "universale",
      "user-friendly",
      "versatile",
      "virtuale",
      "visionaria"
    ],
    "adjective":
    [
      "24 ore",
      "24/7",
      "terza generazione",
      "quarta generazione",
      "quinta generazione",
      "sesta generazione",
      "asimmetrica",
      "asincrona",
      "background",
      "bi-direzionale",
      "biforcata",
      "bottom-line",
      "coerente",
      "coesiva",
      "composita",
      "sensibile al contesto",
      "basta sul contesto",
      "basata sul contenuto",
      "dedicata",
      "didattica",
      "direzionale",
      "discreta",
      "dinamica",
      "eco-centrica",
      "esecutiva",
      "esplicita",
      "full-range",
      "globale",
      "euristica",
      "alto livello",
      "olistica",
      "omogenea",
      "ibrida",
      "impattante",
      "incrementale",
      "intangibile",
      "interattiva",
      "intermediaria",
      "locale",
      "logistica",
      "massimizzata",
      "metodica",
      "mission-critical",
      "mobile",
      "modulare",
      "motivazionale",
      "multimedia",
      "multi-tasking",
      "nazionale",
      "neutrale",
      "nextgeneration",
      "non-volatile",
      "object-oriented",
      "ottima",
      "ottimizzante",
      "radicale",
      "real-time",
      "reciproca",
      "regionale",
      "responsiva",
      "scalabile",
      "secondaria",
      "stabile",
      "statica",
      "sistematica",
      "sistemica",
      "tangibile",
      "terziaria",
      "uniforme",
      "valore aggiunto"
  ],
  "bs_noun": [
      "partnerships",
      "comunità",
      "ROI",
      "soluzioni",
      "e-services",
      "nicchie",
      "tecnologie",
      "contenuti",
      "supply-chains",
      "convergenze",
      "relazioni",
      "architetture",
      "interfacce",
      "mercati",
      "e-commerce",
      "sistemi",
      "modelli",
      "schemi",
      "reti",
      "applicazioni",
      "metriche",
      "e-business",
      "funzionalità",
      "esperienze",
      "webservices",
      "metodologie"
    ],
    "bs_verb":
    [
      "implementate",
      "utilizzo",
      "integrate",
      "ottimali",
      "evolutive",
      "abilitate",
      "reinventate",
      "aggregate",
      "migliorate",
      "incentivate",
      "monetizzate",
      "sinergizzate",
      "strategiche",
      "deploy",
      "marchi",
      "accrescitive",
      "target",
      "sintetizzate",
      "spedizioni",
      "massimizzate",
      "innovazione",
      "guida",
      "estensioni",
      "generate",
      "exploit",
      "transizionali",
      "matrici",
      "ricontestualizzate"
    ],
    "bs_adjective":
    [
      "valore aggiunto",
      "verticalizzate",
      "proattive",
      "forti",
      "rivoluzionari",
      "scalabili",
      "innovativi",
      "intuitivi",
      "strategici",
      "e-business",
      "mission-critical",
      "24/7",
      "globali",
      "B2B",
      "B2C",
      "granulari",
      "virtuali",
      "virali",
      "dinamiche",
      "magnetiche",
      "web",
      "interattive",
      "sexy",
      "back-end",
      "real-time",
      "efficienti",
      "front-end",
      "distributivi",
      "estensibili",
      "mondiali",
      "open-source",
      "cross-platform",
      "sinergiche",
      "out-of-the-box",
      "enterprise",
      "integrate",
      "di impatto",
      "wireless",
      "trasparenti",
      "next-generation",
      "cutting-edge",
      "visionari",
      "plug-and-play",
      "collaborative",
      "olistiche",
      "ricche"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name} #{suffix}",
    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name} #{suffix}"
  ]
};
it.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "email.it",
    "libero.it",
    "yahoo.it"
  ],
  "domain_suffix": [
    "com",
    "com",
    "com",
    "net",
    "org",
    "it",
    "it",
    "it"
  ]
};
it.name = {
  "first_name": [
    "Aaron",
    "Akira",
    "Alberto",
    "Alessandro",
    "Alighieri",
    "Amedeo",
    "Amos",
    "Anselmo",
    "Antonino",
    "Arcibaldo",
    "Armando",
    "Artes",
    "Audenico",
    "Ausonio",
    "Bacchisio",
    "Battista",
    "Bernardo",
    "Boris",
    "Caio",
    "Carlo",
    "Cecco",
    "Cirino",
    "Cleros",
    "Costantino",
    "Damiano",
    "Danny",
    "Davide",
    "Demian",
    "Dimitri",
    "Domingo",
    "Dylan",
    "Edilio",
    "Egidio",
    "Elio",
    "Emanuel",
    "Enrico",
    "Ercole",
    "Ermes",
    "Ethan",
    "Eusebio",
    "Evangelista",
    "Fabiano",
    "Ferdinando",
    "Fiorentino",
    "Flavio",
    "Fulvio",
    "Gabriele",
    "Gastone",
    "Germano",
    "Giacinto",
    "Gianantonio",
    "Gianleonardo",
    "Gianmarco",
    "Gianriccardo",
    "Gioacchino",
    "Giordano",
    "Giuliano",
    "Graziano",
    "Guido",
    "Harry",
    "Iacopo",
    "Ilario",
    "Ione",
    "Italo",
    "Jack",
    "Jari",
    "Joey",
    "Joseph",
    "Kai",
    "Kociss",
    "Laerte",
    "Lauro",
    "Leonardo",
    "Liborio",
    "Lorenzo",
    "Ludovico",
    "Maggiore",
    "Manuele",
    "Mariano",
    "Marvin",
    "Matteo",
    "Mauro",
    "Michael",
    "Mirco",
    "Modesto",
    "Muzio",
    "Nabil",
    "Nathan",
    "Nick",
    "Noah",
    "Odino",
    "Olo",
    "Oreste",
    "Osea",
    "Pablo",
    "Patrizio",
    "Piererminio",
    "Pierfrancesco",
    "Piersilvio",
    "Priamo",
    "Quarto",
    "Quirino",
    "Radames",
    "Raniero",
    "Renato",
    "Rocco",
    "Romeo",
    "Rosalino",
    "Rudy",
    "Sabatino",
    "Samuel",
    "Santo",
    "Sebastian",
    "Serse",
    "Silvano",
    "Sirio",
    "Tancredi",
    "Terzo",
    "Timoteo",
    "Tolomeo",
    "Trevis",
    "Ubaldo",
    "Ulrico",
    "Valdo",
    "Neri",
    "Vinicio",
    "Walter",
    "Xavier",
    "Yago",
    "Zaccaria",
    "Abramo",
    "Adriano",
    "Alan",
    "Albino",
    "Alessio",
    "Alighiero",
    "Amerigo",
    "Anastasio",
    "Antimo",
    "Antonio",
    "Arduino",
    "Aroldo",
    "Arturo",
    "Augusto",
    "Avide",
    "Baldassarre",
    "Bettino",
    "Bortolo",
    "Caligola",
    "Carmelo",
    "Celeste",
    "Ciro",
    "Costanzo",
    "Dante",
    "Danthon",
    "Davis",
    "Demis",
    "Dindo",
    "Domiziano",
    "Edipo",
    "Egisto",
    "Eliziario",
    "Emidio",
    "Enzo",
    "Eriberto",
    "Erminio",
    "Ettore",
    "Eustachio",
    "Fabio",
    "Fernando",
    "Fiorenzo",
    "Folco",
    "Furio",
    "Gaetano",
    "Gavino",
    "Gerlando",
    "Giacobbe",
    "Giancarlo",
    "Gianmaria",
    "Giobbe",
    "Giorgio",
    "Giulio",
    "Gregorio",
    "Hector",
    "Ian",
    "Ippolito",
    "Ivano",
    "Jacopo",
    "Jarno",
    "Joannes",
    "Joshua",
    "Karim",
    "Kris",
    "Lamberto",
    "Lazzaro",
    "Leone",
    "Lino",
    "Loris",
    "Luigi",
    "Manfredi",
    "Marco",
    "Marino",
    "Marzio",
    "Mattia",
    "Max",
    "Michele",
    "Mirko",
    "Moreno",
    "Nadir",
    "Nazzareno",
    "Nestore",
    "Nico",
    "Noel",
    "Odone",
    "Omar",
    "Orfeo",
    "Osvaldo",
    "Pacifico",
    "Pericle",
    "Pietro",
    "Primo",
    "Quasimodo",
    "Radio",
    "Raoul",
    "Renzo",
    "Rodolfo",
    "Romolo",
    "Rosolino",
    "Rufo",
    "Sabino",
    "Sandro",
    "Sasha",
    "Secondo",
    "Sesto",
    "Silverio",
    "Siro",
    "Tazio",
    "Teseo",
    "Timothy",
    "Tommaso",
    "Tristano",
    "Umberto",
    "Ariel",
    "Artemide",
    "Assia",
    "Azue",
    "Benedetta",
    "Bibiana",
    "Brigitta",
    "Carmela",
    "Cassiopea",
    "Cesidia",
    "Cira",
    "Clea",
    "Cleopatra",
    "Clodovea",
    "Concetta",
    "Cosetta",
    "Cristyn",
    "Damiana",
    "Danuta",
    "Deborah",
    "Demi",
    "Diamante",
    "Diana",
    "Donatella",
    "Doriana",
    "Edvige",
    "Elda",
    "Elga",
    "Elsa",
    "Emilia",
    "Enrica",
    "Erminia",
    "Eufemia",
    "Evita",
    "Fatima",
    "Felicia",
    "Filomena",
    "Flaviana",
    "Fortunata",
    "Gelsomina",
    "Genziana",
    "Giacinta",
    "Gilda",
    "Giovanna",
    "Giulietta",
    "Grazia",
    "Guendalina",
    "Helga",
    "Ileana",
    "Ingrid",
    "Irene",
    "Isabel",
    "Isira",
    "Ivonne",
    "Jelena",
    "Jole",
    "Claudia",
    "Kayla",
    "Kristel",
    "Laura",
    "Lucia",
    "Lia",
    "Lidia",
    "Lisa",
    "Loredana",
    "Loretta",
    "Luce",
    "Lucrezia",
    "Luna",
    "Maika",
    "Marcella",
    "Maria",
    "Mariagiulia",
    "Marianita",
    "Mariapia",
    "Marieva",
    "Marina",
    "Maristella",
    "Maruska",
    "Matilde",
    "Mecren",
    "Mercedes",
    "Mietta",
    "Miriana",
    "Miriam",
    "Monia",
    "Morgana",
    "Naomi",
    "Nayade",
    "Nicoletta",
    "Ninfa",
    "Noemi",
    "Nunzia",
    "Olimpia",
    "Oretta",
    "Ortensia",
    "Penelope",
    "Piccarda",
    "Prisca",
    "Rebecca",
    "Rita",
    "Rosalba",
    "Rosaria",
    "Rosita",
    "Ruth",
    "Samira",
    "Sarita",
    "Selvaggia",
    "Shaira",
    "Sibilla",
    "Soriana",
    "Thea",
    "Tosca",
    "Ursula",
    "Vania",
    "Vera",
    "Vienna",
    "Violante",
    "Vitalba",
    "Zelida"
  ],
  "last_name": [
    "Amato",
    "Barbieri",
    "Barone",
    "Basile",
    "Battaglia",
    "Bellini",
    "Benedetti",
    "Bernardi",
    "Bianc",
    "Bianchi",
    "Bruno",
    "Caputo",
    "Carbon",
    "Caruso",
    "Cattaneo",
    "Colombo",
    "Cont",
    "Conte",
    "Coppola",
    "Costa",
    "Costantin",
    "D'amico",
    "D'angelo",
    "Damico",
    "De Angelis",
    "De luca",
    "De rosa",
    "De Santis",
    "Donati",
    "Esposito",
    "Fabbri",
    "Farin",
    "Ferrara",
    "Ferrari",
    "Ferraro",
    "Ferretti",
    "Ferri",
    "Fior",
    "Fontana",
    "Galli",
    "Gallo",
    "Gatti",
    "Gentile",
    "Giordano",
    "Giuliani",
    "Grassi",
    "Grasso",
    "Greco",
    "Guerra",
    "Leone",
    "Lombardi",
    "Lombardo",
    "Longo",
    "Mancini",
    "Marchetti",
    "Marian",
    "Marini",
    "Marino",
    "Martinelli",
    "Martini",
    "Martino",
    "Mazza",
    "Messina",
    "Milani",
    "Montanari",
    "Monti",
    "Morelli",
    "Moretti",
    "Negri",
    "Neri",
    "Orlando",
    "Pagano",
    "Palmieri",
    "Palumbo",
    "Parisi",
    "Pellegrini",
    "Pellegrino",
    "Piras",
    "Ricci",
    "Rinaldi",
    "Riva",
    "Rizzi",
    "Rizzo",
    "Romano",
    "Ross",
    "Rossetti",
    "Ruggiero",
    "Russo",
    "Sala",
    "Sanna",
    "Santoro",
    "Sartori",
    "Serr",
    "Silvestri",
    "Sorrentino",
    "Testa",
    "Valentini",
    "Villa",
    "Vitale",
    "Vitali"
  ],
  "prefix": [
    "Sig.",
    "Dott.",
    "Dr.",
    "Ing."
  ],
  "suffix": [],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
it.phone_number = {
  "formats": [
    "+## ### ## ## ####",
    "+## ## #######",
    "+## ## ########",
    "+## ### #######",
    "+## ### ########",
    "+## #### #######",
    "+## #### ########",
    "0## ### ####",
    "+39 0## ### ###",
    "3## ### ###",
    "+39 3## ### ###"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/ja.js":[function(require,module,exports){
var ja = {};
module["exports"] = ja;
ja.title = "Japanese";
ja.address = {
  "postcode": [
    "###-####"
  ],
  "state": [
    "北海道",
    "青森県",
    "岩手県",
    "宮城県",
    "秋田県",
    "山形県",
    "福島県",
    "茨城県",
    "栃木県",
    "群馬県",
    "埼玉県",
    "千葉県",
    "東京都",
    "神奈川県",
    "新潟県",
    "富山県",
    "石川県",
    "福井県",
    "山梨県",
    "長野県",
    "岐阜県",
    "静岡県",
    "愛知県",
    "三重県",
    "滋賀県",
    "京都府",
    "大阪府",
    "兵庫県",
    "奈良県",
    "和歌山県",
    "鳥取県",
    "島根県",
    "岡山県",
    "広島県",
    "山口県",
    "徳島県",
    "香川県",
    "愛媛県",
    "高知県",
    "福岡県",
    "佐賀県",
    "長崎県",
    "熊本県",
    "大分県",
    "宮崎県",
    "鹿児島県",
    "沖縄県"
  ],
  "state_abbr": [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47"
  ],
  "city_prefix": [
    "北",
    "東",
    "西",
    "南",
    "新",
    "湖",
    "港"
  ],
  "city_suffix": [
    "市",
    "区",
    "町",
    "村"
  ],
  "city": [
    "#{city_prefix}#{Name.first_name}#{city_suffix}",
    "#{Name.first_name}#{city_suffix}",
    "#{city_prefix}#{Name.last_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ],
  "street_name": [
    "#{Name.first_name}#{street_suffix}",
    "#{Name.last_name}#{street_suffix}"
  ]
};
ja.phone_number = {
  "formats": [
    "0####-#-####",
    "0###-##-####",
    "0##-###-####",
    "0#-####-####"
  ]
};
ja.cell_phone = {
  "formats": [
    "090-####-####",
    "080-####-####",
    "070-####-####"
  ]
};
ja.name = {
  "last_name": [
    "佐藤",
    "鈴木",
    "高橋",
    "田中",
    "渡辺",
    "伊藤",
    "山本",
    "中村",
    "小林",
    "加藤",
    "吉田",
    "山田",
    "佐々木",
    "山口",
    "斎藤",
    "松本",
    "井上",
    "木村",
    "林",
    "清水"
  ],
  "first_name": [
    "大翔",
    "蓮",
    "颯太",
    "樹",
    "大和",
    "陽翔",
    "陸斗",
    "太一",
    "海翔",
    "蒼空",
    "翼",
    "陽菜",
    "結愛",
    "結衣",
    "杏",
    "莉子",
    "美羽",
    "結菜",
    "心愛",
    "愛菜",
    "美咲"
  ],
  "name": [
    "#{last_name} #{first_name}"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/ko.js":[function(require,module,exports){
var ko = {};
module["exports"] = ko;
ko.title = "Korean";
ko.address = {
  "postcode": [
    "###-###"
  ],
  "state": [
    "강원",
    "경기",
    "경남",
    "경북",
    "광주",
    "대구",
    "대전",
    "부산",
    "서울",
    "울산",
    "인천",
    "전남",
    "전북",
    "제주",
    "충남",
    "충북",
    "세종"
  ],
  "state_abbr": [
    "강원",
    "경기",
    "경남",
    "경북",
    "광주",
    "대구",
    "대전",
    "부산",
    "서울",
    "울산",
    "인천",
    "전남",
    "전북",
    "제주",
    "충남",
    "충북",
    "세종"
  ],
  "city_suffix": [
    "구",
    "시",
    "군"
  ],
  "city_name": [
    "강릉",
    "양양",
    "인제",
    "광주",
    "구리",
    "부천",
    "밀양",
    "통영",
    "창원",
    "거창",
    "고성",
    "양산",
    "김천",
    "구미",
    "영주",
    "광산",
    "남",
    "북",
    "고창",
    "군산",
    "남원",
    "동작",
    "마포",
    "송파",
    "용산",
    "부평",
    "강화",
    "수성"
  ],
  "city": [
    "#{city_name}#{city_suffix}"
  ],
  "street_root": [
    "상계",
    "화곡",
    "신정",
    "목",
    "잠실",
    "면목",
    "주안",
    "안양",
    "중",
    "정왕",
    "구로",
    "신월",
    "연산",
    "부평",
    "창",
    "만수",
    "중계",
    "검단",
    "시흥",
    "상도",
    "방배",
    "장유",
    "상",
    "광명",
    "신길",
    "행신",
    "대명",
    "동탄"
  ],
  "street_suffix": [
    "읍",
    "면",
    "동"
  ],
  "street_name": [
    "#{street_root}#{street_suffix}"
  ]
};
ko.phone_number = {
  "formats": [
    "0#-#####-####",
    "0##-###-####",
    "0##-####-####"
  ]
};
ko.company = {
  "suffix": [
    "연구소",
    "게임즈",
    "그룹",
    "전자",
    "물산",
    "코리아"
  ],
  "prefix": [
    "주식회사",
    "한국"
  ],
  "name": [
    "#{prefix} #{Name.first_name}",
    "#{Name.first_name} #{suffix}"
  ]
};
ko.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.co.kr",
    "hanmail.net",
    "naver.com"
  ],
  "domain_suffix": [
    "co.kr",
    "com",
    "biz",
    "info",
    "ne.kr",
    "net",
    "or.kr",
    "org"
  ]
};
ko.lorem = {
  "words": [
    "국가는",
    "법률이",
    "정하는",
    "바에",
    "의하여",
    "재외국민을",
    "보호할",
    "의무를",
    "진다.",
    "모든",
    "국민은",
    "신체의",
    "자유를",
    "가진다.",
    "국가는",
    "전통문화의",
    "계승·발전과",
    "민족문화의",
    "창달에",
    "노력하여야",
    "한다.",
    "통신·방송의",
    "시설기준과",
    "신문의",
    "기능을",
    "보장하기",
    "위하여",
    "필요한",
    "사항은",
    "법률로",
    "정한다.",
    "헌법에",
    "의하여",
    "체결·공포된",
    "조약과",
    "일반적으로",
    "승인된",
    "국제법규는",
    "국내법과",
    "같은",
    "효력을",
    "가진다.",
    "다만,",
    "현행범인인",
    "경우와",
    "장기",
    "3년",
    "이상의",
    "형에",
    "해당하는",
    "죄를",
    "범하고",
    "도피",
    "또는",
    "증거인멸의",
    "염려가",
    "있을",
    "때에는",
    "사후에",
    "영장을",
    "청구할",
    "수",
    "있다.",
    "저작자·발명가·과학기술자와",
    "예술가의",
    "권리는",
    "법률로써",
    "보호한다.",
    "형사피고인은",
    "유죄의",
    "판결이",
    "확정될",
    "때까지는",
    "무죄로",
    "추정된다.",
    "모든",
    "국민은",
    "행위시의",
    "법률에",
    "의하여",
    "범죄를",
    "구성하지",
    "아니하는",
    "행위로",
    "소추되지",
    "아니하며,",
    "동일한",
    "범죄에",
    "대하여",
    "거듭",
    "처벌받지",
    "아니한다.",
    "국가는",
    "평생교육을",
    "진흥하여야",
    "한다.",
    "모든",
    "국민은",
    "사생활의",
    "비밀과",
    "자유를",
    "침해받지",
    "아니한다.",
    "의무교육은",
    "무상으로",
    "한다.",
    "저작자·발명가·과학기술자와",
    "예술가의",
    "권리는",
    "법률로써",
    "보호한다.",
    "국가는",
    "모성의",
    "보호를",
    "위하여",
    "노력하여야",
    "한다.",
    "헌법에",
    "의하여",
    "체결·공포된",
    "조약과",
    "일반적으로",
    "승인된",
    "국제법규는",
    "국내법과",
    "같은",
    "효력을",
    "가진다."
  ]
};
ko.name = {
  "last_name": [
    "김",
    "이",
    "박",
    "최",
    "정",
    "강",
    "조",
    "윤",
    "장",
    "임",
    "오",
    "한",
    "신",
    "서",
    "권",
    "황",
    "안",
    "송",
    "류",
    "홍"
  ],
  "first_name": [
    "서연",
    "민서",
    "서현",
    "지우",
    "서윤",
    "지민",
    "수빈",
    "하은",
    "예은",
    "윤서",
    "민준",
    "지후",
    "지훈",
    "준서",
    "현우",
    "예준",
    "건우",
    "현준",
    "민재",
    "우진",
    "은주"
  ],
  "name": [
    "#{last_name} #{first_name}"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/nb_NO.js":[function(require,module,exports){
var nb_NO = {};
module["exports"] = nb_NO;
nb_NO.title = "Norwegian";
nb_NO.address = {
  "city_root": [
    "Fet",
    "Gjes",
    "Høy",
    "Inn",
    "Fager",
    "Lille",
    "Lo",
    "Mal",
    "Nord",
    "Nær",
    "Sand",
    "Sme",
    "Stav",
    "Stor",
    "Tand",
    "Ut",
    "Vest"
  ],
  "city_suffix": [
    "berg",
    "borg",
    "by",
    "bø",
    "dal",
    "eid",
    "fjell",
    "fjord",
    "foss",
    "grunn",
    "hamn",
    "havn",
    "helle",
    "mark",
    "nes",
    "odden",
    "sand",
    "sjøen",
    "stad",
    "strand",
    "strøm",
    "sund",
    "vik",
    "vær",
    "våg",
    "ø",
    "øy",
    "ås"
  ],
  "street_prefix": [
    "Øvre",
    "Nedre",
    "Søndre",
    "Gamle",
    "Østre",
    "Vestre"
  ],
  "street_root": [
    "Eike",
    "Bjørke",
    "Gran",
    "Vass",
    "Furu",
    "Litj",
    "Lille",
    "Høy",
    "Fosse",
    "Elve",
    "Ku",
    "Konvall",
    "Soldugg",
    "Hestemyr",
    "Granitt",
    "Hegge",
    "Rogne",
    "Fiol",
    "Sol",
    "Ting",
    "Malm",
    "Klokker",
    "Preste",
    "Dam",
    "Geiterygg",
    "Bekke",
    "Berg",
    "Kirke",
    "Kors",
    "Bru",
    "Blåveis",
    "Torg",
    "Sjø"
  ],
  "street_suffix": [
    "alléen",
    "bakken",
    "berget",
    "bråten",
    "eggen",
    "engen",
    "ekra",
    "faret",
    "flata",
    "gata",
    "gjerdet",
    "grenda",
    "gropa",
    "hagen",
    "haugen",
    "havna",
    "holtet",
    "høgda",
    "jordet",
    "kollen",
    "kroken",
    "lia",
    "lunden",
    "lyngen",
    "løkka",
    "marka",
    "moen",
    "myra",
    "plassen",
    "ringen",
    "roa",
    "røa",
    "skogen",
    "skrenten",
    "spranget",
    "stien",
    "stranda",
    "stubben",
    "stykket",
    "svingen",
    "tjernet",
    "toppen",
    "tunet",
    "vollen",
    "vika",
    "åsen"
  ],
  "common_street_suffix": [
    "sgate",
    "svei",
    "s Gate",
    "s Vei",
    "gata",
    "veien"
  ],
  "building_number": [
    "#",
    "##"
  ],
  "secondary_address": [
    "Leil. ###",
    "Oppgang A",
    "Oppgang B"
  ],
  "postcode": [
    "####",
    "####",
    "####",
    "0###"
  ],
  "state": [
    ""
  ],
  "city": [
    "#{city_root}#{city_suffix}"
  ],
  "street_name": [
    "#{street_root}#{street_suffix}",
    "#{street_prefix} #{street_root}#{street_suffix}",
    "#{Name.first_name}#{common_street_suffix}",
    "#{Name.last_name}#{common_street_suffix}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Norge"
  ]
};
nb_NO.company = {
  "suffix": [
    "Gruppen",
    "AS",
    "ASA",
    "BA",
    "RFH",
    "og Sønner"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} og #{Name.last_name}"
  ]
};
nb_NO.internet = {
  "domain_suffix": [
    "no",
    "com",
    "net",
    "org"
  ]
};
nb_NO.name = {
  "first_name": [
    "Emma",
    "Sara",
    "Thea",
    "Ida",
    "Julie",
    "Nora",
    "Emilie",
    "Ingrid",
    "Hanna",
    "Maria",
    "Sofie",
    "Anna",
    "Malin",
    "Amalie",
    "Vilde",
    "Frida",
    "Andrea",
    "Tuva",
    "Victoria",
    "Mia",
    "Karoline",
    "Mathilde",
    "Martine",
    "Linnea",
    "Marte",
    "Hedda",
    "Marie",
    "Helene",
    "Silje",
    "Leah",
    "Maja",
    "Elise",
    "Oda",
    "Kristine",
    "Aurora",
    "Kaja",
    "Camilla",
    "Mari",
    "Maren",
    "Mina",
    "Selma",
    "Jenny",
    "Celine",
    "Eline",
    "Sunniva",
    "Natalie",
    "Tiril",
    "Synne",
    "Sandra",
    "Madeleine",
    "Markus",
    "Mathias",
    "Kristian",
    "Jonas",
    "Andreas",
    "Alexander",
    "Martin",
    "Sander",
    "Daniel",
    "Magnus",
    "Henrik",
    "Tobias",
    "Kristoffer",
    "Emil",
    "Adrian",
    "Sebastian",
    "Marius",
    "Elias",
    "Fredrik",
    "Thomas",
    "Sondre",
    "Benjamin",
    "Jakob",
    "Oliver",
    "Lucas",
    "Oskar",
    "Nikolai",
    "Filip",
    "Mats",
    "William",
    "Erik",
    "Simen",
    "Ole",
    "Eirik",
    "Isak",
    "Kasper",
    "Noah",
    "Lars",
    "Joakim",
    "Johannes",
    "Håkon",
    "Sindre",
    "Jørgen",
    "Herman",
    "Anders",
    "Jonathan",
    "Even",
    "Theodor",
    "Mikkel",
    "Aksel"
  ],
  "feminine_name": [
    "Emma",
    "Sara",
    "Thea",
    "Ida",
    "Julie",
    "Nora",
    "Emilie",
    "Ingrid",
    "Hanna",
    "Maria",
    "Sofie",
    "Anna",
    "Malin",
    "Amalie",
    "Vilde",
    "Frida",
    "Andrea",
    "Tuva",
    "Victoria",
    "Mia",
    "Karoline",
    "Mathilde",
    "Martine",
    "Linnea",
    "Marte",
    "Hedda",
    "Marie",
    "Helene",
    "Silje",
    "Leah",
    "Maja",
    "Elise",
    "Oda",
    "Kristine",
    "Aurora",
    "Kaja",
    "Camilla",
    "Mari",
    "Maren",
    "Mina",
    "Selma",
    "Jenny",
    "Celine",
    "Eline",
    "Sunniva",
    "Natalie",
    "Tiril",
    "Synne",
    "Sandra",
    "Madeleine"
  ],
  "masculine_name": [
    "Markus",
    "Mathias",
    "Kristian",
    "Jonas",
    "Andreas",
    "Alexander",
    "Martin",
    "Sander",
    "Daniel",
    "Magnus",
    "Henrik",
    "Tobias",
    "Kristoffer",
    "Emil",
    "Adrian",
    "Sebastian",
    "Marius",
    "Elias",
    "Fredrik",
    "Thomas",
    "Sondre",
    "Benjamin",
    "Jakob",
    "Oliver",
    "Lucas",
    "Oskar",
    "Nikolai",
    "Filip",
    "Mats",
    "William",
    "Erik",
    "Simen",
    "Ole",
    "Eirik",
    "Isak",
    "Kasper",
    "Noah",
    "Lars",
    "Joakim",
    "Johannes",
    "Håkon",
    "Sindre",
    "Jørgen",
    "Herman",
    "Anders",
    "Jonathan",
    "Even",
    "Theodor",
    "Mikkel",
    "Aksel"
  ],
  "last_name": [
    "Johansen",
    "Hansen",
    "Andersen",
    "Kristiansen",
    "Larsen",
    "Olsen",
    "Solberg",
    "Andresen",
    "Pedersen",
    "Nilsen",
    "Berg",
    "Halvorsen",
    "Karlsen",
    "Svendsen",
    "Jensen",
    "Haugen",
    "Martinsen",
    "Eriksen",
    "Sørensen",
    "Johnsen",
    "Myhrer",
    "Johannessen",
    "Nielsen",
    "Hagen",
    "Pettersen",
    "Bakke",
    "Skuterud",
    "Løken",
    "Gundersen",
    "Strand",
    "Jørgensen",
    "Kvarme",
    "Røed",
    "Sæther",
    "Stensrud",
    "Moe",
    "Kristoffersen",
    "Jakobsen",
    "Holm",
    "Aas",
    "Lie",
    "Moen",
    "Andreassen",
    "Vedvik",
    "Nguyen",
    "Jacobsen",
    "Torgersen",
    "Ruud",
    "Krogh",
    "Christiansen",
    "Bjerke",
    "Aalerud",
    "Borge",
    "Sørlie",
    "Berge",
    "Østli",
    "Ødegård",
    "Torp",
    "Henriksen",
    "Haukelidsæter",
    "Fjeld",
    "Danielsen",
    "Aasen",
    "Fredriksen",
    "Dahl",
    "Berntsen",
    "Arnesen",
    "Wold",
    "Thoresen",
    "Solheim",
    "Skoglund",
    "Bakken",
    "Amundsen",
    "Solli",
    "Smogeli",
    "Kristensen",
    "Glosli",
    "Fossum",
    "Evensen",
    "Eide",
    "Carlsen",
    "Østby",
    "Vegge",
    "Tangen",
    "Smedsrud",
    "Olstad",
    "Lunde",
    "Kleven",
    "Huseby",
    "Bjørnstad",
    "Ryan",
    "Rasmussen",
    "Nygård",
    "Nordskaug",
    "Nordby",
    "Mathisen",
    "Hopland",
    "Gran",
    "Finstad",
    "Edvardsen"
  ],
  "prefix": [
    "Dr.",
    "Prof."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{feminine_name} #{feminine_name} #{last_name}",
    "#{masculine_name} #{masculine_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
nb_NO.phone_number = {
  "formats": [
    "########",
    "## ## ## ##",
    "### ## ###",
    "+47 ## ## ## ##"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/nep.js":[function(require,module,exports){
var nep = {};
module["exports"] = nep;
nep.title = "Nepalese";
nep.name = {
  "first_name": [
    "Aarav",
    "Ajita",
    "Amit",
    "Amita",
    "Amrit",
    "Arijit",
    "Ashmi",
    "Asmita",
    "Bibek",
    "Bijay",
    "Bikash",
    "Bina",
    "Bishal",
    "Bishnu",
    "Buddha",
    "Deepika",
    "Dipendra",
    "Gagan",
    "Ganesh",
    "Khem",
    "Krishna",
    "Laxmi",
    "Manisha",
    "Nabin",
    "Nikita",
    "Niraj",
    "Nischal",
    "Padam",
    "Pooja",
    "Prabin",
    "Prakash",
    "Prashant",
    "Prem",
    "Purna",
    "Rajendra",
    "Rajina",
    "Raju",
    "Rakesh",
    "Ranjan",
    "Ratna",
    "Sagar",
    "Sandeep",
    "Sanjay",
    "Santosh",
    "Sarita",
    "Shilpa",
    "Shirisha",
    "Shristi",
    "Siddhartha",
    "Subash",
    "Sumeet",
    "Sunita",
    "Suraj",
    "Susan",
    "Sushant"
  ],
  "last_name": [
    "Adhikari",
    "Aryal",
    "Baral",
    "Basnet",
    "Bastola",
    "Basynat",
    "Bhandari",
    "Bhattarai",
    "Chettri",
    "Devkota",
    "Dhakal",
    "Dongol",
    "Ghale",
    "Gurung",
    "Gyawali",
    "Hamal",
    "Jung",
    "KC",
    "Kafle",
    "Karki",
    "Khadka",
    "Koirala",
    "Lama",
    "Limbu",
    "Magar",
    "Maharjan",
    "Niroula",
    "Pandey",
    "Pradhan",
    "Rana",
    "Raut",
    "Sai",
    "Shai",
    "Shakya",
    "Sherpa",
    "Shrestha",
    "Subedi",
    "Tamang",
    "Thapa"
  ]
};
nep.address = {
  "postcode": [
    0
  ],
  "state": [
    "Baglung",
    "Banke",
    "Bara",
    "Bardiya",
    "Bhaktapur",
    "Bhojupu",
    "Chitwan",
    "Dailekh",
    "Dang",
    "Dhading",
    "Dhankuta",
    "Dhanusa",
    "Dolakha",
    "Dolpha",
    "Gorkha",
    "Gulmi",
    "Humla",
    "Ilam",
    "Jajarkot",
    "Jhapa",
    "Jumla",
    "Kabhrepalanchok",
    "Kalikot",
    "Kapilvastu",
    "Kaski",
    "Kathmandu",
    "Lalitpur",
    "Lamjung",
    "Manang",
    "Mohottari",
    "Morang",
    "Mugu",
    "Mustang",
    "Myagdi",
    "Nawalparasi",
    "Nuwakot",
    "Palpa",
    "Parbat",
    "Parsa",
    "Ramechhap",
    "Rauswa",
    "Rautahat",
    "Rolpa",
    "Rupandehi",
    "Sankhuwasabha",
    "Sarlahi",
    "Sindhuli",
    "Sindhupalchok",
    "Sunsari",
    "Surket",
    "Syangja",
    "Tanahu",
    "Terhathum"
  ],
  "city": [
    "Bhaktapur",
    "Biratnagar",
    "Birendranagar",
    "Birgunj",
    "Butwal",
    "Damak",
    "Dharan",
    "Gaur",
    "Gorkha",
    "Hetauda",
    "Itahari",
    "Janakpur",
    "Kathmandu",
    "Lahan",
    "Nepalgunj",
    "Pokhara"
  ],
  "default_country": [
    "Nepal"
  ]
};
nep.internet = {
  "free_email": [
    "worldlink.com.np",
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "np",
    "com",
    "info",
    "net",
    "org"
  ]
};
nep.company = {
  "suffix": [
    "Pvt Ltd",
    "Group",
    "Ltd",
    "Limited"
  ]
};
nep.phone_number = {
  "formats": [
    "##-#######",
    "+977-#-#######",
    "+977########"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/nl.js":[function(require,module,exports){
var nl = {};
module["exports"] = nl;
nl.title = "Dutch";
nl.address = {
  "city_prefix": [
    "Noord",
    "Oost",
    "West",
    "Zuid",
    "Nieuw",
    "Oud"
  ],
  "city_suffix": [
    "dam",
    "berg",
    " aan de Rijn",
    " aan de IJssel",
    "swaerd",
    "endrecht",
    "recht",
    "ambacht",
    "enmaes",
    "wijk",
    "sland",
    "stroom",
    "sluus",
    "dijk",
    "dorp",
    "burg",
    "veld",
    "sluis",
    "koop",
    "lek",
    "hout",
    "geest",
    "kerk",
    "woude",
    "hoven",
    "hoten",
    "ingen",
    "plas",
    "meer"
  ],
  "city": [
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.last_name}#{city_suffix}"
  ],
  "country": [
    "Afghanistan",
    "Akrotiri",
    "Albanië",
    "Algerije",
    "Amerikaanse Maagdeneilanden",
    "Amerikaans-Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarctica",
    "Antigua en Barbuda",
    "Arctic Ocean",
    "Argentinië",
    "Armenië",
    "Aruba",
    "Ashmore and Cartier Islands",
    "Atlantic Ocean",
    "Australië",
    "Azerbeidzjan",
    "Bahama's",
    "Bahrein",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "België",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivië",
    "Bosnië-Herzegovina",
    "Botswana",
    "Bouvet Island",
    "Brazilië",
    "British Indian Ocean Territory",
    "Britse Maagdeneilanden",
    "Brunei",
    "Bulgarije",
    "Burkina Faso",
    "Burundi",
    "Cambodja",
    "Canada",
    "Caymaneilanden",
    "Centraal-Afrikaanse Republiek",
    "Chili",
    "China",
    "Christmas Island",
    "Clipperton Island",
    "Cocos (Keeling) Islands",
    "Colombia",
    "Comoren (Unie)",
    "Congo (Democratische Republiek)",
    "Congo (Volksrepubliek)",
    "Cook",
    "Coral Sea Islands",
    "Costa Rica",
    "Cuba",
    "Cyprus",
    "Denemarken",
    "Dhekelia",
    "Djibouti",
    "Dominica",
    "Dominicaanse Republiek",
    "Duitsland",
    "Ecuador",
    "Egypte",
    "El Salvador",
    "Equatoriaal-Guinea",
    "Eritrea",
    "Estland",
    "Ethiopië",
    "European Union",
    "Falkland",
    "Faroe Islands",
    "Fiji",
    "Filipijnen",
    "Finland",
    "Frankrijk",
    "Frans-Polynesië",
    "French Southern and Antarctic Lands",
    "Gabon",
    "Gambia",
    "Gaza Strip",
    "Georgië",
    "Ghana",
    "Gibraltar",
    "Grenada",
    "Griekenland",
    "Groenland",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinee-Bissau",
    "Guyana",
    "Haïti",
    "Heard Island and McDonald Islands",
    "Heilige Stoel",
    "Honduras",
    "Hongarije",
    "Hongkong",
    "Ierland",
    "IJsland",
    "India",
    "Indian Ocean",
    "Indonesië",
    "Irak",
    "Iran",
    "Isle of Man",
    "Israël",
    "Italië",
    "Ivoorkust",
    "Jamaica",
    "Jan Mayen",
    "Japan",
    "Jemen",
    "Jersey",
    "Jordanië",
    "Kaapverdië",
    "Kameroen",
    "Kazachstan",
    "Kenia",
    "Kirgizstan",
    "Kiribati",
    "Koeweit",
    "Kroatië",
    "Laos",
    "Lesotho",
    "Letland",
    "Libanon",
    "Liberia",
    "Libië",
    "Liechtenstein",
    "Litouwen",
    "Luxemburg",
    "Macao",
    "Macedonië",
    "Madagaskar",
    "Malawi",
    "Maldiven",
    "Maleisië",
    "Mali",
    "Malta",
    "Marokko",
    "Marshall Islands",
    "Mauritanië",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia, Federated States of",
    "Moldavië",
    "Monaco",
    "Mongolië",
    "Montenegro",
    "Montserrat",
    "Mozambique",
    "Myanmar",
    "Namibië",
    "Nauru",
    "Navassa Island",
    "Nederland",
    "Nederlandse Antillen",
    "Nepal",
    "Ngwane",
    "Nicaragua",
    "Nieuw-Caledonië",
    "Nieuw-Zeeland",
    "Niger",
    "Nigeria",
    "Niue",
    "Noordelijke Marianen",
    "Noord-Korea",
    "Noorwegen",
    "Norfolk Island",
    "Oekraïne",
    "Oezbekistan",
    "Oman",
    "Oostenrijk",
    "Pacific Ocean",
    "Pakistan",
    "Palau",
    "Panama",
    "Papoea-Nieuw-Guinea",
    "Paracel Islands",
    "Paraguay",
    "Peru",
    "Pitcairn",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Roemenië",
    "Rusland",
    "Rwanda",
    "Saint Helena",
    "Saint Lucia",
    "Saint Vincent en de Grenadines",
    "Saint-Pierre en Miquelon",
    "Salomon",
    "Samoa",
    "San Marino",
    "São Tomé en Principe",
    "Saudi-Arabië",
    "Senegal",
    "Servië",
    "Seychellen",
    "Sierra Leone",
    "Singapore",
    "Sint-Kitts en Nevis",
    "Slovenië",
    "Slowakije",
    "Soedan",
    "Somalië",
    "South Georgia and the South Sandwich Islands",
    "Southern Ocean",
    "Spanje",
    "Spratly Islands",
    "Sri Lanka",
    "Suriname",
    "Svalbard",
    "Syrië",
    "Tadzjikistan",
    "Taiwan",
    "Tanzania",
    "Thailand",
    "Timor Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad en Tobago",
    "Tsjaad",
    "Tsjechië",
    "Tunesië",
    "Turkije",
    "Turkmenistan",
    "Turks-en Caicoseilanden",
    "Tuvalu",
    "Uganda",
    "Uruguay",
    "Vanuatu",
    "Venezuela",
    "Verenigd Koninkrijk",
    "Verenigde Arabische Emiraten",
    "Verenigde Staten van Amerika",
    "Vietnam",
    "Wake Island",
    "Wallis en Futuna",
    "Wereld",
    "West Bank",
    "Westelijke Sahara",
    "Zambia",
    "Zimbabwe",
    "Zuid-Afrika",
    "Zuid-Korea",
    "Zweden",
    "Zwitserland"
  ],
  "building_number": [
    "#",
    "##",
    "###",
    "###a",
    "###b",
    "###c",
    "### I",
    "### II",
    "### III"
  ],
  "street_suffix": [
    "straat",
    "laan",
    "weg",
    "plantsoen",
    "park"
  ],
  "secondary_address": [
    "1 hoog",
    "2 hoog",
    "3 hoog"
  ],
  "street_name": [
    "#{Name.first_name}#{street_suffix}",
    "#{Name.last_name}#{street_suffix}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "postcode": [
    "#### ??"
  ],
  "state": [
    "Noord-Holland",
    "Zuid-Holland",
    "Utrecht",
    "Zeeland",
    "Overijssel",
    "Gelderland",
    "Drenthe",
    "Friesland",
    "Groningen",
    "Noord-Brabant",
    "Limburg",
    "Flevoland"
  ],
  "default_country": [
    "Nederland"
  ]
};
nl.company = {
  "suffix": [
    "BV",
    "V.O.F.",
    "Group",
    "en Zonen"
  ]
};
nl.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "nl",
    "com",
    "net",
    "org"
  ]
};
nl.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
nl.name = {
  "first_name": [
    "Amber",
    "Anna",
    "Anne",
    "Anouk",
    "Bas",
    "Bram",
    "Britt",
    "Daan",
    "Emma",
    "Eva",
    "Femke",
    "Finn",
    "Fleur",
    "Iris",
    "Isa",
    "Jan",
    "Jasper",
    "Jayden",
    "Jesse",
    "Johannes",
    "Julia",
    "Julian",
    "Kevin",
    "Lars",
    "Lieke",
    "Lisa",
    "Lotte",
    "Lucas",
    "Luuk",
    "Maud",
    "Max",
    "Mike",
    "Milan",
    "Nick",
    "Niels",
    "Noa",
    "Rick",
    "Roos",
    "Ruben",
    "Sander",
    "Sanne",
    "Sem",
    "Sophie",
    "Stijn",
    "Sven",
    "Thijs",
    "Thijs",
    "Thomas",
    "Tim",
    "Tom"
  ],
  "tussenvoegsel": [
    "van",
    "van de",
    "van den",
    "van 't",
    "van het",
    "de",
    "den"
  ],
  "last_name": [
    "Bakker",
    "Beek",
    "Berg",
    "Boer",
    "Bos",
    "Bosch",
    "Brink",
    "Broek",
    "Brouwer",
    "Bruin",
    "Dam",
    "Dekker",
    "Dijk",
    "Dijkstra",
    "Graaf",
    "Groot",
    "Haan",
    "Hendriks",
    "Heuvel",
    "Hoek",
    "Jacobs",
    "Jansen",
    "Janssen",
    "Jong",
    "Klein",
    "Kok",
    "Koning",
    "Koster",
    "Leeuwen",
    "Linden",
    "Maas",
    "Meer",
    "Meijer",
    "Mulder",
    "Peters",
    "Ruiter",
    "Schouten",
    "Smit",
    "Smits",
    "Stichting",
    "Veen",
    "Ven",
    "Vermeulen",
    "Visser",
    "Vliet",
    "Vos",
    "Vries",
    "Wal",
    "Willems",
    "Wit"
  ],
  "prefix": [
    "Dhr.",
    "Mevr. Dr.",
    "Bsc",
    "Msc",
    "Prof."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{tussenvoegsel} #{last_name}",
    "#{first_name} #{tussenvoegsel} #{last_name}"
  ]
};
nl.phone_number = {
  "formats": [
    "(####) ######",
    "##########",
    "06########",
    "06 #### ####"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/pl.js":[function(require,module,exports){
var pl = {};
module["exports"] = pl;
pl.title = "Polish";
pl.name = {
  "first_name": [
    "Aaron",
    "Abraham",
    "Adam",
    "Adrian",
    "Atanazy",
    "Agaton",
    "Alan",
    "Albert",
    "Aleksander",
    "Aleksy",
    "Alfred",
    "Alwar",
    "Ambroży",
    "Anatol",
    "Andrzej",
    "Antoni",
    "Apollinary",
    "Apollo",
    "Arkady",
    "Arkadiusz",
    "Archibald",
    "Arystarch",
    "Arnold",
    "Arseniusz",
    "Artur",
    "August",
    "Baldwin",
    "Bazyli",
    "Benedykt",
    "Beniamin",
    "Bernard",
    "Bertrand",
    "Bertram",
    "Borys",
    "Brajan",
    "Bruno",
    "Cezary",
    "Cecyliusz",
    "Karol",
    "Krystian",
    "Krzysztof",
    "Klarencjusz",
    "Klaudiusz",
    "Klemens",
    "Konrad",
    "Konstanty",
    "Konstantyn",
    "Kornel",
    "Korneliusz",
    "Korneli",
    "Cyryl",
    "Cyrus",
    "Damian",
    "Daniel",
    "Dariusz",
    "Dawid",
    "Dionizy",
    "Demetriusz",
    "Dominik",
    "Donald",
    "Dorian",
    "Edgar",
    "Edmund",
    "Edward",
    "Edwin",
    "Efrem",
    "Efraim",
    "Eliasz",
    "Eleazar",
    "Emil",
    "Emanuel",
    "Erast",
    "Ernest",
    "Eugeniusz",
    "Eustracjusz",
    "Fabian",
    "Feliks",
    "Florian",
    "Franciszek",
    "Fryderyk",
    "Gabriel",
    "Gedeon",
    "Galfryd",
    "Jerzy",
    "Gerald",
    "Gerazym",
    "Gilbert",
    "Gonsalwy",
    "Grzegorz",
    "Gwido",
    "Harald",
    "Henryk",
    "Herbert",
    "Herman",
    "Hilary",
    "Horacy",
    "Hubert",
    "Hugo",
    "Ignacy",
    "Igor",
    "Hilarion",
    "Innocenty",
    "Hipolit",
    "Ireneusz",
    "Erwin",
    "Izaak",
    "Izajasz",
    "Izydor",
    "Jakub",
    "Jeremi",
    "Jeremiasz",
    "Hieronim",
    "Gerald",
    "Joachim",
    "Jan",
    "Janusz",
    "Jonatan",
    "Józef",
    "Jozue",
    "Julian",
    "Juliusz",
    "Justyn",
    "Kalistrat",
    "Kazimierz",
    "Wawrzyniec",
    "Laurenty",
    "Laurencjusz",
    "Łazarz",
    "Leon",
    "Leonard",
    "Leonid",
    "Leon",
    "Ludwik",
    "Łukasz",
    "Lucjan",
    "Magnus",
    "Makary",
    "Marceli",
    "Marek",
    "Marcin",
    "Mateusz",
    "Maurycy",
    "Maksym",
    "Maksymilian",
    "Michał",
    "Miron",
    "Modest",
    "Mojżesz",
    "Natan",
    "Natanael",
    "Nazariusz",
    "Nazary",
    "Nestor",
    "Mikołaj",
    "Nikodem",
    "Olaf",
    "Oleg",
    "Oliwier",
    "Onufry",
    "Orestes",
    "Oskar",
    "Ansgary",
    "Osmund",
    "Pankracy",
    "Pantaleon",
    "Patryk",
    "Patrycjusz",
    "Patrycy",
    "Paweł",
    "Piotr",
    "Filemon",
    "Filip",
    "Platon",
    "Polikarp",
    "Porfiry",
    "Porfiriusz",
    "Prokles",
    "Prokul",
    "Prokop",
    "Kwintyn",
    "Randolf",
    "Rafał",
    "Rajmund",
    "Reginald",
    "Rajnold",
    "Ryszard",
    "Robert",
    "Roderyk",
    "Roger",
    "Roland",
    "Roman",
    "Romeo",
    "Reginald",
    "Rudolf",
    "Samson",
    "Samuel",
    "Salwator",
    "Sebastian",
    "Serafin",
    "Sergiusz",
    "Seweryn",
    "Zygmunt",
    "Sylwester",
    "Szymon",
    "Salomon",
    "Spirydion",
    "Stanisław",
    "Szczepan",
    "Stefan",
    "Terencjusz",
    "Teodor",
    "Tomasz",
    "Tymoteusz",
    "Tobiasz",
    "Walenty",
    "Walentyn",
    "Walerian",
    "Walery",
    "Wiktor",
    "Wincenty",
    "Witalis",
    "Włodzimierz",
    "Władysław",
    "Błażej",
    "Walter",
    "Walgierz",
    "Wacław",
    "Wilfryd",
    "Wilhelm",
    "Ksawery",
    "Ksenofont",
    "Jerzy",
    "Zachariasz",
    "Zachary",
    "Ada",
    "Adelajda",
    "Agata",
    "Agnieszka",
    "Agrypina",
    "Aida",
    "Aleksandra",
    "Alicja",
    "Alina",
    "Amanda",
    "Anastazja",
    "Angela",
    "Andżelika",
    "Angelina",
    "Anna",
    "Hanna",
    "—",
    "Antonina",
    "Ariadna",
    "Aurora",
    "Barbara",
    "Beatrycze",
    "Berta",
    "Brygida",
    "Kamila",
    "Karolina",
    "Karolina",
    "Kornelia",
    "Katarzyna",
    "Cecylia",
    "Karolina",
    "Chloe",
    "Krystyna",
    "Klara",
    "Klaudia",
    "Klementyna",
    "Konstancja",
    "Koralia",
    "Daria",
    "Diana",
    "Dina",
    "Dorota",
    "Edyta",
    "Eleonora",
    "Eliza",
    "Elżbieta",
    "Izabela",
    "Elwira",
    "Emilia",
    "Estera",
    "Eudoksja",
    "Eudokia",
    "Eugenia",
    "Ewa",
    "Ewelina",
    "Ferdynanda",
    "Florencja",
    "Franciszka",
    "Gabriela",
    "Gertruda",
    "Gloria",
    "Gracja",
    "Jadwiga",
    "Helena",
    "Henryka",
    "Nadzieja",
    "Ida",
    "Ilona",
    "Helena",
    "Irena",
    "Irma",
    "Izabela",
    "Izolda",
    "Jakubina",
    "Joanna",
    "Janina",
    "Żaneta",
    "Joanna",
    "Ginewra",
    "Józefina",
    "Judyta",
    "Julia",
    "Julia",
    "Julita",
    "Justyna",
    "Kira",
    "Cyra",
    "Kleopatra",
    "Larysa",
    "Laura",
    "Laurencja",
    "Laurentyna",
    "Lea",
    "Leila",
    "Eleonora",
    "Liliana",
    "Lilianna",
    "Lilia",
    "Lilla",
    "Liza",
    "Eliza",
    "Laura",
    "Ludwika",
    "Luiza",
    "Łucja",
    "Lucja",
    "Lidia",
    "Amabela",
    "Magdalena",
    "Malwina",
    "Małgorzata",
    "Greta",
    "Marianna",
    "Maryna",
    "Marta",
    "Martyna",
    "Maria",
    "Matylda",
    "Maja",
    "Maja",
    "Melania",
    "Michalina",
    "Monika",
    "Nadzieja",
    "Noemi",
    "Natalia",
    "Nikola",
    "Nina",
    "Olga",
    "Olimpia",
    "Oliwia",
    "Ofelia",
    "Patrycja",
    "Paula",
    "Pelagia",
    "Penelopa",
    "Filipa",
    "Paulina",
    "Rachela",
    "Rebeka",
    "Regina",
    "Renata",
    "Rozalia",
    "Róża",
    "Roksana",
    "Rufina",
    "Ruta",
    "Sabina",
    "Sara",
    "Serafina",
    "Sybilla",
    "Sylwia",
    "Zofia",
    "Stella",
    "Stefania",
    "Zuzanna",
    "Tamara",
    "Tacjana",
    "Tekla",
    "Teodora",
    "Teresa",
    "Walentyna",
    "Waleria",
    "Wanesa",
    "Wiara",
    "Weronika",
    "Wiktoria",
    "Wirginia",
    "Bibiana",
    "Bibianna",
    "Wanda",
    "Wilhelmina",
    "Ksawera",
    "Ksenia",
    "Zoe"
  ],
  "last_name": [
    "Adamczak",
    "Adamczyk",
    "Adamek",
    "Adamiak",
    "Adamiec",
    "Adamowicz",
    "Adamski",
    "Adamus",
    "Aleksandrowicz",
    "Andrzejczak",
    "Andrzejewski",
    "Antczak",
    "Augustyn",
    "Augustyniak",
    "Bagiński",
    "Balcerzak",
    "Banach",
    "Banasiak",
    "Banasik",
    "Banaś",
    "Baran",
    "Baranowski",
    "Barański",
    "Bartczak",
    "Bartkowiak",
    "Bartnik",
    "Bartosik",
    "Bednarczyk",
    "Bednarek",
    "Bednarski",
    "Bednarz",
    "Białas",
    "Białek",
    "Białkowski",
    "Bielak",
    "Bielawski",
    "Bielecki",
    "Bielski",
    "Bieniek",
    "Biernacki",
    "Biernat",
    "Bieńkowski",
    "Bilski",
    "Bober",
    "Bochenek",
    "Bogucki",
    "Bogusz",
    "Borek",
    "Borkowski",
    "Borowiec",
    "Borowski",
    "Bożek",
    "Broda",
    "Brzeziński",
    "Brzozowski",
    "Buczek",
    "Buczkowski",
    "Buczyński",
    "Budziński",
    "Budzyński",
    "Bujak",
    "Bukowski",
    "Burzyński",
    "Bąk",
    "Bąkowski",
    "Błaszczak",
    "Błaszczyk",
    "Cebula",
    "Chmiel",
    "Chmielewski",
    "Chmura",
    "Chojnacki",
    "Chojnowski",
    "Cholewa",
    "Chrzanowski",
    "Chudzik",
    "Cichocki",
    "Cichoń",
    "Cichy",
    "Ciesielski",
    "Cieśla",
    "Cieślak",
    "Cieślik",
    "Ciszewski",
    "Cybulski",
    "Cygan",
    "Czaja",
    "Czajka",
    "Czajkowski",
    "Czapla",
    "Czarnecki",
    "Czech",
    "Czechowski",
    "Czekaj",
    "Czerniak",
    "Czerwiński",
    "Czyż",
    "Czyżewski",
    "Dec",
    "Dobosz",
    "Dobrowolski",
    "Dobrzyński",
    "Domagała",
    "Domański",
    "Dominiak",
    "Drabik",
    "Drozd",
    "Drozdowski",
    "Drzewiecki",
    "Dróżdż",
    "Dubiel",
    "Duda",
    "Dudek",
    "Dudziak",
    "Dudzik",
    "Dudziński",
    "Duszyński",
    "Dziedzic",
    "Dziuba",
    "Dąbek",
    "Dąbkowski",
    "Dąbrowski",
    "Dębowski",
    "Dębski",
    "Długosz",
    "Falkowski",
    "Fijałkowski",
    "Filipek",
    "Filipiak",
    "Filipowicz",
    "Flak",
    "Flis",
    "Florczak",
    "Florek",
    "Frankowski",
    "Frąckowiak",
    "Frączek",
    "Frątczak",
    "Furman",
    "Gadomski",
    "Gajda",
    "Gajewski",
    "Gaweł",
    "Gawlik",
    "Gawron",
    "Gawroński",
    "Gałka",
    "Gałązka",
    "Gil",
    "Godlewski",
    "Golec",
    "Gołąb",
    "Gołębiewski",
    "Gołębiowski",
    "Grabowski",
    "Graczyk",
    "Grochowski",
    "Grudzień",
    "Gruszczyński",
    "Gruszka",
    "Grzegorczyk",
    "Grzelak",
    "Grzesiak",
    "Grzesik",
    "Grześkowiak",
    "Grzyb",
    "Grzybowski",
    "Grzywacz",
    "Gutowski",
    "Guzik",
    "Gwóźdź",
    "Góra",
    "Góral",
    "Górecki",
    "Górka",
    "Górniak",
    "Górny",
    "Górski",
    "Gąsior",
    "Gąsiorowski",
    "Głogowski",
    "Głowacki",
    "Głąb",
    "Hajduk",
    "Herman",
    "Iwański",
    "Izdebski",
    "Jabłoński",
    "Jackowski",
    "Jagielski",
    "Jagiełło",
    "Jagodziński",
    "Jakubiak",
    "Jakubowski",
    "Janas",
    "Janiak",
    "Janicki",
    "Janik",
    "Janiszewski",
    "Jankowiak",
    "Jankowski",
    "Janowski",
    "Janus",
    "Janusz",
    "Januszewski",
    "Jaros",
    "Jarosz",
    "Jarząbek",
    "Jasiński",
    "Jastrzębski",
    "Jaworski",
    "Jaśkiewicz",
    "Jezierski",
    "Jurek",
    "Jurkiewicz",
    "Jurkowski",
    "Juszczak",
    "Jóźwiak",
    "Jóźwik",
    "Jędrzejczak",
    "Jędrzejczyk",
    "Jędrzejewski",
    "Kacprzak",
    "Kaczmarczyk",
    "Kaczmarek",
    "Kaczmarski",
    "Kaczor",
    "Kaczorowski",
    "Kaczyński",
    "Kaleta",
    "Kalinowski",
    "Kalisz",
    "Kamiński",
    "Kania",
    "Kaniewski",
    "Kapusta",
    "Karaś",
    "Karczewski",
    "Karpiński",
    "Karwowski",
    "Kasperek",
    "Kasprzak",
    "Kasprzyk",
    "Kaszuba",
    "Kawa",
    "Kawecki",
    "Kałuża",
    "Kaźmierczak",
    "Kiełbasa",
    "Kisiel",
    "Kita",
    "Klimczak",
    "Klimek",
    "Kmiecik",
    "Kmieć",
    "Knapik",
    "Kobus",
    "Kogut",
    "Kolasa",
    "Komorowski",
    "Konieczna",
    "Konieczny",
    "Konopka",
    "Kopczyński",
    "Koper",
    "Kopeć",
    "Korzeniowski",
    "Kos",
    "Kosiński",
    "Kosowski",
    "Kostecki",
    "Kostrzewa",
    "Kot",
    "Kotowski",
    "Kowal",
    "Kowalczuk",
    "Kowalczyk",
    "Kowalewski",
    "Kowalik",
    "Kowalski",
    "Koza",
    "Kozak",
    "Kozieł",
    "Kozioł",
    "Kozłowski",
    "Kołakowski",
    "Kołodziej",
    "Kołodziejczyk",
    "Kołodziejski",
    "Krajewski",
    "Krakowiak",
    "Krawczyk",
    "Krawiec",
    "Kruk",
    "Krukowski",
    "Krupa",
    "Krupiński",
    "Kruszewski",
    "Krysiak",
    "Krzemiński",
    "Krzyżanowski",
    "Król",
    "Królikowski",
    "Książek",
    "Kubacki",
    "Kubiak",
    "Kubica",
    "Kubicki",
    "Kubik",
    "Kuc",
    "Kucharczyk",
    "Kucharski",
    "Kuchta",
    "Kuciński",
    "Kuczyński",
    "Kujawa",
    "Kujawski",
    "Kula",
    "Kulesza",
    "Kulig",
    "Kulik",
    "Kuliński",
    "Kurek",
    "Kurowski",
    "Kuś",
    "Kwaśniewski",
    "Kwiatkowski",
    "Kwiecień",
    "Kwieciński",
    "Kędzierski",
    "Kędziora",
    "Kępa",
    "Kłos",
    "Kłosowski",
    "Lach",
    "Laskowski",
    "Lasota",
    "Lech",
    "Lenart",
    "Lesiak",
    "Leszczyński",
    "Lewandowski",
    "Lewicki",
    "Leśniak",
    "Leśniewski",
    "Lipiński",
    "Lipka",
    "Lipski",
    "Lis",
    "Lisiecki",
    "Lisowski",
    "Maciejewski",
    "Maciąg",
    "Mackiewicz",
    "Madej",
    "Maj",
    "Majcher",
    "Majchrzak",
    "Majewski",
    "Majka",
    "Makowski",
    "Malec",
    "Malicki",
    "Malinowski",
    "Maliszewski",
    "Marchewka",
    "Marciniak",
    "Marcinkowski",
    "Marczak",
    "Marek",
    "Markiewicz",
    "Markowski",
    "Marszałek",
    "Marzec",
    "Masłowski",
    "Matusiak",
    "Matuszak",
    "Matuszewski",
    "Matysiak",
    "Mazur",
    "Mazurek",
    "Mazurkiewicz",
    "Maćkowiak",
    "Małecki",
    "Małek",
    "Maślanka",
    "Michalak",
    "Michalczyk",
    "Michalik",
    "Michalski",
    "Michałek",
    "Michałowski",
    "Mielczarek",
    "Mierzejewski",
    "Mika",
    "Mikołajczak",
    "Mikołajczyk",
    "Mikulski",
    "Milczarek",
    "Milewski",
    "Miller",
    "Misiak",
    "Misztal",
    "Miśkiewicz",
    "Modzelewski",
    "Molenda",
    "Morawski",
    "Motyka",
    "Mroczek",
    "Mroczkowski",
    "Mrozek",
    "Mróz",
    "Mucha",
    "Murawski",
    "Musiał",
    "Muszyński",
    "Młynarczyk",
    "Napierała",
    "Nawrocki",
    "Nawrot",
    "Niedziela",
    "Niedzielski",
    "Niedźwiecki",
    "Niemczyk",
    "Niemiec",
    "Niewiadomski",
    "Noga",
    "Nowacki",
    "Nowaczyk",
    "Nowak",
    "Nowakowski",
    "Nowicki",
    "Nowiński",
    "Olczak",
    "Olejniczak",
    "Olejnik",
    "Olszewski",
    "Orzechowski",
    "Orłowski",
    "Osiński",
    "Ossowski",
    "Ostrowski",
    "Owczarek",
    "Paczkowski",
    "Pająk",
    "Pakuła",
    "Paluch",
    "Panek",
    "Partyka",
    "Pasternak",
    "Paszkowski",
    "Pawelec",
    "Pawlak",
    "Pawlicki",
    "Pawlik",
    "Pawlikowski",
    "Pawłowski",
    "Pałka",
    "Piasecki",
    "Piechota",
    "Piekarski",
    "Pietras",
    "Pietruszka",
    "Pietrzak",
    "Pietrzyk",
    "Pilarski",
    "Pilch",
    "Piotrowicz",
    "Piotrowski",
    "Piwowarczyk",
    "Piórkowski",
    "Piątek",
    "Piątkowski",
    "Piłat",
    "Pluta",
    "Podgórski",
    "Polak",
    "Popławski",
    "Porębski",
    "Prokop",
    "Prus",
    "Przybylski",
    "Przybysz",
    "Przybył",
    "Przybyła",
    "Ptak",
    "Puchalski",
    "Pytel",
    "Płonka",
    "Raczyński",
    "Radecki",
    "Radomski",
    "Rak",
    "Rakowski",
    "Ratajczak",
    "Robak",
    "Rogala",
    "Rogalski",
    "Rogowski",
    "Rojek",
    "Romanowski",
    "Rosa",
    "Rosiak",
    "Rosiński",
    "Ruciński",
    "Rudnicki",
    "Rudziński",
    "Rudzki",
    "Rusin",
    "Rutkowski",
    "Rybak",
    "Rybarczyk",
    "Rybicki",
    "Rzepka",
    "Różański",
    "Różycki",
    "Sadowski",
    "Sawicki",
    "Serafin",
    "Siedlecki",
    "Sienkiewicz",
    "Sieradzki",
    "Sikora",
    "Sikorski",
    "Sitek",
    "Siwek",
    "Skalski",
    "Skiba",
    "Skibiński",
    "Skoczylas",
    "Skowron",
    "Skowronek",
    "Skowroński",
    "Skrzypczak",
    "Skrzypek",
    "Skóra",
    "Smoliński",
    "Sobczak",
    "Sobczyk",
    "Sobieraj",
    "Sobolewski",
    "Socha",
    "Sochacki",
    "Sokołowski",
    "Sokół",
    "Sosnowski",
    "Sowa",
    "Sowiński",
    "Sołtys",
    "Sołtysiak",
    "Sroka",
    "Stachowiak",
    "Stachowicz",
    "Stachura",
    "Stachurski",
    "Stanek",
    "Staniszewski",
    "Stanisławski",
    "Stankiewicz",
    "Stasiak",
    "Staszewski",
    "Stawicki",
    "Stec",
    "Stefaniak",
    "Stefański",
    "Stelmach",
    "Stolarczyk",
    "Stolarski",
    "Strzelczyk",
    "Strzelecki",
    "Stępień",
    "Stępniak",
    "Surma",
    "Suski",
    "Szafrański",
    "Szatkowski",
    "Szczepaniak",
    "Szczepanik",
    "Szczepański",
    "Szczerba",
    "Szcześniak",
    "Szczygieł",
    "Szczęsna",
    "Szczęsny",
    "Szeląg",
    "Szewczyk",
    "Szostak",
    "Szulc",
    "Szwarc",
    "Szwed",
    "Szydłowski",
    "Szymański",
    "Szymczak",
    "Szymczyk",
    "Szymkowiak",
    "Szyszka",
    "Sławiński",
    "Słowik",
    "Słowiński",
    "Tarnowski",
    "Tkaczyk",
    "Tokarski",
    "Tomala",
    "Tomaszewski",
    "Tomczak",
    "Tomczyk",
    "Tracz",
    "Trojanowski",
    "Trzciński",
    "Trzeciak",
    "Turek",
    "Twardowski",
    "Urban",
    "Urbanek",
    "Urbaniak",
    "Urbanowicz",
    "Urbańczyk",
    "Urbański",
    "Walczak",
    "Walkowiak",
    "Warchoł",
    "Wasiak",
    "Wasilewski",
    "Wawrzyniak",
    "Wesołowski",
    "Wieczorek",
    "Wierzbicki",
    "Wilczek",
    "Wilczyński",
    "Wilk",
    "Winiarski",
    "Witczak",
    "Witek",
    "Witkowski",
    "Wiącek",
    "Więcek",
    "Więckowski",
    "Wiśniewski",
    "Wnuk",
    "Wojciechowski",
    "Wojtas",
    "Wojtasik",
    "Wojtczak",
    "Wojtkowiak",
    "Wolak",
    "Woliński",
    "Wolny",
    "Wolski",
    "Woś",
    "Woźniak",
    "Wrona",
    "Wroński",
    "Wróbel",
    "Wróblewski",
    "Wypych",
    "Wysocki",
    "Wyszyński",
    "Wójcicki",
    "Wójcik",
    "Wójtowicz",
    "Wąsik",
    "Węgrzyn",
    "Włodarczyk",
    "Włodarski",
    "Zaborowski",
    "Zabłocki",
    "Zagórski",
    "Zając",
    "Zajączkowski",
    "Zakrzewski",
    "Zalewski",
    "Zaremba",
    "Zarzycki",
    "Zaręba",
    "Zawada",
    "Zawadzki",
    "Zdunek",
    "Zieliński",
    "Zielonka",
    "Ziółkowski",
    "Zięba",
    "Ziętek",
    "Zwoliński",
    "Zych",
    "Zygmunt",
    "Łapiński",
    "Łuczak",
    "Łukasiewicz",
    "Łukasik",
    "Łukaszewski",
    "Śliwa",
    "Śliwiński",
    "Ślusarczyk",
    "Świderski",
    "Świerczyński",
    "Świątek",
    "Żak",
    "Żebrowski",
    "Żmuda",
    "Żuk",
    "Żukowski",
    "Żurawski",
    "Żurek",
    "Żyła"
  ],
  "prefix": [
    "Pan",
    "Pani"
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
pl.address = {
  "country": [
    "Afganistan",
    "Albania",
    "Algieria",
    "Andora",
    "Angola",
    "Antigua i Barbuda",
    "Arabia Saudyjska",
    "Argentyna",
    "Armenia",
    "Australia",
    "Austria",
    "Azerbejdżan",
    "Bahamy",
    "Bahrajn",
    "Bangladesz",
    "Barbados",
    "Belgia",
    "Belize",
    "Benin",
    "Bhutan",
    "Białoruś",
    "Birma",
    "Boliwia",
    "Sucre",
    "Bośnia i Hercegowina",
    "Botswana",
    "Brazylia",
    "Brunei",
    "Bułgaria",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "Chiny",
    "Chorwacja",
    "Cypr",
    "Czad",
    "Czarnogóra",
    "Czechy",
    "Dania",
    "Demokratyczna Republika Konga",
    "Dominika",
    "Dominikana",
    "Dżibuti",
    "Egipt",
    "Ekwador",
    "Erytrea",
    "Estonia",
    "Etiopia",
    "Fidżi",
    "Filipiny",
    "Finlandia",
    "Francja",
    "Gabon",
    "Gambia",
    "Ghana",
    "Grecja",
    "Grenada",
    "Gruzja",
    "Gujana",
    "Gwatemala",
    "Gwinea",
    "Gwinea Bissau",
    "Gwinea Równikowa",
    "Haiti",
    "Hiszpania",
    "Holandia",
    "Haga",
    "Honduras",
    "Indie",
    "Indonezja",
    "Irak",
    "Iran",
    "Irlandia",
    "Islandia",
    "Izrael",
    "Jamajka",
    "Japonia",
    "Jemen",
    "Jordania",
    "Kambodża",
    "Kamerun",
    "Kanada",
    "Katar",
    "Kazachstan",
    "Kenia",
    "Kirgistan",
    "Kiribati",
    "Kolumbia",
    "Komory",
    "Kongo",
    "Korea Południowa",
    "Korea Północna",
    "Kostaryka",
    "Kuba",
    "Kuwejt",
    "Laos",
    "Lesotho",
    "Liban",
    "Liberia",
    "Libia",
    "Liechtenstein",
    "Litwa",
    "Luksemburg",
    "Łotwa",
    "Macedonia",
    "Madagaskar",
    "Malawi",
    "Malediwy",
    "Malezja",
    "Mali",
    "Malta",
    "Maroko",
    "Mauretania",
    "Mauritius",
    "Meksyk",
    "Mikronezja",
    "Mołdawia",
    "Monako",
    "Mongolia",
    "Mozambik",
    "Namibia",
    "Nauru",
    "Nepal",
    "Niemcy",
    "Niger",
    "Nigeria",
    "Nikaragua",
    "Norwegia",
    "Nowa Zelandia",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Nowa Gwinea",
    "Paragwaj",
    "Peru",
    "Polska",
    "322 575",
    "Portugalia",
    "Republika Południowej Afryki",
    "Republika Środkowoafrykańska",
    "Republika Zielonego Przylądka",
    "Rosja",
    "Rumunia",
    "Rwanda",
    "Saint Kitts i Nevis",
    "Saint Lucia",
    "Saint Vincent i Grenadyny",
    "Salwador",
    "Samoa",
    "San Marino",
    "Senegal",
    "Serbia",
    "Seszele",
    "Sierra Leone",
    "Singapur",
    "Słowacja",
    "Słowenia",
    "Somalia",
    "Sri Lanka",
    "Stany Zjednoczone",
    "Suazi",
    "Sudan",
    "Sudan Południowy",
    "Surinam",
    "Syria",
    "Szwajcaria",
    "Szwecja",
    "Tadżykistan",
    "Tajlandia",
    "Tanzania",
    "Timor Wschodni",
    "Togo",
    "Tonga",
    "Trynidad i Tobago",
    "Tunezja",
    "Turcja",
    "Turkmenistan",
    "Tuvalu",
    "Funafuti",
    "Uganda",
    "Ukraina",
    "Urugwaj",
    2008,
    "Uzbekistan",
    "Vanuatu",
    "Watykan",
    "Wenezuela",
    "Węgry",
    "Wielka Brytania",
    "Wietnam",
    "Włochy",
    "Wybrzeże Kości Słoniowej",
    "Wyspy Marshalla",
    "Wyspy Salomona",
    "Wyspy Świętego Tomasza i Książęca",
    "Zambia",
    "Zimbabwe",
    "Zjednoczone Emiraty Arabskie"
  ],
  "building_number": [
    "#####",
    "####",
    "###"
  ],
  "street_prefix": [
    "ul.",
    "al."
  ],
  "secondary_address": [
    "Apt. ###",
    "Suite ###"
  ],
  "postcode": [
    "##-###"
  ],
  "state": [
    "Dolnośląskie",
    "Kujawsko-pomorskie",
    "Lubelskie",
    "Lubuskie",
    "Łódzkie",
    "Małopolskie",
    "Mazowieckie",
    "Opolskie",
    "Podkarpackie",
    "Podlaskie",
    "Pomorskie",
    "Śląskie",
    "Świętokrzyskie",
    "Warmińsko-mazurskie",
    "Wielkopolskie",
    "Zachodniopomorskie"
  ],
  "state_abbr": [
    "DŚ",
    "KP",
    "LB",
    "LS",
    "ŁD",
    "MP",
    "MZ",
    "OP",
    "PK",
    "PL",
    "PM",
    "ŚL",
    "ŚK",
    "WM",
    "WP",
    "ZP"
  ],
  "city_name": [
    "Aleksandrów Kujawski",
    "Aleksandrów Łódzki",
    "Alwernia",
    "Andrychów",
    "Annopol",
    "Augustów",
    "Babimost",
    "Baborów",
    "Baranów Sandomierski",
    "Barcin",
    "Barczewo",
    "Bardo",
    "Barlinek",
    "Bartoszyce",
    "Barwice",
    "Bełchatów",
    "Bełżyce",
    "Będzin",
    "Biała",
    "Biała Piska",
    "Biała Podlaska",
    "Biała Rawska",
    "Białobrzegi",
    "Białogard",
    "Biały Bór",
    "Białystok",
    "Biecz",
    "Bielawa",
    "Bielsk Podlaski",
    "Bielsko-Biała",
    "Bieruń",
    "Bierutów",
    "Bieżuń",
    "Biłgoraj",
    "Biskupiec",
    "Bisztynek",
    "Blachownia",
    "Błaszki",
    "Błażowa",
    "Błonie",
    "Bobolice",
    "Bobowa",
    "Bochnia",
    "Bodzentyn",
    "Bogatynia",
    "Boguchwała",
    "Boguszów-Gorce",
    "Bojanowo",
    "Bolesławiec",
    "Bolków",
    "Borek Wielkopolski",
    "Borne Sulinowo",
    "Braniewo",
    "Brańsk",
    "Brodnica",
    "Brok",
    "Brusy",
    "Brwinów",
    "Brzeg",
    "Brzeg Dolny",
    "Brzesko",
    "Brzeszcze",
    "Brześć Kujawski",
    "Brzeziny",
    "Brzostek",
    "Brzozów",
    "Buk",
    "Bukowno",
    "Busko-Zdrój",
    "Bychawa",
    "Byczyna",
    "Bydgoszcz",
    "Bystrzyca Kłodzka",
    "Bytom",
    "Bytom Odrzański",
    "Bytów",
    "Cedynia",
    "Chełm",
    "Chełmek",
    "Chełmno",
    "Chełmża",
    "Chęciny",
    "Chmielnik",
    "Chocianów",
    "Chociwel",
    "Chodecz",
    "Chodzież",
    "Chojna",
    "Chojnice",
    "Chojnów",
    "Choroszcz",
    "Chorzele",
    "Chorzów",
    "Choszczno",
    "Chrzanów",
    "Ciechanowiec",
    "Ciechanów",
    "Ciechocinek",
    "Cieszanów",
    "Cieszyn",
    "Ciężkowice",
    "Cybinka",
    "Czaplinek",
    "Czarna Białostocka",
    "Czarna Woda",
    "Czarne",
    "Czarnków",
    "Czchów",
    "Czechowice-Dziedzice",
    "Czeladź",
    "Czempiń",
    "Czerniejewo",
    "Czersk",
    "Czerwieńsk",
    "Czerwionka-Leszczyny",
    "Częstochowa",
    "Człopa",
    "Człuchów",
    "Czyżew",
    "Ćmielów",
    "Daleszyce",
    "Darłowo",
    "Dąbie",
    "Dąbrowa Białostocka",
    "Dąbrowa Górnicza",
    "Dąbrowa Tarnowska",
    "Debrzno",
    "Dębica",
    "Dęblin",
    "Dębno",
    "Dobczyce",
    "Dobiegniew",
    "Dobra (powiat łobeski)",
    "Dobra (powiat turecki)",
    "Dobre Miasto",
    "Dobrodzień",
    "Dobrzany",
    "Dobrzyń nad Wisłą",
    "Dolsk",
    "Drawno",
    "Drawsko Pomorskie",
    "Drezdenko",
    "Drobin",
    "Drohiczyn",
    "Drzewica",
    "Dukla",
    "Duszniki-Zdrój",
    "Dynów",
    "Działdowo",
    "Działoszyce",
    "Działoszyn",
    "Dzierzgoń",
    "Dzierżoniów",
    "Dziwnów",
    "Elbląg",
    "Ełk",
    "Frampol",
    "Frombork",
    "Garwolin",
    "Gąbin",
    "Gdańsk",
    "Gdynia",
    "Giżycko",
    "Glinojeck",
    "Gliwice",
    "Głogów",
    "Głogów Małopolski",
    "Głogówek",
    "Głowno",
    "Głubczyce",
    "Głuchołazy",
    "Głuszyca",
    "Gniew",
    "Gniewkowo",
    "Gniezno",
    "Gogolin",
    "Golczewo",
    "Goleniów",
    "Golina",
    "Golub-Dobrzyń",
    "Gołańcz",
    "Gołdap",
    "Goniądz",
    "Gorlice",
    "Gorzów Śląski",
    "Gorzów Wielkopolski",
    "Gostynin",
    "Gostyń",
    "Gościno",
    "Gozdnica",
    "Góra",
    "Góra Kalwaria",
    "Górowo Iławeckie",
    "Górzno",
    "Grabów nad Prosną",
    "Grajewo",
    "Grodków",
    "Grodzisk Mazowiecki",
    "Grodzisk Wielkopolski",
    "Grójec",
    "Grudziądz",
    "Grybów",
    "Gryfice",
    "Gryfino",
    "Gryfów Śląski",
    "Gubin",
    "Hajnówka",
    "Halinów",
    "Hel",
    "Hrubieszów",
    "Iława",
    "Iłowa",
    "Iłża",
    "Imielin",
    "Inowrocław",
    "Ińsko",
    "Iwonicz-Zdrój",
    "Izbica Kujawska",
    "Jabłonowo Pomorskie",
    "Janikowo",
    "Janowiec Wielkopolski",
    "Janów Lubelski",
    "Jarocin",
    "Jarosław",
    "Jasień",
    "Jasło",
    "Jastarnia",
    "Jastrowie",
    "Jastrzębie-Zdrój",
    "Jawor",
    "Jaworzno",
    "Jaworzyna Śląska",
    "Jedlicze",
    "Jedlina-Zdrój",
    "Jedwabne",
    "Jelcz-Laskowice",
    "Jelenia Góra",
    "Jeziorany",
    "Jędrzejów",
    "Jordanów",
    "Józefów (powiat biłgorajski)",
    "Józefów (powiat otwocki)",
    "Jutrosin",
    "Kalety",
    "Kalisz",
    "Kalisz Pomorski",
    "Kalwaria Zebrzydowska",
    "Kałuszyn",
    "Kamienna Góra",
    "Kamień Krajeński",
    "Kamień Pomorski",
    "Kamieńsk",
    "Kańczuga",
    "Karczew",
    "Kargowa",
    "Karlino",
    "Karpacz",
    "Kartuzy",
    "Katowice",
    "Kazimierz Dolny",
    "Kazimierza Wielka",
    "Kąty Wrocławskie",
    "Kcynia",
    "Kędzierzyn-Koźle",
    "Kępice",
    "Kępno",
    "Kętrzyn",
    "Kęty",
    "Kielce",
    "Kietrz",
    "Kisielice",
    "Kleczew",
    "Kleszczele",
    "Kluczbork",
    "Kłecko",
    "Kłobuck",
    "Kłodawa",
    "Kłodzko",
    "Knurów",
    "Knyszyn",
    "Kobylin",
    "Kobyłka",
    "Kock",
    "Kolbuszowa",
    "Kolno",
    "Kolonowskie",
    "Koluszki",
    "Kołaczyce",
    "Koło",
    "Kołobrzeg",
    "Koniecpol",
    "Konin",
    "Konstancin-Jeziorna",
    "Konstantynów Łódzki",
    "Końskie",
    "Koprzywnica",
    "Korfantów",
    "Koronowo",
    "Korsze",
    "Kosów Lacki",
    "Kostrzyn",
    "Kostrzyn nad Odrą",
    "Koszalin",
    "Kościan",
    "Kościerzyna",
    "Kowal",
    "Kowalewo Pomorskie",
    "Kowary",
    "Koziegłowy",
    "Kozienice",
    "Koźmin Wielkopolski",
    "Kożuchów",
    "Kórnik",
    "Krajenka",
    "Kraków",
    "Krapkowice",
    "Krasnobród",
    "Krasnystaw",
    "Kraśnik",
    "Krobia",
    "Krosno",
    "Krosno Odrzańskie",
    "Krośniewice",
    "Krotoszyn",
    "Kruszwica",
    "Krynica Morska",
    "Krynica-Zdrój",
    "Krynki",
    "Krzanowice",
    "Krzepice",
    "Krzeszowice",
    "Krzywiń",
    "Krzyż Wielkopolski",
    "Książ Wielkopolski",
    "Kudowa-Zdrój",
    "Kunów",
    "Kutno",
    "Kuźnia Raciborska",
    "Kwidzyn",
    "Lądek-Zdrój",
    "Legionowo",
    "Legnica",
    "Lesko",
    "Leszno",
    "Leśna",
    "Leśnica",
    "Lewin Brzeski",
    "Leżajsk",
    "Lębork",
    "Lędziny",
    "Libiąż",
    "Lidzbark",
    "Lidzbark Warmiński",
    "Limanowa",
    "Lipiany",
    "Lipno",
    "Lipsk",
    "Lipsko",
    "Lubaczów",
    "Lubań",
    "Lubartów",
    "Lubawa",
    "Lubawka",
    "Lubień Kujawski",
    "Lubin",
    "Lublin",
    "Lubliniec",
    "Lubniewice",
    "Lubomierz",
    "Luboń",
    "Lubraniec",
    "Lubsko",
    "Lwówek",
    "Lwówek Śląski",
    "Łabiszyn",
    "Łańcut",
    "Łapy",
    "Łasin",
    "Łask",
    "Łaskarzew",
    "Łaszczów",
    "Łaziska Górne",
    "Łazy",
    "Łeba",
    "Łęczna",
    "Łęczyca",
    "Łęknica",
    "Łobez",
    "Łobżenica",
    "Łochów",
    "Łomianki",
    "Łomża",
    "Łosice",
    "Łowicz",
    "Łódź",
    "Łuków",
    "Maków Mazowiecki",
    "Maków Podhalański",
    "Malbork",
    "Małogoszcz",
    "Małomice",
    "Margonin",
    "Marki",
    "Maszewo",
    "Miasteczko Śląskie",
    "Miastko",
    "Michałowo",
    "Miechów",
    "Miejska Górka",
    "Mielec",
    "Mieroszów",
    "Mieszkowice",
    "Międzybórz",
    "Międzychód",
    "Międzylesie",
    "Międzyrzec Podlaski",
    "Międzyrzecz",
    "Międzyzdroje",
    "Mikołajki",
    "Mikołów",
    "Mikstat",
    "Milanówek",
    "Milicz",
    "Miłakowo",
    "Miłomłyn",
    "Miłosław",
    "Mińsk Mazowiecki",
    "Mirosławiec",
    "Mirsk",
    "Mława",
    "Młynary",
    "Mogielnica",
    "Mogilno",
    "Mońki",
    "Morąg",
    "Mordy",
    "Moryń",
    "Mosina",
    "Mrągowo",
    "Mrocza",
    "Mszana Dolna",
    "Mszczonów",
    "Murowana Goślina",
    "Muszyna",
    "Mysłowice",
    "Myszków",
    "Myszyniec",
    "Myślenice",
    "Myślibórz",
    "Nakło nad Notecią",
    "Nałęczów",
    "Namysłów",
    "Narol",
    "Nasielsk",
    "Nekla",
    "Nidzica",
    "Niemcza",
    "Niemodlin",
    "Niepołomice",
    "Nieszawa",
    "Nisko",
    "Nowa Dęba",
    "Nowa Ruda",
    "Nowa Sarzyna",
    "Nowa Sól",
    "Nowe",
    "Nowe Brzesko",
    "Nowe Miasteczko",
    "Nowe Miasto Lubawskie",
    "Nowe Miasto nad Pilicą",
    "Nowe Skalmierzyce",
    "Nowe Warpno",
    "Nowogard",
    "Nowogrodziec",
    "Nowogród",
    "Nowogród Bobrzański",
    "Nowy Dwór Gdański",
    "Nowy Dwór Mazowiecki",
    "Nowy Sącz",
    "Nowy Staw",
    "Nowy Targ",
    "Nowy Tomyśl",
    "Nowy Wiśnicz",
    "Nysa",
    "Oborniki",
    "Oborniki Śląskie",
    "Obrzycko",
    "Odolanów",
    "Ogrodzieniec",
    "Okonek",
    "Olecko",
    "Olesno",
    "Oleszyce",
    "Oleśnica",
    "Olkusz",
    "Olsztyn",
    "Olsztynek",
    "Olszyna",
    "Oława",
    "Opalenica",
    "Opatów",
    "Opoczno",
    "Opole",
    "Opole Lubelskie",
    "Orneta",
    "Orzesze",
    "Orzysz",
    "Osieczna",
    "Osiek",
    "Ostrołęka",
    "Ostroróg",
    "Ostrowiec Świętokrzyski",
    "Ostróda",
    "Ostrów Lubelski",
    "Ostrów Mazowiecka",
    "Ostrów Wielkopolski",
    "Ostrzeszów",
    "Ośno Lubuskie",
    "Oświęcim",
    "Otmuchów",
    "Otwock",
    "Ozimek",
    "Ozorków",
    "Ożarów",
    "Ożarów Mazowiecki",
    "Pabianice",
    "Paczków",
    "Pajęczno",
    "Pakość",
    "Parczew",
    "Pasłęk",
    "Pasym",
    "Pelplin",
    "Pełczyce",
    "Piaseczno",
    "Piaski",
    "Piastów",
    "Piechowice",
    "Piekary Śląskie",
    "Pieniężno",
    "Pieńsk",
    "Pieszyce",
    "Pilawa",
    "Pilica",
    "Pilzno",
    "Piła",
    "Piława Górna",
    "Pińczów",
    "Pionki",
    "Piotrków Kujawski",
    "Piotrków Trybunalski",
    "Pisz",
    "Piwniczna-Zdrój",
    "Pleszew",
    "Płock",
    "Płońsk",
    "Płoty",
    "Pniewy",
    "Pobiedziska",
    "Poddębice",
    "Podkowa Leśna",
    "Pogorzela",
    "Polanica-Zdrój",
    "Polanów",
    "Police",
    "Polkowice",
    "Połaniec",
    "Połczyn-Zdrój",
    "Poniatowa",
    "Poniec",
    "Poręba",
    "Poznań",
    "Prabuty",
    "Praszka",
    "Prochowice",
    "Proszowice",
    "Prószków",
    "Pruchnik",
    "Prudnik",
    "Prusice",
    "Pruszcz Gdański",
    "Pruszków",
    "Przasnysz",
    "Przecław",
    "Przedbórz",
    "Przedecz",
    "Przemków",
    "Przemyśl",
    "Przeworsk",
    "Przysucha",
    "Pszczyna",
    "Pszów",
    "Puck",
    "Puławy",
    "Pułtusk",
    "Puszczykowo",
    "Pyrzyce",
    "Pyskowice",
    "Pyzdry",
    "Rabka-Zdrój",
    "Raciąż",
    "Racibórz",
    "Radków",
    "Radlin",
    "Radłów",
    "Radom",
    "Radomsko",
    "Radomyśl Wielki",
    "Radymno",
    "Radziejów",
    "Radzionków",
    "Radzymin",
    "Radzyń Chełmiński",
    "Radzyń Podlaski",
    "Rajgród",
    "Rakoniewice",
    "Raszków",
    "Rawa Mazowiecka",
    "Rawicz",
    "Recz",
    "Reda",
    "Rejowiec Fabryczny",
    "Resko",
    "Reszel",
    "Rogoźno",
    "Ropczyce",
    "Różan",
    "Ruciane-Nida",
    "Ruda Śląska",
    "Rudnik nad Sanem",
    "Rumia",
    "Rybnik",
    "Rychwał",
    "Rydułtowy",
    "Rydzyna",
    "Ryglice",
    "Ryki",
    "Rymanów",
    "Ryn",
    "Rypin",
    "Rzepin",
    "Rzeszów",
    "Rzgów",
    "Sandomierz",
    "Sanok",
    "Sejny",
    "Serock",
    "Sędziszów",
    "Sędziszów Małopolski",
    "Sępopol",
    "Sępólno Krajeńskie",
    "Sianów",
    "Siechnice",
    "Siedlce",
    "Siemianowice Śląskie",
    "Siemiatycze",
    "Sieniawa",
    "Sieradz",
    "Sieraków",
    "Sierpc",
    "Siewierz",
    "Skalbmierz",
    "Skała",
    "Skarszewy",
    "Skaryszew",
    "Skarżysko-Kamienna",
    "Skawina",
    "Skępe",
    "Skierniewice",
    "Skoczów",
    "Skoki",
    "Skórcz",
    "Skwierzyna",
    "Sława",
    "Sławków",
    "Sławno",
    "Słomniki",
    "Słubice",
    "Słupca",
    "Słupsk",
    "Sobótka",
    "Sochaczew",
    "Sokołów Małopolski",
    "Sokołów Podlaski",
    "Sokółka",
    "Solec Kujawski",
    "Sompolno",
    "Sopot",
    "Sosnowiec",
    "Sośnicowice",
    "Stalowa Wola",
    "Starachowice",
    "Stargard Szczeciński",
    "Starogard Gdański",
    "Stary Sącz",
    "Staszów",
    "Stawiski",
    "Stawiszyn",
    "Stąporków",
    "Stęszew",
    "Stoczek Łukowski",
    "Stronie Śląskie",
    "Strumień",
    "Stryków",
    "Strzegom",
    "Strzelce Krajeńskie",
    "Strzelce Opolskie",
    "Strzelin",
    "Strzelno",
    "Strzyżów",
    "Sucha Beskidzka",
    "Suchań",
    "Suchedniów",
    "Suchowola",
    "Sulechów",
    "Sulejów",
    "Sulejówek",
    "Sulęcin",
    "Sulmierzyce",
    "Sułkowice",
    "Supraśl",
    "Suraż",
    "Susz",
    "Suwałki",
    "Swarzędz",
    "Syców",
    "Szadek",
    "Szamocin",
    "Szamotuły",
    "Szczawnica",
    "Szczawno-Zdrój",
    "Szczebrzeszyn",
    "Szczecin",
    "Szczecinek",
    "Szczekociny",
    "Szczucin",
    "Szczuczyn",
    "Szczyrk",
    "Szczytna",
    "Szczytno",
    "Szepietowo",
    "Szklarska Poręba",
    "Szlichtyngowa",
    "Szprotawa",
    "Sztum",
    "Szubin",
    "Szydłowiec",
    "Ścinawa",
    "Ślesin",
    "Śmigiel",
    "Śrem",
    "Środa Śląska",
    "Środa Wielkopolska",
    "Świątniki Górne",
    "Świdnica",
    "Świdnik",
    "Świdwin",
    "Świebodzice",
    "Świebodzin",
    "Świecie",
    "Świeradów-Zdrój",
    "Świerzawa",
    "Świętochłowice",
    "Świnoujście",
    "Tarczyn",
    "Tarnobrzeg",
    "Tarnogród",
    "Tarnowskie Góry",
    "Tarnów",
    "Tczew",
    "Terespol",
    "Tłuszcz",
    "Tolkmicko",
    "Tomaszów Lubelski",
    "Tomaszów Mazowiecki",
    "Toruń",
    "Torzym",
    "Toszek",
    "Trzcianka",
    "Trzciel",
    "Trzcińsko-Zdrój",
    "Trzebiatów",
    "Trzebinia",
    "Trzebnica",
    "Trzemeszno",
    "Tuchola",
    "Tuchów",
    "Tuczno",
    "Tuliszków",
    "Turek",
    "Tuszyn",
    "Twardogóra",
    "Tychowo",
    "Tychy",
    "Tyczyn",
    "Tykocin",
    "Tyszowce",
    "Ujazd",
    "Ujście",
    "Ulanów",
    "Uniejów",
    "Ustka",
    "Ustroń",
    "Ustrzyki Dolne",
    "Wadowice",
    "Wałbrzych",
    "Wałcz",
    "Warka",
    "Warszawa",
    "Warta",
    "Wasilków",
    "Wąbrzeźno",
    "Wąchock",
    "Wągrowiec",
    "Wąsosz",
    "Wejherowo",
    "Węgliniec",
    "Węgorzewo",
    "Węgorzyno",
    "Węgrów",
    "Wiązów",
    "Wieleń",
    "Wielichowo",
    "Wieliczka",
    "Wieluń",
    "Wieruszów",
    "Więcbork",
    "Wilamowice",
    "Wisła",
    "Witkowo",
    "Witnica",
    "Wleń",
    "Władysławowo",
    "Włocławek",
    "Włodawa",
    "Włoszczowa",
    "Wodzisław Śląski",
    "Wojcieszów",
    "Wojkowice",
    "Wojnicz",
    "Wolbórz",
    "Wolbrom",
    "Wolin",
    "Wolsztyn",
    "Wołczyn",
    "Wołomin",
    "Wołów",
    "Woźniki",
    "Wrocław",
    "Wronki",
    "Września",
    "Wschowa",
    "Wyrzysk",
    "Wysoka",
    "Wysokie Mazowieckie",
    "Wyszków",
    "Wyszogród",
    "Wyśmierzyce",
    "Zabłudów",
    "Zabrze",
    "Zagórów",
    "Zagórz",
    "Zakliczyn",
    "Zakopane",
    "Zakroczym",
    "Zalewo",
    "Zambrów",
    "Zamość",
    "Zator",
    "Zawadzkie",
    "Zawichost",
    "Zawidów",
    "Zawiercie",
    "Ząbki",
    "Ząbkowice Śląskie",
    "Zbąszynek",
    "Zbąszyń",
    "Zduny",
    "Zduńska Wola",
    "Zdzieszowice",
    "Zelów",
    "Zgierz",
    "Zgorzelec",
    "Zielona Góra",
    "Zielonka",
    "Ziębice",
    "Złocieniec",
    "Złoczew",
    "Złotoryja",
    "Złotów",
    "Złoty Stok",
    "Zwierzyniec",
    "Zwoleń",
    "Żabno",
    "Żagań",
    "Żarki",
    "Żarów",
    "Żary",
    "Żelechów",
    "Żerków",
    "Żmigród",
    "Żnin",
    "Żory",
    "Żukowo",
    "Żuromin",
    "Żychlin",
    "Żyrardów",
    "Żywiec"
  ],
  "city": [
    "#{city_name}"
  ],
  "street_name": [
    "#{street_prefix} #{Name.last_name}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Polska"
  ]
};
pl.company = {
  "suffix": [
    "Inc",
    "and Sons",
    "LLC",
    "Group"
  ],
  "adjetive": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
    ],
    "descriptor":[
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun": [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
  ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_adjective": [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich"
    ],
    "bs_noun": [
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
  ]
};
pl.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "pl",
    "com.pl",
    "net",
    "org"
  ]
};
pl.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
pl.phone_number = {
  "formats": [
    "12-###-##-##",
    "13-###-##-##",
    "14-###-##-##",
    "15-###-##-##",
    "16-###-##-##",
    "17-###-##-##",
    "18-###-##-##",
    "22-###-##-##",
    "23-###-##-##",
    "24-###-##-##",
    "25-###-##-##",
    "29-###-##-##",
    "32-###-##-##",
    "33-###-##-##",
    "34-###-##-##",
    "41-###-##-##",
    "42-###-##-##",
    "43-###-##-##",
    "44-###-##-##",
    "46-###-##-##",
    "48-###-##-##",
    "52-###-##-##",
    "54-###-##-##",
    "55-###-##-##",
    "56-###-##-##",
    "58-###-##-##",
    "59-###-##-##",
    "61-###-##-##",
    "62-###-##-##",
    "63-###-##-##",
    "65-###-##-##",
    "67-###-##-##",
    "68-###-##-##",
    "71-###-##-##",
    "74-###-##-##",
    "75-###-##-##",
    "76-###-##-##",
    "77-###-##-##",
    "81-###-##-##",
    "82-###-##-##",
    "83-###-##-##",
    "84-###-##-##",
    "85-###-##-##",
    "86-###-##-##",
    "87-###-##-##",
    "89-###-##-##",
    "91-###-##-##",
    "94-###-##-##",
    "95-###-##-##"
  ]
};
pl.cell_phone = {
  "formats": [
    "50-###-##-##",
    "51-###-##-##",
    "53-###-##-##",
    "57-###-##-##",
    "60-###-##-##",
    "66-###-##-##",
    "69-###-##-##",
    "72-###-##-##",
    "73-###-##-##",
    "78-###-##-##",
    "79-###-##-##",
    "88-###-##-##"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/pt_BR.js":[function(require,module,exports){
var pt_BR = {};
module["exports"] = pt_BR;
pt_BR.title = "Portuguese (Brazil)";
pt_BR.address = {
  "city_prefix": [
    "Nova",
    "Velha",
    "Grande",
    "Vila",
    "Município de"
  ],
  "city_suffix": [
    "do Descoberto",
    "de Nossa Senhora",
    "do Norte",
    "do Sul"
  ],
  "country": [
    "Afeganistão",
    "Albânia",
    "Algéria",
    "Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antigua and Barbada",
    "Argentina",
    "Armênia",
    "Aruba",
    "Austrália",
    "Áustria",
    "Alzerbajão",
    "Bahamas",
    "Barém",
    "Bangladesh",
    "Barbado",
    "Belgrado",
    "Bélgica",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolívia",
    "Bôsnia",
    "Botuasuna",
    "Bouvetoia",
    "Brasil",
    "Arquipélago de Chagos",
    "Ilhas Virgens",
    "Brunei",
    "Bulgária",
    "Burkina Faso",
    "Burundi",
    "Cambójia",
    "Camarões",
    "Canadá",
    "Cabo Verde",
    "Ilhas Caiman",
    "República da África Central",
    "Chad",
    "Chile",
    "China",
    "Ilhas Natal",
    "Ilhas Cocos",
    "Colômbia",
    "Comoros",
    "Congo",
    "Ilhas Cook",
    "Costa Rica",
    "Costa do Marfim",
    "Croácia",
    "Cuba",
    "Cyprus",
    "República Tcheca",
    "Dinamarca",
    "Djibouti",
    "Dominica",
    "República Dominicana",
    "Equador",
    "Egito",
    "El Salvador",
    "Guiné Equatorial",
    "Eritrea",
    "Estônia",
    "Etiópia",
    "Ilhas Faroe",
    "Malvinas",
    "Fiji",
    "Finlândia",
    "França",
    "Guiné Francesa",
    "Polinésia Francesa",
    "Gabão",
    "Gâmbia",
    "Georgia",
    "Alemanha",
    "Gana",
    "Gibraltar",
    "Grécia",
    "Groelândia",
    "Granada",
    "Guadalupe",
    "Guano",
    "Guatemala",
    "Guernsey",
    "Guiné",
    "Guiné-Bissau",
    "Guiana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Vaticano",
    "Honduras",
    "Hong Kong",
    "Hungria",
    "Iceland",
    "Índia",
    "Indonésia",
    "Irã",
    "Iraque",
    "Irlanda",
    "Ilha de Man",
    "Israel",
    "Itália",
    "Jamaica",
    "Japão",
    "Jersey",
    "Jordânia",
    "Cazaquistão",
    "Quênia",
    "Kiribati",
    "Coreia do Norte",
    "Coreia do Sul",
    "Kuwait",
    "Kyrgyz Republic",
    "República Democrática de Lao People",
    "Latvia",
    "Líbano",
    "Lesotho",
    "Libéria",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lituânia",
    "Luxemburgo",
    "Macao",
    "Macedônia",
    "Madagascar",
    "Malawi",
    "Malásia",
    "Maldives",
    "Mali",
    "Malta",
    "Ilhas Marshall",
    "Martinica",
    "Mauritânia",
    "Mauritius",
    "Mayotte",
    "México",
    "Micronésia",
    "Moldova",
    "Mônaco",
    "Mongólia",
    "Montenegro",
    "Montserrat",
    "Marrocos",
    "Moçambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Antilhas Holandesas",
    "Holanda",
    "Nova Caledonia",
    "Nova Zelândia",
    "Nicarágua",
    "Nigéria",
    "Niue",
    "Ilha Norfolk",
    "Northern Mariana Islands",
    "Noruega",
    "Oman",
    "Paquistão",
    "Palau",
    "Território da Palestina",
    "Panamá",
    "Nova Guiné Papua",
    "Paraguai",
    "Peru",
    "Filipinas",
    "Polônia",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Romênia",
    "Rússia",
    "Ruanda",
    "São Bartolomeu",
    "Santa Helena",
    "Santa Lúcia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tomé e Príncipe",
    "Arábia Saudita",
    "Senegal",
    "Sérvia",
    "Seychelles",
    "Serra Leoa",
    "Singapura",
    "Eslováquia",
    "Eslovênia",
    "Ilhas Salomão",
    "Somália",
    "África do Sul",
    "South Georgia and the South Sandwich Islands",
    "Spanha",
    "Sri Lanka",
    "Sudão",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Suécia",
    "Suíça",
    "Síria",
    "Taiwan",
    "Tajiquistão",
    "Tanzânia",
    "Tailândia",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidá e Tobago",
    "Tunísia",
    "Turquia",
    "Turcomenistão",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ucrânia",
    "Emirados Árabes Unidos",
    "Reino Unido",
    "Estados Unidos da América",
    "Estados Unidos das Ilhas Virgens",
    "Uruguai",
    "Uzbequistão",
    "Vanuatu",
    "Venezuela",
    "Vietnã",
    "Wallis and Futuna",
    "Sahara",
    "Yemen",
    "Zâmbia",
    "Zimbábue"
  ],
  "building_number": [
    "#####",
    "####",
    "###"
  ],
  "street_suffix": [
    "Rua",
    "Avenida",
    "Travessa",
    "Ponte",
    "Alameda",
    "Marginal",
    "Viela",
    "Rodovia"
  ],
  "secondary_address": [
    "Apto. ###",
    "Sobrado ##",
    "Casa #",
    "Lote ##",
    "Quadra ##"
  ],
  "postcode": [
    "#####",
    "#####-###"
  ],
  "state": [
    "Acre",
    "Alagoas",
    "Amapá",
    "Amazonas",
    "Bahia",
    "Ceará",
    "Distrito Federal",
    "Espírito Santo",
    "Goiás",
    "Maranhão",
    "Mato Grosso",
    "Mato Grosso do Sul",
    "Minas Gerais",
    "Pará",
    "Paraíba",
    "Paraná",
    "Pernambuco",
    "Piauí",
    "Rio de Janeiro",
    "Rio Grande do Norte",
    "Rio Grande do Sul",
    "Rondônia",
    "Roraima",
    "Santa Catarina",
    "São Paulo",
    "Sergipe",
    "Tocantins"
  ],
  "state_abbr": [
    "AC",
    "AL",
    "AP",
    "AM",
    "BA",
    "CE",
    "DF",
    "ES",
    "GO",
    "MA",
    "MT",
    "MS",
    "PA",
    "PB",
    "PR",
    "PE",
    "PI",
    "RJ",
    "RN",
    "RS",
    "RO",
    "RR",
    "SC",
    "SP"
  ],
  "default_country": [
    "Brasil"
  ]
};
pt_BR.company = {
  "suffix": [
    "S.A.",
    "LTDA",
    "e Associados",
    "Comércio"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name}"
  ]
};
pt_BR.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "live.com",
    "bol.com.br"
  ],
  "domain_suffix": [
    "br",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};
pt_BR.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ]
};
pt_BR.name = {
  "first_name": [
    "Alessandro",
    "Alessandra",
    "Alexandre",
    "Aline",
    "Antônio",
    "Breno",
    "Bruna",
    "Carlos",
    "Carla",
    "Célia",
    "Cecília",
    "César",
    "Danilo",
    "Dalila",
    "Deneval",
    "Eduardo",
    "Eduarda",
    "Esther",
    "Elísio",
    "Fábio",
    "Fabrício",
    "Fabrícia",
    "Félix",
    "Felícia",
    "Feliciano",
    "Frederico",
    "Fabiano",
    "Gustavo",
    "Guilherme",
    "Gúbio",
    "Heitor",
    "Hélio",
    "Hugo",
    "Isabel",
    "Isabela",
    "Ígor",
    "João",
    "Joana",
    "Júlio César",
    "Júlio",
    "Júlia",
    "Janaína",
    "Karla",
    "Kléber",
    "Lucas",
    "Lorena",
    "Lorraine",
    "Larissa",
    "Ladislau",
    "Marcos",
    "Meire",
    "Marcelo",
    "Marcela",
    "Margarida",
    "Mércia",
    "Márcia",
    "Marli",
    "Morgana",
    "Maria",
    "Norberto",
    "Natália",
    "Nataniel",
    "Núbia",
    "Ofélia",
    "Paulo",
    "Paula",
    "Pablo",
    "Pedro",
    "Raul",
    "Rafael",
    "Rafaela",
    "Ricardo",
    "Roberto",
    "Roberta",
    "Sílvia",
    "Sílvia",
    "Silas",
    "Suélen",
    "Sara",
    "Salvador",
    "Sirineu",
    "Talita",
    "Tertuliano",
    "Vicente",
    "Víctor",
    "Vitória",
    "Yango",
    "Yago",
    "Yuri",
    "Washington",
    "Warley"
  ],
  "last_name": [
    "Silva",
    "Souza",
    "Carvalho",
    "Santos",
    "Reis",
    "Xavier",
    "Franco",
    "Braga",
    "Macedo",
    "Batista",
    "Barros",
    "Moraes",
    "Costa",
    "Pereira",
    "Carvalho",
    "Melo",
    "Saraiva",
    "Nogueira",
    "Oliveira",
    "Martins",
    "Moreira",
    "Albuquerque"
  ],
  "prefix": [
    "Sr.",
    "Sra.",
    "Srta.",
    "Dr."
  ],
  "suffix": [
    "Jr.",
    "Neto",
    "Filho"
  ]
};
pt_BR.phone_number = {
  "formats": [
    "(##) ####-####",
    "+55 (##) ####-####",
    "(##) #####-####"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/ru.js":[function(require,module,exports){
var ru = {};
module["exports"] = ru;
ru.title = "Russian";
ru.separator = " и ";
ru.address = {
  "country": [
    "Австралия",
    "Австрия",
    "Азербайджан",
    "Албания",
    "Алжир",
    "Американское Самоа (не признана)",
    "Ангилья",
    "Ангола",
    "Андорра",
    "Антарктика (не признана)",
    "Антигуа и Барбуда",
    "Антильские Острова (не признана)",
    "Аомынь (не признана)",
    "Аргентина",
    "Армения",
    "Афганистан",
    "Багамские Острова",
    "Бангладеш",
    "Барбадос",
    "Бахрейн",
    "Беларусь",
    "Белиз",
    "Бельгия",
    "Бенин",
    "Болгария",
    "Боливия",
    "Босния и Герцеговина",
    "Ботсвана",
    "Бразилия",
    "Бруней",
    "Буркина-Фасо",
    "Бурунди",
    "Бутан",
    "Вануату",
    "Ватикан",
    "Великобритания",
    "Венгрия",
    "Венесуэла",
    "Восточный Тимор",
    "Вьетнам",
    "Габон",
    "Гаити",
    "Гайана",
    "Гамбия",
    "Гана",
    "Гваделупа (не признана)",
    "Гватемала",
    "Гвиана (не признана)",
    "Гвинея",
    "Гвинея-Бисау",
    "Германия",
    "Гондурас",
    "Гренада",
    "Греция",
    "Грузия",
    "Дания",
    "Джибути",
    "Доминика",
    "Доминиканская Республика",
    "Египет",
    "Замбия",
    "Зимбабве",
    "Израиль",
    "Индия",
    "Индонезия",
    "Иордания",
    "Ирак",
    "Иран",
    "Ирландия",
    "Исландия",
    "Испания",
    "Италия",
    "Йемен",
    "Кабо-Верде",
    "Казахстан",
    "Камбоджа",
    "Камерун",
    "Канада",
    "Катар",
    "Кения",
    "Кипр",
    "Кирибати",
    "Китай",
    "Колумбия",
    "Коморские Острова",
    "Конго",
    "Демократическая Республика",
    "Корея (Северная)",
    "Корея (Южная)",
    "Косово",
    "Коста-Рика",
    "Кот-д'Ивуар",
    "Куба",
    "Кувейт",
    "Кука острова",
    "Кыргызстан",
    "Лаос",
    "Латвия",
    "Лесото",
    "Либерия",
    "Ливан",
    "Ливия",
    "Литва",
    "Лихтенштейн",
    "Люксембург",
    "Маврикий",
    "Мавритания",
    "Мадагаскар",
    "Македония",
    "Малави",
    "Малайзия",
    "Мали",
    "Мальдивы",
    "Мальта",
    "Маршалловы Острова",
    "Мексика",
    "Микронезия",
    "Мозамбик",
    "Молдова",
    "Монако",
    "Монголия",
    "Марокко",
    "Мьянма",
    "Намибия",
    "Науру",
    "Непал",
    "Нигер",
    "Нигерия",
    "Нидерланды",
    "Никарагуа",
    "Новая Зеландия",
    "Норвегия",
    "Объединенные Арабские Эмираты",
    "Оман",
    "Пакистан",
    "Палау",
    "Панама",
    "Папуа — Новая Гвинея",
    "Парагвай",
    "Перу",
    "Польша",
    "Португалия",
    "Республика Конго",
    "Россия",
    "Руанда",
    "Румыния",
    "Сальвадор",
    "Самоа",
    "Сан-Марино",
    "Сан-Томе и Принсипи",
    "Саудовская Аравия",
    "Свазиленд",
    "Сейшельские острова",
    "Сенегал",
    "Сент-Винсент и Гренадины",
    "Сент-Киттс и Невис",
    "Сент-Люсия",
    "Сербия",
    "Сингапур",
    "Сирия",
    "Словакия",
    "Словения",
    "Соединенные Штаты Америки",
    "Соломоновы Острова",
    "Сомали",
    "Судан",
    "Суринам",
    "Сьерра-Леоне",
    "Таджикистан",
    "Таиланд",
    "Тайвань (не признана)",
    "Тамил-Илам (не признана)",
    "Танзания",
    "Тёркс и Кайкос (не признана)",
    "Того",
    "Токелау (не признана)",
    "Тонга",
    "Тринидад и Тобаго",
    "Тувалу",
    "Тунис",
    "Турецкая Республика Северного Кипра (не признана)",
    "Туркменистан",
    "Турция",
    "Уганда",
    "Узбекистан",
    "Украина",
    "Уругвай",
    "Фарерские Острова (не признана)",
    "Фиджи",
    "Филиппины",
    "Финляндия",
    "Франция",
    "Французская Полинезия (не признана)",
    "Хорватия",
    "Центральноафриканская Республика",
    "Чад",
    "Черногория",
    "Чехия",
    "Чили",
    "Швейцария",
    "Швеция",
    "Шри-Ланка",
    "Эквадор",
    "Экваториальная Гвинея",
    "Эритрея",
    "Эстония",
    "Эфиопия",
    "Южно-Африканская Республика",
    "Ямайка",
    "Япония"
  ],
  "building_number": [
    "###"
  ],
  "street_suffix": [
    "ул.",
    "улица",
    "проспект",
    "пр.",
    "площадь",
    "пл."
  ],
  "secondary_address": [
    "кв. ###"
  ],
  "postcode": [
    "######"
  ],
  "state": [
    "Республика Адыгея",
    "Республика Башкортостан",
    "Республика Бурятия",
    "Республика Алтай Республика Дагестан",
    "Республика Ингушетия",
    "Кабардино-Балкарская Республика",
    "Республика Калмыкия",
    "Республика Карачаево-Черкессия",
    "Республика Карелия",
    "Республика Коми",
    "Республика Марий Эл",
    "Республика Мордовия",
    "Республика Саха (Якутия)",
    "Республика Северная Осетия-Алания",
    "Республика Татарстан",
    "Республика Тыва",
    "Удмуртская Республика",
    "Республика Хакасия",
    "Чувашская Республика",
    "Алтайский край",
    "Краснодарский край",
    "Красноярский край",
    "Приморский край",
    "Ставропольский край",
    "Хабаровский край",
    "Амурская область",
    "Архангельская область",
    "Астраханская область",
    "Белгородская область",
    "Брянская область",
    "Владимирская область",
    "Волгоградская область",
    "Вологодская область",
    "Воронежская область",
    "Ивановская область",
    "Иркутская область",
    "Калиниградская область",
    "Калужская область",
    "Камчатская область",
    "Кемеровская область",
    "Кировская область",
    "Костромская область",
    "Курганская область",
    "Курская область",
    "Ленинградская область",
    "Липецкая область",
    "Магаданская область",
    "Московская область",
    "Мурманская область",
    "Нижегородская область",
    "Новгородская область",
    "Новосибирская область",
    "Омская область",
    "Оренбургская область",
    "Орловская область",
    "Пензенская область",
    "Пермская область",
    "Псковская область",
    "Ростовская область",
    "Рязанская область",
    "Самарская область",
    "Саратовская область",
    "Сахалинская область",
    "Свердловская область",
    "Смоленская область",
    "Тамбовская область",
    "Тверская область",
    "Томская область",
    "Тульская область",
    "Тюменская область",
    "Ульяновская область",
    "Челябинская область",
    "Читинская область",
    "Ярославская область",
    "Еврейская автономная область",
    "Агинский Бурятский авт. округ",
    "Коми-Пермяцкий автономный округ",
    "Корякский автономный округ",
    "Ненецкий автономный округ",
    "Таймырский (Долгано-Ненецкий) автономный округ",
    "Усть-Ордынский Бурятский автономный округ",
    "Ханты-Мансийский автономный округ",
    "Чукотский автономный округ",
    "Эвенкийский автономный округ",
    "Ямало-Ненецкий автономный округ",
    "Чеченская Республика"
  ],
  "street_title": [
    "Советская",
    "Молодежная",
    "Центральная",
    "Школьная",
    "Новая",
    "Садовая",
    "Лесная",
    "Набережная",
    "Ленина",
    "Мира",
    "Октябрьская",
    "Зеленая",
    "Комсомольская",
    "Заречная",
    "Первомайская",
    "Гагарина",
    "Полевая",
    "Луговая",
    "Пионерская",
    "Кирова",
    "Юбилейная",
    "Северная",
    "Пролетарская",
    "Степная",
    "Пушкина",
    "Калинина",
    "Южная",
    "Колхозная",
    "Рабочая",
    "Солнечная",
    "Железнодорожная",
    "Восточная",
    "Заводская",
    "Чапаева",
    "Нагорная",
    "Строителей",
    "Береговая",
    "Победы",
    "Горького",
    "Кооперативная",
    "Красноармейская",
    "Совхозная",
    "Речная",
    "Школьный",
    "Спортивная",
    "Озерная",
    "Строительная",
    "Парковая",
    "Чкалова",
    "Мичурина",
    "речень улиц",
    "Подгорная",
    "Дружбы",
    "Почтовая",
    "Партизанская",
    "Вокзальная",
    "Лермонтова",
    "Свободы",
    "Дорожная",
    "Дачная",
    "Маяковского",
    "Западная",
    "Фрунзе",
    "Дзержинского",
    "Московская",
    "Свердлова",
    "Некрасова",
    "Гоголя",
    "Красная",
    "Трудовая",
    "Шоссейная",
    "Чехова",
    "Коммунистическая",
    "Труда",
    "Комарова",
    "Матросова",
    "Островского",
    "Сосновая",
    "Клубная",
    "Куйбышева",
    "Крупской",
    "Березовая",
    "Карла Маркса",
    "8 Марта",
    "Больничная",
    "Садовый",
    "Интернациональная",
    "Суворова",
    "Цветочная",
    "Трактовая",
    "Ломоносова",
    "Горная",
    "Космонавтов",
    "Энергетиков",
    "Шевченко",
    "Весенняя",
    "Механизаторов",
    "Коммунальная",
    "Лесной",
    "40 лет Победы",
    "Майская"
  ],
  "city_name": [
    "Москва",
    "Владимир",
    "Санкт-Петербург",
    "Новосибирск",
    "Екатеринбург",
    "Нижний Новгород",
    "Самара",
    "Казань",
    "Омск",
    "Челябинск",
    "Ростов-на-Дону",
    "Уфа",
    "Волгоград",
    "Пермь",
    "Красноярск",
    "Воронеж",
    "Саратов",
    "Краснодар",
    "Тольятти",
    "Ижевск",
    "Барнаул",
    "Ульяновск",
    "Тюмень",
    "Иркутск",
    "Владивосток",
    "Ярославль",
    "Хабаровск",
    "Махачкала",
    "Оренбург",
    "Новокузнецк",
    "Томск",
    "Кемерово",
    "Рязань",
    "Астрахань",
    "Пенза",
    "Липецк",
    "Тула",
    "Киров",
    "Чебоксары",
    "Курск",
    "Брянскm Магнитогорск",
    "Иваново",
    "Тверь",
    "Ставрополь",
    "Белгород",
    "Сочи"
  ],
  "city": [
    "#{Address.city_name}"
  ],
  "street_name": [
    "#{street_suffix} #{Address.street_title}",
    "#{Address.street_title} #{street_suffix}"
  ],
  "street_address": [
    "#{street_name}, #{building_number}"
  ],
  "default_country": [
    "Россия"
  ]
};
ru.internet = {
  "free_email": [
    "yandex.ru",
    "ya.ru",
    "mail.ru",
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "ru",
    "info",
    "рф",
    "net",
    "org"
  ]
};
ru.name = {
  "male_first_name": [
    "Александр",
    "Алексей",
    "Альберт",
    "Анатолий",
    "Андрей",
    "Антон",
    "Аркадий",
    "Арсений",
    "Артём",
    "Борис",
    "Вадим",
    "Валентин",
    "Валерий",
    "Василий",
    "Виктор",
    "Виталий",
    "Владимир",
    "Владислав",
    "Вячеслав",
    "Геннадий",
    "Георгий",
    "Герман",
    "Григорий",
    "Даниил",
    "Денис",
    "Дмитрий",
    "Евгений",
    "Егор",
    "Иван",
    "Игнатий",
    "Игорь",
    "Илья",
    "Константин",
    "Лаврентий",
    "Леонид",
    "Лука",
    "Макар",
    "Максим",
    "Матвей",
    "Михаил",
    "Никита",
    "Николай",
    "Олег",
    "Роман",
    "Семён",
    "Сергей",
    "Станислав",
    "Степан",
    "Фёдор",
    "Эдуард",
    "Юрий",
    "Ярослав"
  ],
  "male_middle_name": [
    "Александрович",
    "Алексеевич",
    "Альбертович",
    "Анатольевич",
    "Андреевич",
    "Антонович",
    "Аркадьевич",
    "Арсеньевич",
    "Артёмович",
    "Борисович",
    "Вадимович",
    "Валентинович",
    "Валерьевич",
    "Васильевич",
    "Викторович",
    "Витальевич",
    "Владимирович",
    "Владиславович",
    "Вячеславович",
    "Геннадьевич",
    "Георгиевич",
    "Германович",
    "Григорьевич",
    "Даниилович",
    "Денисович",
    "Дмитриевич",
    "Евгеньевич",
    "Егорович",
    "Иванович",
    "Игнатьевич",
    "Игоревич",
    "Ильич",
    "Константинович",
    "Лаврентьевич",
    "Леонидович",
    "Лукич",
    "Макарович",
    "Максимович",
    "Матвеевич",
    "Михайлович",
    "Никитич",
    "Николаевич",
    "Олегович",
    "Романович",
    "Семёнович",
    "Сергеевич",
    "Станиславович",
    "Степанович",
    "Фёдорович",
    "Эдуардович",
    "Юрьевич",
    "Ярославович"
  ],
  "male_last_name": [
    "Смирнов",
    "Иванов",
    "Кузнецов",
    "Попов",
    "Соколов",
    "Лебедев",
    "Козлов",
    "Новиков",
    "Морозов",
    "Петров",
    "Волков",
    "Соловьев",
    "Васильев",
    "Зайцев",
    "Павлов",
    "Семенов",
    "Голубев",
    "Виноградов",
    "Богданов",
    "Воробьев",
    "Федоров",
    "Михайлов",
    "Беляев",
    "Тарасов",
    "Белов",
    "Комаров",
    "Орлов",
    "Киселев",
    "Макаров",
    "Андреев",
    "Ковалев",
    "Ильин",
    "Гусев",
    "Титов",
    "Кузьмин",
    "Кудрявцев",
    "Баранов",
    "Куликов",
    "Алексеев",
    "Степанов",
    "Яковлев",
    "Сорокин",
    "Сергеев",
    "Романов",
    "Захаров",
    "Борисов",
    "Королев",
    "Герасимов",
    "Пономарев",
    "Григорьев",
    "Лазарев",
    "Медведев",
    "Ершов",
    "Никитин",
    "Соболев",
    "Рябов",
    "Поляков",
    "Цветков",
    "Данилов",
    "Жуков",
    "Фролов",
    "Журавлев",
    "Николаев",
    "Крылов",
    "Максимов",
    "Сидоров",
    "Осипов",
    "Белоусов",
    "Федотов",
    "Дорофеев",
    "Егоров",
    "Матвеев",
    "Бобров",
    "Дмитриев",
    "Калинин",
    "Анисимов",
    "Петухов",
    "Антонов",
    "Тимофеев",
    "Никифоров",
    "Веселов",
    "Филиппов",
    "Марков",
    "Большаков",
    "Суханов",
    "Миронов",
    "Ширяев",
    "Александров",
    "Коновалов",
    "Шестаков",
    "Казаков",
    "Ефимов",
    "Денисов",
    "Громов",
    "Фомин",
    "Давыдов",
    "Мельников",
    "Щербаков",
    "Блинов",
    "Колесников",
    "Карпов",
    "Афанасьев",
    "Власов",
    "Маслов",
    "Исаков",
    "Тихонов",
    "Аксенов",
    "Гаврилов",
    "Родионов",
    "Котов",
    "Горбунов",
    "Кудряшов",
    "Быков",
    "Зуев",
    "Третьяков",
    "Савельев",
    "Панов",
    "Рыбаков",
    "Суворов",
    "Абрамов",
    "Воронов",
    "Мухин",
    "Архипов",
    "Трофимов",
    "Мартынов",
    "Емельянов",
    "Горшков",
    "Чернов",
    "Овчинников",
    "Селезнев",
    "Панфилов",
    "Копылов",
    "Михеев",
    "Галкин",
    "Назаров",
    "Лобанов",
    "Лукин",
    "Беляков",
    "Потапов",
    "Некрасов",
    "Хохлов",
    "Жданов",
    "Наумов",
    "Шилов",
    "Воронцов",
    "Ермаков",
    "Дроздов",
    "Игнатьев",
    "Савин",
    "Логинов",
    "Сафонов",
    "Капустин",
    "Кириллов",
    "Моисеев",
    "Елисеев",
    "Кошелев",
    "Костин",
    "Горбачев",
    "Орехов",
    "Ефремов",
    "Исаев",
    "Евдокимов",
    "Калашников",
    "Кабанов",
    "Носков",
    "Юдин",
    "Кулагин",
    "Лапин",
    "Прохоров",
    "Нестеров",
    "Харитонов",
    "Агафонов",
    "Муравьев",
    "Ларионов",
    "Федосеев",
    "Зимин",
    "Пахомов",
    "Шубин",
    "Игнатов",
    "Филатов",
    "Крюков",
    "Рогов",
    "Кулаков",
    "Терентьев",
    "Молчанов",
    "Владимиров",
    "Артемьев",
    "Гурьев",
    "Зиновьев",
    "Гришин",
    "Кононов",
    "Дементьев",
    "Ситников",
    "Симонов",
    "Мишин",
    "Фадеев",
    "Комиссаров",
    "Мамонтов",
    "Носов",
    "Гуляев",
    "Шаров",
    "Устинов",
    "Вишняков",
    "Евсеев",
    "Лаврентьев",
    "Брагин",
    "Константинов",
    "Корнилов",
    "Авдеев",
    "Зыков",
    "Бирюков",
    "Шарапов",
    "Никонов",
    "Щукин",
    "Дьячков",
    "Одинцов",
    "Сазонов",
    "Якушев",
    "Красильников",
    "Гордеев",
    "Самойлов",
    "Князев",
    "Беспалов",
    "Уваров",
    "Шашков",
    "Бобылев",
    "Доронин",
    "Белозеров",
    "Рожков",
    "Самсонов",
    "Мясников",
    "Лихачев",
    "Буров",
    "Сысоев",
    "Фомичев",
    "Русаков",
    "Стрелков",
    "Гущин",
    "Тетерин",
    "Колобов",
    "Субботин",
    "Фокин",
    "Блохин",
    "Селиверстов",
    "Пестов",
    "Кондратьев",
    "Силин",
    "Меркушев",
    "Лыткин",
    "Туров"
  ],
  "female_first_name": [
    "Анна",
    "Алёна",
    "Алевтина",
    "Александра",
    "Алина",
    "Алла",
    "Анастасия",
    "Ангелина",
    "Анжела",
    "Анжелика",
    "Антонида",
    "Антонина",
    "Анфиса",
    "Арина",
    "Валентина",
    "Валерия",
    "Варвара",
    "Василиса",
    "Вера",
    "Вероника",
    "Виктория",
    "Галина",
    "Дарья",
    "Евгения",
    "Екатерина",
    "Елена",
    "Елизавета",
    "Жанна",
    "Зинаида",
    "Зоя",
    "Ирина",
    "Кира",
    "Клавдия",
    "Ксения",
    "Лариса",
    "Лидия",
    "Любовь",
    "Людмила",
    "Маргарита",
    "Марина",
    "Мария",
    "Надежда",
    "Наталья",
    "Нина",
    "Оксана",
    "Ольга",
    "Раиса",
    "Регина",
    "Римма",
    "Светлана",
    "София",
    "Таисия",
    "Тамара",
    "Татьяна",
    "Ульяна",
    "Юлия"
  ],
  "female_middle_name": [
    "Александровна",
    "Алексеевна",
    "Альбертовна",
    "Анатольевна",
    "Андреевна",
    "Антоновна",
    "Аркадьевна",
    "Арсеньевна",
    "Артёмовна",
    "Борисовна",
    "Вадимовна",
    "Валентиновна",
    "Валерьевна",
    "Васильевна",
    "Викторовна",
    "Витальевна",
    "Владимировна",
    "Владиславовна",
    "Вячеславовна",
    "Геннадьевна",
    "Георгиевна",
    "Германовна",
    "Григорьевна",
    "Данииловна",
    "Денисовна",
    "Дмитриевна",
    "Евгеньевна",
    "Егоровна",
    "Ивановна",
    "Игнатьевна",
    "Игоревна",
    "Ильинична",
    "Константиновна",
    "Лаврентьевна",
    "Леонидовна",
    "Макаровна",
    "Максимовна",
    "Матвеевна",
    "Михайловна",
    "Никитична",
    "Николаевна",
    "Олеговна",
    "Романовна",
    "Семёновна",
    "Сергеевна",
    "Станиславовна",
    "Степановна",
    "Фёдоровна",
    "Эдуардовна",
    "Юрьевна",
    "Ярославовна"
  ],
  "female_last_name": [
    "Смирнова",
    "Иванова",
    "Кузнецова",
    "Попова",
    "Соколова",
    "Лебедева",
    "Козлова",
    "Новикова",
    "Морозова",
    "Петрова",
    "Волкова",
    "Соловьева",
    "Васильева",
    "Зайцева",
    "Павлова",
    "Семенова",
    "Голубева",
    "Виноградова",
    "Богданова",
    "Воробьева",
    "Федорова",
    "Михайлова",
    "Беляева",
    "Тарасова",
    "Белова",
    "Комарова",
    "Орлова",
    "Киселева",
    "Макарова",
    "Андреева",
    "Ковалева",
    "Ильина",
    "Гусева",
    "Титова",
    "Кузьмина",
    "Кудрявцева",
    "Баранова",
    "Куликова",
    "Алексеева",
    "Степанова",
    "Яковлева",
    "Сорокина",
    "Сергеева",
    "Романова",
    "Захарова",
    "Борисова",
    "Королева",
    "Герасимова",
    "Пономарева",
    "Григорьева",
    "Лазарева",
    "Медведева",
    "Ершова",
    "Никитина",
    "Соболева",
    "Рябова",
    "Полякова",
    "Цветкова",
    "Данилова",
    "Жукова",
    "Фролова",
    "Журавлева",
    "Николаева",
    "Крылова",
    "Максимова",
    "Сидорова",
    "Осипова",
    "Белоусова",
    "Федотова",
    "Дорофеева",
    "Егорова",
    "Матвеева",
    "Боброва",
    "Дмитриева",
    "Калинина",
    "Анисимова",
    "Петухова",
    "Антонова",
    "Тимофеева",
    "Никифорова",
    "Веселова",
    "Филиппова",
    "Маркова",
    "Большакова",
    "Суханова",
    "Миронова",
    "Ширяева",
    "Александрова",
    "Коновалова",
    "Шестакова",
    "Казакова",
    "Ефимова",
    "Денисова",
    "Громова",
    "Фомина",
    "Давыдова",
    "Мельникова",
    "Щербакова",
    "Блинова",
    "Колесникова",
    "Карпова",
    "Афанасьева",
    "Власова",
    "Маслова",
    "Исакова",
    "Тихонова",
    "Аксенова",
    "Гаврилова",
    "Родионова",
    "Котова",
    "Горбунова",
    "Кудряшова",
    "Быкова",
    "Зуева",
    "Третьякова",
    "Савельева",
    "Панова",
    "Рыбакова",
    "Суворова",
    "Абрамова",
    "Воронова",
    "Мухина",
    "Архипова",
    "Трофимова",
    "Мартынова",
    "Емельянова",
    "Горшкова",
    "Чернова",
    "Овчинникова",
    "Селезнева",
    "Панфилова",
    "Копылова",
    "Михеева",
    "Галкина",
    "Назарова",
    "Лобанова",
    "Лукина",
    "Белякова",
    "Потапова",
    "Некрасова",
    "Хохлова",
    "Жданова",
    "Наумова",
    "Шилова",
    "Воронцова",
    "Ермакова",
    "Дроздова",
    "Игнатьева",
    "Савина",
    "Логинова",
    "Сафонова",
    "Капустина",
    "Кириллова",
    "Моисеева",
    "Елисеева",
    "Кошелева",
    "Костина",
    "Горбачева",
    "Орехова",
    "Ефремова",
    "Исаева",
    "Евдокимова",
    "Калашникова",
    "Кабанова",
    "Носкова",
    "Юдина",
    "Кулагина",
    "Лапина",
    "Прохорова",
    "Нестерова",
    "Харитонова",
    "Агафонова",
    "Муравьева",
    "Ларионова",
    "Федосеева",
    "Зимина",
    "Пахомова",
    "Шубина",
    "Игнатова",
    "Филатова",
    "Крюкова",
    "Рогова",
    "Кулакова",
    "Терентьева",
    "Молчанова",
    "Владимирова",
    "Артемьева",
    "Гурьева",
    "Зиновьева",
    "Гришина",
    "Кононова",
    "Дементьева",
    "Ситникова",
    "Симонова",
    "Мишина",
    "Фадеева",
    "Комиссарова",
    "Мамонтова",
    "Носова",
    "Гуляева",
    "Шарова",
    "Устинова",
    "Вишнякова",
    "Евсеева",
    "Лаврентьева",
    "Брагина",
    "Константинова",
    "Корнилова",
    "Авдеева",
    "Зыкова",
    "Бирюкова",
    "Шарапова",
    "Никонова",
    "Щукина",
    "Дьячкова",
    "Одинцова",
    "Сазонова",
    "Якушева",
    "Красильникова",
    "Гордеева",
    "Самойлова",
    "Князева",
    "Беспалова",
    "Уварова",
    "Шашкова",
    "Бобылева",
    "Доронина",
    "Белозерова",
    "Рожкова",
    "Самсонова",
    "Мясникова",
    "Лихачева",
    "Бурова",
    "Сысоева",
    "Фомичева",
    "Русакова",
    "Стрелкова",
    "Гущина",
    "Тетерина",
    "Колобова",
    "Субботина",
    "Фокина",
    "Блохина",
    "Селиверстова",
    "Пестова",
    "Кондратьева",
    "Силина",
    "Меркушева",
    "Лыткина",
    "Турова"
  ],
  "name": [
    "#{male_first_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name}",
    "#{male_first_name} #{male_middle_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name} #{male_middle_name}",
    "#{female_first_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name}",
    "#{female_first_name} #{female_middle_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name} #{female_middle_name}"
  ]
};
ru.phone_number = {
  "formats": [
    "(9##)###-##-##"
  ]
};
ru.commerce = {
  "color": [
    "красный",
    "зеленый",
    "синий",
    "желтый",
    "багровый",
    "мятный",
    "зеленовато-голубой",
    "белый",
    "черный",
    "оранжевый",
    "розовый",
    "серый",
    "красно-коричневый",
    "фиолетовый",
    "бирюзовый",
    "желто-коричневый",
    "небесно голубой",
    "оранжево-розовый",
    "темно-фиолетовый",
    "орхидный",
    "оливковый",
    "пурпурный",
    "лимонный",
    "кремовый",
    "сине-фиолетовый",
    "золотой",
    "красно-пурпурный",
    "голубой",
    "лазурный",
    "лиловый",
    "серебряный"
  ],
  "department": [
    "Книги",
    "Фильмы",
    "музыка",
    "игры",
    "Электроника",
    "компьютеры",
    "Дом",
    "садинструмент",
    "Бакалея",
    "здоровье",
    "красота",
    "Игрушки",
    "детское",
    "для малышей",
    "Одежда",
    "обувь",
    "украшения",
    "Спорт",
    "туризм",
    "Автомобильное",
    "промышленное"
  ],
  "product_name": {
    "adjective": [
      "Маленький",
      "Эргономичный",
      "Грубый",
      "Интеллектуальный",
      "Великолепный",
      "Невероятный",
      "Фантастический",
      "Практчиный",
      "Лоснящийся",
      "Потрясающий"
    ],
    "material": [
      "Стальной",
      "Деревянный",
      "Бетонный",
      "Пластиковый",
      "Хлопковый",
      "Гранитный",
      "Резиновый"
    ],
    "product": [
      "Стул",
      "Автомобиль",
      "Компьютер",
      "Берет",
      "Кулон",
      "Стол",
      "Свитер",
      "Ремень",
      "Ботинок"
    ]
  }
};
ru.company = {
  "prefix": [
    "ИП",
    "ООО",
    "ЗАО",
    "ОАО",
    "НКО",
    "ТСЖ",
    "ОП"
  ],
  "suffix": [
    "Снаб",
    "Торг",
    "Пром",
    "Трейд",
    "Сбыт"
  ],
  "name": [
    "#{prefix} #{Name.female_first_name}",
    "#{prefix} #{Name.male_first_name}",
    "#{prefix} #{Name.male_last_name}",
    "#{prefix} #{suffix}#{suffix}",
    "#{prefix} #{suffix}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/sk.js":[function(require,module,exports){
var sk = {};
module["exports"] = sk;
sk.title = "Slovakian";
sk.address = {
  "city_prefix": [
    "North",
    "East",
    "West",
    "South",
    "New",
    "Lake",
    "Port"
  ],
  "city_suffix": [
    "town",
    "ton",
    "land",
    "ville",
    "berg",
    "burgh",
    "borough",
    "bury",
    "view",
    "port",
    "mouth",
    "stad",
    "furt",
    "chester",
    "mouth",
    "fort",
    "haven",
    "side",
    "shire"
  ],
  "country": [
    "Afganistan",
    "Afgánsky islamský štát",
    "Albánsko",
    "Albánska republika",
    "Alžírsko",
    "Alžírska demokratická ľudová republika",
    "Andorra",
    "Andorrské kniežatsvo",
    "Angola",
    "Angolská republika",
    "Antigua a Barbuda",
    "Antigua a Barbuda",
    "Argentína",
    "Argentínska republika",
    "Arménsko",
    "Arménska republika",
    "Austrália",
    "Austrálsky zväz",
    "Azerbajdžan",
    "Azerbajdžanská republika",
    "Bahamy",
    "Bahamské spoločenstvo",
    "Bahrajn",
    "Bahrajnské kráľovstvo",
    "Bangladéš",
    "Bangladéšska ľudová republika",
    "Barbados",
    "Barbados",
    "Belgicko",
    "Belgické kráľovstvo",
    "Belize",
    "Belize",
    "Benin",
    "Beninská republika",
    "Bhután",
    "Bhutánske kráľovstvo",
    "Bielorusko",
    "Bieloruská republika",
    "Bolívia",
    "Bolívijská republika",
    "Bosna a Hercegovina",
    "Republika Bosny a Hercegoviny",
    "Botswana",
    "Botswanská republika",
    "Brazília",
    "Brazílska federatívna republika",
    "Brunej",
    "Brunejský sultanát",
    "Bulharsko",
    "Bulharská republika",
    "Burkina Faso",
    "Burkina Faso",
    "Burundi",
    "Burundská republika",
    "Cyprus",
    "Cyperská republika",
    "Čad",
    "Republika Čad",
    "Česko",
    "Česká republika",
    "Čína",
    "Čínska ľudová republika",
    "Dánsko",
    "Dánsko kráľovstvo",
    "Dominika",
    "Spoločenstvo Dominika",
    "Dominikánska republika",
    "Dominikánska republika",
    "Džibutsko",
    "Džibutská republika",
    "Egypt",
    "Egyptská arabská republika",
    "Ekvádor",
    "Ekvádorská republika",
    "Eritrea",
    "Eritrejský štát",
    "Estónsko",
    "Estónska republika",
    "Etiópia",
    "Etiópska federatívna demokratická republika",
    "Fidži",
    "Republika ostrovy Fidži",
    "Filipíny",
    "Filipínska republika",
    "Fínsko",
    "Fínska republika",
    "Francúzsko",
    "Francúzska republika",
    "Gabon",
    "Gabonská republika",
    "Gambia",
    "Gambijská republika",
    "Ghana",
    "Ghanská republika",
    "Grécko",
    "Helénska republika",
    "Grenada",
    "Grenada",
    "Gruzínsko",
    "Gruzínsko",
    "Guatemala",
    "Guatemalská republika",
    "Guinea",
    "Guinejská republika",
    "Guinea-Bissau",
    "Republika Guinea-Bissau",
    "Guayana",
    "Guayanská republika",
    "Haiti",
    "Republika Haiti",
    "Holandsko",
    "Holandské kráľovstvo",
    "Honduras",
    "Honduraská republika",
    "Chile",
    "Čílska republika",
    "Chorvátsko",
    "Chorvátska republika",
    "India",
    "Indická republika",
    "Indonézia",
    "Indonézska republika",
    "Irak",
    "Iracká republika",
    "Irán",
    "Iránska islamská republika",
    "Island",
    "Islandská republika",
    "Izrael",
    "Štát Izrael",
    "Írsko",
    "Írska republika",
    "Jamajka",
    "Jamajka",
    "Japonsko",
    "Japonsko",
    "Jemen",
    "Jemenská republika",
    "Jordánsko",
    "Jordánske hášimovské kráľovstvo",
    "Južná Afrika",
    "Juhoafrická republika",
    "Kambodža",
    "Kambodžské kráľovstvo",
    "Kamerun",
    "Kamerunská republika",
    "Kanada",
    "Kanada",
    "Kapverdy",
    "Kapverdská republika",
    "Katar",
    "Štát Katar",
    "Kazachstan",
    "Kazašská republika",
    "Keňa",
    "Kenská republika",
    "Kirgizsko",
    "Kirgizská republika",
    "Kiribati",
    "Kiribatská republika",
    "Kolumbia",
    "Kolumbijská republika",
    "Komory",
    "Komorská únia",
    "Kongo",
    "Konžská demokratická republika",
    "Kongo (\"Brazzaville\")",
    "Konžská republika",
    "Kórea (\"Južná\")",
    "Kórejská republika",
    "Kórea (\"Severná\")",
    "Kórejská ľudovodemokratická republika",
    "Kostarika",
    "Kostarická republika",
    "Kuba",
    "Kubánska republika",
    "Kuvajt",
    "Kuvajtský štát",
    "Laos",
    "Laoská ľudovodemokratická republika",
    "Lesotho",
    "Lesothské kráľovstvo",
    "Libanon",
    "Libanonská republika",
    "Libéria",
    "Libérijská republika",
    "Líbya",
    "Líbyjská arabská ľudová socialistická džamáhírija",
    "Lichtenštajnsko",
    "Lichtenštajnské kniežatstvo",
    "Litva",
    "Litovská republika",
    "Lotyšsko",
    "Lotyšská republika",
    "Luxembursko",
    "Luxemburské veľkovojvodstvo",
    "Macedónsko",
    "Macedónska republika",
    "Madagaskar",
    "Madagaskarská republika",
    "Maďarsko",
    "Maďarská republika",
    "Malajzia",
    "Malajzia",
    "Malawi",
    "Malawijská republika",
    "Maldivy",
    "Maldivská republika",
    "Mali",
    "Malijská republika",
    "Malta",
    "Malta",
    "Maroko",
    "Marocké kráľovstvo",
    "Marshallove ostrovy",
    "Republika Marshallových ostrovy",
    "Mauritánia",
    "Mauritánska islamská republika",
    "Maurícius",
    "Maurícijská republika",
    "Mexiko",
    "Spojené štáty mexické",
    "Mikronézia",
    "Mikronézske federatívne štáty",
    "Mjanmarsko",
    "Mjanmarský zväz",
    "Moldavsko",
    "Moldavská republika",
    "Monako",
    "Monacké kniežatstvo",
    "Mongolsko",
    "Mongolsko",
    "Mozambik",
    "Mozambická republika",
    "Namíbia",
    "Namíbijská republika",
    "Nauru",
    "Naurská republika",
    "Nemecko",
    "Nemecká spolková republika",
    "Nepál",
    "Nepálske kráľovstvo",
    "Niger",
    "Nigerská republika",
    "Nigéria",
    "Nigérijská federatívna republika",
    "Nikaragua",
    "Nikaragujská republika",
    "Nový Zéland",
    "Nový Zéland",
    "Nórsko",
    "Nórske kráľovstvo",
    "Omán",
    "Ománsky sultanát",
    "Pakistan",
    "Pakistanská islamská republika",
    "Palau",
    "Palauská republika",
    "Panama",
    "Panamská republika",
    "Papua-Nová Guinea",
    "Nezávislý štát Papua-Nová Guinea",
    "Paraguaj",
    "Paraguajská republika",
    "Peru",
    "Peruánska republika",
    "Pobrežie Slonoviny",
    "Republika Pobrežie Slonoviny",
    "Poľsko",
    "Poľská republika",
    "Portugalsko",
    "Portugalská republika",
    "Rakúsko",
    "Rakúska republika",
    "Rovníková Guinea",
    "Republika Rovníková Guinea",
    "Rumunsko",
    "Rumunsko",
    "Rusko",
    "Ruská federácia",
    "Rwanda",
    "Rwandská republika",
    "Salvádor",
    "Salvádorská republika",
    "Samoa",
    "Nezávislý štát Samoa",
    "San Maríno",
    "Sanmarínska republika",
    "Saudská Arábia",
    "Kráľovstvo Saudskej Arábie",
    "Senegal",
    "Senegalská republika",
    "Seychely",
    "Seychelská republika",
    "Sierra Leone",
    "Republika Sierra Leone",
    "Singapur",
    "Singapurska republika",
    "Slovensko",
    "Slovenská republika",
    "Slovinsko",
    "Slovinská republika",
    "Somálsko",
    "Somálska demokratická republika",
    "Spojené arabské emiráty",
    "Spojené arabské emiráty",
    "Spojené štáty americké",
    "Spojené štáty americké",
    "Srbsko a Čierna Hora",
    "Srbsko a Čierna Hora",
    "Srí Lanka",
    "Demokratická socialistická republika Srí Lanka",
    "Stredoafrická republika",
    "Stredoafrická republika",
    "Sudán",
    "Sudánska republika",
    "Surinam",
    "Surinamská republika",
    "Svazijsko",
    "Svazijské kráľovstvo",
    "Svätá Lucia",
    "Svätá Lucia",
    "Svätý Krištof a Nevis",
    "Federácia Svätý Krištof a Nevis",
    "Sv. Tomáš a Princov Ostrov",
    "Demokratická republika Svätý Tomáš a Princov Ostrov",
    "Sv. Vincent a Grenadíny",
    "Svätý Vincent a Grenadíny",
    "Sýria",
    "Sýrska arabská republika",
    "Šalamúnove ostrovy",
    "Šalamúnove ostrovy",
    "Španielsko",
    "Španielske kráľovstvo",
    "Švajčiarsko",
    "Švajčiarska konfederácia",
    "Švédsko",
    "Švédske kráľovstvo",
    "Tadžikistan",
    "Tadžická republika",
    "Taliansko",
    "Talianska republika",
    "Tanzánia",
    "Tanzánijská zjednotená republika",
    "Thajsko",
    "Thajské kráľovstvo",
    "Togo",
    "Tožská republika",
    "Tonga",
    "Tonžské kráľovstvo",
    "Trinidad a Tobago",
    "Republika Trinidad a Tobago",
    "Tunisko",
    "Tuniská republika",
    "Turecko",
    "Turecká republika",
    "Turkménsko",
    "Turkménsko",
    "Tuvalu",
    "Tuvalu",
    "Uganda",
    "Ugandská republika",
    "Ukrajina",
    "Uruguaj",
    "Uruguajská východná republika",
    "Uzbekistan",
    "Vanuatu",
    "Vanuatská republika",
    "Vatikán",
    "Svätá Stolica",
    "Veľká Británia",
    "Spojené kráľovstvo Veľkej Británie a Severného Írska",
    "Venezuela",
    "Venezuelská bolívarovská republika",
    "Vietnam",
    "Vietnamská socialistická republika",
    "Východný Timor",
    "Demokratická republika Východný Timor",
    "Zambia",
    "Zambijská republika",
    "Zimbabwe",
    "Zimbabwianska republika"
  ],
  "building_number": [
    "#",
    "##",
    "###"
  ],
  "secondary_address": [
    "Apt. ###",
    "Suite ###"
  ],
  "postcode": [
    "#####",
    "### ##",
    "## ###"
  ],
  "state": [],
  "state_abbr": [],
  "time_zone": [
    "Pacific/Midway",
    "Pacific/Pago_Pago",
    "Pacific/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europe/Dublin",
    "Europe/London",
    "Europe/Lisbon",
    "Europe/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europe/Belgrade",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Ljubljana",
    "Europe/Prague",
    "Europe/Sarajevo",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Amsterdam",
    "Europe/Berlin",
    "Europe/Berlin",
    "Europe/Rome",
    "Europe/Stockholm",
    "Europe/Vienna",
    "Africa/Algiers",
    "Europe/Bucharest",
    "Africa/Cairo",
    "Europe/Helsinki",
    "Europe/Kiev",
    "Europe/Riga",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Vilnius",
    "Europe/Athens",
    "Europe/Istanbul",
    "Europe/Minsk",
    "Asia/Jerusalem",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europe/Moscow",
    "Europe/Moscow",
    "Europe/Moscow",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacific/Guam",
    "Pacific/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacific/Noumea",
    "Pacific/Fiji",
    "Asia/Kamchatka",
    "Pacific/Majuro",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "Pacific/Tongatapu",
    "Pacific/Fakaofo",
    "Pacific/Apia"
  ],
  "city_name": [
    "Bánovce nad Bebravou",
    "Banská Bystrica",
    "Banská Štiavnica",
    "Bardejov",
    "Bratislava I",
    "Bratislava II",
    "Bratislava III",
    "Bratislava IV",
    "Bratislava V",
    "Brezno",
    "Bytča",
    "Čadca",
    "Detva",
    "Dolný Kubín",
    "Dunajská Streda",
    "Galanta",
    "Gelnica",
    "Hlohovec",
    "Humenné",
    "Ilava",
    "Kežmarok",
    "Komárno",
    "Košice I",
    "Košice II",
    "Košice III",
    "Košice IV",
    "Košice-okolie",
    "Krupina",
    "Kysucké Nové Mesto",
    "Levice",
    "Levoča",
    "Liptovský Mikuláš",
    "Lučenec",
    "Malacky",
    "Martin",
    "Medzilaborce",
    "Michalovce",
    "Myjava",
    "Námestovo",
    "Nitra",
    "Nové Mesto n.Váhom",
    "Nové Zámky",
    "Partizánske",
    "Pezinok",
    "Piešťany",
    "Poltár",
    "Poprad",
    "Považská Bystrica",
    "Prešov",
    "Prievidza",
    "Púchov",
    "Revúca",
    "Rimavská Sobota",
    "Rožňava",
    "Ružomberok",
    "Sabinov",
    "Šaľa",
    "Senec",
    "Senica",
    "Skalica",
    "Snina",
    "Sobrance",
    "Spišská Nová Ves",
    "Stará Ľubovňa",
    "Stropkov",
    "Svidník",
    "Topoľčany",
    "Trebišov",
    "Trenčín",
    "Trnava",
    "Turčianske Teplice",
    "Tvrdošín",
    "Veľký Krtíš",
    "Vranov nad Topľou",
    "Žarnovica",
    "Žiar nad Hronom",
    "Žilina",
    "Zlaté Moravce",
    "Zvolen"
  ],
  "city": [
    "#{city_name}"
  ],
  "street": [
    "Adámiho",
    "Ahoj",
    "Albína Brunovského",
    "Albrechtova",
    "Alejová",
    "Alešova",
    "Alibernetová",
    "Alžbetínska",
    "Alžbety Gwerkovej",
    "Ambroseho",
    "Ambrušova",
    "Americká",
    "Americké námestie",
    "Americké námestie",
    "Andreja Mráza",
    "Andreja Plávku",
    "Andrusovova",
    "Anenská",
    "Anenská",
    "Antolská",
    "Astronomická",
    "Astrová",
    "Azalková",
    "Azovská",
    "Babuškova",
    "Bachova",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajzova",
    "Bancíkovej",
    "Banícka",
    "Baníkova",
    "Banskobystrická",
    "Banšelova",
    "Bardejovská",
    "Bartókova",
    "Bartoňova",
    "Bartoškova",
    "Baštová",
    "Bazová",
    "Bažantia",
    "Beblavého",
    "Beckovská",
    "Bedľová",
    "Belániková",
    "Belehradská",
    "Belinského",
    "Belopotockého",
    "Beňadická",
    "Bencúrova",
    "Benediktiho",
    "Beniakova",
    "Bernolákova",
    "Beskydská",
    "Betliarska",
    "Bezručova",
    "Biela",
    "Bielkova",
    "Björnsonova",
    "Blagoevova",
    "Blatnická",
    "Blumentálska",
    "Blyskáčová",
    "Bočná",
    "Bohrova",
    "Bohúňova",
    "Bojnická",
    "Borodáčova",
    "Borská",
    "Bosákova",
    "Botanická",
    "Bottova",
    "Boženy Němcovej",
    "Bôrik",
    "Bradáčova",
    "Bradlianska",
    "Brančská",
    "Bratská",
    "Brestová",
    "Brezovská",
    "Briežky",
    "Brnianska",
    "Brodná",
    "Brodská",
    "Broskyňová",
    "Břeclavská",
    "Budatínska",
    "Budatínska",
    "Budatínska",
    "Búdkova  cesta",
    "Budovateľská",
    "Budyšínska",
    "Budyšínska",
    "Buková",
    "Bukureštská",
    "Bulharská",
    "Bulíkova",
    "Bystrého",
    "Bzovícka",
    "Cablkova",
    "Cesta na Červený most",
    "Cesta na Červený most",
    "Cesta na Senec",
    "Cikkerova",
    "Cintorínska",
    "Cintulova",
    "Cukrová",
    "Cyrilova",
    "Čajakova",
    "Čajkovského",
    "Čaklovská",
    "Čalovská",
    "Čapajevova",
    "Čapkova",
    "Čárskeho",
    "Čavojského",
    "Čečinová",
    "Čelakovského",
    "Čerešňová",
    "Černyševského",
    "Červeňova",
    "Česká",
    "Československých par",
    "Čipkárska",
    "Čmelíkova",
    "Čmeľovec",
    "Čulenova",
    "Daliborovo námestie",
    "Dankovského",
    "Dargovská",
    "Ďatelinová",
    "Daxnerovo námestie",
    "Devínska cesta",
    "Dlhé diely I.",
    "Dlhé diely II.",
    "Dlhé diely III.",
    "Dobrovičova",
    "Dobrovičova",
    "Dobrovského",
    "Dobšinského",
    "Dohnalova",
    "Dohnányho",
    "Doležalova",
    "Dolná",
    "Dolnozemská cesta",
    "Domkárska",
    "Domové role",
    "Donnerova",
    "Donovalova",
    "Dostojevského rad",
    "Dr. Vladimíra Clemen",
    "Drevená",
    "Drieňová",
    "Drieňová",
    "Drieňová",
    "Drotárska cesta",
    "Drotárska cesta",
    "Drotárska cesta",
    "Družicová",
    "Družstevná",
    "Dubnická",
    "Dubová",
    "Dúbravská cesta",
    "Dudova",
    "Dulovo námestie",
    "Dulovo námestie",
    "Dunajská",
    "Dvořákovo nábrežie",
    "Edisonova",
    "Einsteinova",
    "Elektrárenská",
    "Exnárova",
    "F. Kostku",
    "Fadruszova",
    "Fajnorovo nábrežie",
    "Fándlyho",
    "Farebná",
    "Farská",
    "Farského",
    "Fazuľová",
    "Fedinova",
    "Ferienčíkova",
    "Fialkové údolie",
    "Fibichova",
    "Filiálne nádražie",
    "Flöglova",
    "Floriánske námestie",
    "Fraňa Kráľa",
    "Francisciho",
    "Francúzskych partizá",
    "Františkánska",
    "Františkánske námest",
    "Furdekova",
    "Furdekova",
    "Gabčíkova",
    "Gagarinova",
    "Gagarinova",
    "Gagarinova",
    "Gajova",
    "Galaktická",
    "Galandova",
    "Gallova",
    "Galvaniho",
    "Gašparíkova",
    "Gaštanová",
    "Gavlovičova",
    "Gemerská",
    "Gercenova",
    "Gessayova",
    "Gettingová",
    "Godrova",
    "Gogoľova",
    "Goláňova",
    "Gondova",
    "Goralská",
    "Gorazdova",
    "Gorkého",
    "Gregorovej",
    "Grösslingova",
    "Gruzínska",
    "Gunduličova",
    "Gusevova",
    "Haanova",
    "Haburská",
    "Halašova",
    "Hálkova",
    "Hálova",
    "Hamuliakova",
    "Hanácka",
    "Handlovská",
    "Hany Meličkovej",
    "Harmanecká",
    "Hasičská",
    "Hattalova",
    "Havlíčkova",
    "Havrania",
    "Haydnova",
    "Herlianska",
    "Herlianska",
    "Heydukova",
    "Hlaváčikova",
    "Hlavatého",
    "Hlavné námestie",
    "Hlboká cesta",
    "Hlboká cesta",
    "Hlivová",
    "Hlučínska",
    "Hodálova",
    "Hodžovo námestie",
    "Holekova",
    "Holíčska",
    "Hollého",
    "Holubyho",
    "Hontianska",
    "Horárska",
    "Horné Židiny",
    "Horská",
    "Horská",
    "Hrad",
    "Hradné údolie",
    "Hrachová",
    "Hraničná",
    "Hrebendova",
    "Hríbová",
    "Hriňovská",
    "Hrobákova",
    "Hrobárska",
    "Hroboňova",
    "Hudecova",
    "Humenské námestie",
    "Hummelova",
    "Hurbanovo námestie",
    "Hurbanovo námestie",
    "Hviezdoslavovo námes",
    "Hýrošova",
    "Chalupkova",
    "Chemická",
    "Chlumeckého",
    "Chorvátska",
    "Chorvátska",
    "Iľjušinova",
    "Ilkovičova",
    "Inovecká",
    "Inovecká",
    "Iskerníková",
    "Ivana Horvátha",
    "Ivánska cesta",
    "J.C.Hronského",
    "Jabloňová",
    "Jadrová",
    "Jakabova",
    "Jakubovo námestie",
    "Jamnického",
    "Jána Stanislava",
    "Janáčkova",
    "Jančova",
    "Janíkove role",
    "Jankolova",
    "Jánošíkova",
    "Jánoškova",
    "Janotova",
    "Jánska",
    "Jantárová cesta",
    "Jarabinková",
    "Jarná",
    "Jaroslavova",
    "Jarošova",
    "Jaseňová",
    "Jasná",
    "Jasovská",
    "Jastrabia",
    "Jašíkova",
    "Javorinská",
    "Javorová",
    "Jazdecká",
    "Jedlíkova",
    "Jégého",
    "Jelačičova",
    "Jelenia",
    "Jesenná",
    "Jesenského",
    "Jiráskova",
    "Jiskrova",
    "Jozefská",
    "Junácka",
    "Jungmannova",
    "Jurigovo námestie",
    "Jurovského",
    "Jurská",
    "Justičná",
    "K lomu",
    "K Železnej studienke",
    "Kalinčiakova",
    "Kamenárska",
    "Kamenné námestie",
    "Kapicova",
    "Kapitulská",
    "Kapitulský dvor",
    "Kapucínska",
    "Kapušianska",
    "Karadžičova",
    "Karadžičova",
    "Karadžičova",
    "Karadžičova",
    "Karloveská",
    "Karloveské rameno",
    "Karpatská",
    "Kašmírska",
    "Kaštielska",
    "Kaukazská",
    "Kempelenova",
    "Kežmarské námestie",
    "Kladnianska",
    "Klariská",
    "Kláštorská",
    "Klatovská",
    "Klatovská",
    "Klemensova",
    "Klincová",
    "Klobučnícka",
    "Klokočova",
    "Kľukatá",
    "Kmeťovo námestie",
    "Koceľova",
    "Kočánkova",
    "Kohútova",
    "Kolárska",
    "Kolískova",
    "Kollárovo námestie",
    "Kollárovo námestie",
    "Kolmá",
    "Komárňanská",
    "Komárnická",
    "Komárnická",
    "Komenského námestie",
    "Kominárska",
    "Komonicová",
    "Konopná",
    "Konvalinková",
    "Konventná",
    "Kopanice",
    "Kopčianska",
    "Koperníkova",
    "Korabinského",
    "Koreničova",
    "Kostlivého",
    "Kostolná",
    "Košická",
    "Košická",
    "Košická",
    "Kováčska",
    "Kovorobotnícka",
    "Kozia",
    "Koziarka",
    "Kozmonautická",
    "Krajná",
    "Krakovská",
    "Kráľovské údolie",
    "Krasinského",
    "Kraskova",
    "Krásna",
    "Krásnohorská",
    "Krasovského",
    "Krátka",
    "Krčméryho",
    "Kremnická",
    "Kresánkova",
    "Krivá",
    "Križkova",
    "Krížna",
    "Krížna",
    "Krížna",
    "Krížna",
    "Krmanova",
    "Krompašská",
    "Krupinská",
    "Krupkova",
    "Kubániho",
    "Kubínska",
    "Kuklovská",
    "Kukučínova",
    "Kukuričná",
    "Kulíškova",
    "Kultúrna",
    "Kupeckého",
    "Kúpeľná",
    "Kutlíkova",
    "Kutuzovova",
    "Kuzmányho",
    "Kvačalova",
    "Kvetná",
    "Kýčerského",
    "Kyjevská",
    "Kysucká",
    "Laborecká",
    "Lackova",
    "Ladislava Sáru",
    "Ľadová",
    "Lachova",
    "Ľaliová",
    "Lamačská cesta",
    "Lamačská cesta",
    "Lamanského",
    "Landererova",
    "Langsfeldova",
    "Ľanová",
    "Laskomerského",
    "Laučekova",
    "Laurinská",
    "Lazaretská",
    "Lazaretská",
    "Legerského",
    "Legionárska",
    "Legionárska",
    "Lehockého",
    "Lehockého",
    "Lenardova",
    "Lermontovova",
    "Lesná",
    "Leškova",
    "Letecká",
    "Letisko M.R.Štefánik",
    "Letná",
    "Levárska",
    "Levická",
    "Levočská",
    "Lidická",
    "Lietavská",
    "Lichardova",
    "Lipová",
    "Lipovinová",
    "Liptovská",
    "Listová",
    "Líščie nivy",
    "Líščie údolie",
    "Litovská",
    "Lodná",
    "Lombardiniho",
    "Lomonosovova",
    "Lopenícka",
    "Lovinského",
    "Ľubietovská",
    "Ľubinská",
    "Ľubľanská",
    "Ľubochnianska",
    "Ľubovnianska",
    "Lúčna",
    "Ľudové námestie",
    "Ľudovíta Fullu",
    "Luhačovická",
    "Lužická",
    "Lužná",
    "Lýcejná",
    "Lykovcová",
    "M. Hella",
    "Magnetová",
    "Macharova",
    "Majakovského",
    "Majerníkova",
    "Májkova",
    "Májová",
    "Makovického",
    "Malá",
    "Malé pálenisko",
    "Malinová",
    "Malý Draždiak",
    "Malý trh",
    "Mamateyova",
    "Mamateyova",
    "Mánesovo námestie",
    "Mariánska",
    "Marie Curie-Sklodows",
    "Márie Medveďovej",
    "Markova",
    "Marótyho",
    "Martákovej",
    "Martinčekova",
    "Martinčekova",
    "Martinengova",
    "Martinská",
    "Mateja Bela",
    "Matejkova",
    "Matičná",
    "Matúšova",
    "Medená",
    "Medzierka",
    "Medzilaborecká",
    "Merlotová",
    "Mesačná",
    "Mestská",
    "Meteorová",
    "Metodova",
    "Mickiewiczova",
    "Mierová",
    "Michalská",
    "Mikovíniho",
    "Mikulášska",
    "Miletičova",
    "Miletičova",
    "Mišíkova",
    "Mišíkova",
    "Mišíkova",
    "Mliekárenská",
    "Mlynarovičova",
    "Mlynská dolina",
    "Mlynská dolina",
    "Mlynská dolina",
    "Mlynské luhy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlyny",
    "Modranská",
    "Mojmírova",
    "Mokráň záhon",
    "Mokrohájska cesta",
    "Moldavská",
    "Molecova",
    "Moravská",
    "Moskovská",
    "Most SNP",
    "Mostová",
    "Mošovského",
    "Motýlia",
    "Moyzesova",
    "Mozartova",
    "Mraziarenská",
    "Mudroňova",
    "Mudroňova",
    "Mudroňova",
    "Muchovo námestie",
    "Murgašova",
    "Muškátová",
    "Muštová",
    "Múzejná",
    "Myjavská",
    "Mýtna",
    "Mýtna",
    "Na Baránku",
    "Na Brezinách",
    "Na Hrebienku",
    "Na Kalvárii",
    "Na Kampárke",
    "Na kopci",
    "Na križovatkách",
    "Na lánoch",
    "Na paši",
    "Na piesku",
    "Na Riviére",
    "Na Sitine",
    "Na Slavíne",
    "Na stráni",
    "Na Štyridsiatku",
    "Na úvrati",
    "Na vŕšku",
    "Na výslní",
    "Nábělkova",
    "Nábrežie arm. gen. L",
    "Nábrežná",
    "Nad Dunajom",
    "Nad lomom",
    "Nad lúčkami",
    "Nad lúčkami",
    "Nad ostrovom",
    "Nad Sihoťou",
    "Námestie 1. mája",
    "Námestie Alexandra D",
    "Námestie Biely kríž",
    "Námestie Hraničiarov",
    "Námestie Jána Pavla",
    "Námestie Ľudovíta Št",
    "Námestie Martina Ben",
    "Nám. M.R.Štefánika",
    "Námestie slobody",
    "Námestie slobody",
    "Námestie SNP",
    "Námestie SNP",
    "Námestie sv. Františ",
    "Narcisová",
    "Nedbalova",
    "Nekrasovova",
    "Neronetová",
    "Nerudova",
    "Nevädzová",
    "Nezábudková",
    "Niťová",
    "Nitrianska",
    "Nížinná",
    "Nobelova",
    "Nobelovo námestie",
    "Nová",
    "Nová Rožňavská",
    "Novackého",
    "Nové pálenisko",
    "Nové záhrady I",
    "Nové záhrady II",
    "Nové záhrady III",
    "Nové záhrady IV",
    "Nové záhrady V",
    "Nové záhrady VI",
    "Nové záhrady VII",
    "Novinárska",
    "Novobanská",
    "Novohradská",
    "Novosvetská",
    "Novosvetská",
    "Novosvetská",
    "Obežná",
    "Obchodná",
    "Očovská",
    "Odbojárov",
    "Odborárska",
    "Odborárske námestie",
    "Odborárske námestie",
    "Ohnicová",
    "Okánikova",
    "Okružná",
    "Olbrachtova",
    "Olejkárska",
    "Ondavská",
    "Ondrejovova",
    "Oravská",
    "Orechová cesta",
    "Orechový rad",
    "Oriešková",
    "Ormisova",
    "Osadná",
    "Ostravská",
    "Ostredková",
    "Osuského",
    "Osvetová",
    "Otonelská",
    "Ovručská",
    "Ovsištské námestie",
    "Pajštúnska",
    "Palackého",
    "Palárikova",
    "Palárikova",
    "Pálavská",
    "Palisády",
    "Palisády",
    "Palisády",
    "Palkovičova",
    "Panenská",
    "Pankúchova",
    "Panónska cesta",
    "Panská",
    "Papánkovo námestie",
    "Papraďová",
    "Páričkova",
    "Parková",
    "Partizánska",
    "Pasienky",
    "Paulínyho",
    "Pavlovičova",
    "Pavlovova",
    "Pavlovská",
    "Pažického",
    "Pažítková",
    "Pečnianska",
    "Pernecká",
    "Pestovateľská",
    "Peterská",
    "Petzvalova",
    "Pezinská",
    "Piesočná",
    "Piešťanská",
    "Pifflova",
    "Pilárikova",
    "Pionierska",
    "Pivoňková",
    "Planckova",
    "Planét",
    "Plátenícka",
    "Pluhová",
    "Plynárenská",
    "Plzenská",
    "Pobrežná",
    "Pod Bôrikom",
    "Pod Kalváriou",
    "Pod lesom",
    "Pod Rovnicami",
    "Pod vinicami",
    "Podhorského",
    "Podjavorinskej",
    "Podlučinského",
    "Podniková",
    "Podtatranského",
    "Pohronská",
    "Polárna",
    "Poloreckého",
    "Poľná",
    "Poľská",
    "Poludníková",
    "Porubského",
    "Poštová",
    "Považská",
    "Povraznícka",
    "Povraznícka",
    "Pražská",
    "Predstaničné námesti",
    "Prepoštská",
    "Prešernova",
    "Prešovská",
    "Prešovská",
    "Prešovská",
    "Pri Bielom kríži",
    "Pri dvore",
    "Pri Dynamitke",
    "Pri Habánskom mlyne",
    "Pri hradnej studni",
    "Pri seči",
    "Pri Starej Prachárni",
    "Pri Starom háji",
    "Pri Starom Mýte",
    "Pri strelnici",
    "Pri Suchom mlyne",
    "Pri zvonici",
    "Pribinova",
    "Pribinova",
    "Pribinova",
    "Pribišova",
    "Pribylinská",
    "Priečna",
    "Priekopy",
    "Priemyselná",
    "Priemyselná",
    "Prievozská",
    "Prievozská",
    "Prievozská",
    "Príkopova",
    "Primaciálne námestie",
    "Prístav",
    "Prístavná",
    "Prokofievova",
    "Prokopa Veľkého",
    "Prokopova",
    "Prúdová",
    "Prvosienková",
    "Púpavová",
    "Pustá",
    "Puškinova",
    "Račianska",
    "Račianska",
    "Račianske mýto",
    "Radarová",
    "Rádiová",
    "Radlinského",
    "Radničná",
    "Radničné námestie",
    "Radvanská",
    "Rajská",
    "Raketová",
    "Rákosová",
    "Rastislavova",
    "Rázusovo nábrežie",
    "Repná",
    "Rešetkova",
    "Revolučná",
    "Révová",
    "Revúcka",
    "Rezedová",
    "Riazanská",
    "Riazanská",
    "Ribayová",
    "Riečna",
    "Rigeleho",
    "Rízlingová",
    "Riznerova",
    "Robotnícka",
    "Romanova",
    "Röntgenova",
    "Rosná",
    "Rovná",
    "Rovniankova",
    "Rovníková",
    "Rozmarínová",
    "Rožňavská",
    "Rožňavská",
    "Rožňavská",
    "Rubinsteinova",
    "Rudnayovo námestie",
    "Rumančeková",
    "Rusovská cesta",
    "Ružičková",
    "Ružinovská",
    "Ružinovská",
    "Ružinovská",
    "Ružomberská",
    "Ružová dolina",
    "Ružová dolina",
    "Rybárska brána",
    "Rybné námestie",
    "Rýdziková",
    "Sabinovská",
    "Sabinovská",
    "Sad Janka Kráľa",
    "Sadová",
    "Sartorisova",
    "Sasinkova",
    "Seberíniho",
    "Sečovská",
    "Sedlárska",
    "Sedmokrásková",
    "Segnerova",
    "Sekulská",
    "Semianova",
    "Senická",
    "Senná",
    "Schillerova",
    "Schody pri starej vo",
    "Sibírska",
    "Sienkiewiczova",
    "Silvánska",
    "Sinokvetná",
    "Skalická cesta",
    "Skalná",
    "Sklenárova",
    "Sklenárska",
    "Sládkovičova",
    "Sladová",
    "Slávičie údolie",
    "Slavín",
    "Slepá",
    "Sliačska",
    "Sliezska",
    "Slivková",
    "Slnečná",
    "Slovanská",
    "Slovinská",
    "Slovnaftská",
    "Slowackého",
    "Smetanova",
    "Smikova",
    "Smolenická",
    "Smolnícka",
    "Smrečianska",
    "Soferove schody",
    "Socháňova",
    "Sokolská",
    "Solivarská",
    "Sološnická",
    "Somolického",
    "Somolického",
    "Sosnová",
    "Spišská",
    "Spojná",
    "Spoločenská",
    "Sputniková",
    "Sreznevského",
    "Srnčia",
    "Stachanovská",
    "Stálicová",
    "Staničná",
    "Stará Černicová",
    "Stará Ivánska cesta",
    "Stará Prievozská",
    "Stará Vajnorská",
    "Stará vinárska",
    "Staré Grunty",
    "Staré ihrisko",
    "Staré záhrady",
    "Starhradská",
    "Starohájska",
    "Staromestská",
    "Staroturský chodník",
    "Staviteľská",
    "Stodolova",
    "Stoklasová",
    "Strakova",
    "Strážnická",
    "Strážny dom",
    "Strečnianska",
    "Stredná",
    "Strelecká",
    "Strmá cesta",
    "Strojnícka",
    "Stropkovská",
    "Struková",
    "Studená",
    "Stuhová",
    "Súbežná",
    "Súhvezdná",
    "Suché mýto",
    "Suchohradská",
    "Súkennícka",
    "Súľovská",
    "Sumbalova",
    "Súmračná",
    "Súťažná",
    "Svätého Vincenta",
    "Svätoplukova",
    "Svätoplukova",
    "Svätovojtešská",
    "Svetlá",
    "Svíbová",
    "Svidnícka",
    "Svoradova",
    "Svrčia",
    "Syslia",
    "Šafárikovo námestie",
    "Šafárikovo námestie",
    "Šafránová",
    "Šagátova",
    "Šalviová",
    "Šancová",
    "Šancová",
    "Šancová",
    "Šancová",
    "Šándorova",
    "Šarišská",
    "Šášovská",
    "Šaštínska",
    "Ševčenkova",
    "Šintavská",
    "Šípková",
    "Škarniclova",
    "Školská",
    "Škovránčia",
    "Škultétyho",
    "Šoltésovej",
    "Špieszova",
    "Špitálska",
    "Športová",
    "Šrobárovo námestie",
    "Šťastná",
    "Štedrá",
    "Štefánikova",
    "Štefánikova",
    "Štefánikova",
    "Štefanovičova",
    "Štefunkova",
    "Štetinova",
    "Štiavnická",
    "Štúrova",
    "Štyndlova",
    "Šulekova",
    "Šulekova",
    "Šulekova",
    "Šumavská",
    "Šuňavcova",
    "Šustekova",
    "Švabinského",
    "Tabaková",
    "Tablicova",
    "Táborská",
    "Tajovského",
    "Tallerova",
    "Tehelná",
    "Technická",
    "Tekovská",
    "Telocvičná",
    "Tematínska",
    "Teplická",
    "Terchovská",
    "Teslova",
    "Tetmayerova",
    "Thurzova",
    "Tichá",
    "Tilgnerova",
    "Timravina",
    "Tobrucká",
    "Tokajícka",
    "Tolstého",
    "Tománkova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Topoľčianska",
    "Topoľová",
    "Továrenská",
    "Trebišovská",
    "Trebišovská",
    "Trebišovská",
    "Trenčianska",
    "Treskoňova",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavské mýto",
    "Tŕňová",
    "Trojdomy",
    "Tučkova",
    "Tupolevova",
    "Turbínova",
    "Turčianska",
    "Turnianska",
    "Tvarožkova",
    "Tylova",
    "Tyršovo nábrežie",
    "Údernícka",
    "Údolná",
    "Uhorková",
    "Ukrajinská",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica Imricha Karvaš",
    "Ulica Jozefa Krónera",
    "Ulica Viktora Tegelh",
    "Úprkova",
    "Úradnícka",
    "Uránová",
    "Urbánkova",
    "Ursínyho",
    "Uršulínska",
    "Úzka",
    "V záhradách",
    "Vajanského nábrežie",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Valašská",
    "Valchárska",
    "Vansovej",
    "Vápenná",
    "Varínska",
    "Varšavská",
    "Varšavská",
    "Vavilovova",
    "Vavrínova",
    "Vazovova",
    "Včelárska",
    "Velehradská",
    "Veltlínska",
    "Ventúrska",
    "Veterná",
    "Veternicová",
    "Vetvová",
    "Viedenská cesta",
    "Viedenská cesta",
    "Vietnamská",
    "Vígľašská",
    "Vihorlatská",
    "Viktorínova",
    "Vilová",
    "Vincenta Hložníka",
    "Vínna",
    "Vlastenecké námestie",
    "Vlčkova",
    "Vlčkova",
    "Vlčkova",
    "Vodný vrch",
    "Votrubova",
    "Vrábeľská",
    "Vrakunská cesta",
    "Vranovská",
    "Vretenová",
    "Vrchná",
    "Vrútocká",
    "Vyhliadka",
    "Vyhnianska cesta",
    "Vysoká",
    "Vyšehradská",
    "Vyšná",
    "Wattova",
    "Wilsonova",
    "Wolkrova",
    "Za Kasárňou",
    "Za sokolovňou",
    "Za Stanicou",
    "Za tehelňou",
    "Záborského",
    "Zadunajská cesta",
    "Záhorácka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhrebská",
    "Záhrebská",
    "Zálužická",
    "Zámocká",
    "Zámocké schody",
    "Zámočnícka",
    "Západná",
    "Západný rad",
    "Záporožská",
    "Zátišie",
    "Závodníkova",
    "Zelená",
    "Zelinárska",
    "Zimná",
    "Zlaté piesky",
    "Zlaté schody",
    "Znievska",
    "Zohorská",
    "Zochova",
    "Zrinského",
    "Zvolenská",
    "Žabí majer",
    "Žabotova",
    "Žehrianska",
    "Železná",
    "Železničiarska",
    "Žellova",
    "Žiarska",
    "Židovská",
    "Žilinská",
    "Žilinská",
    "Živnostenská",
    "Žižkova",
    "Župné námestie"
  ],
  "street_name": [
    "#{street}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Slovensko"
  ]
};
sk.company = {
  "suffix": [
    "s.r.o.",
    "a.s.",
    "v.o.s."
  ],
  "adjective": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
    ],
    "descriptor":
    [
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun":
    [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
  ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_noun": [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich",
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} #{suffix}",
    "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
  ]
};
sk.internet = {
  "free_email": [
    "gmail.com",
    "zoznam.sk",
    "azet.sk"
  ],
  "domain_suffix": [
    "sk",
    "com",
    "net",
    "eu",
    "org"
  ]
};
sk.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
sk.name = {
  "man_first_name": [
    "Drahoslav",
    "Severín",
    "Alexej",
    "Ernest",
    "Rastislav",
    "Radovan",
    "Dobroslav",
    "Dalibor",
    "Vincent",
    "Miloš",
    "Timotej",
    "Gejza",
    "Bohuš",
    "Alfonz",
    "Gašpar",
    "Emil",
    "Erik",
    "Blažej",
    "Zdenko",
    "Dezider",
    "Arpád",
    "Valentín",
    "Pravoslav",
    "Jaromír",
    "Roman",
    "Matej",
    "Frederik",
    "Viktor",
    "Alexander",
    "Radomír",
    "Albín",
    "Bohumil",
    "Kazimír",
    "Fridrich",
    "Radoslav",
    "Tomáš",
    "Alan",
    "Branislav",
    "Bruno",
    "Gregor",
    "Vlastimil",
    "Boleslav",
    "Eduard",
    "Jozef",
    "Víťazoslav",
    "Blahoslav",
    "Beňadik",
    "Adrián",
    "Gabriel",
    "Marián",
    "Emanuel",
    "Miroslav",
    "Benjamín",
    "Hugo",
    "Richard",
    "Izidor",
    "Zoltán",
    "Albert",
    "Igor",
    "Július",
    "Aleš",
    "Fedor",
    "Rudolf",
    "Valér",
    "Marcel",
    "Ervín",
    "Slavomír",
    "Vojtech",
    "Juraj",
    "Marek",
    "Jaroslav",
    "Žigmund",
    "Florián",
    "Roland",
    "Pankrác",
    "Servác",
    "Bonifác",
    "Svetozár",
    "Bernard",
    "Júlia",
    "Urban",
    "Dušan",
    "Viliam",
    "Ferdinand",
    "Norbert",
    "Róbert",
    "Medard",
    "Zlatko",
    "Anton",
    "Vasil",
    "Vít",
    "Adolf",
    "Vratislav",
    "Alfréd",
    "Alojz",
    "Ján",
    "Tadeáš",
    "Ladislav",
    "Peter",
    "Pavol",
    "Miloslav",
    "Prokop",
    "Cyril",
    "Metod",
    "Patrik",
    "Oliver",
    "Ivan",
    "Kamil",
    "Henrich",
    "Drahomír",
    "Bohuslav",
    "Iľja",
    "Daniel",
    "Vladimír",
    "Jakub",
    "Krištof",
    "Ignác",
    "Gustáv",
    "Jerguš",
    "Dominik",
    "Oskar",
    "Vavrinec",
    "Ľubomír",
    "Mojmír",
    "Leonard",
    "Tichomír",
    "Filip",
    "Bartolomej",
    "Ľudovít",
    "Samuel",
    "Augustín",
    "Belo",
    "Oleg",
    "Bystrík",
    "Ctibor",
    "Ľudomil",
    "Konštantín",
    "Ľuboslav",
    "Matúš",
    "Móric",
    "Ľuboš",
    "Ľubor",
    "Vladislav",
    "Cyprián",
    "Václav",
    "Michal",
    "Jarolím",
    "Arnold",
    "Levoslav",
    "František",
    "Dionýz",
    "Maximilián",
    "Koloman",
    "Boris",
    "Lukáš",
    "Kristián",
    "Vendelín",
    "Sergej",
    "Aurel",
    "Demeter",
    "Denis",
    "Hubert",
    "Karol",
    "Imrich",
    "René",
    "Bohumír",
    "Teodor",
    "Tibor",
    "Maroš",
    "Martin",
    "Svätopluk",
    "Stanislav",
    "Leopold",
    "Eugen",
    "Félix",
    "Klement",
    "Kornel",
    "Milan",
    "Vratko",
    "Ondrej",
    "Andrej",
    "Edmund",
    "Oldrich",
    "Oto",
    "Mikuláš",
    "Ambróz",
    "Radúz",
    "Bohdan",
    "Adam",
    "Štefan",
    "Dávid",
    "Silvester"
  ],
  "woman_first_name": [
    "Alexandra",
    "Karina",
    "Daniela",
    "Andrea",
    "Antónia",
    "Bohuslava",
    "Dáša",
    "Malvína",
    "Kristína",
    "Nataša",
    "Bohdana",
    "Drahomíra",
    "Sára",
    "Zora",
    "Tamara",
    "Ema",
    "Tatiana",
    "Erika",
    "Veronika",
    "Agáta",
    "Dorota",
    "Vanda",
    "Zoja",
    "Gabriela",
    "Perla",
    "Ida",
    "Liana",
    "Miloslava",
    "Vlasta",
    "Lívia",
    "Eleonóra",
    "Etela",
    "Romana",
    "Zlatica",
    "Anežka",
    "Bohumila",
    "Františka",
    "Angela",
    "Matilda",
    "Svetlana",
    "Ľubica",
    "Alena",
    "Soňa",
    "Vieroslava",
    "Zita",
    "Miroslava",
    "Irena",
    "Milena",
    "Estera",
    "Justína",
    "Dana",
    "Danica",
    "Jela",
    "Jaroslava",
    "Jarmila",
    "Lea",
    "Anastázia",
    "Galina",
    "Lesana",
    "Hermína",
    "Monika",
    "Ingrida",
    "Viktória",
    "Blažena",
    "Žofia",
    "Sofia",
    "Gizela",
    "Viola",
    "Gertrúda",
    "Zina",
    "Júlia",
    "Juliana",
    "Želmíra",
    "Ela",
    "Vanesa",
    "Iveta",
    "Vilma",
    "Petronela",
    "Žaneta",
    "Xénia",
    "Karolína",
    "Lenka",
    "Laura",
    "Stanislava",
    "Margaréta",
    "Dobroslava",
    "Blanka",
    "Valéria",
    "Paulína",
    "Sidónia",
    "Adriána",
    "Beáta",
    "Petra",
    "Melánia",
    "Diana",
    "Berta",
    "Patrícia",
    "Lujza",
    "Amália",
    "Milota",
    "Nina",
    "Margita",
    "Kamila",
    "Dušana",
    "Magdaléna",
    "Oľga",
    "Anna",
    "Hana",
    "Božena",
    "Marta",
    "Libuša",
    "Božidara",
    "Dominika",
    "Hortenzia",
    "Jozefína",
    "Štefánia",
    "Ľubomíra",
    "Zuzana",
    "Darina",
    "Marcela",
    "Milica",
    "Elena",
    "Helena",
    "Lýdia",
    "Anabela",
    "Jana",
    "Silvia",
    "Nikola",
    "Ružena",
    "Nora",
    "Drahoslava",
    "Linda",
    "Melinda",
    "Rebeka",
    "Rozália",
    "Regína",
    "Alica",
    "Marianna",
    "Miriama",
    "Martina",
    "Mária",
    "Jolana",
    "Ľudomila",
    "Ľudmila",
    "Olympia",
    "Eugénia",
    "Ľuboslava",
    "Zdenka",
    "Edita",
    "Michaela",
    "Stela",
    "Viera",
    "Natália",
    "Eliška",
    "Brigita",
    "Valentína",
    "Terézia",
    "Vladimíra",
    "Hedviga",
    "Uršuľa",
    "Alojza",
    "Kvetoslava",
    "Sabína",
    "Dobromila",
    "Klára",
    "Simona",
    "Aurélia",
    "Denisa",
    "Renáta",
    "Irma",
    "Agnesa",
    "Klaudia",
    "Alžbeta",
    "Elvíra",
    "Cecília",
    "Emília",
    "Katarína",
    "Henrieta",
    "Bibiána",
    "Barbora",
    "Marína",
    "Izabela",
    "Hilda",
    "Otília",
    "Lucia",
    "Branislava",
    "Bronislava",
    "Ivica",
    "Albína",
    "Kornélia",
    "Sláva",
    "Slávka",
    "Judita",
    "Dagmara",
    "Adela",
    "Nadežda",
    "Eva",
    "Filoména",
    "Ivana",
    "Milada"
  ],
  "man_last_name": [
    "Antal",
    "Babka",
    "Bahna",
    "Bahno",
    "Baláž",
    "Baran",
    "Baranka",
    "Bartovič",
    "Bartoš",
    "Bača",
    "Bernolák",
    "Beňo",
    "Bicek",
    "Bielik",
    "Blaho",
    "Bondra",
    "Bosák",
    "Boška",
    "Brezina",
    "Bukovský",
    "Chalupka",
    "Chudík",
    "Cibula",
    "Cibulka",
    "Cibuľa",
    "Cyprich",
    "Cíger",
    "Danko",
    "Daňko",
    "Daňo",
    "Debnár",
    "Dej",
    "Dekýš",
    "Doležal",
    "Dočolomanský",
    "Droppa",
    "Dubovský",
    "Dudek",
    "Dula",
    "Dulla",
    "Dusík",
    "Dvonč",
    "Dzurjanin",
    "Dávid",
    "Fabian",
    "Fabián",
    "Fajnor",
    "Farkašovský",
    "Fico",
    "Filc",
    "Filip",
    "Finka",
    "Ftorek",
    "Gašpar",
    "Gašparovič",
    "Gocník",
    "Gregor",
    "Greguš",
    "Grznár",
    "Hablák",
    "Habšuda",
    "Halda",
    "Haluška",
    "Halák",
    "Hanko",
    "Hanzal",
    "Haščák",
    "Heretik",
    "Hečko",
    "Hlaváček",
    "Hlinka",
    "Holub",
    "Holuby",
    "Hossa",
    "Hoza",
    "Hraško",
    "Hric",
    "Hrmo",
    "Hrušovský",
    "Huba",
    "Ihnačák",
    "Janeček",
    "Janoška",
    "Jantošovič",
    "Janík",
    "Janček",
    "Jedľovský",
    "Jendek",
    "Jonata",
    "Jurina",
    "Jurkovič",
    "Jurík",
    "Jánošík",
    "Kafenda",
    "Kaliský",
    "Karul",
    "Keníž",
    "Klapka",
    "Kmeť",
    "Kolesár",
    "Kollár",
    "Kolnik",
    "Kolník",
    "Kolár",
    "Korec",
    "Kostka",
    "Kostrec",
    "Kováč",
    "Kováčik",
    "Koza",
    "Kočiš",
    "Krajíček",
    "Krajči",
    "Krajčo",
    "Krajčovič",
    "Krajčír",
    "Králik",
    "Krúpa",
    "Kubík",
    "Kyseľ",
    "Kállay",
    "Labuda",
    "Lepšík",
    "Lipták",
    "Lisický",
    "Lubina",
    "Lukáč",
    "Lupták",
    "Líška",
    "Madej",
    "Majeský",
    "Malachovský",
    "Malíšek",
    "Mamojka",
    "Marcinko",
    "Marián",
    "Masaryk",
    "Maslo",
    "Matiaško",
    "Medveď",
    "Melcer",
    "Mečiar",
    "Michalík",
    "Mihalik",
    "Mihál",
    "Mihálik",
    "Mikloško",
    "Mikulík",
    "Mikuš",
    "Mikúš",
    "Milota",
    "Mináč",
    "Mišík",
    "Mojžiš",
    "Mokroš",
    "Mora",
    "Moravčík",
    "Mydlo",
    "Nemec",
    "Nitra",
    "Novák",
    "Obšut",
    "Ondruš",
    "Otčenáš",
    "Pauko",
    "Pavlikovský",
    "Pavúk",
    "Pašek",
    "Paška",
    "Paško",
    "Pelikán",
    "Petrovický",
    "Petruška",
    "Peško",
    "Plch",
    "Plekanec",
    "Podhradský",
    "Podkonický",
    "Poliak",
    "Pupák",
    "Rak",
    "Repiský",
    "Romančík",
    "Rus",
    "Ružička",
    "Rybníček",
    "Rybár",
    "Rybárik",
    "Samson",
    "Sedliak",
    "Senko",
    "Sklenka",
    "Skokan",
    "Skutecký",
    "Slašťan",
    "Sloboda",
    "Slobodník",
    "Slota",
    "Slovák",
    "Smrek",
    "Stodola",
    "Straka",
    "Strnisko",
    "Svrbík",
    "Sámel",
    "Sýkora",
    "Tatar",
    "Tatarka",
    "Tatár",
    "Tatárka",
    "Thomka",
    "Tomeček",
    "Tomka",
    "Tomko",
    "Truben",
    "Turčok",
    "Uram",
    "Urblík",
    "Vajcík",
    "Vajda",
    "Valach",
    "Valachovič",
    "Valent",
    "Valuška",
    "Vanek",
    "Vesel",
    "Vicen",
    "Višňovský",
    "Vlach",
    "Vojtek",
    "Vydarený",
    "Zajac",
    "Zima",
    "Zimka",
    "Záborský",
    "Zúbrik",
    "Čapkovič",
    "Čaplovič",
    "Čarnogurský",
    "Čierny",
    "Čobrda",
    "Ďaďo",
    "Ďurica",
    "Ďuriš",
    "Šidlo",
    "Šimonovič",
    "Škriniar",
    "Škultéty",
    "Šmajda",
    "Šoltés",
    "Šoltýs",
    "Štefan",
    "Štefanka",
    "Šulc",
    "Šurka",
    "Švehla",
    "Šťastný"
  ],
  "woman_last_name": [
    "Antalová",
    "Babková",
    "Bahnová",
    "Balážová",
    "Baranová",
    "Baranková",
    "Bartovičová",
    "Bartošová",
    "Bačová",
    "Bernoláková",
    "Beňová",
    "Biceková",
    "Bieliková",
    "Blahová",
    "Bondrová",
    "Bosáková",
    "Bošková",
    "Brezinová",
    "Bukovská",
    "Chalupková",
    "Chudíková",
    "Cibulová",
    "Cibulková",
    "Cyprichová",
    "Cígerová",
    "Danková",
    "Daňková",
    "Daňová",
    "Debnárová",
    "Dejová",
    "Dekýšová",
    "Doležalová",
    "Dočolomanská",
    "Droppová",
    "Dubovská",
    "Dudeková",
    "Dulová",
    "Dullová",
    "Dusíková",
    "Dvončová",
    "Dzurjaninová",
    "Dávidová",
    "Fabianová",
    "Fabiánová",
    "Fajnorová",
    "Farkašovská",
    "Ficová",
    "Filcová",
    "Filipová",
    "Finková",
    "Ftoreková",
    "Gašparová",
    "Gašparovičová",
    "Gocníková",
    "Gregorová",
    "Gregušová",
    "Grznárová",
    "Habláková",
    "Habšudová",
    "Haldová",
    "Halušková",
    "Haláková",
    "Hanková",
    "Hanzalová",
    "Haščáková",
    "Heretiková",
    "Hečková",
    "Hlaváčeková",
    "Hlinková",
    "Holubová",
    "Holubyová",
    "Hossová",
    "Hozová",
    "Hrašková",
    "Hricová",
    "Hrmová",
    "Hrušovská",
    "Hubová",
    "Ihnačáková",
    "Janečeková",
    "Janošková",
    "Jantošovičová",
    "Janíková",
    "Jančeková",
    "Jedľovská",
    "Jendeková",
    "Jonatová",
    "Jurinová",
    "Jurkovičová",
    "Juríková",
    "Jánošíková",
    "Kafendová",
    "Kaliská",
    "Karulová",
    "Kenížová",
    "Klapková",
    "Kmeťová",
    "Kolesárová",
    "Kollárová",
    "Kolniková",
    "Kolníková",
    "Kolárová",
    "Korecová",
    "Kostkaová",
    "Kostrecová",
    "Kováčová",
    "Kováčiková",
    "Kozová",
    "Kočišová",
    "Krajíčeková",
    "Krajčová",
    "Krajčovičová",
    "Krajčírová",
    "Králiková",
    "Krúpová",
    "Kubíková",
    "Kyseľová",
    "Kállayová",
    "Labudová",
    "Lepšíková",
    "Liptáková",
    "Lisická",
    "Lubinová",
    "Lukáčová",
    "Luptáková",
    "Líšková",
    "Madejová",
    "Majeská",
    "Malachovská",
    "Malíšeková",
    "Mamojková",
    "Marcinková",
    "Mariánová",
    "Masaryková",
    "Maslová",
    "Matiašková",
    "Medveďová",
    "Melcerová",
    "Mečiarová",
    "Michalíková",
    "Mihaliková",
    "Mihálová",
    "Miháliková",
    "Miklošková",
    "Mikulíková",
    "Mikušová",
    "Mikúšová",
    "Milotová",
    "Mináčová",
    "Mišíková",
    "Mojžišová",
    "Mokrošová",
    "Morová",
    "Moravčíková",
    "Mydlová",
    "Nemcová",
    "Nováková",
    "Obšutová",
    "Ondrušová",
    "Otčenášová",
    "Pauková",
    "Pavlikovská",
    "Pavúková",
    "Pašeková",
    "Pašková",
    "Pelikánová",
    "Petrovická",
    "Petrušková",
    "Pešková",
    "Plchová",
    "Plekanecová",
    "Podhradská",
    "Podkonická",
    "Poliaková",
    "Pupáková",
    "Raková",
    "Repiská",
    "Romančíková",
    "Rusová",
    "Ružičková",
    "Rybníčeková",
    "Rybárová",
    "Rybáriková",
    "Samsonová",
    "Sedliaková",
    "Senková",
    "Sklenková",
    "Skokanová",
    "Skutecká",
    "Slašťanová",
    "Slobodová",
    "Slobodníková",
    "Slotová",
    "Slováková",
    "Smreková",
    "Stodolová",
    "Straková",
    "Strnisková",
    "Svrbíková",
    "Sámelová",
    "Sýkorová",
    "Tatarová",
    "Tatarková",
    "Tatárová",
    "Tatárkaová",
    "Thomková",
    "Tomečeková",
    "Tomková",
    "Trubenová",
    "Turčoková",
    "Uramová",
    "Urblíková",
    "Vajcíková",
    "Vajdová",
    "Valachová",
    "Valachovičová",
    "Valentová",
    "Valušková",
    "Vaneková",
    "Veselová",
    "Vicenová",
    "Višňovská",
    "Vlachová",
    "Vojteková",
    "Vydarená",
    "Zajacová",
    "Zimová",
    "Zimková",
    "Záborská",
    "Zúbriková",
    "Čapkovičová",
    "Čaplovičová",
    "Čarnogurská",
    "Čierná",
    "Čobrdová",
    "Ďaďová",
    "Ďuricová",
    "Ďurišová",
    "Šidlová",
    "Šimonovičová",
    "Škriniarová",
    "Škultétyová",
    "Šmajdová",
    "Šoltésová",
    "Šoltýsová",
    "Štefanová",
    "Štefanková",
    "Šulcová",
    "Šurková",
    "Švehlová",
    "Šťastná"
  ],
  "prefix": [
    "Ing.",
    "Mgr.",
    "JUDr.",
    "MUDr."
  ],
  "suffix": [
    "Phd."
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{prefix} #{man_first_name} #{man_last_name}",
    "#{prefix} #{woman_first_name} #{woman_last_name}",
    "#{man_first_name} #{man_last_name} #{suffix}",
    "#{woman_first_name} #{woman_last_name} #{suffix}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}"
  ]
};
sk.phone_number = {
  "formats": [
    "09## ### ###",
    "0## #### ####",
    "0# #### ####",
    "+421 ### ### ###"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/sv.js":[function(require,module,exports){
var sv = {};
module["exports"] = sv;
sv.title = "Swedish";
sv.address = {
  "city_prefix": [
    "Söder",
    "Norr",
    "Väst",
    "Öster",
    "Aling",
    "Ar",
    "Av",
    "Bo",
    "Br",
    "Bå",
    "Ek",
    "En",
    "Esk",
    "Fal",
    "Gäv",
    "Göte",
    "Ha",
    "Helsing",
    "Karl",
    "Krist",
    "Kram",
    "Kung",
    "Kö",
    "Lyck",
    "Ny"
  ],
  "city_suffix": [
    "stad",
    "land",
    "sås",
    "ås",
    "holm",
    "tuna",
    "sta",
    "berg",
    "löv",
    "borg",
    "mora",
    "hamn",
    "fors",
    "köping",
    "by",
    "hult",
    "torp",
    "fred",
    "vik"
  ],
  "country": [
    "Ryssland",
    "Kanada",
    "Kina",
    "USA",
    "Brasilien",
    "Australien",
    "Indien",
    "Argentina",
    "Kazakstan",
    "Algeriet",
    "DR Kongo",
    "Danmark",
    "Färöarna",
    "Grönland",
    "Saudiarabien",
    "Mexiko",
    "Indonesien",
    "Sudan",
    "Libyen",
    "Iran",
    "Mongoliet",
    "Peru",
    "Tchad",
    "Niger",
    "Angola",
    "Mali",
    "Sydafrika",
    "Colombia",
    "Etiopien",
    "Bolivia",
    "Mauretanien",
    "Egypten",
    "Tanzania",
    "Nigeria",
    "Venezuela",
    "Namibia",
    "Pakistan",
    "Moçambique",
    "Turkiet",
    "Chile",
    "Zambia",
    "Marocko",
    "Västsahara",
    "Burma",
    "Afghanistan",
    "Somalia",
    "Centralafrikanska republiken",
    "Sydsudan",
    "Ukraina",
    "Botswana",
    "Madagaskar",
    "Kenya",
    "Frankrike",
    "Franska Guyana",
    "Jemen",
    "Thailand",
    "Spanien",
    "Turkmenistan",
    "Kamerun",
    "Papua Nya Guinea",
    "Sverige",
    "Uzbekistan",
    "Irak",
    "Paraguay",
    "Zimbabwe",
    "Japan",
    "Tyskland",
    "Kongo",
    "Finland",
    "Malaysia",
    "Vietnam",
    "Norge",
    "Svalbard",
    "Jan Mayen",
    "Elfenbenskusten",
    "Polen",
    "Italien",
    "Filippinerna",
    "Ecuador",
    "Burkina Faso",
    "Nya Zeeland",
    "Gabon",
    "Guinea",
    "Storbritannien",
    "Ghana",
    "Rumänien",
    "Laos",
    "Uganda",
    "Guyana",
    "Oman",
    "Vitryssland",
    "Kirgizistan",
    "Senegal",
    "Syrien",
    "Kambodja",
    "Uruguay",
    "Tunisien",
    "Surinam",
    "Nepal",
    "Bangladesh",
    "Tadzjikistan",
    "Grekland",
    "Nicaragua",
    "Eritrea",
    "Nordkorea",
    "Malawi",
    "Benin",
    "Honduras",
    "Liberia",
    "Bulgarien",
    "Kuba",
    "Guatemala",
    "Island",
    "Sydkorea",
    "Ungern",
    "Portugal",
    "Jordanien",
    "Serbien",
    "Azerbajdzjan",
    "Österrike",
    "Förenade Arabemiraten",
    "Tjeckien",
    "Panama",
    "Sierra Leone",
    "Irland",
    "Georgien",
    "Sri Lanka",
    "Litauen",
    "Lettland",
    "Togo",
    "Kroatien",
    "Bosnien och Hercegovina",
    "Costa Rica",
    "Slovakien",
    "Dominikanska republiken",
    "Bhutan",
    "Estland",
    "Danmark",
    "Färöarna",
    "Grönland",
    "Nederländerna",
    "Schweiz",
    "Guinea-Bissau",
    "Taiwan",
    "Moldavien",
    "Belgien",
    "Lesotho",
    "Armenien",
    "Albanien",
    "Salomonöarna",
    "Ekvatorialguinea",
    "Burundi",
    "Haiti",
    "Rwanda",
    "Makedonien",
    "Djibouti",
    "Belize",
    "Israel",
    "El Salvador",
    "Slovenien",
    "Fiji",
    "Kuwait",
    "Swaziland",
    "Timor-Leste",
    "Montenegro",
    "Bahamas",
    "Vanuatu",
    "Qatar",
    "Gambia",
    "Jamaica",
    "Kosovo",
    "Libanon",
    "Cypern",
    "Brunei",
    "Trinidad och Tobago",
    "Kap Verde",
    "Samoa",
    "Luxemburg",
    "Komorerna",
    "Mauritius",
    "São Tomé och Príncipe",
    "Kiribati",
    "Dominica",
    "Tonga",
    "Mikronesiens federerade stater",
    "Singapore",
    "Bahrain",
    "Saint Lucia",
    "Andorra",
    "Palau",
    "Seychellerna",
    "Antigua och Barbuda",
    "Barbados",
    "Saint Vincent och Grenadinerna",
    "Grenada",
    "Malta",
    "Maldiverna",
    "Saint Kitts och Nevis",
    "Marshallöarna",
    "Liechtenstein",
    "San Marino",
    "Tuvalu",
    "Nauru",
    "Monaco",
    "Vatikanstaten"
  ],
  "common_street_suffix": [
    "s Väg",
    "s Gata"
  ],
  "street_prefix": [
    "Västra",
    "Östra",
    "Norra",
    "Södra",
    "Övre",
    "Undre"
  ],
  "street_root": [
    "Björk",
    "Järnvägs",
    "Ring",
    "Skol",
    "Skogs",
    "Ny",
    "Gran",
    "Idrotts",
    "Stor",
    "Kyrk",
    "Industri",
    "Park",
    "Strand",
    "Skol",
    "Trädgård",
    "Ängs",
    "Kyrko",
    "Villa",
    "Ek",
    "Kvarn",
    "Stations",
    "Back",
    "Furu",
    "Gen",
    "Fabriks",
    "Åker",
    "Bäck",
    "Asp"
  ],
  "street_suffix": [
    "vägen",
    "gatan",
    "gränden",
    "gärdet",
    "allén"
  ],
  "state": [
    "Blekinge",
    "Dalarna",
    "Gotland",
    "Gävleborg",
    "Göteborg",
    "Halland",
    "Jämtland",
    "Jönköping",
    "Kalmar",
    "Kronoberg",
    "Norrbotten",
    "Skaraborg",
    "Skåne",
    "Stockholm",
    "Södermanland",
    "Uppsala",
    "Värmland",
    "Västerbotten",
    "Västernorrland",
    "Västmanland",
    "Älvsborg",
    "Örebro",
    "Östergötland"
  ],
  "city": [
    "#{city_prefix}#{city_suffix}"
  ],
  "street_name": [
    "#{street_root}#{street_suffix}",
    "#{street_prefix} #{street_root}#{street_suffix}",
    "#{Name.first_name}#{common_street_suffix}",
    "#{Name.last_name}#{common_street_suffix}"
  ],
  "postcode": [
    "#####"
  ],
  "building_number": [
    "###",
    "##",
    "#"
  ],
  "secondary_address": [
    "Lgh. ###",
    "Hus ###"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Sverige"
  ]
};
sv.company = {
  "suffix": [
    "Gruppen",
    "AB",
    "HB",
    "Group",
    "Investment",
    "Kommanditbolag",
    "Aktiebolag"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} #{suffix}"
  ]
};
sv.internet = {
  "domain_suffix": [
    "se",
    "nu",
    "info",
    "com",
    "org"
  ]
};
sv.name = {
  "first_name_women": [
    "Maria",
    "Anna",
    "Margareta",
    "Elisabeth",
    "Eva",
    "Birgitta",
    "Kristina",
    "Karin",
    "Elisabet",
    "Marie"
  ],
  "first_name_men": [
    "Erik",
    "Lars",
    "Karl",
    "Anders",
    "Per",
    "Johan",
    "Nils",
    "Lennart",
    "Emil",
    "Hans"
  ],
  "last_name": [
    "Johansson",
    "Andersson",
    "Karlsson",
    "Nilsson",
    "Eriksson",
    "Larsson",
    "Olsson",
    "Persson",
    "Svensson",
    "Gustafsson"
  ],
  "prefix": [
    "Dr.",
    "Prof.",
    "PhD."
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{prefix} #{first_name_men} #{last_name}",
    "#{prefix} #{first_name_women} #{last_name}"
  ]
};
sv.phone_number = {
  "formats": [
    "####-#####",
    "####-######"
  ]
};
sv.cell_phone = {
  "common_cell_prefix": [
    56,
    62,
    59
  ],
  "formats": [
    "#{common_cell_prefix}-###-####"
  ]
};
sv.commerce = {
  "color": [
    "vit",
    "silver",
    "grå",
    "svart",
    "röd",
    "grön",
    "blå",
    "gul",
    "lila",
    "indigo",
    "guld",
    "brun",
    "rosa",
    "purpur",
    "korall"
  ],
  "department": [
    "Böcker",
    "Filmer",
    "Musik",
    "Spel",
    "Elektronik",
    "Datorer",
    "Hem",
    "Trädgård",
    "Verktyg",
    "Livsmedel",
    "Hälsa",
    "Skönhet",
    "Leksaker",
    "Klädsel",
    "Skor",
    "Smycken",
    "Sport"
  ],
  "product_name": {
    "adjective": [
      "Liten",
      "Ergonomisk",
      "Robust",
      "Intelligent",
      "Söt",
      "Otrolig",
      "Fatastisk",
      "Praktisk",
      "Slimmad",
      "Grym"
    ],
    "material": [
      "Stål",
      "Metall",
      "Trä",
      "Betong",
      "Plast",
      "Bomul",
      "Grnit",
      "Gummi",
      "Latex"
    ],
    "product": [
      "Stol",
      "Bil",
      "Dator",
      "Handskar",
      "Pants",
      "Shirt",
      "Table",
      "Shoes",
      "Hat"
    ]
  }
};
sv.team = {
  "suffix": [
    "IF",
    "FF",
    "BK",
    "HK",
    "AIF",
    "SK",
    "FC",
    "SK",
    "BoIS",
    "FK",
    "BIS",
    "FIF",
    "IK"
  ],
  "name": [
    "#{Address.city} #{suffix}"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/vi.js":[function(require,module,exports){
var vi = {};
module["exports"] = vi;
vi.title = "Vietnamese";
vi.address = {
  "city_root": [
    "Bắc Giang",
    "Bắc Kạn",
    "Bắc Ninh",
    "Cao Bằng",
    "Điện Biên",
    "Hà Giang",
    "Hà Nam",
    "Hà Tây",
    "Hải Dương",
    "TP Hải Phòng",
    "Hòa Bình",
    "Hưng Yên",
    "Lai Châu",
    "Lào Cai",
    "Lạng Sơn",
    "Nam Định",
    "Ninh Bình",
    "Phú Thọ",
    "Quảng Ninh",
    "Sơn La",
    "Thái Bình",
    "Thái Nguyên",
    "Tuyên Quang",
    "Vĩnh Phúc",
    "Yên Bái",
    "TP Đà Nẵng",
    "Bình Định",
    "Đắk Lắk",
    "Đắk Nông",
    "Gia Lai",
    "Hà Tĩnh",
    "Khánh Hòa",
    "Kon Tum",
    "Nghệ An",
    "Phú Yên",
    "Quảng Bình",
    "Quảng Nam",
    "Quảng Ngãi",
    "Quảng Trị",
    "Thanh Hóa",
    "Thừa Thiên Huế",
    "TP TP. Hồ Chí Minh",
    "An Giang",
    "Bà Rịa Vũng Tàu",
    "Bạc Liêu",
    "Bến Tre",
    "Bình Dương",
    "Bình Phước",
    "Bình Thuận",
    "Cà Mau",
    "TP Cần Thơ",
    "Đồng Nai",
    "Đồng Tháp",
    "Hậu Giang",
    "Kiên Giang",
    "Lâm Đồng",
    "Long An",
    "Ninh Thuận",
    "Sóc Trăng",
    "Tây Ninh",
    "Tiền Giang",
    "Trà Vinh",
    "Vĩnh Long"
  ],
  "city": [
    "#{city_root}"
  ],
  "postcode": "/[A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}/",
  "county": [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire",
    "Central",
    "Cheshire",
    "Cleveland",
    "Clwyd",
    "Cornwall",
    "County Antrim",
    "County Armagh",
    "County Down",
    "County Fermanagh",
    "County Londonderry",
    "County Tyrone",
    "Cumbria",
    "Derbyshire",
    "Devon",
    "Dorset",
    "Dumfries and Galloway",
    "Durham",
    "Dyfed",
    "East Sussex",
    "Essex",
    "Fife",
    "Gloucestershire",
    "Grampian",
    "Greater Manchester",
    "Gwent",
    "Gwynedd County",
    "Hampshire",
    "Herefordshire",
    "Hertfordshire",
    "Highlands and Islands",
    "Humberside",
    "Isle of Wight",
    "Kent",
    "Lancashire",
    "Leicestershire",
    "Lincolnshire",
    "Lothian",
    "Merseyside",
    "Mid Glamorgan",
    "Norfolk",
    "North Yorkshire",
    "Northamptonshire",
    "Northumberland",
    "Nottinghamshire",
    "Oxfordshire",
    "Powys",
    "Rutland",
    "Shropshire",
    "Somerset",
    "South Glamorgan",
    "South Yorkshire",
    "Staffordshire",
    "Strathclyde",
    "Suffolk",
    "Surrey",
    "Tayside",
    "Tyne and Wear",
    "Việt Nam",
    "Warwickshire",
    "West Glamorgan",
    "West Midlands",
    "West Sussex",
    "West Yorkshire",
    "Wiltshire",
    "Worcestershire"
  ],
  "default_country": [
    "Việt Nam"
  ]
};
vi.internet = {
  "domain_suffix": [
    "com",
    "net",
    "info",
    "vn",
    "com.vn"
  ]
};
vi.phone_number = {
  "formats": [
    "01#### #####",
    "01### ######",
    "01#1 ### ####",
    "011# ### ####",
    "02# #### ####",
    "03## ### ####",
    "055 #### ####",
    "056 #### ####",
    "0800 ### ####",
    "08## ### ####",
    "09## ### ####",
    "016977 ####",
    "01### #####",
    "0500 ######",
    "0800 ######"
  ]
};
vi.cell_phone = {
  "formats": [
    "074## ######",
    "075## ######",
    "076## ######",
    "077## ######",
    "078## ######",
    "079## ######"
  ]
};
vi.name = {
  "first_name": [
    "Phạm",
    "Nguyễn",
    "Trần",
    "Lê",
    "Lý",
    "Hoàng",
    "Phan",
    "Vũ",
    "Tăng",
    "Đặng",
    "Bùi",
    "Đỗ",
    "Hồ",
    "Ngô",
    "Dương",
    "Đào",
    "Đoàn",
    "Vương",
    "Trịnh",
    "Đinh",
    "Lâm",
    "Phùng",
    "Mai",
    "Tô",
    "Trương",
    "Hà"
  ],
  "last_name": [
    "Nam",
    "Trung",
    "Thanh",
    "Thị",
    "Văn",
    "Dương",
    "Tăng",
    "Quốc",
    "Như",
    "Phạm",
    "Nguyễn",
    "Trần",
    "Lê",
    "Lý",
    "Hoàng",
    "Phan",
    "Vũ",
    "Tăng",
    "Đặng",
    "Bùi",
    "Đỗ",
    "Hồ",
    "Ngô",
    "Dương",
    "Đào",
    "Đoàn",
    "Vương",
    "Trịnh",
    "Đinh",
    "Lâm",
    "Phùng",
    "Mai",
    "Tô",
    "Trương",
    "Hà",
    "Vinh",
    "Nhung",
    "Hòa",
    "Tiến",
    "Tâm",
    "Bửu",
    "Loan",
    "Hiền",
    "Hải",
    "Vân",
    "Kha",
    "Minh",
    "Nhân",
    "Triệu",
    "Tuân",
    "Hữu",
    "Đức",
    "Phú",
    "Khoa",
    "Thắgn",
    "Sơn",
    "Dung",
    "Tú",
    "Trinh",
    "Thảo",
    "Sa",
    "Kim",
    "Long",
    "Thi",
    "Cường",
    "Ngọc",
    "Sinh",
    "Khang",
    "Phong",
    "Thắm",
    "Thu",
    "Thủy",
    "Nhàn"
  ],
  "name": [
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name} #{last_name}"
  ]
};
vi.company = {
  "prefix": [
    "Công ty",
    "Cty TNHH",
    "Cty",
    "Cửa hàng",
    "Trung tâm",
    "Chi nhánh"
  ],
  "name": [
    "#{prefix} #{Name.last_name}"
  ]
};
vi.lorem = {
  "words": [
    "đã",
    "đang",
    "ừ",
    "ờ",
    "á",
    "không",
    "biết",
    "gì",
    "hết",
    "đâu",
    "nha",
    "thế",
    "thì",
    "là",
    "đánh",
    "đá",
    "đập",
    "phá",
    "viết",
    "vẽ",
    "tô",
    "thuê",
    "mướn",
    "mượn",
    "mua",
    "một",
    "hai",
    "ba",
    "bốn",
    "năm",
    "sáu",
    "bảy",
    "tám",
    "chín",
    "mười",
    "thôi",
    "việc",
    "nghỉ",
    "làm",
    "nhà",
    "cửa",
    "xe",
    "đạp",
    "ác",
    "độc",
    "khoảng",
    "khoan",
    "thuyền",
    "tàu",
    "bè",
    "lầu",
    "xanh",
    "đỏ",
    "tím",
    "vàng",
    "kim",
    "chỉ",
    "khâu",
    "may",
    "vá",
    "em",
    "anh",
    "yêu",
    "thương",
    "thích",
    "con",
    "cái",
    "bàn",
    "ghế",
    "tủ",
    "quần",
    "áo",
    "nón",
    "dép",
    "giày",
    "lỗi",
    "được",
    "ghét",
    "giết",
    "chết",
    "hết",
    "tôi",
    "bạn",
    "tui",
    "trời",
    "trăng",
    "mây",
    "gió",
    "máy",
    "hàng",
    "hóa",
    "leo",
    "núi",
    "bơi",
    "biển",
    "chìm",
    "xuồng",
    "nước",
    "ngọt",
    "ruộng",
    "đồng",
    "quê",
    "hương"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/locales/zh_CN.js":[function(require,module,exports){
var zh_CN = {};
module["exports"] = zh_CN;
zh_CN.title = "Chinese";
zh_CN.address = {
  "city_prefix": [
    "长",
    "上",
    "南",
    "西",
    "北",
    "诸",
    "宁",
    "珠",
    "武",
    "衡",
    "成",
    "福",
    "厦",
    "贵",
    "吉",
    "海",
    "太",
    "济",
    "安",
    "吉",
    "包"
  ],
  "city_suffix": [
    "沙市",
    "京市",
    "宁市",
    "安市",
    "乡县",
    "海市",
    "码市",
    "汉市",
    "阳市",
    "都市",
    "州市",
    "门市",
    "阳市",
    "口市",
    "原市",
    "南市",
    "徽市",
    "林市",
    "头市"
  ],
  "building_number": [
    "#####",
    "####",
    "###",
    "##",
    "#"
  ],
  "street_suffix": [
    "巷",
    "街",
    "路",
    "桥",
    "侬",
    "旁",
    "中心",
    "栋"
  ],
  "postcode": [
    "######"
  ],
  "state": [
    "北京市",
    "上海市",
    "天津市",
    "重庆市",
    "黑龙江省",
    "吉林省",
    "辽宁省",
    "内蒙古",
    "河北省",
    "新疆",
    "甘肃省",
    "青海省",
    "陕西省",
    "宁夏",
    "河南省",
    "山东省",
    "山西省",
    "安徽省",
    "湖北省",
    "湖南省",
    "江苏省",
    "四川省",
    "贵州省",
    "云南省",
    "广西省",
    "西藏",
    "浙江省",
    "江西省",
    "广东省",
    "福建省",
    "台湾省",
    "海南省",
    "香港",
    "澳门"
  ],
  "state_abbr": [
    "京",
    "沪",
    "津",
    "渝",
    "黑",
    "吉",
    "辽",
    "蒙",
    "冀",
    "新",
    "甘",
    "青",
    "陕",
    "宁",
    "豫",
    "鲁",
    "晋",
    "皖",
    "鄂",
    "湘",
    "苏",
    "川",
    "黔",
    "滇",
    "桂",
    "藏",
    "浙",
    "赣",
    "粤",
    "闽",
    "台",
    "琼",
    "港",
    "澳"
  ],
  "city": [
    "#{city_prefix}#{city_suffix}"
  ],
  "street_name": [
    "#{Name.last_name}#{street_suffix}"
  ],
  "street_address": [
    "#{street_name}#{building_number}号"
  ],
  "default_country": [
    "中国"
  ]
};
zh_CN.name = {
  "first_name": [
    "王",
    "李",
    "张",
    "刘",
    "陈",
    "杨",
    "黄",
    "吴",
    "赵",
    "周",
    "徐",
    "孙",
    "马",
    "朱",
    "胡",
    "林",
    "郭",
    "何",
    "高",
    "罗",
    "郑",
    "梁",
    "谢",
    "宋",
    "唐",
    "许",
    "邓",
    "冯",
    "韩",
    "曹",
    "曾",
    "彭",
    "萧",
    "蔡",
    "潘",
    "田",
    "董",
    "袁",
    "于",
    "余",
    "叶",
    "蒋",
    "杜",
    "苏",
    "魏",
    "程",
    "吕",
    "丁",
    "沈",
    "任",
    "姚",
    "卢",
    "傅",
    "钟",
    "姜",
    "崔",
    "谭",
    "廖",
    "范",
    "汪",
    "陆",
    "金",
    "石",
    "戴",
    "贾",
    "韦",
    "夏",
    "邱",
    "方",
    "侯",
    "邹",
    "熊",
    "孟",
    "秦",
    "白",
    "江",
    "阎",
    "薛",
    "尹",
    "段",
    "雷",
    "黎",
    "史",
    "龙",
    "陶",
    "贺",
    "顾",
    "毛",
    "郝",
    "龚",
    "邵",
    "万",
    "钱",
    "严",
    "赖",
    "覃",
    "洪",
    "武",
    "莫",
    "孔"
  ],
  "last_name": [
    "绍齐",
    "博文",
    "梓晨",
    "胤祥",
    "瑞霖",
    "明哲",
    "天翊",
    "凯瑞",
    "健雄",
    "耀杰",
    "潇然",
    "子涵",
    "越彬",
    "钰轩",
    "智辉",
    "致远",
    "俊驰",
    "雨泽",
    "烨磊",
    "晟睿",
    "文昊",
    "修洁",
    "黎昕",
    "远航",
    "旭尧",
    "鸿涛",
    "伟祺",
    "荣轩",
    "越泽",
    "浩宇",
    "瑾瑜",
    "皓轩",
    "擎苍",
    "擎宇",
    "志泽",
    "子轩",
    "睿渊",
    "弘文",
    "哲瀚",
    "雨泽",
    "楷瑞",
    "建辉",
    "晋鹏",
    "天磊",
    "绍辉",
    "泽洋",
    "鑫磊",
    "鹏煊",
    "昊强",
    "伟宸",
    "博超",
    "君浩",
    "子骞",
    "鹏涛",
    "炎彬",
    "鹤轩",
    "越彬",
    "风华",
    "靖琪",
    "明辉",
    "伟诚",
    "明轩",
    "健柏",
    "修杰",
    "志泽",
    "弘文",
    "峻熙",
    "嘉懿",
    "煜城",
    "懿轩",
    "烨伟",
    "苑博",
    "伟泽",
    "熠彤",
    "鸿煊",
    "博涛",
    "烨霖",
    "烨华",
    "煜祺",
    "智宸",
    "正豪",
    "昊然",
    "明杰",
    "立诚",
    "立轩",
    "立辉",
    "峻熙",
    "弘文",
    "熠彤",
    "鸿煊",
    "烨霖",
    "哲瀚",
    "鑫鹏",
    "昊天",
    "思聪",
    "展鹏",
    "笑愚",
    "志强",
    "炫明",
    "雪松",
    "思源",
    "智渊",
    "思淼",
    "晓啸",
    "天宇",
    "浩然",
    "文轩",
    "鹭洋",
    "振家",
    "乐驹",
    "晓博",
    "文博",
    "昊焱",
    "立果",
    "金鑫",
    "锦程",
    "嘉熙",
    "鹏飞",
    "子默",
    "思远",
    "浩轩",
    "语堂",
    "聪健",
    "明",
    "文",
    "果",
    "思",
    "鹏",
    "驰",
    "涛",
    "琪",
    "浩",
    "航",
    "彬"
  ],
  "name": [
    "#{first_name}#{last_name}"
  ]
};
zh_CN.phone_number = {
  "formats": [
    "###-########",
    "####-########",
    "###########"
  ]
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/lorem.js":[function(require,module,exports){
var faker = require('../index');
var Helpers = require('./helpers');

var lorem = {
    words: function (num) {
        if (typeof num == 'undefined') { num = 3; }
        return Helpers.shuffle(faker.definitions.lorem.words).slice(0, num);
    },

    sentence: function (wordCount, range) {
        if (typeof wordCount == 'undefined') { wordCount = 3; }
        if (typeof range == 'undefined') { range = 7; }

        // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
        //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

        return  faker.lorem.words(wordCount + faker.random.number(range)).join(' ');
    },

    sentences: function (sentenceCount) {
        if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
        var sentences = [];
        for (sentenceCount; sentenceCount > 0; sentenceCount--) {
            sentences.push(faker.lorem.sentence());
        }
        return sentences.join("\n");
    },

    paragraph: function (sentenceCount) {
        if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
        return faker.lorem.sentences(sentenceCount + faker.random.number(3));
    },

    paragraphs: function (paragraphCount) {
        if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }
        var paragraphs = [];
        for (paragraphCount; paragraphCount > 0; paragraphCount--) {
            paragraphs.push(faker.lorem.paragraph());
        }
        return paragraphs.join("\n \r\t");
    }
};

module.exports = lorem;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js","./helpers":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/helpers.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/name.js":[function(require,module,exports){
var faker = require('../index');

var _name = {

    firstName: function () {
      if (typeof faker.definitions.name.male_first_name !== "undefined" && typeof faker.definitions.name.female_first_name !== "undefined") {
        // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
        // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
        var rand = faker.random.number(1);
        if (rand === 0) {
          return faker.random.array_element(faker.locales[faker.locale].name.male_first_name)
        } else {
          return faker.random.array_element(faker.locales[faker.locale].name.female_first_name)
        }
      }
      return faker.random.array_element(faker.definitions.name.first_name)
    },

    lastName: function () {
      if (typeof faker.definitions.name.male_last_name !== "undefined" && typeof faker.defintions.name.female_last_name !== "undefined") {
        // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
        // see above comment of firstName method
        var rand = faker.random.number(1);
        if (rand === 0) {
          return faker.random.array_element(faker.locales[faker.locale].name.male_last_name);
        } else {
          return faker.random.array_element(faker.locales[faker.locale].name.female_last_name);
        }
      }
      return faker.random.array_element(faker.definitions.name.last_name);
    },

    findName: function (firstName, lastName) {
        var r = faker.random.number(8);
        firstName = firstName || faker.name.firstName();
        lastName = lastName || faker.name.lastName();
        switch (r) {
        case 0:
            return faker.name.prefix() + " " + firstName + " " + lastName;
        case 1:
            return firstName + " " + lastName + " " + faker.name.suffix();
        }

        return firstName + " " + lastName;
    },

    prefix: function () {
        return faker.random.array_element(faker.definitions.name.prefix);
    },

    suffix: function () {
        return faker.random.array_element(faker.definitions.name.suffix);
    },

};

module.exports = _name;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/phone_number.js":[function(require,module,exports){
var faker = require('../index');

var phone = {
    phoneNumber: function (format) {
        format = format || faker.phone.phoneFormats();
        return faker.helpers.replaceSymbolWithNumber(format);
    },

    // FIXME: this is strange passing in an array index.
    phoneNumberFormat: function (phoneFormatsArrayIndex) {
        phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
        return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
    },

    phoneFormats: function () {
      return faker.random.array_element(faker.definitions.phone_number.formats);
    }

};

module.exports = phone;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/lib/random.js":[function(require,module,exports){
var mersenne = require('../vendor/mersenne');
var faker = require('../index');

var random = {
    // returns a single random number based on a max number or range
    number: function (options) {

        if (typeof options === "number") {
          options = {
            max: options
          };
        }

        options = options || {};

        if (typeof options.min === "undefined") {
          options.min = 0;
        }

        if (typeof options.max === "undefined") {
          options.max = 1;
        }
        if (typeof options.precision === "undefined") {
          options.precision = 1;
        }

        // Make the range inclusive of the max value
        var max = options.max;
        if (max > 0) {
          max += options.precision;
        } 
          
        var randomNumber = options.precision * Math.floor(
          mersenne.rand(max / options.precision, options.min / options.precision));

        return randomNumber;

    },

    // takes an array and returns a random element of the array
    array_element: function (array) {
        array = array || ["a", "b", "c"];
        var r = faker.random.number({ max: array.length - 1 });
        return array[r];
    },

    // takes an object and returns the randomly key or value
    object_element: function (object, field) {
        object = object || {};
        var array = Object.keys(object);
        var key = faker.random.array_element(array);

        return field === "key" ? key : object[key];
    },

    uuid : function () {
        var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        var replacePlaceholders = function (placeholder) {
            var random = Math.random()*16|0;
            var value = placeholder == 'x' ? random : (random &0x3 | 0x8);
            return value.toString(16);
        };
        return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
    }
};

module.exports = random;

},{"../index":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js","../vendor/mersenne":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/vendor/mersenne.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/vendor/mersenne.js":[function(require,module,exports){
// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
// an almost straight conversion from the original program, mt19937ar.c,
// translated by y. okada on July 17, 2006.
// and modified a little at july 20, 2006, but there are not any substantial differences.
// in this program, procedure descriptions and comments of original source code were not removed.
// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
// lines commented with /* and */ are original comments.
// lines commented with // are additional comments in this JavaScript version.
// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

function MersenneTwister19937()
{
	/* constants should be scoped inside the class */
	var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
	/* Period parameters */
	//c//#define N 624
	//c//#define M 397
	//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
	//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
	//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
	N = 624;
	M = 397;
	MATRIX_A = 0x9908b0df;   /* constant vector a */
	UPPER_MASK = 0x80000000; /* most significant w-r bits */
	LOWER_MASK = 0x7fffffff; /* least significant r bits */
	//c//static unsigned long mt[N]; /* the array for the state vector  */
	//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
	var mt = new Array(N);   /* the array for the state vector  */
	var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */

	function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
	{
		return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
	}

	function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
	}

	function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return unsigned32((n1 + n2) & 0xffffffff)
	}

	function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		var sum = 0;
		for (var i = 0; i < 32; ++i){
			if ((n1 >>> i) & 0x1){
				sum = addition32(sum, unsigned32(n2 << i));
			}
		}
		return sum;
	}

	/* initializes mt[N] with a seed */
	//c//void init_genrand(unsigned long s)
	this.init_genrand = function (s)
	{
		//c//mt[0]= s & 0xffffffff;
		mt[0]= unsigned32(s & 0xffffffff);
		for (mti=1; mti<N; mti++) {
			mt[mti] = 
			//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
			addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
			/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
			/* In the previous versions, MSBs of the seed affect   */
			/* only MSBs of the array mt[].                        */
			/* 2002/01/09 modified by Makoto Matsumoto             */
			//c//mt[mti] &= 0xffffffff;
			mt[mti] = unsigned32(mt[mti] & 0xffffffff);
			/* for >32 bit machines */
		}
	}

	/* initialize by an array with array-length */
	/* init_key is the array for initializing keys */
	/* key_length is its length */
	/* slight change for C++, 2004/2/26 */
	//c//void init_by_array(unsigned long init_key[], int key_length)
	this.init_by_array = function (init_key, key_length)
	{
		//c//int i, j, k;
		var i, j, k;
		//c//init_genrand(19650218);
		this.init_genrand(19650218);
		i=1; j=0;
		k = (N>key_length ? N : key_length);
		for (; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
			//c//	+ init_key[j] + j; /* non linear */
			mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
			mt[i] = 
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			unsigned32(mt[i] & 0xffffffff);
			i++; j++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
			if (j>=key_length) j=0;
		}
		for (k=N-1; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
			//c//- i; /* non linear */
			mt[i] = subtraction32(unsigned32((dbg=mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			mt[i] = unsigned32(mt[i] & 0xffffffff);
			i++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
		}
		mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
	}

    /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
    var mag01 = [0x0, MATRIX_A];

	/* generates a random number on [0,0xffffffff]-interval */
	//c//unsigned long genrand_int32(void)
	this.genrand_int32 = function ()
	{
		//c//unsigned long y;
		//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
		var y;
		/* mag01[x] = x * MATRIX_A  for x=0,1 */

		if (mti >= N) { /* generate N words at one time */
			//c//int kk;
			var kk;

			if (mti == N+1)   /* if init_genrand() has not been called, */
				//c//init_genrand(5489); /* a default initial seed is used */
				this.init_genrand(5489); /* a default initial seed is used */

			for (kk=0;kk<N-M;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			for (;kk<N-1;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
			//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
			y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
			mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
			mti = 0;
		}

		y = mt[mti++];

		/* Tempering */
		//c//y ^= (y >> 11);
		//c//y ^= (y << 7) & 0x9d2c5680;
		//c//y ^= (y << 15) & 0xefc60000;
		//c//y ^= (y >> 18);
		y = unsigned32(y ^ (y >>> 11));
		y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
		y = unsigned32(y ^ ((y << 15) & 0xefc60000));
		y = unsigned32(y ^ (y >>> 18));

		return y;
	}

	/* generates a random number on [0,0x7fffffff]-interval */
	//c//long genrand_int31(void)
	this.genrand_int31 = function ()
	{
		//c//return (genrand_int32()>>1);
		return (this.genrand_int32()>>>1);
	}

	/* generates a random number on [0,1]-real-interval */
	//c//double genrand_real1(void)
	this.genrand_real1 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967295.0);
		return this.genrand_int32()*(1.0/4294967295.0);
		/* divided by 2^32-1 */
	}

	/* generates a random number on [0,1)-real-interval */
	//c//double genrand_real2(void)
	this.genrand_real2 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967296.0);
		return this.genrand_int32()*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on (0,1)-real-interval */
	//c//double genrand_real3(void)
	this.genrand_real3 = function ()
	{
		//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
		return ((this.genrand_int32()) + 0.5)*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on [0,1) with 53-bit resolution*/
	//c//double genrand_res53(void)
	this.genrand_res53 = function ()
	{
		//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
		var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
		return(a*67108864.0+b)*(1.0/9007199254740992.0);
	}
	/* These real versions are due to Isaku Wada, 2002/01/09 added */
}

//  Exports: Public API

//  Export the twister class
exports.MersenneTwister19937 = MersenneTwister19937;

//  Export a simplified function to generate random numbers
var gen = new MersenneTwister19937;
gen.init_genrand((new Date).getTime() % 1000000000);

// Added max, min range functionality, Marak Squires Sept 11 2014
exports.rand = function(max, min) {
    if (!max)
        {
        min = 0;
        max = 32768;
        }
    return Math.floor(gen.genrand_real2() * (max - min) + min);
}
exports.seed = function(S) {
    if (typeof(S) != 'number')
        {
        throw new Error("seed(S) must take numeric argument; is " + typeof(S));
        }
    gen.init_genrand(S);
}
exports.seed_array = function(A) {
    if (typeof(A) != 'object')
        {
        throw new Error("seed_array(A) must take array of numbers; is " + typeof(A));
        }
    gen.init_by_array(A);
}


},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/vendor/password-generator.js":[function(require,module,exports){
/*
 * password-generator
 * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
 * MIT Licensed
 */
(function (root) {

  var localName, consonant, letter, password, vowel;
  letter = /[a-zA-Z]$/;
  vowel = /[aeiouAEIOU]$/;
  consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;


  // Defines the name of the local variable the passwordGenerator library will use
  // this is specially useful if window.passwordGenerator is already being used
  // by your application and you want a different name. For example:
  //    // Declare before including the passwordGenerator library
  //    var localPasswordGeneratorLibraryName = 'pass';
  localName = root.localPasswordGeneratorLibraryName || "generatePassword",

  password = function (length, memorable, pattern, prefix) {
    var char, n;
    if (length == null) {
      length = 10;
    }
    if (memorable == null) {
      memorable = true;
    }
    if (pattern == null) {
      pattern = /\w/;
    }
    if (prefix == null) {
      prefix = '';
    }
    if (prefix.length >= length) {
      return prefix;
    }
    if (memorable) {
      if (prefix.match(consonant)) {
        pattern = vowel;
      } else {
        pattern = consonant;
      }
    }
    n = Math.floor(Math.random() * 94) + 33;
    char = String.fromCharCode(n);
    if (memorable) {
      char = char.toLowerCase();
    }
    if (!char.match(pattern)) {
      return password(length, memorable, pattern, prefix);
    }
    return password(length, memorable, pattern, "" + prefix + char);
  };


  ((typeof exports !== 'undefined') ? exports : root)[localName] = password;
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = password;
    }
  }

  // Establish the root object, `window` in the browser, or `global` on the server.
}(this));
},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/vendor/user-agent.js":[function(require,module,exports){
/*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
*/

function rnd(a, b) {
    //calling rnd() with no arguments is identical to rnd(0, 100)
    a = a || 0;
    b = b || 100;

    if (typeof b === 'number' && typeof a === 'number') {
        //rnd(int min, int max) returns integer between min, max
        return (function (min, max) {
            if (min > max) {
                throw new RangeError('expected min <= max; got min = ' + min + ', max = ' + max);
            }
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }(a, b));
    }

    if (Object.prototype.toString.call(a) === "[object Array]") {
        //returns a random element from array (a), even weighting
        return a[Math.floor(Math.random() * a.length)];
    }

    if (a && typeof a === 'object') {
        //returns a random key from the passed object; keys are weighted by the decimal probability in their value
        return (function (obj) {
            var rand = rnd(0, 100) / 100, min = 0, max = 0, key, return_val;

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    max = obj[key] + min;
                    return_val = key;
                    if (rand >= min && rand <= max) {
                        break;
                    }
                    min = min + obj[key];
                }
            }

            return return_val;
        }(a));
    }

    throw new TypeError('Invalid arguments passed to rnd. (' + (b ? a + ', ' + b : a) + ')');
}

function randomLang() {
    return rnd(['AB', 'AF', 'AN', 'AR', 'AS', 'AZ', 'BE', 'BG', 'BN', 'BO', 'BR', 'BS', 'CA', 'CE', 'CO', 'CS',
                'CU', 'CY', 'DA', 'DE', 'EL', 'EN', 'EO', 'ES', 'ET', 'EU', 'FA', 'FI', 'FJ', 'FO', 'FR', 'FY',
                'GA', 'GD', 'GL', 'GV', 'HE', 'HI', 'HR', 'HT', 'HU', 'HY', 'ID', 'IS', 'IT', 'JA', 'JV', 'KA',
                'KG', 'KO', 'KU', 'KW', 'KY', 'LA', 'LB', 'LI', 'LN', 'LT', 'LV', 'MG', 'MK', 'MN', 'MO', 'MS',
                'MT', 'MY', 'NB', 'NE', 'NL', 'NN', 'NO', 'OC', 'PL', 'PT', 'RM', 'RO', 'RU', 'SC', 'SE', 'SK',
                'SL', 'SO', 'SQ', 'SR', 'SV', 'SW', 'TK', 'TR', 'TY', 'UK', 'UR', 'UZ', 'VI', 'VO', 'YI', 'ZH']);
}

function randomBrowserAndOS() {
    var browser = rnd({
        chrome:    .45132810566,
        iexplorer: .27477061836,
        firefox:   .19384170608,
        safari:    .06186781118,
        opera:     .01574236955
    }),
    os = {
        chrome:  {win: .89,  mac: .09 , lin: .02},
        firefox: {win: .83,  mac: .16,  lin: .01},
        opera:   {win: .91,  mac: .03 , lin: .06},
        safari:  {win: .04 , mac: .96  },
        iexplorer: ['win']
    };

    return [browser, rnd(os[browser])];
}

function randomProc(arch) {
    var procs = {
        lin:['i686', 'x86_64'],
        mac: {'Intel' : .48, 'PPC': .01, 'U; Intel':.48, 'U; PPC' :.01},
        win:['', 'WOW64', 'Win64; x64']
    };
    return rnd(procs[arch]);
}

function randomRevision(dots) {
    var return_val = '';
    //generate a random revision
    //dots = 2 returns .x.y where x & y are between 0 and 9
    for (var x = 0; x < dots; x++) {
        return_val += '.' + rnd(0, 9);
    }
    return return_val;
}

var version_string = {
    net: function () {
        return [rnd(1, 4), rnd(0, 9), rnd(10000, 99999), rnd(0, 9)].join('.');
    },
    nt: function () {
        return rnd(5, 6) + '.' + rnd(0, 3);
    },
    ie: function () {
        return rnd(7, 11);
    },
    trident: function () {
        return rnd(3, 7) + '.' + rnd(0, 1);
    },
    osx: function (delim) {
        return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.');
    },
    chrome: function () {
        return [rnd(13, 39), 0, rnd(800, 899), 0].join('.');
    },
    presto: function () {
        return '2.9.' + rnd(160, 190);
    },
    presto2: function () {
        return rnd(10, 12) + '.00';
    },
    safari: function () {
        return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0,2);
    }
};

var browser = {
    firefox: function firefox(arch) {
        //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
        var firefox_ver = rnd(5, 15) + randomRevision(2),
            gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
            proc = randomProc(arch),
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + ((proc) ? '; ' + proc : '')
            : (arch === 'mac') ? '(Macintosh; ' + proc + ' Mac OS X ' + version_string.osx()
            : '(X11; Linux ' + proc;

        return 'Mozilla/5.0 ' + os_ver + '; rv:' + firefox_ver.slice(0, -2) + ') ' + gecko_ver;
    },

    iexplorer: function iexplorer() {
        var ver = version_string.ie();

        if (ver >= 11) {
            //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
            return 'Mozilla/5.0 (Windows NT 6.' + rnd(1,3) + '; Trident/7.0; ' + rnd(['Touch; ', '']) + 'rv:11.0) like Gecko';
        }

        //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
        return 'Mozilla/5.0 (compatible; MSIE ' + ver + '.0; Windows NT ' + version_string.nt() + '; Trident/' +
            version_string.trident() + ((rnd(0, 1) === 1) ? '; .NET CLR ' + version_string.net() : '') + ')';
    },

    opera: function opera(arch) {
        //http://www.opera.com/docs/history/
        var presto_ver = ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')',
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + '; U; ' + randomLang() + presto_ver
            : (arch === 'lin') ? '(X11; Linux ' + randomProc(arch) + '; U; ' + randomLang() + presto_ver
            : '(Macintosh; Intel Mac OS X ' + version_string.osx() + ' U; ' + randomLang() + ' Presto/' +
            version_string.presto() + ' Version/' + version_string.presto2() + ')';

        return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver;
    },

    safari: function safari(arch) {
        var safari = version_string.safari(),
            ver = rnd(4, 7) + '.' + rnd(0,1) + '.' + rnd(0,10),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X '+ version_string.osx('_') + ' rv:' + rnd(2, 6) + '.0; '+ randomLang() + ') '
            : '(Windows; U; Windows NT ' + version_string.nt() + ')';

        return 'Mozilla/5.0 ' + os_ver + 'AppleWebKit/' + safari + ' (KHTML, like Gecko) Version/' + ver + ' Safari/' + safari;
    },

    chrome: function chrome(arch) {
        var safari = version_string.safari(),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ') '
            : (arch === 'win') ? '(Windows; U; Windows NT ' + version_string.nt() + ')'
            : '(X11; Linux ' + randomProc(arch);

        return 'Mozilla/5.0 ' + os_ver + ' AppleWebKit/' + safari + ' (KHTML, like Gecko) Chrome/' + version_string.chrome() + ' Safari/' + safari;
    }
};

exports.generate = function generate() {
    var random = randomBrowserAndOS();
    return browser[random[0]](random[1]);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular-localforage/dist/angular-localForage.min.js":[function(require,module,exports){
(function (global){

; angular = global.angular = require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js");
localforage = global.localforage = require("localforage");
;__browserify_shim_require__=require;(function browserifyShim(module, define, require) {
/**
 * angular-localforage - Angular service & directive for https://github.com/mozilla/localForage (Offline storage, improved.)
 * @version v1.2.2
 * @link https://github.com/ocombe/angular-localForage
 * @license MIT
 * @author Olivier Combe <olivier.combe@gmail.com>
 */
!function(e,r){"use strict";if("function"==typeof define&&define.amd)define(["localforage"],function(t){r(e.angular,t)});else if("object"==typeof exports){var t=e.angular||window&&window.angular;module.exports=r(t,__browserify_shim_require__("localforage"))}else r(e.angular,e.localforage)}(this,function(e,r){"use strict";var t=e.module("LocalForageModule",["ng"]);t.provider("$localForage",function(){var t={},n={name:"lf"},o={setItem:!1,removeItem:!1},i={};this.setNotify=function(e,r){o={setItem:e,removeItem:r}},this.config=function(r){if(!e.isObject(r))throw new Error("The config parameter should be an object");e.extend(n,r)},this.$get=["$rootScope","$q","$parse",function(a,f,s){var u=function(t){e.isDefined(t)?this._localforage=r.createInstance(t):(this._localforage=r,r.config(n))};u.prototype.createInstance=function(r){if(e.isObject(r)){if(r=e.extend({},n,r),e.isDefined(t[r.name]))throw new Error("A localForage instance with the name "+r.name+" is already defined.");return t[r.name]=new u(r),t[r.name]}throw new Error("The parameter should be a config object.")},u.prototype.instance=function(r){if(e.isUndefined(r))return t[n.name];if(e.isString(r)){if(e.isDefined(t[r]))return t[r];throw new Error("No localForage instance of that name exists.")}throw new Error("The parameter should be a string.")},u.prototype.setDriver=function(e){return this._localforage.setDriver(e)},u.prototype.driver=function(){return this._localforage.driver()},u.prototype.setItem=function(r,t){if(e.isUndefined(r))throw new Error("You must define a key to set");var n=this;if(e.isArray(r)){if(!e.isArray(t))throw new Error("If you set an array of keys, the values should be an array too");var i=[];return e.forEach(r,function(e,r){i.push(n.setItem(e,t[r]))}),f.all(i)}var s=f.defer(),u=arguments,c="undefined"!=typeof Blob&&t instanceof Blob?t:e.copy(t);return e.isObject(c)&&e.isDefined(c.$promise)&&delete c.$promise,n._localforage.setItem(n.prefix()+r,c).then(function(){o.setItem&&a.$broadcast("LocalForageModule.setItem",{key:r,newvalue:c,driver:n.driver()}),s.resolve(c)},function(e){n.onError(e,u,n.setItem,s)}),s.promise},u.prototype.getItem=function(r){if(e.isUndefined(r))throw new Error("You must define a key to get");var t,n=f.defer(),o=arguments,i=this;if(e.isArray(r)){var a=[],s=0;t=i._localforage.iterate(function(e,t){var n=r.indexOf(i.prefix()+t);return n>-1&&(a[n]=e,s++),s===r.length?a:void 0})}else t=i._localforage.getItem(i.prefix()+r);return t.then(function(e){n.resolve(e||a)},function(e){i.onError(e,o,i.getItem,n)}),n.promise},u.prototype.iterate=function(r){if(e.isUndefined(r))throw new Error("You must define a callback to iterate");var t=f.defer(),n=arguments,o=this;return o._localforage.iterate(r).then(function(e){t.resolve(e)},function(e){o.onError(e,n,o.iterate,t)}),t.promise},u.prototype.removeItem=function(r){if(e.isUndefined(r))throw new Error("You must define a key to remove");var t=this;if(e.isArray(r)){var n=[];return e.forEach(r,function(e){n.push(t.removeItem(e))}),f.all(n)}var i=f.defer(),s=arguments;return t._localforage.removeItem(t.prefix()+r).then(function(){o.removeItem&&a.$broadcast("LocalForageModule.removeItem",{key:r,driver:t.driver()}),i.resolve()},function(e){t.onError(e,s,t.removeItem,i)}),i.promise},u.prototype.pull=function(r){if(e.isUndefined(r))throw new Error("You must define a key to pull");var t=this,n=f.defer(),o=function(e){n.reject(e)};return t.getItem(r).then(function(e){t.removeItem(r).then(function(){n.resolve(e)},o)},o),n.promise},u.prototype.clear=function(){var e=f.defer(),r=arguments,t=this;return t._localforage.clear().then(function(){e.resolve()},function(n){t.onError(n,r,t.clear,e)}),e.promise},u.prototype.key=function(r){if(e.isUndefined(r))throw new Error("You must define a position to get for the key function");var t=f.defer(),n=arguments,o=this;return o._localforage.key(r).then(function(e){t.resolve(e)},function(e){o.onError(e,n,o.key,t)}),t.promise};var c=function(){var e=f.defer(),r=arguments,t=this;return t._localforage.keys().then(function(r){if(n.oldPrefix&&"localStorageWrapper"===t.driver()){for(var o=[],i=0,a=r.length;a>i;i++)o.push(r[i].substr(t.prefix().length,r[i].length));r=o}e.resolve(r)},function(n){t.onError(n,r,t.keys,e)}),e.promise};return u.prototype.keys=c,u.prototype.getKeys=c,u.prototype.length=function(){var e=f.defer(),r=arguments,t=this;return t._localforage.length().then(function(r){e.resolve(r)},function(n){t.onError(n,r,length,e)}),e.promise},u.prototype.bind=function(r,o){if(e.isString(o))o={key:o};else if(!e.isObject(o)||e.isUndefined(o.key))throw new Error("You must define a key to bind");var a={defaultValue:"",name:n.name};o=e.extend({},a,o);var f=t[o.name];if(e.isUndefined(f))throw new Error("You must use the name of an existing instance");var u=o.scopeKey||o.key,c=s(u);return f.getItem(o.key).then(function(t){return t?c.assign(r,t):o.defaultValue&&(c.assign(r,o.defaultValue),f.setItem(o.key,o.defaultValue)),e.isDefined(i[o.key])&&i[o.key](),i[o.key]=r.$watch(u,function(r){e.isDefined(r)&&f.setItem(o.key,r)},!0),t})},u.prototype.unbind=function(r,o){if(e.isString(o))o={key:o};else if(!e.isObject(o)||e.isUndefined(o.key))throw new Error("You must define a key to unbind");var a={scopeKey:o.key,name:n.name};o=e.extend({},a,o);var f=t[o.name];if(e.isUndefined(f))throw new Error("You must use the name of an existing instance");return s(o.scopeKey).assign(r,null),e.isDefined(i[o.key])&&(i[o.key](),delete i[o.key]),f.removeItem(o.key)},u.prototype.prefix=function(){return"localStorageWrapper"===this.driver()&&n.oldPrefix?this._localforage.config().name+".":""},u.prototype.onError=function(r,t,n,o){if((e.isObject(r)&&r.name?"InvalidStateError"===r.name:e.isString(r)&&"InvalidStateError"===r)&&"asyncStorage"===this.driver()||e.isObject(r)&&r.code&&5===r.code){var i=this;i.setDriver("localStorageWrapper").then(function(){n.apply(i,t).then(function(e){o.resolve(e)},function(e){o.reject(e)})},function(){o.reject(r)})}else o.reject(r)},t[n.name]=new u,t[n.name]}]}),t.directive("localForage",["$localForage",function(r){return{restrict:"A",link:function(t,n,o){var i=t.$eval(o.localForage);e.isObject(i)&&e.isDefined(i.key)?r.bind(t,i):r.bind(t,o.localForage)}}}])});
}).call(global, module, undefined, undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js","localforage":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/localforage.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular-rx/dist/rx.angular.js":[function(require,module,exports){
(function (global){
// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

;(function (root, factory) {
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  var root = (objectTypes[typeof window] && window) || this,
    freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
    freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
    moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
    freeGlobal = objectTypes[typeof global] && global;
  
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  // Because of build optimizers
  if (typeof define === 'function' && define.amd) {
    define(['rx', 'angular', 'exports'], function (Rx, angular, exports) {
      root.Rx = factory(root, exports, Rx, angular);
      return root.Rx;
    });
  } else if (typeof module == 'object' && module && module.exports == freeExports) {
    module.exports = factory(root, module.exports, require('rx'), require('angular'));
  } else {
    root.Rx = factory(root, {}, root.Rx, root.angular);
  }
}(this, function (global, exp, Rx, angular, undefined) {

  var observable = Rx.Observable,
    observableProto = observable.prototype,
    observableCreate = observable.create,
    disposableCreate = Rx.Disposable.create,
    SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
    CompositeDisposable = Rx.CompositeDisposable,
    AnonymousObservable = Rx.AnonymousObservable,
    Scheduler = Rx.Scheduler,
    noop = Rx.helpers.noop;

  // Utilities
  var toString = Object.prototype.toString,
    slice = Array.prototype.slice;

  /**
   * @ngdoc overview
   * @name rx
   *
   * @description
   * The `rx` module contains essential components for reactive extension bindings
   * for Angular apps.
   *
   * Installation of this module is just a cli command away:
   *
   * <pre>
   * bower install rx-angular
   * <pre>
   *
   * Simply declare it as dependency of your app like this:
   *
   * <pre>
   * var app = angular.module('myApp', ['rx']);
   * </pre>
   */
  var rxModule = angular.module('rx', []);

  /**
   * @ngdoc service
   * @name rx.rx
   *
   * @requires $window
   *
   * @description
   * Factory service that exposes the global `Rx` object to the Angular world.
   */
  rxModule.factory('rx', ['$window', function($window) {
    $window.Rx || ($window.Rx = Rx);
    return $window.Rx;
  }]);

  /**
  * @ngdoc service
  * @name rx.observeOnSope
  *
  * @requires rx.rx
  *
  * @description
  * An observer function that returns a function for a given `scope`,
  * `watchExpression` and `objectEquality` object. The returned function
  * delegates to an Angular watcher.
  *
  * @param {object} scope Scope object.
  * @param {(string|object)} watchExpression Watch expression.
  * @param {boolean} objectEquality Object to compare for object equality.
  *
  * @return {function} Factory function that creates obersables.
  */
  rxModule.factory('observeOnScope', ['rx', function(rx) {
    return function(scope, watchExpression, objectEquality) {
      return rx.Observable.create(function (observer) {
        // Create function to handle old and new Value
        function listener (newValue, oldValue) {
          observer.onNext({ oldValue: oldValue, newValue: newValue });
        }

        // Returns function which disconnects the $watch expression
        return scope.$watch(watchExpression, listener, objectEquality);
      });
    };
  }]);

  observableProto.safeApply = function($scope, fn){

    fn = angular.isFunction(fn) ? fn : noop;

    return this['do'](function (data) {
      ($scope.$$phase || $scope.$root.$$phase) ? fn(data) : $scope.$apply(function () {
        fn(data);
      });
    });
  };

  rxModule.config(['$provide', function($provide) {
    /**
     * @ngdoc service
     * @name rx.$rootScope
     *
     * @requires $delegate
     *
     * @description
     * `$rootScope` decorator that extends the existing `$rootScope` service
     * with additional methods. These methods are Rx related methods, such as
     * methods to create observables or observable functions.
     */
    $provide.decorator('$rootScope', ['$delegate', function($delegate) {

      Object.defineProperties($delegate.constructor.prototype, {
        /**
         * @ngdoc property
         * @name rx.$rootScope.$toObservable
         *
         * @description
         * Provides a method to create observable methods.
         */
        '$toObservable': {
          /**
           * @ngdoc function
           * @name rx.$rootScope.$toObservable#value
           *
           * @description
           * Creates an observable from a watchExpression.
           *
           * @param {(function|string)} watchExpression A watch expression.
           * @param {boolean} objectEquality Compare object for equality.
           *
           * @return {object} Observable.
           */
          value: function(watchExpression, objectEquality) {
            var scope = this;
            return observableCreate(function (observer) {
              // Create function to handle old and new Value
              function listener (newValue, oldValue) {
                observer.onNext({ oldValue: oldValue, newValue: newValue });
              }

              // Returns function which disconnects the $watch expression
              var disposable = Rx.Disposable.create(scope.$watch(watchExpression, listener, objectEquality));

              scope.$on('$destroy', function(){
                disposable.dispose();
              });

              return disposable;
            }).publish().refCount();
          },
          /**
           * @ngdoc property
           * @name rx.$rootScope.$toObservable#enumerable
           *
           * @description
           * Enumerable flag.
           */
          enumerable: false,
          configurable: true,
          writable: true
        },
        /**
         * @ngdoc property
         * @name rx.$rootScope.$eventToObservable
         *
         * @description
         * Provides a method to create observable methods.
         */
        '$eventToObservable': {
          /**
           * @ngdoc function
           * @name rx.$rootScope.$eventToObservable#value
           *
           * @description
           * Creates an Observable from an event which is fired on the local $scope.
           * Expects an event name as the only input parameter.
           *
           * @param {string} event name
           *
           * @return {object} Observable object.
           */
          value: function(eventName) {
            var scope = this;
            return observableCreate(function (observer) {
              function listener () {
                observer.onNext({
                  'event': arguments[0],
                  'additionalArguments': slice.call(arguments, 1)
                });
              }

              // Returns function which disconnects from the event binding
              var disposable = disposableCreate(scope.$on(eventName, listener));

              scope.$on('$destroy', function(){
                disposable.isDisposed || disposable.dispose();
              });

              return disposable;
            }).publish().refCount();
          },
          /**
           * @ngdoc property
           * @name rx.$rootScope.$eventToObservable#enumerable
           *
           * @description
           * Enumerable flag.
           */
          enumerable: false,
          configurable: true,
          writable: true
        },
        /**
         * @ngdoc property
         * @name rx.$rootScope.$createObservableFunction
         *
         * @description
         * Provides a method to create obsersables from functions.
         */
        '$createObservableFunction': {
          /**
           * @ngdoc function
           * @name rx.$rootScope.$createObservableFunction#value
           *
           * @description
           * Creates an observable from a given function.
           *
           * @param {string} functionName A function name to observe.
           * @param {function} listener A listener function that gets executed.
           *
           * @return {function} Remove listener function.
           */
          value: function(functionName, listener) {
            var scope = this;

            return observableCreate(function (observer) {
              scope[functionName] = function () {
                if (listener) {
                  observer.onNext(listener.apply(this, arguments));
                } else if (arguments.length === 1) {
                  observer.onNext(arguments[0]);
                } else {
                  observer.onNext(arguments);
                }
              };

              return function () {
                // Remove our listener function from the scope.
                delete scope[functionName];
              };
            }).publish().refCount();
          },
          /**
           * @ngdoc property
           * @name rx.$rootScope.$createObservableFunction#enumerable
           *
           * @description
           * Enumerable flag.
           */
          enumerable: false,
          configurable: true,
          writable: true
        },
        /**
         * @ngdoc function
         * @name rx.$rootScope.$digestObservables#value
         *
         * @description
         * Digests the specified observables when they produce new values.
         * The scope variable specified by the observable's key
         *   is set to the new value.
         *
         * @param {object} obj A map where keys are scope properties
         *   and values are observables.
         *
         * @return {boolean} Reference to obj.
         */
        '$digestObservables': {
          value: function(observables) {
            var scope = this;
            return angular.map(observables, function(observable, key) {
              return observable.digest(scope, key);
            }).publish().refCount();
          },
          /**
           * @ngdoc property
           * @name rx.$rootScope.digestObservables#enumerable
           *
           * @description
           * Enumerable flag.
           */
          enumerable: false,
          configurable: true,
          writable: true
        }
      });

      return $delegate;
    }]);
  }]);

  rxModule.run(['$parse', function($parse) {

    observableProto.digest = function($scope, prop) {
      var source = this;
      return new AnonymousObservable(function (observer) {
        var propSetter = $parse(prop).assign;

        var m = new SingleAssignmentDisposable();

        m.setDisposable(source.subscribe(
          function (e) {
            if (!$scope.$$phase) {
              $scope.$apply(propSetter($scope, e));
            } else {
              propSetter($scope, e);
            }
          },
          observer.onError.bind(observer),
          observer.onCompleted.bind(observer)
        ));

        $scope.$on('$destroy', m.dispose.bind(m));

        return m;
      });
    };
  }]);

  var ScopeScheduler = Rx.ScopeScheduler = (function () {

    var now = Date.now || (+new Date());

    function scheduleNow(state, action) {
      var scheduler = this,
        disposable = new SingleAssignmentDisposable();

      safeApply(disposable, scheduler, action, state);

      return disposable;
    }

    function scheduleRelative(state, dueTime, action) {
      var scheduler = this,
        dt = Rx.Scheduler.normalize(dueTime);

      if (dt === 0) {
        return scheduler.scheduleWithState(state, action);
      }

      var disposable = new SingleAssignmentDisposable();
      var id = setTimeout(function () {
        safeApply(disposable, scheduler, action, state);
      }, dt);

      return new CompositeDisposable(disposable, disposableCreate(function () {
        clearTimeout(id);
      }));
    }

    function safeApply(disposable, scheduler, action, state) {
      function fn() {
        !disposable.isDisposed && disposable.setDisposable(action(scheduler, state));
      }

      (scheduler._scope.$$phase || scheduler._scope.$root.$$phase)
        ? fn()
        : scheduler._scope.$apply(fn);
    }

    function scheduleAbsolute(state, dueTime, action) {
      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
    }

    return function (scope) {
      var scheduler = new Scheduler(now, scheduleNow, scheduleRelative, scheduleAbsolute);
      scheduler._scope = scope;
      return scheduler;
    }
  }());

  var manageScope = Rx.manageScope = function ($scope) {

    return function(observer) {

        var source = observer;

        return new AnonymousObservable(function (observer) {

            var m = new SingleAssignmentDisposable();

            var scheduler = Rx.ScopeScheduler($scope);

            m.setDisposable(source
                .observeOn(scheduler)
                .subscribe(
                    observer.onNext.bind(observer),
                    observer.onError.bind(observer),
                    observer.onCompleted.bind(observer)
            ));

            $scope.$on("$destroy", function() {
                m.dispose();
                delete m;
            });

            return m;
        });
      }
  }


  return Rx;
}));
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"angular":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js","rx":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/rxjs/dist/rx.all.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular-ui-router/release/angular-ui-router.js":[function(require,module,exports){
(function (global){

; require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js");
;__browserify_shim_require__=require;(function browserifyShim(module, define, require) {
/**
 * State-based routing for AngularJS
 * @version v0.2.13
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function objectKeys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  angular.forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function indexOf(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i].params) continue;
    parentParams = objectKeys(parents[i].params);
    if (!parentParams.length) continue;

    for (var j in parentParams) {
      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}

// like _.indexBy
// when you know that your index values will be unique, or you want last-one-in to win
function indexBy(array, propName) {
  var result = {};
  forEach(array, function(item) {
    result[item[propName]] = item;
  });
  return result;
}

// extracted from underscore.js
// Return a copy of the object only containing the whitelisted properties.
function pick(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  forEach(keys, function(key) {
    if (key in obj) copy[key] = obj[key];
  });
  return copy;
}

// extracted from underscore.js
// Return a copy of the object omitting the blacklisted properties.
function omit(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  for (var key in obj) {
    if (indexOf(keys, key) == -1) copy[key] = obj[key];
  }
  return copy;
}

function pluck(collection, key) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = isFunction(key) ? key(val) : val[key];
  });
  return result;
}

function filter(collection, callback) {
  var array = isArray(collection);
  var result = array ? [] : {};
  forEach(collection, function(val, i) {
    if (callback(val, i)) {
      result[array ? result.length : i] = val;
    }
  });
  return result;
}

function map(collection, callback) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = callback(val, i);
  });
  return result;
}

/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    var invocableKeys = objectKeys(invocables || {});
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, indexOf(cycle, key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = result.$$promises || true; // keep for isResolve()
          delete result.$$inheritedValues;
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }

      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      if (parent.$$inheritedValues) {
        merge(values, omit(parent.$$inheritedValues, invocableKeys));
      }

      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      extend(promises, parent.$$promises);
      if (parent.$$values) {
        merged = merge(values, omit(parent.$$values, invocableKeys));
        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
        done();
      } else {
        if (parent.$$inheritedValues) {
          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
        }        
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

var $$UMFP; // reference to $UrlMatcherFactoryProvider

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 * 
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon 
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 * 
 * Examples:
 * 
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when 
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
function UrlMatcher(pattern, config, parentMatcher) {
  config = extend({ params: {} }, isObject(config) ? config : {});

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
  //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                       - anything other than curly braces or backslash
  //    \\.                            - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      compiled = '^', last = 0, m,
      segments = this.segments = [],
      parentParams = parentMatcher ? parentMatcher.params : {},
      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
      paramNames = [];

  function addParameter(id, type, config, location) {
    paramNames.push(id);
    if (parentParams[id]) return parentParams[id];
    if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    params[id] = new $$UMFP.Param(id, type, config, location);
    return params[id];
  }

  function quoteRegExp(string, pattern, squash) {
    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    if (!pattern) return result;
    switch(squash) {
      case false: surroundPattern = ['(', ')'];   break;
      case true:  surroundPattern = ['?(', ')?']; break;
      default:    surroundPattern = ['(' + squash + "|", ')?'];  break;
    }
    return result + surroundPattern[0] + pattern + surroundPattern[1];
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  function matchDetails(m, isSearch) {
    var id, regexp, segment, type, cfg, arrayMode;
    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    cfg         = config.params[id];
    segment     = pattern.substring(last, m.index);
    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
    type        = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp) });
    return {
      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
    };
  }

  var p, param, segment;
  while ((m = placeholder.exec(pattern))) {
    p = matchDetails(m, false);
    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

    param = addParameter(p.id, p.type, p.cfg, "path");
    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash);
    segments.push(p.segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');

  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last + i);

    if (search.length > 0) {
      last = 0;
      while ((m = searchPlaceholder.exec(search))) {
        p = matchDetails(m, true);
        param = addParameter(p.id, p.type, p.cfg, "search");
        last = placeholder.lastIndex;
        // check if ?&
      }
    }
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
  segments.push(segment);

  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
  this.prefix = segments[0];
  this.$$paramNames = paramNames;
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern, config) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  var defaultConfig = {
    caseInsensitive: $$UMFP.caseInsensitive(),
    strict: $$UMFP.strictMode(),
    squash: $$UMFP.defaultSquashPolicy()
  };
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;
  searchParams = searchParams || {};

  var paramNames = this.parameters(), nTotal = paramNames.length,
    nPath = this.segments.length - 1,
    values = {}, i, j, cfg, paramName;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  function decodePathArray(string) {
    function reverseString(str) { return str.split("").reverse().join(""); }
    function unquoteDashes(str) { return str.replace(/\\-/, "-"); }

    var split = reverseString(string).split(/-(?!\\)/);
    var allReversed = map(split, reverseString);
    return map(allReversed, unquoteDashes).reverse();
  }

  for (i = 0; i < nPath; i++) {
    paramName = paramNames[i];
    var param = this.params[paramName];
    var paramVal = m[i+1];
    // if the param value matches a pre-replace pair, replace the value before decoding.
    for (j = 0; j < param.replace; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
    values[paramName] = param.value(paramVal);
  }
  for (/**/; i < nTotal; i++) {
    paramName = paramNames[i];
    values[paramName] = this.params[paramName].value(searchParams[paramName]);
  }

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 * 
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function (param) {
  if (!isDefined(param)) return this.$$paramNames;
  return this.params[param] || null;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validate
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
UrlMatcher.prototype.validates = function (params) {
  return this.params.$$validates(params);
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  values = values || {};
  var segments = this.segments, params = this.parameters(), paramset = this.params;
  if (!this.validates(values)) return null;

  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

  function encodeDashes(str) { // Replace dashes with encoded "\-"
    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
  }

  for (i = 0; i < nTotal; i++) {
    var isPathParam = i < nPath;
    var name = params[i], param = paramset[name], value = param.value(values[name]);
    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
    var squash = isDefaultValue ? param.squash : false;
    var encoded = param.type.encode(value);

    if (isPathParam) {
      var nextSegment = segments[i + 1];
      if (squash === false) {
        if (encoded != null) {
          if (isArray(encoded)) {
            result += map(encoded, encodeDashes).join("-");
          } else {
            result += encodeURIComponent(encoded);
          }
        }
        result += nextSegment;
      } else if (squash === true) {
        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
        result += nextSegment.match(capture)[1];
      } else if (isString(squash)) {
        result += squash + nextSegment;
      }
    } else {
      if (encoded == null || (isDefaultValue && squash !== false)) continue;
      if (!isArray(encoded)) encoded = [ encoded ];
      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
      result += (search ? '&' : '?') + (name + '=' + encoded);
      search = true;
    }
  }

  return result;
};

/**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
function Type(config) {
  extend(this, config);
}

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
Type.prototype.is = function(val, key) {
  return true;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
Type.prototype.encode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
Type.prototype.decode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
Type.prototype.equals = function(a, b) {
  return a == b;
};

Type.prototype.$subPattern = function() {
  var sub = this.pattern.toString();
  return sub.substr(1, sub.length - 2);
};

Type.prototype.pattern = /.*/;

Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

/*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
Type.prototype.$asArray = function(mode, isSearch) {
  if (!mode) return this;
  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");
  return new ArrayType(this, mode);

  function ArrayType(type, mode) {
    function bindTo(type, callbackName) {
      return function() {
        return type[callbackName].apply(type, arguments);
      };
    }

    // Wrap non-array value as array
    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
      switch(val.length) {
        case 0: return undefined;
        case 1: return mode === "auto" ? val[0] : val;
        default: return val;
      }
    }
    function falsey(val) { return !val; }

    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
      return function handleArray(val) {
        val = arrayWrap(val);
        var result = map(val, callback);
        if (allTruthyMode === true)
          return filter(result, falsey).length === 0;
        return arrayUnwrap(result);
      };
    }

    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
      return function handleArray(val1, val2) {
        var left = arrayWrap(val1), right = arrayWrap(val2);
        if (left.length !== right.length) return false;
        for (var i = 0; i < left.length; i++) {
          if (!callback(left[i], right[i])) return false;
        }
        return true;
      };
    }

    this.encode = arrayHandler(bindTo(type, 'encode'));
    this.decode = arrayHandler(bindTo(type, 'decode'));
    this.is     = arrayHandler(bindTo(type, 'is'), true);
    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
    this.pattern = type.pattern;
    this.$arrayMode = mode;
  }
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {
  $$UMFP = this;

  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

  function valToString(val) { return val != null ? val.toString().replace(/\//g, "%2F") : val; }
  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, "/") : val; }
//  TODO: in 1.0, make string .is() return false if value is undefined by default.
//  function regexpMatches(val) { /*jshint validthis:true */ return isDefined(val) && this.pattern.test(val); }
  function regexpMatches(val) { /*jshint validthis:true */ return this.pattern.test(val); }

  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
    string: {
      encode: valToString,
      decode: valFromString,
      is: regexpMatches,
      pattern: /[^/]*/
    },
    int: {
      encode: valToString,
      decode: function(val) { return parseInt(val, 10); },
      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
      pattern: /\d+/
    },
    bool: {
      encode: function(val) { return val ? 1 : 0; },
      decode: function(val) { return parseInt(val, 10) !== 0; },
      is: function(val) { return val === true || val === false; },
      pattern: /0|1/
    },
    date: {
      encode: function (val) {
        if (!this.is(val))
          return undefined;
        return [ val.getFullYear(),
          ('0' + (val.getMonth() + 1)).slice(-2),
          ('0' + val.getDate()).slice(-2)
        ].join("-");
      },
      decode: function (val) {
        if (this.is(val)) return val;
        var match = this.capture.exec(val);
        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
      },
      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
    },
    json: {
      encode: angular.toJson,
      decode: angular.fromJson,
      is: angular.isObject,
      equals: angular.equals,
      pattern: /[^/]*/
    },
    any: { // does not encode/decode
      encode: angular.identity,
      decode: angular.identity,
      is: angular.identity,
      equals: angular.equals,
      pattern: /.*/
    }
  };

  function getDefaultConfig() {
    return {
      strict: isStrictMode,
      caseInsensitive: isCaseInsensitive
    };
  }

  function isInjectable(value) {
    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
  }

  /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
  $UrlMatcherFactory.$$getDefaultValue = function(config) {
    if (!isInjectable(config.value)) return config.value;
    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
    return injector.invoke(config.value);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
  this.caseInsensitive = function(value) {
    if (isDefined(value))
      isCaseInsensitive = value;
    return isCaseInsensitive;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
  this.strictMode = function(value) {
    if (isDefined(value))
      isStrictMode = value;
    return isStrictMode;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
  this.defaultSquashPolicy = function(value) {
    if (!isDefined(value)) return defaultSquashPolicy;
    if (value !== true && value !== false && !isString(value))
      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
    defaultSquashPolicy = value;
    return value;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern, config) {
    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
  this.isMatcher = function (o) {
    if (!isObject(o)) return false;
    var result = true;

    forEach(UrlMatcher.prototype, function(val, name) {
      if (isFunction(val)) {
        result = result && (isDefined(o[name]) && isFunction(o[name]));
      }
    });
    return result;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
  this.type = function (name, definition, definitionFn) {
    if (!isDefined(definition)) return $types[name];
    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

    $types[name] = new Type(extend({ name: name }, definition));
    if (definitionFn) {
      typeQueue.push({ name: name, def: definitionFn });
      if (!enqueue) flushTypeQueue();
    }
    return this;
  };

  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
  function flushTypeQueue() {
    while(typeQueue.length) {
      var type = typeQueue.shift();
      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
      angular.extend($types[type.name], injector.invoke(type.def));
    }
  }

  // Register default types. Store them in the prototype of $types.
  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
  $types = inherit($types, {});

  /* No need to document $get, since it returns this */
  this.$get = ['$injector', function ($injector) {
    injector = $injector;
    enqueue = false;
    flushTypeQueue();

    forEach(defaultTypes, function(type, name) {
      if (!$types[name]) $types[name] = new Type(type);
    });
    return this;
  }];

  this.Param = function Param(id, type, config, location) {
    var self = this;
    config = unwrapShorthand(config);
    type = getType(config, type, location);
    var arrayMode = getArrayMode();
    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
    var isOptional = config.value !== undefined;
    var squash = getSquashPolicy(config, isOptional);
    var replace = getReplace(config, arrayMode, isOptional, squash);

    function unwrapShorthand(config) {
      var keys = isObject(config) ? objectKeys(config) : [];
      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
      if (isShorthand) config = { value: config };
      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
      return config;
    }

    function getType(config, urlType, location) {
      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
      if (urlType) return urlType;
      if (!config.type) return (location === "config" ? $types.any : $types.string);
      return config.type instanceof Type ? config.type : new Type(config.type);
    }

    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
    function getArrayMode() {
      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
      return extend(arrayDefaults, arrayParamNomenclature, config).array;
    }

    /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
    function getSquashPolicy(config, isOptional) {
      var squash = config.squash;
      if (!isOptional || squash === false) return false;
      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
      if (squash === true || isString(squash)) return squash;
      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
    }

    function getReplace(config, arrayMode, isOptional, squash) {
      var replace, configuredKeys, defaultPolicy = [
        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
        { from: null, to: (isOptional || arrayMode ? undefined : "") }
      ];
      replace = isArray(config.replace) ? config.replace : [];
      if (isString(squash))
        replace.push({ from: squash, to: undefined });
      configuredKeys = map(replace, function(item) { return item.from; } );
      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
    }

    /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
    function $$getDefaultValue() {
      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
      return injector.invoke(config.$$fn);
    }

    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    function $value(value) {
      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
      function $replace(value) {
        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
        return replacement.length ? replacement[0] : value;
      }
      value = $replace(value);
      return isDefined(value) ? self.type.decode(value) : $$getDefaultValue();
    }

    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

    extend(this, {
      id: id,
      type: type,
      location: location,
      array: arrayMode,
      squash: squash,
      replace: replace,
      isOptional: isOptional,
      value: $value,
      dynamic: undefined,
      config: config,
      toString: toString
    });
  };

  function ParamSet(params) {
    extend(this, params || {});
  }

  ParamSet.prototype = {
    $$new: function() {
      return inherit(this, extend(new ParamSet(), { $$parent: this}));
    },
    $$keys: function () {
      var keys = [], chain = [], parent = this,
        ignore = objectKeys(ParamSet.prototype);
      while (parent) { chain.push(parent); parent = parent.$$parent; }
      chain.reverse();
      forEach(chain, function(paramset) {
        forEach(objectKeys(paramset), function(key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
        });
      });
      return keys;
    },
    $$values: function(paramValues) {
      var values = {}, self = this;
      forEach(self.$$keys(), function(key) {
        values[key] = self[key].value(paramValues && paramValues[key]);
      });
      return values;
    },
    $$equals: function(paramValues1, paramValues2) {
      var equal = true, self = this;
      forEach(self.$$keys(), function(key) {
        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
        if (!self[key].type.equals(left, right)) equal = false;
      });
      return equal;
    },
    $$validates: function $$validate(paramValues) {
      var result = true, isOptional, val, param, self = this;

      forEach(this.$$keys(), function(key) {
        param = self[key];
        val = paramValues[key];
        isOptional = !val && param.isOptional;
        result = result && (isOptional || !!param.type.is(val));
      });
      return result;
    },
    $$parent: undefined
  };

  this.ParamSet = ParamSet;
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
  var rules = [], otherwise = null, interceptDeferred = false, listener;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.rule = function (rule) {
    if (!isFunction(rule)) throw new Error("'rule' must be a function");
    rules.push(rule);
    return this;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.otherwise = function (rule) {
    if (isString(rule)) {
      var redirect = rule;
      rule = function () { return redirect; };
    }
    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
    otherwise = rule;
    return this;
  };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
  this.when = function (what, handler) {
    var redirect, handlerIsString = isString(handler);
    if (isString(what)) what = $urlMatcherFactory.compile(what);

    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
      throw new Error("invalid 'handler' in when()");

    var strategies = {
      matcher: function (what, handler) {
        if (handlerIsString) {
          redirect = $urlMatcherFactory.compile(handler);
          handler = ['$match', function ($match) { return redirect.format($match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
        }, {
          prefix: isString(what.prefix) ? what.prefix : ''
        });
      },
      regex: function (what, handler) {
        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

        if (handlerIsString) {
          redirect = handler;
          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path()));
        }, {
          prefix: regExpPrefix(what)
        });
      }
    };

    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

    for (var n in check) {
      if (check[n]) return this.rule(strategies[n](what, handler));
    }

    throw new Error("invalid 'what' in when()");
  };

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
  this.deferIntercept = function (defer) {
    if (defer === undefined) defer = true;
    interceptDeferred = defer;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
  this.$get = $get;
  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];
  function $get(   $location,   $rootScope,   $injector,   $browser) {

    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

    function appendBasePath(url, isHtml5, absolute) {
      if (baseHref === '/') return url;
      if (isHtml5) return baseHref.slice(0, -1) + url;
      if (absolute) return baseHref.slice(1) + url;
      return url;
    }

    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
    function update(evt) {
      if (evt && evt.defaultPrevented) return;
      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
      lastPushedUrl = undefined;
      if (ignoreUpdate) return true;

      function check(rule) {
        var handled = rule($injector, $location);

        if (!handled) return false;
        if (isString(handled)) $location.replace().url(handled);
        return true;
      }
      var n = rules.length, i;

      for (i = 0; i < n; i++) {
        if (check(rules[i])) return;
      }
      // always check otherwise last to allow dynamic updates to the set of rules
      if (otherwise) check(otherwise);
    }

    function listen() {
      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
      return listener;
    }

    if (!interceptDeferred) listen();

    return {
      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
      sync: function() {
        update();
      },

      listen: function() {
        return listen();
      },

      update: function(read) {
        if (read) {
          location = $location.url();
          return;
        }
        if ($location.url() === location) return;

        $location.url(location);
        $location.replace();
      },

      push: function(urlMatcher, params, options) {
        $location.url(urlMatcher.format(params || {}));
        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
        if (options && options.replace) $location.replace();
      },

      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
      href: function(urlMatcher, params, options) {
        if (!urlMatcher.validates(params)) return null;

        var isHtml5 = $locationProvider.html5Mode();
        if (angular.isObject(isHtml5)) {
          isHtml5 = isHtml5.enabled;
        }
        
        var url = urlMatcher.format(params);
        options = options || {};

        if (!isHtml5 && url !== null) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }
        url = appendBasePath(url, isHtml5, options.absolute);

        if (!options.absolute || !url) {
          return url;
        }

        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
        port = (port === 80 || port === 443 ? '' : ':' + port);

        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
      }
    };
  }
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = extend({}, state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url, config = { params: state.params || {} };

      if (isString(url)) {
        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
        return (state.parent.navigable || root).url.concat(url, config);
      }

      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
    ownParams: function(state) {
      var params = state.url && state.url.params || new $$UMFP.ParamSet();
      forEach(state.params || {}, function(config, id) {
        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
      });
      return params;
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        views[name] = view;
      });
      return views;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    if (!stateOrName) return undefined;

    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      base = findState(base);
      
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function flushQueuedChildren(parentName) {
    var queued = queue[parentName] || [];
    while(queued.length) {
      registerState(queued.shift());
    }
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { inherit: true, location: false });
        }
      }]);
    }

    // Register any queued children
    flushQueuedChildren(name);

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(indexOf(segments, globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"</pre>
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));
    var TransitionAborted = $q.reject(new Error('transition aborted'));
    var TransitionFailed = $q.reject(new Error('transition failed'));

    // Handles the case where a state which is the target of a transition is not found, and the user
    // can optionally retry or defer the transition
    function handleRedirect(redirect, state, params, options) {
      /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

      if (evt.defaultPrevented) {
        $urlRouter.update();
        return TransitionAborted;
      }

      if (!evt.retry) {
        return null;
      }

      // Allow the handler to return a promise to defer state lookup retry
      if (options.$retry) {
        $urlRouter.update();
        return TransitionFailed;
      }
      var retryTransition = $state.transition = $q.when(evt.retry);

      retryTransition.then(function() {
        if (retryTransition !== $state.transition) return TransitionSuperseded;
        redirect.options.$retry = true;
        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
      }, function() {
        return TransitionAborted;
      });
      $urlRouter.update();

      return retryTransition;
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };

    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired, 
     * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.reload = function reload() {
      return $state.transitionTo($state.current, $stateParams, { reload: true, inherit: false, notify: true });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      if (!isDefined(toState)) {
        var redirect = { to: to, toParams: toParams, options: options };
        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

        if (redirectResult) {
          return redirectResult;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          if (!options.relative) throw new Error("No such state '" + to + "'");
          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      if (!toState.params.$$validates(toParams)) return TransitionFailed;

      toParams = toState.params.$$values(toParams);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

      if (!options.reload) {
        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change
      // that we've initiated ourselves, because we might accidentally abort a legitimate
      // transition initiated from code?
      if (shouldTriggerReload(to, from, locals, options)) {
        if (to.self.reloadOnSearch !== false) $urlRouter.update();
        $state.transition = null;
        return $q.when($state.current);
      }

      // Filter parameters before we pass them to event handlers etc.
      toParams = filterByKeys(to.params.$$keys(), toParams || {});

      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
          $urlRouter.update();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);

      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l = fromPath.length - 1; l >= keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l = keep; l < toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) return TransitionSuperseded;

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        if (options.location && to.navigable) {
          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        $urlRouter.update(true);

        return $state.current;
      }, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        if (!evt.defaultPrevented) {
            $urlRouter.update();
        }

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) { return undefined; }
      if ($state.$current !== state) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    $state.includes = function includes(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (!doesStateMatchGlob(stateOrName)) {
          return false;
        }
        stateOrName = $state.$current.name;
      }

      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) { return undefined; }
      if (!isDefined($state.$current.includes[state.name])) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({
        lossy:    true,
        inherit:  true,
        absolute: false,
        relative: $state.$current
      }, options || {});

      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) return null;
      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
      
      var nav = (state && options.lossy) ? state.navigable : state;

      if (!nav || nav.url === undefined || nav.url === null) {
        return null;
      }
      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys(), params || {}), {
        absolute: options.absolute
      });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
      var state = findState(stateOrName, context || $state.$current);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [dst.resolve.then(function (globals) {
        dst.globals = globals;
      })];
      if (inherited) promises.push(inherited);

      // Resolve template and dependencies for all views.
      forEach(state.views, function (view, name) {
        var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
        injectables.$template = [ function () {
          return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: options.notify }) || '';
        }];

        promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
          // References to the controller (only instantiated at link time)
          if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
            var injectLocals = angular.extend({}, injectables, locals);
            result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
          } else {
            result.$$controller = view.controller;
          }
          // Provide access to the state itself for internal use
          result.$$state = state;
          result.$$controllerAs = view.controllerAs;
          dst[name] = result;
        }));
      });

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldTriggerReload(to, from, locals, options) {
    if (to === from && ((locals === from.locals && !options.reload) || (to.self.reloadOnSearch === false))) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .value('$stateParams', {})
  .provider('$state', $StateProvider);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        if (result && options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
          $rootScope.$broadcast('$viewContentLoading', options);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) {
          var promise = $animate.enter(element, null, target, cb);
          if (promise && promise.then) promise.then(cb);
        },
        leave: function(element, cb) {
          var promise = $animate.leave(element, cb);
          if (promise && promise.then) promise.then(cb);
        }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });
        scope.$on('$viewContentLoading', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            renderer.leave(currentEl, function() {
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope,
              name            = getUiViewName(scope, attrs, $element, $interpolate),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
          newScope = scope.$new();
          latestLocals = $state.$current.locals[name];

          var clone = $transclude(newScope, function(clone) {
            renderer.enter(clone, $element, function onUiViewEnter() {
              if(currentScope) {
                currentScope.$emit('$viewContentAnimationEnded');
              }

              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
          currentScope.$emit('$viewContentLoaded');
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var current = $state.$current,
            name = getUiViewName(scope, attrs, $element, $interpolate),
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

/**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
function getUiViewName(scope, attrs, element, $interpolate) {
  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
  var inherited = element.inheritedData('$uiView');
  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref, current) {
  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
  if (preparsed) ref = current + '(' + preparsed[1] + ')';
  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  var allowedOptions = ['location', 'inherit', 'reload'];

  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var ref = parseStateRef(attrs.uiSref, $state.current.name);
      var params = null, url = null, base = stateContext(element) || $state.$current;
      var newHref = null, isAnchor = element.prop("tagName") === "A";
      var isForm = element[0].nodeName === "FORM";
      var attr = isForm ? "action" : "href", nav = true;

      var options = { relative: base, inherit: true };
      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

      angular.forEach(allowedOptions, function(option) {
        if (option in optionsOverride) {
          options[option] = optionsOverride[option];
        }
      });

      var update = function(newVal) {
        if (newVal) params = angular.copy(newVal);
        if (!nav) return;

        newHref = $state.href(ref.state, params, options);

        var activeDirective = uiSrefActive[1] || uiSrefActive[0];
        if (activeDirective) {
          activeDirective.$$setStateInfo(ref.state, params);
        }
        if (newHref === null) {
          nav = false;
          return false;
        }
        attrs.$set(attr, newHref);
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
          if (newVal !== params) update(newVal);
        }, true);
        params = angular.copy(scope.$eval(ref.paramExpr));
      }
      update();

      if (isForm) return;

      element.bind("click", function(e) {
        var button = e.which || e.button;
        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
          var transition = $timeout(function() {
            $state.go(ref.state, params, options);
          });
          e.preventDefault();

          // if the state has no URL, ignore one preventDefault from the <a> directive.
          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;
          e.preventDefault = function() {
            if (ignorePreventDefaultCount-- <= 0)
              $timeout.cancel(transition);
          };
        }
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateRefActiveDirective($state, $stateParams, $interpolate) {
  return  {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
      var state, params, activeClass;

      // There probably isn't much point in $observing this
      // uiSrefActive and uiSrefActiveEq share the same directive object with some
      // slight difference in logic routing
      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

      // Allow uiSref to communicate with uiSrefActive[Equals]
      this.$$setStateInfo = function (newState, newParams) {
        state = $state.get(newState, stateContext($element));
        params = newParams;
        update();
      };

      $scope.$on('$stateChangeSuccess', update);

      // Update route state
      function update() {
        if (isMatch()) {
          $element.addClass(activeClass);
        } else {
          $element.removeClass(activeClass);
        }
      }

      function isMatch() {
        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
          return state && $state.is(state.name, params);
        } else {
          return state && $state.includes(state.name, params);
        }
      }
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateRefActiveDirective)
  .directive('uiSrefActiveEq', $StateRefActiveDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  var isFilter = function (state) {
    return $state.is(state);
  };
  isFilter.$stateful = true;
  return isFilter;
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  var includesFilter = function (state) {
    return $state.includes(state);
  };
  includesFilter.$stateful = true;
  return  includesFilter;
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
}).call(global, module, undefined, undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js":[function(require,module,exports){
(function (global){
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/**
 * @license AngularJS v1.3.15
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */

function minErr(module, ErrorConstructor) {
  ErrorConstructor = ErrorConstructor || Error;
  return function() {
    var code = arguments[0],
      prefix = '[' + (module ? module + ':' : '') + code + '] ',
      template = arguments[1],
      templateArgs = arguments,

      message, i;

    message = prefix + template.replace(/\{\d+\}/g, function(match) {
      var index = +match.slice(1, -1), arg;

      if (index + 2 < templateArgs.length) {
        return toDebugString(templateArgs[index + 2]);
      }
      return match;
    });

    message = message + '\nhttp://errors.angularjs.org/1.3.15/' +
      (module ? module + '/' : '') + code;
    for (i = 2; i < arguments.length; i++) {
      message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' +
        encodeURIComponent(toDebugString(arguments[i]));
    }
    return new ErrorConstructor(message);
  };
}

/* We need to tell jshint what variables are being exported */
/* global angular: true,
  msie: true,
  jqLite: true,
  jQuery: true,
  slice: true,
  splice: true,
  push: true,
  toString: true,
  ngMinErr: true,
  angularModule: true,
  uid: true,
  REGEX_STRING_REGEXP: true,
  VALIDITY_STATE_PROPERTY: true,

  lowercase: true,
  uppercase: true,
  manualLowercase: true,
  manualUppercase: true,
  nodeName_: true,
  isArrayLike: true,
  forEach: true,
  sortedKeys: true,
  forEachSorted: true,
  reverseParams: true,
  nextUid: true,
  setHashKey: true,
  extend: true,
  int: true,
  inherit: true,
  noop: true,
  identity: true,
  valueFn: true,
  isUndefined: true,
  isDefined: true,
  isObject: true,
  isString: true,
  isNumber: true,
  isDate: true,
  isArray: true,
  isFunction: true,
  isRegExp: true,
  isWindow: true,
  isScope: true,
  isFile: true,
  isFormData: true,
  isBlob: true,
  isBoolean: true,
  isPromiseLike: true,
  trim: true,
  escapeForRegexp: true,
  isElement: true,
  makeMap: true,
  includes: true,
  arrayRemove: true,
  copy: true,
  shallowCopy: true,
  equals: true,
  csp: true,
  concat: true,
  sliceArgs: true,
  bind: true,
  toJsonReplacer: true,
  toJson: true,
  fromJson: true,
  startingTag: true,
  tryDecodeURIComponent: true,
  parseKeyValue: true,
  toKeyValue: true,
  encodeUriSegment: true,
  encodeUriQuery: true,
  angularInit: true,
  bootstrap: true,
  getTestability: true,
  snake_case: true,
  bindJQuery: true,
  assertArg: true,
  assertArgFn: true,
  assertNotHasOwnProperty: true,
  getter: true,
  getBlockNodes: true,
  hasOwnProperty: true,
  createMap: true,

  NODE_TYPE_ELEMENT: true,
  NODE_TYPE_TEXT: true,
  NODE_TYPE_COMMENT: true,
  NODE_TYPE_DOCUMENT: true,
  NODE_TYPE_DOCUMENT_FRAGMENT: true,
*/

////////////////////////////////////

/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */

var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY = 'validity';

/**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var
    msie,             // holds major version number for IE, or NaN if UA is not IE.
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    splice            = [].splice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    uid               = 0;

/**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */
msie = document.documentMode;


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {
  if (obj == null || isWindow(obj)) {
    return false;
  }

  var length = obj.length;

  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
    return true;
  }

  return isString(obj) || isArray(obj) || length === 0 ||
         typeof length === 'number' && length > 0 && (length - 1) in obj;
}

/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */

function forEach(obj, iterator, context) {
  var key, length;
  if (obj) {
    if (isFunction(obj)) {
      for (key in obj) {
        // Need to check if hasOwnProperty exists,
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (isArray(obj) || isArrayLike(obj)) {
      var isPrimitive = typeof obj !== 'object';
      for (key = 0, length = obj.length; key < length; key++) {
        if (isPrimitive || key in obj) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj);
    } else {
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    }
  }
  return obj;
}

function sortedKeys(obj) {
  return Object.keys(obj).sort();
}

function forEachSorted(obj, iterator, context) {
  var keys = sortedKeys(obj);
  for (var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) { iteratorFn(key, value); };
}

/**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */
function nextUid() {
  return ++uid;
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  } else {
    delete obj.$$hashKey;
  }
}

/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 * Note: Keep in mind that `angular.extend` does not support recursive merge (deep copy).
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  var h = dst.$$hashKey;

  for (var i = 1, ii = arguments.length; i < ii; i++) {
    var obj = arguments[i];
    if (obj) {
      var keys = Object.keys(obj);
      for (var j = 0, jj = keys.length; j < jj; j++) {
        var key = keys[j];
        dst[key] = obj[key];
      }
    }
  }

  setHashKey(dst, h);
  return dst;
}

function int(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(Object.create(parent), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
  * @param {*} value to be returned.
  * @returns {*} the value passed in.
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value) {return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value) {return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value) {
  // http://jsperf.com/isobject4
  return value !== null && typeof value === 'object';
}


/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value) {return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
 *
 * If you wish to exclude these then you can use the native
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
 * method.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value) {return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value) {
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
var isArray = Array.isArray;

/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value) {return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.window === obj;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isFormData(obj) {
  return toString.call(obj) === '[object FormData]';
}


function isBlob(obj) {
  return toString.call(obj) === '[object Blob]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


function isPromiseLike(obj) {
  return obj && isFunction(obj.then);
}


var trim = function(value) {
  return isString(value) ? value.trim() : value;
};

// Copied from:
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
// Prereq: s is a string.
var escapeForRegexp = function(s) {
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
           replace(/\x08/g, '\\x08');
};


/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // we are a direct element
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str) {
  var obj = {}, items = str.split(","), i;
  for (i = 0; i < items.length; i++)
    obj[items[i]] = true;
  return obj;
}


function nodeName_(element) {
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

function includes(array, obj) {
  return Array.prototype.indexOf.call(array, obj) != -1;
}

function arrayRemove(array, value) {
  var index = array.indexOf(value);
  if (index >= 0)
    array.splice(index, 1);
  return value;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
function copy(source, destination, stackSource, stackDest) {
  if (isWindow(source) || isScope(source)) {
    throw ngMinErr('cpws',
      "Can't copy! Making copies of Window or Scope instances is not supported.");
  }

  if (!destination) {
    destination = source;
    if (source) {
      if (isArray(source)) {
        destination = copy(source, [], stackSource, stackDest);
      } else if (isDate(source)) {
        destination = new Date(source.getTime());
      } else if (isRegExp(source)) {
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
        destination.lastIndex = source.lastIndex;
      } else if (isObject(source)) {
        var emptyObject = Object.create(Object.getPrototypeOf(source));
        destination = copy(source, emptyObject, stackSource, stackDest);
      }
    }
  } else {
    if (source === destination) throw ngMinErr('cpi',
      "Can't copy! Source and destination are identical.");

    stackSource = stackSource || [];
    stackDest = stackDest || [];

    if (isObject(source)) {
      var index = stackSource.indexOf(source);
      if (index !== -1) return stackDest[index];

      stackSource.push(source);
      stackDest.push(destination);
    }

    var result;
    if (isArray(source)) {
      destination.length = 0;
      for (var i = 0; i < source.length; i++) {
        result = copy(source[i], null, stackSource, stackDest);
        if (isObject(source[i])) {
          stackSource.push(source[i]);
          stackDest.push(result);
        }
        destination.push(result);
      }
    } else {
      var h = destination.$$hashKey;
      if (isArray(destination)) {
        destination.length = 0;
      } else {
        forEach(destination, function(value, key) {
          delete destination[key];
        });
      }
      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          result = copy(source[key], null, stackSource, stackDest);
          if (isObject(source[key])) {
            stackSource.push(source[key]);
            stackDest.push(result);
          }
          destination[key] = result;
        }
      }
      setHashKey(destination,h);
    }

  }
  return destination;
}

/**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for (var i = 0, ii = src.length; i < ii; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2) {
    if (t1 == 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false;
        if ((length = o1.length) == o2.length) {
          for (key = 0; key < length; key++) {
            if (!equals(o1[key], o2[key])) return false;
          }
          return true;
        }
      } else if (isDate(o1)) {
        if (!isDate(o2)) return false;
        return equals(o1.getTime(), o2.getTime());
      } else if (isRegExp(o1)) {
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;
      } else {
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
        keySet = {};
        for (key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
          if (!equals(o1[key], o2[key])) return false;
          keySet[key] = true;
        }
        for (key in o2) {
          if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
        }
        return true;
      }
    }
  }
  return false;
}

var csp = function() {
  if (isDefined(csp.isActive_)) return csp.isActive_;

  var active = !!(document.querySelector('[ng-csp]') ||
                  document.querySelector('[data-ng-csp]'));

  if (!active) {
    try {
      /* jshint -W031, -W054 */
      new Function('');
      /* jshint +W031, +W054 */
    } catch (e) {
      active = true;
    }
  }

  return (csp.isActive_ = active);
};



function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/* jshint -W101 */
/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
/* jshint +W101 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, concat(curryArgs, arguments, 0))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean|number=} pretty If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation (the default is 2).
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (typeof obj === 'undefined') return undefined;
  if (!isNumber(pretty)) {
    pretty = pretty ? 2 : null;
  }
  return JSON.stringify(obj, toJsonReplacer, pretty);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch (e) {}
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
  } catch (e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch (e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {}, key_value, key;
  forEach((keyValue || "").split('&'), function(keyValue) {
    if (keyValue) {
      key_value = keyValue.replace(/\+/g,'%20').split('=');
      key = tryDecodeURIComponent(key_value[0]);
      if (isDefined(key)) {
        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
        if (!hasOwnProperty.call(obj, key)) {
          obj[key] = val;
        } else if (isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%3B/gi, ';').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}

var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

function getNgAttribute(element, ngAttr) {
  var attr, i, ii = ngAttrPrefixes.length;
  element = jqLite(element);
  for (i = 0; i < ii; ++i) {
    attr = ngAttrPrefixes[i] + ngAttr;
    if (isString(attr = element.attr(attr))) {
      return attr;
    }
  }
  return null;
}

/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = "World";
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
function angularInit(element, bootstrap) {
  var appElement,
      module,
      config = {};

  // The element `element` has priority over any other element
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';

    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
      appElement = element;
      module = element.getAttribute(name);
    }
  });
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';
    var candidate;

    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
      appElement = candidate;
      module = candidate.getAttribute(name);
    }
  });
  if (appElement) {
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
    bootstrap(appElement, module ? [module] : [], config);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules, config) {
  if (!isObject(config)) config = {};
  var defaultConfig = {
    strictDi: false
  };
  config = extend(defaultConfig, config);
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      //Encode angle brackets to prevent input from being sanitized to empty string #8683
      throw ngMinErr(
          'btstrpd',
          "App Already Bootstrapped with this Element '{0}'",
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);

    if (config.debugInfoEnabled) {
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
      modules.push(['$compileProvider', function($compileProvider) {
        $compileProvider.debugInfoEnabled(true);
      }]);
    }

    modules.unshift('ng');
    var injector = createInjector(modules, config.strictDi);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
       function bootstrapApply(scope, element, compile, injector) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
    config.debugInfoEnabled = true;
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
  }

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    return doBootstrap();
  };

  if (isFunction(angular.resumeDeferredBootstrap)) {
    angular.resumeDeferredBootstrap();
  }
}

/**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */
function reloadWithDebugInfo() {
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
  window.location.reload();
}

/**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */
function getTestability(rootElement) {
  var injector = angular.element(rootElement).injector();
  if (!injector) {
    throw ngMinErr('test',
      'no injector found for element argument to getTestability');
  }
  return injector.get('$$testability');
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator) {
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

var bindJQueryFired = false;
var skipDestroyOnNextJQueryCleanData;
function bindJQuery() {
  var originalCleanData;

  if (bindJQueryFired) {
    return;
  }

  // bind to jQuery if present;
  jQuery = window.jQuery;
  // Use jQuery if it exists with proper functionality, otherwise default to us.
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
  // versions. It will not work for sure with jQuery <1.7, though.
  if (jQuery && jQuery.fn.on) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });

    // All nodes removed from the DOM via various jQuery APIs like .remove()
    // are passed through jQuery.cleanData. Monkey-patch this method to fire
    // the $destroy event on all removed nodes.
    originalCleanData = jQuery.cleanData;
    jQuery.cleanData = function(elems) {
      var events;
      if (!skipDestroyOnNextJQueryCleanData) {
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {
          events = jQuery._data(elem, "events");
          if (events && events.$destroy) {
            jQuery(elem).triggerHandler('$destroy');
          }
        }
      } else {
        skipDestroyOnNextJQueryCleanData = false;
      }
      originalCleanData(elems);
    };
  } else {
    jqLite = JQLite;
  }

  angular.element = jqLite;

  // Prevent double-proxying.
  bindJQueryFired = true;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {jqLite} jqLite collection containing the nodes
 */
function getBlockNodes(nodes) {
  // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original
  //             collection, otherwise update the original collection.
  var node = nodes[0];
  var endNode = nodes[nodes.length - 1];
  var blockNodes = [node];

  do {
    node = node.nextSibling;
    if (!node) break;
    blockNodes.push(node);
  } while (node !== endNode);

  return jqLite(blockNodes);
}


/**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */
function createMap() {
  return Object.create(null);
}

var NODE_TYPE_ELEMENT = 1;
var NODE_TYPE_TEXT = 3;
var NODE_TYPE_COMMENT = 8;
var NODE_TYPE_DOCUMENT = 9;
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
             "the module name or forgot to load it. If registering a module ensure that you " +
             "specify the dependencies as the second argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var configBlocks = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _configBlocks: configBlocks,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */
          provider: invokeLater('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */
          factory: invokeLater('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */
          service: invokeLater('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constant are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link ngAnimate.$animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ng.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLater('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name.
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           */
          filter: invokeLater('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLater('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLater('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#provider-recipe Provider Recipe}.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod, queue) {
          if (!queue) queue = invokeQueue;
          return function() {
            queue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global: toDebugString: true */

function serializeObject(obj) {
  var seen = [];

  return JSON.stringify(obj, function(key, val) {
    val = toJsonReplacer(key, val);
    if (isObject(val)) {

      if (seen.indexOf(val) >= 0) return '<<already seen>>';

      seen.push(val);
    }
    return val;
  });
}

function toDebugString(obj) {
  if (typeof obj === 'function') {
    return obj.toString().replace(/ \{[\s\S]*$/, '');
  } else if (typeof obj === 'undefined') {
    return 'undefined';
  } else if (typeof obj !== 'string') {
    return serializeObject(obj);
  }
  return obj;
}

/* global angularModule: true,
  version: true,

  $LocaleProvider,
  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  styleDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCspDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DocumentProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $HttpProvider,
  $HttpBackendProvider,
  $LocationProvider,
  $LogProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $$AsyncCallbackProvider,
  $WindowProvider,
  $$jqLiteProvider
*/


/**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.3.15',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 3,
  dot: 15,
  codeName: 'locality-filtration'
};


function publishExternalAPI(angular) {
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop': noop,
    'bind': bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity': identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0},
    'getTestability': getTestability,
    '$$minErr': minErr,
    '$$csp': csp,
    'reloadWithDebugInfo': reloadWithDebugInfo
  });

  angularModule = setupModuleLoader(window);
  try {
    angularModule('ngLocale');
  } catch (e) {
    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
  }

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            pattern: patternDirective,
            ngPattern: patternDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            minlength: minlengthDirective,
            ngMinlength: minlengthDirective,
            maxlength: maxlengthDirective,
            ngMaxlength: maxlengthDirective,
            ngValue: ngValueDirective,
            ngModelOptions: ngModelOptionsDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpBackend: $HttpBackendProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $$q: $$QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $templateRequest: $TemplateRequestProvider,
        $$testability: $$TestabilityProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$rAF: $$RAFProvider,
        $$asyncCallback: $$AsyncCallbackProvider,
        $$jqLite: $$jqLiteProvider
      });
    }
  ]);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true,
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use jQuery, simply load it before `DOMContentLoaded` event fired.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

JQLite.expando = 'ng339';

var jqCache = JQLite.cache = {},
    jqId = 1,
    addEventListenerFn = function(element, type, fn) {
      element.addEventListener(type, fn, false);
    },
    removeEventListenerFn = function(element, type, fn) {
      element.removeEventListener(type, fn, false);
    };

/*
 * !!! This is an undocumented "private" function !!!
 */
JQLite._data = function(node) {
  //jQuery always returns an object on cache miss
  return this.cache[node[this.expando]] || {};
};

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
var HTML_REGEXP = /<|&#?\w+;/;
var TAG_NAME_REGEXP = /<([\w:]+)/;
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

var wrapMap = {
  'option': [1, '<select multiple="multiple">', '</select>'],

  'thead': [1, '<table>', '</table>'],
  'col': [2, '<table><colgroup>', '</colgroup></table>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  '_default': [0, "", ""]
};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function jqLiteIsTextNode(html) {
  return !HTML_REGEXP.test(html);
}

function jqLiteAcceptsData(node) {
  // The window object can accept data but has no nodeType
  // Otherwise we are only interested in elements (1) and documents (9)
  var nodeType = node.nodeType;
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
}

function jqLiteBuildFragment(html, context) {
  var tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i;

  if (jqLiteIsTextNode(html)) {
    // Convert non-html into a text node
    nodes.push(context.createTextNode(html));
  } else {
    // Convert html into DOM nodes
    tmp = tmp || fragment.appendChild(context.createElement("div"));
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
    wrap = wrapMap[tag] || wrapMap._default;
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

    // Descend through wrappers to the right content
    i = wrap[0];
    while (i--) {
      tmp = tmp.lastChild;
    }

    nodes = concat(nodes, tmp.childNodes);

    tmp = fragment.firstChild;
    tmp.textContent = "";
  }

  // Remove wrapper from fragment
  fragment.textContent = "";
  fragment.innerHTML = ""; // Clear inner HTML
  forEach(nodes, function(node) {
    fragment.appendChild(node);
  });

  return fragment;
}

function jqLiteParseHTML(html, context) {
  context = context || document;
  var parsed;

  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
    return [context.createElement(parsed[1])];
  }

  if ((parsed = jqLiteBuildFragment(html, context))) {
    return parsed.childNodes;
  }

  return [];
}

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }

  var argIsString;

  if (isString(element)) {
    element = trim(element);
    argIsString = true;
  }
  if (!(this instanceof JQLite)) {
    if (argIsString && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (argIsString) {
    jqLiteAddNodes(this, jqLiteParseHTML(element));
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element, onlyDescendants) {
  if (!onlyDescendants) jqLiteRemoveData(element);

  if (element.querySelectorAll) {
    var descendants = element.querySelectorAll('*');
    for (var i = 0, l = descendants.length; i < l; i++) {
      jqLiteRemoveData(descendants[i]);
    }
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var expandoStore = jqLiteExpandoStore(element);
  var events = expandoStore && expandoStore.events;
  var handle = expandoStore && expandoStore.handle;

  if (!handle) return; //no listeners registered

  if (!type) {
    for (type in events) {
      if (type !== '$destroy') {
        removeEventListenerFn(element, type, handle);
      }
      delete events[type];
    }
  } else {
    forEach(type.split(' '), function(type) {
      if (isDefined(fn)) {
        var listenerFns = events[type];
        arrayRemove(listenerFns || [], fn);
        if (listenerFns && listenerFns.length > 0) {
          return;
        }
      }

      removeEventListenerFn(element, type, handle);
      delete events[type];
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element.ng339;
  var expandoStore = expandoId && jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete expandoStore.data[name];
      return;
    }

    if (expandoStore.handle) {
      if (expandoStore.events.$destroy) {
        expandoStore.handle({}, '$destroy');
      }
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
  }
}


function jqLiteExpandoStore(element, createIfNecessary) {
  var expandoId = element.ng339,
      expandoStore = expandoId && jqCache[expandoId];

  if (createIfNecessary && !expandoStore) {
    element.ng339 = expandoId = jqNextId();
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
  }

  return expandoStore;
}


function jqLiteData(element, key, value) {
  if (jqLiteAcceptsData(element)) {

    var isSimpleSetter = isDefined(value);
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
    var massGetter = !key;
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
    var data = expandoStore && expandoStore.data;

    if (isSimpleSetter) { // data('key', value)
      data[key] = value;
    } else {
      if (massGetter) {  // data()
        return data;
      } else {
        if (isSimpleGetter) { // data('key')
          // don't force creation of expandoStore if it doesn't exist yet
          return data && data[key];
        } else { // mass-setter: data({key1: val1, key2: val2})
          extend(data, key);
        }
      }
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf(" " + selector + " ") > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (" " + (element.getAttribute('class') || '') + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " "))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, " ");

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}


function jqLiteAddNodes(root, elements) {
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

  if (elements) {

    // if a Node (the most common case)
    if (elements.nodeType) {
      root[root.length++] = elements;
    } else {
      var length = elements.length;

      // if an Array or NodeList and not a Window
      if (typeof length === 'number' && elements.window !== elements) {
        if (length) {
          for (var i = 0; i < length; i++) {
            root[root.length++] = elements[i];
          }
        }
      } else {
        root[root.length++] = elements;
      }
    }
  }
}


function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if (element.nodeType == NODE_TYPE_DOCUMENT) {
    element = element.documentElement;
  }
  var names = isArray(name) ? name : [name];

  while (element) {
    for (var i = 0, ii = names.length; i < ii; i++) {
      if ((value = jqLite.data(element, names[i])) !== undefined) return value;
    }

    // If dealing with a document fragment node with a host element, and no parent, use the host
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
    // to lookup parent controllers.
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
  }
}

function jqLiteEmpty(element) {
  jqLiteDealoc(element, true);
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

function jqLiteRemove(element, keepData) {
  if (!keepData) jqLiteDealoc(element);
  var parent = element.parentNode;
  if (parent) parent.removeChild(element);
}


function jqLiteDocumentLoaded(action, win) {
  win = win || window;
  if (win.document.readyState === 'complete') {
    // Force the action to be run async for consistent behaviour
    // from the action's point of view
    // i.e. it will definitely not be in a $apply
    win.setTimeout(action);
  } else {
    // No need to unbind this handler as load is only ever called once
    jqLite(win).on('load', action);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document is already loaded
    if (document.readyState === 'complete') {
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      // jshint -W064
      JQLite(window).on('load', trigger); // fallback to window.onload for others
      // jshint +W064
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e) { value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[value] = true;
});
var ALIASED_ATTR = {
  'ngMinlength': 'minlength',
  'ngMaxlength': 'maxlength',
  'ngMin': 'min',
  'ngMax': 'max',
  'ngPattern': 'pattern'
};

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
}

function getAliasedAttrName(element, name) {
  var nodeName = element.nodeName;
  return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];
}

forEach({
  data: jqLiteData,
  removeData: jqLiteRemoveData
}, function(fn, name) {
  JQLite[name] = fn;
});

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
  },

  controller: jqLiteController,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element, name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      return element.style[name];
    }
  },

  attr: function(element, name, value) {
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name) || noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      if (isUndefined(value)) {
        var nodeType = element.nodeType;
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
      }
      element.textContent = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (element.multiple && nodeName_(element) === 'select') {
        var result = [];
        forEach(element.options, function(option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    jqLiteDealoc(element, true);
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name) {
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;
    var nodeCount = this.length;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < nodeCount; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        // TODO: do we still need this?
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < nodeCount; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function(event, type) {
    // jQuery specific api
    event.isDefaultPrevented = function() {
      return event.defaultPrevented;
    };

    var eventFns = events[type || event.type];
    var eventFnsLength = eventFns ? eventFns.length : 0;

    if (!eventFnsLength) return;

    if (isUndefined(event.immediatePropagationStopped)) {
      var originalStopImmediatePropagation = event.stopImmediatePropagation;
      event.stopImmediatePropagation = function() {
        event.immediatePropagationStopped = true;

        if (event.stopPropagation) {
          event.stopPropagation();
        }

        if (originalStopImmediatePropagation) {
          originalStopImmediatePropagation.call(event);
        }
      };
    }

    event.isImmediatePropagationStopped = function() {
      return event.immediatePropagationStopped === true;
    };

    // Copy event handlers in case event handlers array is modified during execution.
    if ((eventFnsLength > 1)) {
      eventFns = shallowCopy(eventFns);
    }

    for (var i = 0; i < eventFnsLength; i++) {
      if (!event.isImmediatePropagationStopped()) {
        eventFns[i].call(element, event);
      }
    }
  };

  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
  //       events on `element`
  eventHandler.elem = element;
  return eventHandler;
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  on: function jqLiteOn(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    // Do not add event handlers to non-elements because they will not be cleaned up.
    if (!jqLiteAcceptsData(element)) {
      return;
    }

    var expandoStore = jqLiteExpandoStore(element, true);
    var events = expandoStore.events;
    var handle = expandoStore.handle;

    if (!handle) {
      handle = expandoStore.handle = createEventHandler(element, events);
    }

    // http://jsperf.com/string-indexof-vs-split
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
    var i = types.length;

    while (i--) {
      type = types[i];
      var eventFns = events[type];

      if (!eventFns) {
        events[type] = [];

        if (type === 'mouseenter' || type === 'mouseleave') {
          // Refer to jQuery's implementation of mouseenter & mouseleave
          // Read about mouseenter and mouseleave:
          // http://www.quirksmode.org/js/events_mouse.html#link8

          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {
            var target = this, related = event.relatedTarget;
            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || (related !== target && !target.contains(related))) {
              handle(event, type);
            }
          });

        } else {
          if (type !== '$destroy') {
            addEventListenerFn(element, type, handle);
          }
        }
        eventFns = events[type];
      }
      eventFns.push(fn);
    }
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node) {
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element) {
      if (element.nodeType === NODE_TYPE_ELEMENT)
        children.push(element);
    });
    return children;
  },

  contents: function(element) {
    return element.contentDocument || element.childNodes || [];
  },

  append: function(element, node) {
    var nodeType = element.nodeType;
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

    node = new JQLite(node);

    for (var i = 0, ii = node.length; i < ii; i++) {
      var child = node[i];
      element.appendChild(child);
    }
  },

  prepend: function(element, node) {
    if (element.nodeType === NODE_TYPE_ELEMENT) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child) {
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];
    var parent = element.parentNode;
    if (parent) {
      parent.replaceChild(wrapNode, element);
    }
    wrapNode.appendChild(element);
  },

  remove: jqLiteRemove,

  detach: function(element) {
    jqLiteRemove(element, true);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    newElement = new JQLite(newElement);

    for (var i = 0, ii = newElement.length; i < ii; i++) {
      var node = newElement[i];
      parent.insertBefore(node, index.nextSibling);
      index = node;
    }
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (selector) {
      forEach(selector.split(' '), function(className) {
        var classCondition = condition;
        if (isUndefined(classCondition)) {
          classCondition = !jqLiteHasClass(element, className);
        }
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
      });
    }
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
  },

  next: function(element) {
    return element.nextElementSibling;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, event, extraParameters) {

    var dummyEvent, eventFnsCopy, handlerArgs;
    var eventName = event.type || event;
    var expandoStore = jqLiteExpandoStore(element);
    var events = expandoStore && expandoStore.events;
    var eventFns = events && events[eventName];

    if (eventFns) {
      // Create a dummy event to pass to the handlers
      dummyEvent = {
        preventDefault: function() { this.defaultPrevented = true; },
        isDefaultPrevented: function() { return this.defaultPrevented === true; },
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
        stopPropagation: noop,
        type: eventName,
        target: element
      };

      // If a custom event was provided then extend our dummy event with it
      if (event.type) {
        dummyEvent = extend(dummyEvent, event);
      }

      // Copy event handlers in case event handlers array is modified during execution.
      eventFnsCopy = shallowCopy(eventFns);
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

      forEach(eventFnsCopy, function(fn) {
        if (!dummyEvent.isImmediatePropagationStopped()) {
          fn.apply(element, handlerArgs);
        }
      });
    }
  }
}, function(fn, name) {
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;

    for (var i = 0, ii = this.length; i < ii; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});


// Provider for private $$jqLite service
function $$jqLiteProvider() {
  this.$get = function $$jqLite() {
    return extend(JQLite, {
      hasClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteHasClass(node, classes);
      },
      addClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteAddClass(node, classes);
      },
      removeClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteRemoveClass(node, classes);
      }
    });
  };
}

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj, nextUidFn) {
  var key = obj && obj.$$hashKey;

  if (key) {
    if (typeof key === 'function') {
      key = obj.$$hashKey();
    }
    return key;
  }

  var objType = typeof obj;
  if (objType == 'function' || (objType == 'object' && obj !== null)) {
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
  } else {
    key = objType + ':' + obj;
  }

  return key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array, isolatedUid) {
  if (isolatedUid) {
    var uid = 0;
    this.nextUid = function() {
      return ++uid;
    };
  }
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key, this.nextUid)] = value;
  },

  /**
   * @param key
   * @returns {Object} the value for the key
   */
  get: function(key) {
    return this[hashKey(key, this.nextUid)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key, this.nextUid)];
    delete this[key];
    return value;
  }
};

/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */


/**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */

var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');

function anonFn(fn) {
  // For anonymous functions, showing at the very least the function signature can help in
  // debugging.
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
      args = fnText.match(FN_ARGS);
  if (args) {
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
  }
  return 'fn';
}

function annotate(fn, strictDi, name) {
  var $inject,
      fnText,
      argDecl,
      last;

  if (typeof fn === 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        if (strictDi) {
          if (!isString(name) || !name) {
            name = fn.name || anonFn(fn);
          }
          throw $injectorMinErr('strictdi',
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
        }
        fnText = fn.toString().replace(STRIP_COMMENTS, '');
        argDecl = fnText.match(FN_ARGS);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
          arg.replace(FN_ARG, function(all, underscore, name) {
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!Function} fn The function to invoke. Function parameters are injected according to the
 *   {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */

/**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

/**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
 *                            for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */


function createInjector(modulesToLoad, strictDi) {
  strictDi = (strictDi === true);
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap([], true),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
              path.push(caller);
            }
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function enforceReturnValue(name, factory) {
    return function enforcedReturnValue() {
      var result = instanceInjector.invoke(factory, this);
      if (isUndefined(result)) {
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
      }
      return result;
    };
  }

  function factory(name, factoryFn, enforce) {
    return provider(name, {
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
    });
  }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val), false); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad) {
    var runBlocks = [], moduleFn;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      function runInvokeQueue(queue) {
        var i, ii;
        for (i = 0, ii = queue.length; i < ii; i++) {
          var invokeArgs = queue[i],
              provider = providerInjector.get(invokeArgs[0]);

          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
        }
      }

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
          runInvokeQueue(moduleFn._invokeQueue);
          runInvokeQueue(moduleFn._configBlocks);
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          /* jshint -W022 */
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName, caller) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
                    serviceName + ' <- ' + path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName, caller);
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }

    function invoke(fn, self, locals, serviceName) {
      if (typeof locals === 'string') {
        serviceName = locals;
        locals = null;
      }

      var args = [],
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),
          length, i,
          key;

      for (i = 0, length = $inject.length; i < length; i++) {
        key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(
          locals && locals.hasOwnProperty(key)
          ? locals[key]
          : getService(key, serviceName)
        );
      }
      if (isArray(fn)) {
        fn = fn[length];
      }

      // http://jsperf.com/angularjs-invoke-apply-vs-switch
      // #5388
      return fn.apply(self, args);
    }

    function instantiate(Type, locals, serviceName) {
      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      // Object creation: http://jsperf.com/create-constructor/2
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
      var returnedValue = invoke(Type, instance, locals, serviceName);

      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
    }

    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: createInjector.$$annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

createInjector.$$annotate = annotate;

/**
 * @ngdoc provider
 * @name $anchorScrollProvider
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it checks the current value of {@link ng.$location#hash $location.hash()} and
   * scrolls to the related element, according to the rules specified in the
   * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function ($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function ($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // Helper function to get first anchor from a NodeList
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
    //  and working in all supported browsers.)
    function getFirstAnchor(list) {
      var result = null;
      Array.prototype.some.call(list, function(element) {
        if (nodeName_(element) === 'a') {
          result = element;
          return true;
        }
      });
      return result;
    }

    function getYOffset() {

      var offset = scroll.yOffset;

      if (isFunction(offset)) {
        offset = offset();
      } else if (isElement(offset)) {
        var elem = offset[0];
        var style = $window.getComputedStyle(elem);
        if (style.position !== 'fixed') {
          offset = 0;
        } else {
          offset = elem.getBoundingClientRect().bottom;
        }
      } else if (!isNumber(offset)) {
        offset = 0;
      }

      return offset;
    }

    function scrollTo(elem) {
      if (elem) {
        elem.scrollIntoView();

        var offset = getYOffset();

        if (offset) {
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
          // top of the viewport.
          //
          // IF the number of pixels from the top of `elem` to the end of the page's content is less
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
          // way down the page.
          //
          // This is often the case for elements near the bottom of the page.
          //
          // In such cases we do not need to scroll the whole `offset` up, just the difference between
          // the top of the element and the offset, which is enough to align the top of `elem` at the
          // desired position.
          var elemTop = elem.getBoundingClientRect().top;
          $window.scrollBy(0, elemTop - offset);
        }
      } else {
        $window.scrollTo(0, 0);
      }
    }

    function scroll() {
      var hash = $location.hash(), elm;

      // empty hash, scroll to the top of the page
      if (!hash) scrollTo(null);

      // element with given id
      else if ((elm = document.getElementById(hash))) scrollTo(elm);

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') scrollTo(null);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction(newVal, oldVal) {
          // skip the initial scroll if $location.hash is empty
          if (newVal === oldVal && newVal === '') return;

          jqLiteDocumentLoaded(function() {
            $rootScope.$evalAsync(scroll);
          });
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');

/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
var $AnimateProvider = ['$provide', function($provide) {


  this.$$selectors = {};


  /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   * ```js
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   * ```
   *
   * @param {string} name The name of the animation.
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    var key = name + '-animation';
    if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
    this.$$selectors[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if (arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$$q', '$$asyncCallback', '$rootScope', function($$q, $$asyncCallback, $rootScope) {

    var currentDefer;

    function runAnimationPostDigest(fn) {
      var cancelFn, defer = $$q.defer();
      defer.promise.$$cancelFn = function ngAnimateMaybeCancel() {
        cancelFn && cancelFn();
      };

      $rootScope.$$postDigest(function ngAnimatePostDigest() {
        cancelFn = fn(function ngAnimateNotifyComplete() {
          defer.resolve();
        });
      });

      return defer.promise;
    }

    function resolveElementClasses(element, classes) {
      var toAdd = [], toRemove = [];

      var hasClasses = createMap();
      forEach((element.attr('class') || '').split(/\s+/), function(className) {
        hasClasses[className] = true;
      });

      forEach(classes, function(status, className) {
        var hasClass = hasClasses[className];

        // If the most recent class manipulation (via $animate) was to remove the class, and the
        // element currently has the class, the class is scheduled for removal. Otherwise, if
        // the most recent class manipulation (via $animate) was to add the class, and the
        // element does not currently have the class, the class is scheduled to be added.
        if (status === false && hasClass) {
          toRemove.push(className);
        } else if (status === true && !hasClass) {
          toAdd.push(className);
        }
      });

      return (toAdd.length + toRemove.length) > 0 &&
        [toAdd.length ? toAdd : null, toRemove.length ? toRemove : null];
    }

    function cachedClassManipulation(cache, classes, op) {
      for (var i=0, ii = classes.length; i < ii; ++i) {
        var className = classes[i];
        cache[className] = op;
      }
    }

    function asyncPromise() {
      // only serve one instance of a promise in order to save CPU cycles
      if (!currentDefer) {
        currentDefer = $$q.defer();
        $$asyncCallback(function() {
          currentDefer.resolve();
          currentDefer = null;
        });
      }
      return currentDefer.promise;
    }

    function applyStyles(element, options) {
      if (angular.isObject(options)) {
        var styles = extend(options.from || {}, options.to || {});
        element.css(styles);
      }
    }

    /**
     *
     * @ngdoc service
     * @name $animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
    return {
      animate: function(element, from, to) {
        applyStyles(element, { from: from, to: to });
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element or
       * as the first child within the `parent` element. When the function is called a promise
       * is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (if the after element is not present)
       * @param {DOMElement} after the sibling element which will append the element
       *   after itself
       * @param {object=} options an optional collection of styles that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      enter: function(element, parent, after, options) {
        applyStyles(element, options);
        after ? after.after(element)
              : parent.prepend(element);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Removes the element from the DOM. When the function is called a promise
       * is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      leave: function(element, options) {
        applyStyles(element, options);
        element.remove();
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Moves the position of the provided element within the DOM to be placed
       * either after the `after` element or inside of the `parent` element. When the function
       * is called a promise is returned that will be resolved at a later time.
       *
       * @param {DOMElement} element the element which will be moved around within the
       *   DOM
       * @param {DOMElement} parent the parent element where the element will be
       *   inserted into (if the after element is not present)
       * @param {DOMElement} after the sibling element where the element will be
       *   positioned next to
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      move: function(element, parent, after, options) {
        // Do not remove element before insert. Removing will cause data associated with the
        // element to be dropped. Insert will implicitly do the remove.
        return this.enter(element, parent, after, options);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       * @description Adds the provided className CSS class value to the provided element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have the className value
       *   added to it
       * @param {string} className the CSS class which will be added to the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      addClass: function(element, className, options) {
        return this.setClass(element, className, [], options);
      },

      $$addClassImmediately: function(element, className, options) {
        element = jqLite(element);
        className = !isString(className)
                        ? (isArray(className) ? className.join(' ') : '')
                        : className;
        forEach(element, function(element) {
          jqLiteAddClass(element, className);
        });
        applyStyles(element, options);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       * @description Removes the provided className CSS class value from the provided element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have the className value
       *   removed from it
       * @param {string} className the CSS class which will be removed from the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      removeClass: function(element, className, options) {
        return this.setClass(element, [], className, options);
      },

      $$removeClassImmediately: function(element, className, options) {
        element = jqLite(element);
        className = !isString(className)
                        ? (isArray(className) ? className.join(' ') : '')
                        : className;
        forEach(element, function(element) {
          jqLiteRemoveClass(element, className);
        });
        applyStyles(element, options);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       * @description Adds and/or removes the given CSS classes to and from the element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have its CSS classes changed
       *   removed from it
       * @param {string} add the CSS classes which will be added to the element
       * @param {string} remove the CSS class which will be removed from the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      setClass: function(element, add, remove, options) {
        var self = this;
        var STORAGE_KEY = '$$animateClasses';
        var createdCache = false;
        element = jqLite(element);

        var cache = element.data(STORAGE_KEY);
        if (!cache) {
          cache = {
            classes: {},
            options: options
          };
          createdCache = true;
        } else if (options && cache.options) {
          cache.options = angular.extend(cache.options || {}, options);
        }

        var classes = cache.classes;

        add = isArray(add) ? add : add.split(' ');
        remove = isArray(remove) ? remove : remove.split(' ');
        cachedClassManipulation(classes, add, true);
        cachedClassManipulation(classes, remove, false);

        if (createdCache) {
          cache.promise = runAnimationPostDigest(function(done) {
            var cache = element.data(STORAGE_KEY);
            element.removeData(STORAGE_KEY);

            // in the event that the element is removed before postDigest
            // is run then the cache will be undefined and there will be
            // no need anymore to add or remove and of the element classes
            if (cache) {
              var classes = resolveElementClasses(element, cache.classes);
              if (classes) {
                self.$$setClassImmediately(element, classes[0], classes[1], cache.options);
              }
            }

            done();
          });
          element.data(STORAGE_KEY, cache);
        }

        return cache.promise;
      },

      $$setClassImmediately: function(element, add, remove, options) {
        add && this.$$addClassImmediately(element, add);
        remove && this.$$removeClassImmediately(element, remove);
        applyStyles(element, options);
        return asyncPromise();
      },

      enabled: noop,
      cancel: noop
    };
  }];
}];

function $$AsyncCallbackProvider() {
  this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {
    return $$rAF.supported
      ? function(fn) { return $$rAF(fn); }
      : function(fn) {
        return $timeout(fn, 0, false);
      };
  }];
}

/* global stripHash: true */

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while (outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  function getHash(url) {
    var index = url.indexOf('#');
    return index === -1 ? '' : url.substr(index + 1);
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
    // at some deterministic time in respect to the test runner's actions. Leaving things up to the
    // regular poller would result in flaky tests.
    forEach(pollFns, function(pollFn) { pollFn(); });

    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // Poll Watcher API
  //////////////////////////////////////////////////////////////
  var pollFns = [],
      pollTimeout;

  /**
   * @name $browser#addPollFn
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
  self.addPollFn = function(fn) {
    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
    pollFns.push(fn);
    return fn;
  };

  /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
  function startPoller(interval, setTimeout) {
    (function check() {
      forEach(pollFns, function(pollFn) { pollFn(); });
      pollTimeout = setTimeout(check, interval);
    })();
  }

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var cachedState, lastHistoryState,
      lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      reloadLocation = null;

  cacheState();
  lastHistoryState = cachedState;

  /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */
  self.url = function(url, replace, state) {
    // In modern browsers `history.state` is `null` by default; treating it separately
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
    if (isUndefined(state)) {
      state = null;
    }

    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      var sameState = lastHistoryState === state;

      // Don't change anything if previous and current URLs and states match. This also prevents
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
      // See https://github.com/angular/angular.js/commit/ffb2701
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
        return self;
      }
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
      lastBrowserUrl = url;
      lastHistoryState = state;
      // Don't use history API if only the hash changed
      // due to a bug in IE10/IE11 which leads
      // to not firing a `hashchange` nor `popstate` event
      // in some cases (see #9143).
      if ($sniffer.history && (!sameBase || !sameState)) {
        history[replace ? 'replaceState' : 'pushState'](state, '', url);
        cacheState();
        // Do the assignment again so that those two variables are referentially identical.
        lastHistoryState = cachedState;
      } else {
        if (!sameBase) {
          reloadLocation = url;
        }
        if (replace) {
          location.replace(url);
        } else if (!sameBase) {
          location.href = url;
        } else {
          location.hash = getHash(url);
        }
      }
      return self;
    // getter
    } else {
      // - reloadLocation is needed as browsers don't allow to read out
      //   the new location.href if a reload happened.
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return reloadLocation || location.href.replace(/%27/g,"'");
    }
  };

  /**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */
  self.state = function() {
    return cachedState;
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function cacheStateAndFireUrlChange() {
    cacheState();
    fireUrlChange();
  }

  function getCurrentState() {
    try {
      return history.state;
    } catch (e) {
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).
    }
  }

  // This variable should be used *only* inside the cacheState function.
  var lastCachedState = null;
  function cacheState() {
    // This should be the only place in $browser where `history.state` is read.
    cachedState = getCurrentState();
    cachedState = isUndefined(cachedState) ? null : cachedState;

    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
    if (equals(cachedState, lastCachedState)) {
      cachedState = lastCachedState;
    }
    lastCachedState = cachedState;
  }

  function fireUrlChange() {
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
      return;
    }

    lastBrowserUrl = self.url();
    lastHistoryState = cachedState;
    forEach(urlChangeListeners, function(listener) {
      listener(self.url(), cachedState);
    });
  }

  /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    // TODO(vojta): refactor to use node's syntax for events
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
      // hashchange event
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
  self.$$checkUrlChange = fireUrlChange;

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
  };

  //////////////////////////////////////////////////////////////
  // Cookies API
  //////////////////////////////////////////////////////////////
  var lastCookies = {};
  var lastCookieString = '';
  var cookiePath = self.baseHref();

  function safeDecodeURIComponent(str) {
    try {
      return decodeURIComponent(str);
    } catch (e) {
      return str;
    }
  }

  /**
   * @name $browser#cookies
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
  self.cookies = function(name, value) {
    var cookieLength, cookieArray, cookie, i, index;

    if (name) {
      if (value === undefined) {
        rawDocument.cookie = encodeURIComponent(name) + "=;path=" + cookiePath +
                                ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
      } else {
        if (isString(value)) {
          cookieLength = (rawDocument.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) +
                                ';path=' + cookiePath).length + 1;

          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
          // - 300 cookies
          // - 20 cookies per unique domain
          // - 4096 bytes per cookie
          if (cookieLength > 4096) {
            $log.warn("Cookie '" + name +
              "' possibly not set or overflowed because it was too large (" +
              cookieLength + " > 4096 bytes)!");
          }
        }
      }
    } else {
      if (rawDocument.cookie !== lastCookieString) {
        lastCookieString = rawDocument.cookie;
        cookieArray = lastCookieString.split("; ");
        lastCookies = {};

        for (i = 0; i < cookieArray.length; i++) {
          cookie = cookieArray[i];
          index = cookie.indexOf('=');
          if (index > 0) { //ignore nameless cookies
            name = safeDecodeURIComponent(cookie.substring(0, index));
            // the first value that is seen for a cookie is the most
            // specific one.  values for the same cookie name that
            // follow are for less specific paths.
            if (lastCookies[name] === undefined) {
              lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
            }
          }
        }
      }
      return lastCookies;
    }
  };


  /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider() {
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if ($scope.cache.get(key) === undefined) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, value === undefined ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

      /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
      return caches[cacheId] = {

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function(key, value) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

            refresh(lruEntry);
          }

          if (isUndefined(value)) return;
          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            refresh(lruEntry);
          }

          return data[key];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
            link(lruEntry.n,lruEntry.p);

            delete lruHash[key];
          }

          delete data[key];
          size--;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */
        removeAll: function() {
          data = {};
          size = 0;
          lruHash = {};
          freshEnd = staleEnd = null;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */
        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */
        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the `$templateCache` service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       templateNamespace: 'html',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringAlias',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true, the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioural (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 * #### `bindToController`
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
 * is instantiated, the initial values of the isolate scope bindings are already available.
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement)`.
 *    * `scope`: optional argument to override the scope.
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
 *    * `futureParentElement`:
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkinFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised (unless no link function
 * is specified, in which case error checking is skipped). The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Controller alias at the directive scope. An alias for the controller so it
 * can be referenced at the directive template. The directive needs to define a scope for this
 * configuration to be used. Useful in the case when directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element or the entire element:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - a controller instance - A controller instance if at least one directive on the
 *     element defines a controller. The controller is shared among all the directives, which allows
 *     the directives to use the controllers as a communication channel.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude`
 *     parameter of directive controllers, see there for details.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
 * ```
 * - $rootScope
 *   - isolate
 *     - transclusion
 * ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
 * ```
 * - $rootScope
 *   - transclusion
 * - isolate
 * ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-error">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to controller instances; if given, it will make the controllers
 *        available to directives.
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

  function parseIsolateBindings(scope, directiveName) {
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;

    var bindings = {};

    forEach(scope, function(definition, scopeName) {
      var match = definition.match(LOCAL_REGEXP);

      if (!match) {
        throw $compileMinErr('iscp',
            "Invalid isolate scope definition for directive '{0}'." +
            " Definition: {... {1}: '{2}' ...}",
            directiveName, scopeName, definition);
      }

      bindings[scopeName] = {
        mode: match[1][0],
        collection: match[2] === '*',
        optional: match[3] === '?',
        attrName: match[4] || scopeName
      };
    });

    return bindings;
  }

  /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'EA';
                if (isObject(directive.scope)) {
                  directive.$$isolateBindings = parseIsolateBindings(directive.scope, directive.name);
                }
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };


  /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  /**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */
  var debugInfoEnabled = true;
  this.debugInfoEnabled = function(enabled) {
    if (isDefined(enabled)) {
      debugInfoEnabled = enabled;
      return this;
    }
    return debugInfoEnabled;
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

    var Attributes = function(element, attributesToCopy) {
      if (attributesToCopy) {
        var keys = Object.keys(attributesToCopy);
        var i, l, key;

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          this[key] = attributesToCopy[key];
        }
      } else {
        this.$attr = {};
      }

      this.$$element = element;
    };

    Attributes.prototype = {
      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$normalize
       * @kind function
       *
       * @description
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
       * `data-`) to its normalized, camelCase form.
       *
       * Also there is special case for Moz prefix starting with upper case letter.
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * @param {string} name Name to normalize
       */
      $normalize: directiveNormalize,


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass: function(newClasses, oldClasses) {
        var toAdd = tokenDifference(newClasses, oldClasses);
        if (toAdd && toAdd.length) {
          $animate.addClass(this.$$element, toAdd);
        }

        var toRemove = tokenDifference(oldClasses, newClasses);
        if (toRemove && toRemove.length) {
          $animate.removeClass(this.$$element, toRemove);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var node = this.$$element[0],
            booleanKey = getBooleanAttrName(node, key),
            aliasedKey = getAliasedAttrName(node, key),
            observer = key,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        } else if (aliasedKey) {
          this[aliasedKey] = value;
          observer = aliasedKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        if ((nodeName === 'a' && key === 'href') ||
            (nodeName === 'img' && key === 'src')) {
          // sanitize a[href] and img[src] values
          this[key] = value = $$sanitizeUri(value, key === 'src');
        } else if (nodeName === 'img' && key === 'srcset') {
          // sanitize img[srcset] values
          var result = "";

          // first check if there are spaces because it's not the same pattern
          var trimmedSrcset = trim(value);
          //                (   999x   ,|   999w   ,|   ,|,   )
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

          // split srcset into tuple of uri and descriptor except for the last item
          var rawUris = trimmedSrcset.split(pattern);

          // for each tuples
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
          for (var i = 0; i < nbrUrisWith2parts; i++) {
            var innerIdx = i * 2;
            // sanitize the uri
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
            // add the descriptor
            result += (" " + trim(rawUris[innerIdx + 1]));
          }

          // split the last item into uri and descriptor
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

          // sanitize the last uri
          result += $$sanitizeUri(trim(lastTuple[0]), true);

          // and add the last descriptor if any
          if (lastTuple.length === 2) {
            result += (" " + trim(lastTuple[1]));
          }
          this[key] = value = result;
        }

        if (writeAttr !== false) {
          if (value === null || value === undefined) {
            this.$$element.removeAttr(attrName);
          } else {
            this.$$element.attr(attrName, value);
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[observer], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });
      },


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter && attrs.hasOwnProperty(key)) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });

        return function() {
          arrayRemove(listeners, fn);
        };
      }
    };


    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch (e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }


    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;

    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
      var bindings = $element.data('$binding') || [];

      if (isArray(binding)) {
        bindings = bindings.concat(binding);
      } else {
        bindings.push(binding);
      }

      $element.data('$binding', bindings);
    } : noop;

    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
      safeAddClass($element, 'ng-binding');
    } : noop;

    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
      $element.data(dataName, scope);
    } : noop;

    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
    } : noop;

    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }
      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      forEach($compileNodes, function(node, index) {
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
        }
      });
      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      compile.$$addScopeClass($compileNodes);
      var namespace = null;
      return function publicLinkFn(scope, cloneConnectFn, options) {
        assertArg(scope, 'scope');

        options = options || {};
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
          transcludeControllers = options.transcludeControllers,
          futureParentElement = options.futureParentElement;

        // When `parentBoundTranscludeFn` is passed, it is a
        // `controllersBoundTransclude` function (it was previously passed
        // as `transclude` to directive.link) so we must unwrap it to get
        // its `boundTranscludeFn`
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
        }

        if (!namespace) {
          namespace = detectNamespaceForChildElements(futureParentElement);
        }
        var $linkNode;
        if (namespace !== 'html') {
          // When using a directive with replace:true and templateUrl the $compileNodes
          // (or a child element inside of them)
          // might change, so we need to recreate the namespace adapted compileNodes
          // for call to the link function.
          // Note: This will already clone the nodes...
          $linkNode = jqLite(
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
          );
        } else if (cloneConnectFn) {
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
          // and sometimes changes the structure of the DOM.
          $linkNode = JQLitePrototype.clone.call($compileNodes);
        } else {
          $linkNode = $compileNodes;
        }

        if (transcludeControllers) {
          for (var controllerName in transcludeControllers) {
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
          }
        }

        compile.$$addScopeInfo($linkNode, scope);

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
        return $linkNode;
      };
    }

    function detectNamespaceForChildElements(parentElement) {
      // TODO: Make this detect MathML as well...
      var node = parentElement && parentElement[0];
      if (!node) {
        return 'html';
      } else {
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          compile.$$addScopeClass(attrs.$$element);
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? (
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                     && nodeLinkFn.transclude) : transcludeFn);

        if (nodeLinkFn || childLinkFn) {
          linkFns.push(i, nodeLinkFn, childLinkFn);
          linkFnFound = true;
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
        }

        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
        var stableNodeList;


        if (nodeLinkFnFound) {
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
          // offsets don't get screwed up
          var nodeListLength = nodeList.length;
          stableNodeList = new Array(nodeListLength);

          // create a sparse array by only copying the elements which have a linkFn
          for (i = 0; i < linkFns.length; i+=3) {
            idx = linkFns[i];
            stableNodeList[idx] = nodeList[idx];
          }
        } else {
          stableNodeList = nodeList;
        }

        for (i = 0, ii = linkFns.length; i < ii;) {
          node = stableNodeList[linkFns[i++]];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              compile.$$addScopeInfo(jqLite(node), childScope);
            } else {
              childScope = scope;
            }

            if (nodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn,
                  nodeLinkFn.elementTranscludeOnThisElement);

            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
              childBoundTranscludeFn = parentBoundTranscludeFn;

            } else if (!parentBoundTranscludeFn && transcludeFn) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

            } else {
              childBoundTranscludeFn = null;
            }

            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
          }
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {

      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

        if (!transcludedScope) {
          transcludedScope = scope.$new(false, containingScope);
          transcludedScope.$$transcluded = true;
        }

        return transcludeFn(transcludedScope, cloneFn, {
          parentBoundTranscludeFn: previousBoundTranscludeFn,
          transcludeControllers: controllers,
          futureParentElement: futureParentElement
        });
      };

      return boundTranscludeFn;
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch (nodeType) {
        case NODE_TYPE_ELEMENT: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            name = attr.name;
            value = trim(attr.value);

            // support ngAttr attribute binding
            ngAttrName = directiveNormalize(name);
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
              name = name.replace(PREFIX_REGEXP, '')
                .substr(8).replace(/_(.)/g, function(match, letter) {
                  return letter.toUpperCase();
                });
            }

            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
            if (directiveIsMultiElement(directiveNName)) {
              if (ngAttrName === directiveNName + 'Start') {
                attrStartName = name;
                attrEndName = name.substr(0, name.length - 5) + 'end';
                name = name.substr(0, name.length - 6);
              }
            }

            nName = directiveNormalize(name.toLowerCase());
            attrsMap[nName] = name;
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                attrs[nName] = value;
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true; // presence means true
                }
            }
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                          attrEndName);
          }

          // use class as directive
          className = node.className;
          if (isObject(className)) {
              // Maybe SVGAnimatedString
              className = className.animVal;
          }
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case NODE_TYPE_TEXT: /* Text Node */
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case NODE_TYPE_COMMENT: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                      attrStart, attrEnd);
          }
          if (node.nodeType == NODE_TYPE_ELEMENT) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          controllers,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasTemplate = false,
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          directiveValue;

      // executes all directives on the current element
      for (var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            if (isObject(directiveValue)) {
              // This directive is trying to add an isolated scope.
              // Check that there is no scope of any kind already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
                                directive, $compileNode);
              newIsolateScopeDirective = directive;
            } else {
              // This directive is trying to add a child scope.
              // Check that there is no isolated scope already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                                $compileNode);
            }
          }

          newScopeDirective = newScopeDirective || directive;
        }

        directiveName = directive.name;

        if (!directive.templateUrl && directive.controller) {
          directiveValue = directive.controller;
          controllerDirectives = controllerDirectives || {};
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue == 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = $compileNode;
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' +
                                              templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, sliceArgs($template), compileNode);

            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {
            $template = jqLite(jqLiteClone(compileNode)).contents();
            $compileNode.empty(); // clear contents
            childTranscludeFn = compile($template, transcludeFn);
          }
        }

        if (directive.template) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            if (jqLiteIsTextNode(directiveValue)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
      nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;
      nodeLinkFn.templateOnThisElement = hasTemplate;
      nodeLinkFn.transclude = childTranscludeFn;

      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          pre.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          post.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }


      function getControllers(directiveName, require, $element, elementControllers) {
        var value, retrievalMethod = 'data', optional = false;
        var $searchElement = $element;
        var match;
        if (isString(require)) {
          match = require.match(REQUIRE_PREFIX_REGEXP);
          require = require.substring(match[0].length);

          if (match[3]) {
            if (match[1]) match[3] = null;
            else match[1] = match[3];
          }
          if (match[1] === '^') {
            retrievalMethod = 'inheritedData';
          } else if (match[1] === '^^') {
            retrievalMethod = 'inheritedData';
            $searchElement = $element.parent();
          }
          if (match[2] === '?') {
            optional = true;
          }

          value = null;

          if (elementControllers && retrievalMethod === 'data') {
            if (value = elementControllers[require]) {
              value = value.instance;
            }
          }
          value = value || $searchElement[retrievalMethod]('$' + require + 'Controller');

          if (!value && !optional) {
            throw $compileMinErr('ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                require, directiveName);
          }
          return value || null;
        } else if (isArray(require)) {
          value = [];
          forEach(require, function(require) {
            value.push(getControllers(directiveName, require, $element, elementControllers));
          });
        }
        return value;
      }


      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,
            attrs;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
          $element = templateAttrs.$$element;
        } else {
          $element = jqLite(linkNode);
          attrs = new Attributes($element, templateAttrs);
        }

        if (newIsolateScopeDirective) {
          isolateScope = scope.$new(true);
        }

        if (boundTranscludeFn) {
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
          transcludeFn = controllersBoundTransclude;
          transcludeFn.$$boundTransclude = boundTranscludeFn;
        }

        if (controllerDirectives) {
          // TODO: merge `controllers` and `elementControllers` into single object.
          controllers = {};
          elementControllers = {};
          forEach(controllerDirectives, function(directive) {
            var locals = {
              $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
              $element: $element,
              $attrs: attrs,
              $transclude: transcludeFn
            }, controllerInstance;

            controller = directive.controller;
            if (controller == '@') {
              controller = attrs[directive.name];
            }

            controllerInstance = $controller(controller, locals, true, directive.controllerAs);

            // For directives with element transclusion the element is a comment,
            // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
            // clean up (http://bugs.jquery.com/ticket/8335).
            // Instead, we save the controllers for the element in a local hash and attach to .data
            // later, once we have the actual element.
            elementControllers[directive.name] = controllerInstance;
            if (!hasElementTranscludeDirective) {
              $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
            }

            controllers[directive.name] = controllerInstance;
          });
        }

        if (newIsolateScopeDirective) {
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));
          compile.$$addScopeClass($element, true);

          var isolateScopeController = controllers && controllers[newIsolateScopeDirective.name];
          var isolateBindingContext = isolateScope;
          if (isolateScopeController && isolateScopeController.identifier &&
              newIsolateScopeDirective.bindToController === true) {
            isolateBindingContext = isolateScopeController.instance;
          }

          forEach(isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings, function(definition, scopeName) {
            var attrName = definition.attrName,
                optional = definition.optional,
                mode = definition.mode, // @, =, or &
                lastValue,
                parentGet, parentSet, compare;

            switch (mode) {

              case '@':
                attrs.$observe(attrName, function(value) {
                  isolateBindingContext[scopeName] = value;
                });
                attrs.$$observers[attrName].$$scope = scope;
                if (attrs[attrName]) {
                  // If the attribute has been provided then we trigger an interpolation to ensure
                  // the value is there for use in the link fn
                  isolateBindingContext[scopeName] = $interpolate(attrs[attrName])(scope);
                }
                break;

              case '=':
                if (optional && !attrs[attrName]) {
                  return;
                }
                parentGet = $parse(attrs[attrName]);
                if (parentGet.literal) {
                  compare = equals;
                } else {
                  compare = function(a, b) { return a === b || (a !== a && b !== b); };
                }
                parentSet = parentGet.assign || function() {
                  // reset the change, or we will throw this exception on every $digest
                  lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                  throw $compileMinErr('nonassign',
                      "Expression '{0}' used with directive '{1}' is non-assignable!",
                      attrs[attrName], newIsolateScopeDirective.name);
                };
                lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                var parentValueWatch = function parentValueWatch(parentValue) {
                  if (!compare(parentValue, isolateBindingContext[scopeName])) {
                    // we are out of sync and need to copy
                    if (!compare(parentValue, lastValue)) {
                      // parent changed and it has precedence
                      isolateBindingContext[scopeName] = parentValue;
                    } else {
                      // if the parent can be assigned then do so
                      parentSet(scope, parentValue = isolateBindingContext[scopeName]);
                    }
                  }
                  return lastValue = parentValue;
                };
                parentValueWatch.$stateful = true;
                var unwatch;
                if (definition.collection) {
                  unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                } else {
                  unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                }
                isolateScope.$on('$destroy', unwatch);
                break;

              case '&':
                parentGet = $parse(attrs[attrName]);
                isolateBindingContext[scopeName] = function(locals) {
                  return parentGet(scope, locals);
                };
                break;
            }
          });
        }
        if (controllers) {
          forEach(controllers, function(controller) {
            controller();
          });
          controllers = null;
        }

        // PRELINKING
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
          linkFn = preLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for (i = postLinkFns.length - 1; i >= 0; i--) {
          linkFn = postLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // This is the function that is injected as `$transclude`.
        // Note: all arguments are optional!
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
          var transcludeControllers;

          // No scope passed in:
          if (!isScope(scope)) {
            futureParentElement = cloneAttachFn;
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }
          if (!futureParentElement) {
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
          }
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
        }
      }
    }

    function markDirectivesAsIsolate(directives) {
      // mark all directives as needing isolate scope.
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: true});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          try {
            directive = directives[i];
            if ((maxPriority === undefined || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch (e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */
    function directiveIsMultiElement(name) {
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          directive = directives[i];
          if (directive.multiElement) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key] && src[key] !== value) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
          // have an attribute like "has-own-property" or "data-has-own-property", etc.
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          derivedSyncDirective = inherit(origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl,
          templateNamespace = origAsyncDirective.templateNamespace;

      $compileNode.empty();

      $templateRequest($sce.getTrustedResourceUrl(templateUrl))
        .then(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            if (jqLiteIsTextNode(content)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

          while (linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (scope.$$destroyed) continue;

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              var oldClasses = beforeTemplateLinkNode.className;

              if (!(previousCompileContext.hasElementTranscludeDirective &&
                  origAsyncDirective.replace)) {
                // it was cloned therefore we have to clone as well.
                linkNode = jqLiteClone(compileNode);
              }
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

              // Copy in CSS classes from original node
              safeAddClass(jqLite(linkNode), oldClasses);
            }
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn);
          }
          linkQueue = null;
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        var childBoundTranscludeFn = boundTranscludeFn;
        if (scope.$$destroyed) return;
        if (linkQueue) {
          linkQueue.push(scope,
                         node,
                         rootElement,
                         childBoundTranscludeFn);
        } else {
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }


    function assertNoDuplicate(what, previousDirective, directive, element) {
      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
            previousDirective.name, directive.name, what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: function textInterpolateCompileFn(templateNode) {
            var templateNodeParent = templateNode.parent(),
                hasCompileParent = !!templateNodeParent.length;

            // When transcluding a template that has bindings in the root
            // we don't have a parent and thus need to add the class during linking fn.
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

            return function textInterpolateLinkFn(scope, node) {
              var parent = node.parent();
              if (!hasCompileParent) compile.$$addBindingClass(parent);
              compile.$$addBindingInfo(parent, interpolateFn.expressions);
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                node[0].nodeValue = value;
              });
            };
          }
        });
      }
    }


    function wrapTemplate(type, template) {
      type = lowercase(type || 'html');
      switch (type) {
      case 'svg':
      case 'math':
        var wrapper = document.createElement('div');
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
        return wrapper.childNodes[0].childNodes;
      default:
        return template;
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName == "srcdoc") {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (tag == "form" && attrNormalizedName == "action") ||
          (tag != "img" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
      var trustedContext = getTrustedContext(node, name);
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "select") {
        throw $compileMinErr("selmulti",
            "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = {}));

                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                  throw $compileMinErr('nodomevents',
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                          "ng- versions (such as ng-click instead of onclick) instead.");
                }

                // If the attribute has changed since last $interpolate()ed
                var newValue = attr[name];
                if (newValue !== value) {
                  // we need to interpolate again since the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  // ensure unset/empty values make interpolateFn falsy
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                  value = newValue;
                }

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // initialize attr object so that it's ready in case we need the value for isolate
                // scope initialization, otherwise the value would not be available from isolate
                // directive's linking fn during linking phase
                attr[name] = interpolateFn(scope);

                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for (i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;

            // If the replaced element is also the jQuery .context then replace it
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
            // http://api.jquery.com/context/
            if ($rootElement.context === firstElementToRemove) {
              $rootElement.context = newNode;
            }
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }

      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
      var fragment = document.createDocumentFragment();
      fragment.appendChild(firstElementToRemove);

      // Copy over user data (that includes Angular's $scope etc.). Don't copy private
      // data here because there's no public interface in jQuery to do that and copying over
      // event listeners (which is the main use of private data) wouldn't work anyway.
      jqLite(newNode).data(jqLite(firstElementToRemove).data());

      // Remove data of the replaced element. We cannot just call .remove()
      // on the element it since that would deallocate scope that is needed
      // for the new node. Instead, remove the data "manually".
      if (!jQuery) {
        delete jqLite.cache[firstElementToRemove[jqLite.expando]];
      } else {
        // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
        // the replaced element. The cleanData version monkey-patched by Angular would cause
        // the scope to be trashed and we do need the very same scope to work with the new
        // element. However, we cannot just cache the non-patched version and use it here as
        // that would break if another library patches the method after Angular does (one
        // example is jQuery UI). Instead, set a flag indicating scope destroying should be
        // skipped this one time.
        skipDestroyOnNextJQueryCleanData = true;
        jQuery.cleanData([firstElementToRemove]);
      }

      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
        var element = elementsToRemove[k];
        jqLite(element).remove(); // must do this way to clean up expando
        fragment.appendChild(element);
        delete elementsToRemove[k];
      }

      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }


    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
      try {
        linkFn(scope, $element, attrs, controllers, transcludeFn);
      } catch (e) {
        $exceptionHandler(e, startingTag($element));
      }
    }
  }];
}

var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */

/**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for (var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for (var j = 0; j < tokens2.length; j++) {
      if (token == tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

function removeComments(jqNodes) {
  jqNodes = jqLite(jqNodes);
  var i = jqNodes.length;

  if (i <= 1) {
    return jqNodes;
  }

  while (i--) {
    var node = jqNodes[i];
    if (node.nodeType === NODE_TYPE_COMMENT) {
      splice.call(jqNodes, i, 1);
    }
  }
  return jqNodes;
}

var $controllerMinErr = minErr('$controller');

/**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      globals = false,
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;


  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };

  /**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   */
  this.allowGlobals = function() {
    globals = true;
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
    return function(expression, locals, later, ident) {
      // PRIVATE API:
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
      //                     If true, $controller will allocate the object with the correct
      //                     prototype chain, but will not invoke the controller until a returned
      //                     callback is invoked.
      //   param `ident` --- An optional label which overrides the label parsed from the controller
      //                     expression, if any.
      var instance, match, constructor, identifier;
      later = later === true;
      if (ident && isString(ident)) {
        identifier = ident;
      }

      if (isString(expression)) {
        match = expression.match(CNTRL_REG);
        if (!match) {
          throw $controllerMinErr('ctrlfmt',
            "Badly formed controller string '{0}'. " +
            "Must match `__name__ as __id__` or `__name__`.", expression);
        }
        constructor = match[1],
        identifier = identifier || match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) ||
                (globals ? getter($window, constructor, true) : undefined);

        assertArgFn(expression, constructor, true);
      }

      if (later) {
        // Instantiate controller later:
        // This machinery is used to create an instance of the object before calling the
        // controller's constructor itself.
        //
        // This allows properties to be added to the controller before the constructor is
        // invoked. Primarily, this is used for isolate scope bindings in $compile.
        //
        // This feature is not intended for use by applications, and is thus not documented
        // publicly.
        // Object creation: http://jsperf.com/create-constructor/2
        var controllerPrototype = (isArray(expression) ?
          expression[expression.length - 1] : expression).prototype;
        instance = Object.create(controllerPrototype || null);

        if (identifier) {
          addIdentifier(locals, identifier, instance, constructor || expression.name);
        }

        return extend(function() {
          $injector.invoke(expression, instance, locals, constructor);
          return instance;
        }, {
          instance: instance,
          identifier: identifier
        });
      }

      instance = $injector.instantiate(expression, locals, constructor);

      if (identifier) {
        addIdentifier(locals, identifier, instance, constructor || expression.name);
      }

      return instance;
    };

    function addIdentifier(locals, identifier, instance, name) {
      if (!(locals && isObject(locals.$scope))) {
        throw minErr('$controller')('noscp',
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
          name, identifier);
      }

      locals.$scope[identifier] = instance;
    }
  }];
}

/**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
function $DocumentProvider() {
  this.$get = ['$window', function(window) {
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
 *     return function(exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

var APPLICATION_JSON = 'application/json';
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
var JSON_START = /^\[|^\{(?!\{)/;
var JSON_ENDS = {
  '[': /]$/,
  '{': /}$/
};
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;

function defaultHttpResponseTransform(data, headers) {
  if (isString(data)) {
    // Strip json vulnerability protection prefix and trim whitespace
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

    if (tempData) {
      var contentType = headers('Content-Type');
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
        data = fromJson(tempData);
      }
    }
  }

  return data;
}

function isJsonLike(str) {
    var jsonStart = str.match(JSON_START);
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = createMap(), key, val, i;

  if (!headers) return parsed;

  forEach(headers.split('\n'), function(line) {
    i = line.indexOf(':');
    key = lowercase(trim(line.substr(0, i)));
    val = trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj = isObject(headers) ? headers : undefined;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      var value = headersObj[lowercase(name)];
      if (value === void 0) {
        value = null;
      }
      return value;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, status, fns) {
  if (isFunction(fns))
    return fns(data, headers, status);

  forEach(fns, function(fn) {
    data = fn(data, headers, status);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


/**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
function $HttpProvider() {
  /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
   * that will provide the cache for all requests who set their `cache` property to `true`.
   * If you set the `default.cache = false` then only requests that specify their own custom
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   **/
  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [defaultHttpResponseTransform],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN'
  };

  var useApplyAsync = false;
  /**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specifed, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useApplyAsync = function(value) {
    if (isDefined(value)) {
      useApplyAsync = !!value;
      return this;
    }
    return useApplyAsync;
  };

  /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
  var interceptorFactories = this.interceptors = [];

  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * ```js
     *   // Simple GET request example :
     *   $http.get('/someUrl').
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * ```js
     *   // Simple POST request example (passing data) :
     *   $http.post('/someUrl', {msg:'hello word!'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests.
     *
     * ```js
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' },
     * }
     *
     * $http(req).success(function(){...}).error(function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http `config` object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            success(function(data, status) {
              $scope.status = status;
              $scope.data = data;
            }).
            error(function(data, status) {
              $scope.data = data || "Request failed";
              $scope.status = status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {

      if (!angular.isObject(requestConfig)) {
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }

      var config = extend({
        method: 'get',
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse
      }, requestConfig);

      config.headers = mergeHeaders(requestConfig);
      config.method = uppercase(config.method);

      var serverRequest = function(config) {
        var headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(reqData)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while (chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      promise.success = function(fn) {
        promise.then(function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      promise.error = function(fn) {
        promise.then(null, function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response);
        if (!response.data) {
          resp.data = response.data;
        } else {
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
        }
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function executeHeaderFns(headers) {
        var headerContent, processedHeaders = {};

        forEach(headers, function(headerFn, header) {
          if (isFunction(headerFn)) {
            headerContent = headerFn();
            if (headerContent != null) {
              processedHeaders[header] = headerContent;
            }
          } else {
            processedHeaders[header] = headerFn;
          }
        });

        return processedHeaders;
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // using for-in instead of forEach to avoid unecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        // execute if header value is a function for merged headers
        return executeHeaderFns(reqHeaders);
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

     /**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */
    createShortMethodsWithData('post', 'put', 'patch');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          reqHeaders = config.headers,
          url = buildUrl(config.url, config.params);

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (isPromiseLike(cachedResp)) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
            } else {
              resolvePromise(cachedResp, 200, {}, 'OK');
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }


      // if we won't have the response in cache, set the xsrf headers and
      // send the request to the backend
      if (isUndefined(cachedResp)) {
        var xsrfValue = urlIsSameOrigin(config.url)
            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
        if (xsrfValue) {
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
        }

        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString, statusText) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        function resolveHttpPromise() {
          resolvePromise(response, status, headersString, statusText);
        }

        if (useApplyAsync) {
          $rootScope.$applyAsync(resolveHttpPromise);
        } else {
          resolveHttpPromise();
          if (!$rootScope.$$phase) $rootScope.$apply();
        }
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers, statusText) {
        // normalize internal statuses to 0
        status = Math.max(status, 0);

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config,
          statusText: statusText
        });
      }

      function resolvePromiseWithResult(result) {
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
      }

      function removePendingReq() {
        var idx = $http.pendingRequests.indexOf(config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, params) {
      if (!params) return url;
      var parts = [];
      forEachSorted(params, function(value, key) {
        if (value === null || isUndefined(value)) return;
        if (!isArray(value)) value = [value];

        forEach(value, function(v) {
          if (isObject(v)) {
            if (isDate(v)) {
              v = v.toISOString();
            } else {
              v = toJson(v);
            }
          }
          parts.push(encodeUriQuery(key) + '=' +
                     encodeUriQuery(v));
        });
      });
      if (parts.length > 0) {
        url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
      }
      return url;
    }
  }];
}

function createXhr() {
    return new window.XMLHttpRequest();
}

/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
        callbacks[callbackId].called = true;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
        completeRequest(callback, status, callbacks[callbackId].data, "", text);
        callbacks[callbackId] = noop;
      });
    } else {

      var xhr = createXhr();

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      xhr.onload = function requestLoaded() {
        var statusText = xhr.statusText || '';

        // responseText is the old-school way of retrieving response (supported by IE8 & 9)
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
        var status = xhr.status === 1223 ? 204 : xhr.status;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }

        completeRequest(callback,
            status,
            response,
            xhr.getAllResponseHeaders(),
            statusText);
      };

      var requestError = function() {
        // The response is always empty
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');
      };

      xhr.onerror = requestError;
      xhr.onabort = requestError;

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        try {
          xhr.responseType = responseType;
        } catch (e) {
          // WebKit added support for the json responseType value on 09/03/2013
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
          // known to throw when setting the value "json" as the response type. Other older
          // browsers implementing the responseType
          //
          // The json response type can be ignored if not supported, because JSON payloads are
          // parsed on the client-side regardless.
          if (responseType !== 'json') {
            throw e;
          }
        }
      }

      xhr.send(post || null);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (isPromiseLike(timeout)) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString, statusText) {
      // cancel timeout and subsequent timeout promise resolution
      if (timeoutId !== undefined) {
        $browserDefer.cancel(timeoutId);
      }
      jsonpDone = xhr = null;

      callback(status, response, headersString, statusText);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, callbackId, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'), callback = null;
    script.type = "text/javascript";
    script.src = url;
    script.async = true;

    callback = function(event) {
      removeEventListenerFn(script, "load", callback);
      removeEventListenerFn(script, "error", callback);
      rawDocument.body.removeChild(script);
      script = null;
      var status = -1;
      var text = "unknown";

      if (event) {
        if (event.type === "load" && !callbacks[callbackId].called) {
          event = { type: "error" };
        }
        text = event.type;
        status = event.type === "error" ? 404 : 200;
      }

      if (done) {
        done(status, text);
      }
    };

    addEventListenerFn(script, "load", callback);
    addEventListenerFn(script, "error", callback);
    rawDocument.body.appendChild(script);
    return callback;
  }
}

var $interpolateMinErr = minErr('$interpolate');

/**
 * @ngdoc provider
 * @name $interpolateProvider
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value) {
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value) {
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length,
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

    function escape(ch) {
      return '\\\\\\' + ch;
    }

    /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * ####Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example>
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
      allOrNothing = !!allOrNothing;
      var startIndex,
          endIndex,
          index = 0,
          expressions = [],
          parseFns = [],
          textLength = text.length,
          exp,
          concat = [],
          expressionPositions = [];

      while (index < textLength) {
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
          if (index !== startIndex) {
            concat.push(unescapeText(text.substring(index, startIndex)));
          }
          exp = text.substring(startIndex + startSymbolLength, endIndex);
          expressions.push(exp);
          parseFns.push($parse(exp, parseStringifyInterceptor));
          index = endIndex + endSymbolLength;
          expressionPositions.push(concat.length);
          concat.push('');
        } else {
          // we did not find an interpolation, so we have to add the remainder to the separators array
          if (index !== textLength) {
            concat.push(unescapeText(text.substring(index)));
          }
          break;
        }
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && concat.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
      }

      if (!mustHaveExpression || expressions.length) {
        var compute = function(values) {
          for (var i = 0, ii = expressions.length; i < ii; i++) {
            if (allOrNothing && isUndefined(values[i])) return;
            concat[expressionPositions[i]] = values[i];
          }
          return concat.join('');
        };

        var getValue = function(value) {
          return trustedContext ?
            $sce.getTrusted(trustedContext, value) :
            $sce.valueOf(value);
        };

        var stringify = function(value) {
          if (value == null) { // null || undefined
            return '';
          }
          switch (typeof value) {
            case 'string':
              break;
            case 'number':
              value = '' + value;
              break;
            default:
              value = toJson(value);
          }

          return value;
        };

        return extend(function interpolationFn(context) {
            var i = 0;
            var ii = expressions.length;
            var values = new Array(ii);

            try {
              for (; i < ii; i++) {
                values[i] = parseFns[i](context);
              }

              return compute(values);
            } catch (err) {
              var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                  err.toString());
              $exceptionHandler(newErr);
            }

          }, {
          // all of these properties are undocumented for now
          exp: text, //just for compatibility with regular watchers created via $watch
          expressions: expressions,
          $$watchDelegate: function(scope, listener, objectEquality) {
            var lastValue;
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
              var currValue = compute(values);
              if (isFunction(listener)) {
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
              }
              lastValue = currValue;
            }, objectEquality);
          }
        });
      }

      function unescapeText(text) {
        return text.replace(escapedStartRegexp, startSymbol).
          replace(escapedEndRegexp, endSymbol);
      }

      function parseStringifyInterceptor(value) {
        try {
          value = getValue(value);
          return allOrNothing && !isDefined(value) ? value : stringify(value);
        } catch (err) {
          var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
            err.toString());
          $exceptionHandler(newErr);
        }
      }
    }


    /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q', '$$q',
       function($rootScope,   $window,   $q,   $$q) {
    var intervals = {};


     /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       Date format: <input ng-model="format"> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
    function interval(fn, delay, count, invokeApply) {
      var setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = isDefined(count) ? count : 0;

      promise.then(null, null, fn);

      promise.$$intervalId = setInterval(function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {promise} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        intervals[promise.$$intervalId].reject('canceled');
        $window.clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
function $LocaleProvider() {
  this.$get = function() {
    return {
      id: 'en-us',

      NUMBER_FORMATS: {
        DECIMAL_SEP: '.',
        GROUP_SEP: ',',
        PATTERNS: [
          { // Decimal Pattern
            minInt: 1,
            minFrac: 0,
            maxFrac: 3,
            posPre: '',
            posSuf: '',
            negPre: '-',
            negSuf: '',
            gSize: 3,
            lgSize: 3
          },{ //Currency Pattern
            minInt: 1,
            minFrac: 2,
            maxFrac: 2,
            posPre: '\u00A4',
            posSuf: '',
            negPre: '(\u00A4',
            negSuf: ')',
            gSize: 3,
            lgSize: 3
          }
        ],
        CURRENCY_SYM: '$'
      },

      DATETIME_FORMATS: {
        MONTH:
            'January,February,March,April,May,June,July,August,September,October,November,December'
            .split(','),
        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        AMPMS: ['AM','PM'],
        medium: 'MMM d, y h:mm:ss a',
        'short': 'M/d/yy h:mm a',
        fullDate: 'EEEE, MMMM d, y',
        longDate: 'MMMM d, y',
        mediumDate: 'MMM d, y',
        shortDate: 'M/d/yy',
        mediumTime: 'h:mm:ss a',
        shortTime: 'h:mm a',
        ERANAMES: [
          "Before Christ",
          "Anno Domini"
        ],
        ERAS: [
          "BC",
          "AD"
        ]
      },

      pluralCat: function(num) {
        if (num === 1) {
          return 'one';
        }
        return 'other';
      }
    };
  };
}

var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj) {
  var parsedUrl = urlResolve(absoluteUrl);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}


function parseAppUrl(relativeUrl, locationObj) {
  var prefixed = (relativeUrl.charAt(0) !== '/');
  if (prefixed) {
    relativeUrl = '/' + relativeUrl;
  }
  var match = urlResolve(relativeUrl);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}


/**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
function beginsWith(begin, whole) {
  if (whole.indexOf(begin) === 0) {
    return whole.substr(begin.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}

function trimEmptyHash(url) {
  return url.replace(/(#.+)|#$/, '$1');
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  var appBaseNoFile = stripFile(appBase);
  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} url HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }
    var appUrl, prevAppUrl;
    var rewrittenUrl;

    if ((appUrl = beginsWith(appBase, url)) !== undefined) {
      prevAppUrl = appUrl;
      if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        rewrittenUrl = appBase + prevAppUrl;
      }
    } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
      rewrittenUrl = appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, hashPrefix) {
  var appBaseNoFile = stripFile(appBase);

  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl;

    if (withoutBaseUrl.charAt(0) === '#') {

      // The rest of the url starts with a hash so we have
      // got either a hashbang path or a plain hash fragment
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
      if (isUndefined(withoutHashUrl)) {
        // There was no hashbang prefix so we just have a hash fragment
        withoutHashUrl = withoutBaseUrl;
      }

    } else {
      // There was no hashbang path nor hash fragment:
      // If we are in HTML5 mode we use what is left as the path;
      // Otherwise we ignore what is left
      withoutHashUrl = this.$$html5 ? withoutBaseUrl : '';
    }

    parseAppUrl(withoutHashUrl, this);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName(path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (url.indexOf(base) === 0) {
        url = url.replace(base, '');
      }

      // The input URL intentionally contains a first path segment that ends with a colon.
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (stripHash(appBase) == stripHash(url)) {
      this.$$parse(url);
      return true;
    }
    return false;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  var appBaseNoFile = stripFile(appBase);

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }

    var rewrittenUrl;
    var appUrl;

    if (appBase == stripHash(url)) {
      rewrittenUrl = url;
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
      rewrittenUrl = appBase + hashPrefix + appUrl;
    } else if (appBaseNoFile === url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };

  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
    this.$$absUrl = appBase + hashPrefix + this.$$url;
  };

}


var locationPrototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var absUrl = $location.absUrl();
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var url = $location.url();
   * // => "/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @return {string} url
   */
  url: function(url) {
    if (isUndefined(url))
      return this.$$url;

    var match = PATH_MATCH.exec(url);
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1] || url === '') this.search(match[3] || '');
    this.hash(match[5] || '');

    return this;
  },

  /**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var protocol = $location.protocol();
   * // => "http"
   * ```
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var host = $location.host();
   * // => "example.com"
   * ```
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var port = $location.port();
   * // => 80
   * ```
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var path = $location.path();
   * // => "/some/path"
   * ```
   *
   * @param {(string|number)=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    path = path !== null ? path.toString() : '';
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the url.
   *
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          search = copy(search, {});
          // remove object undefined or null properties
          forEach(search, function(value, key) {
            if (value == null) delete search[key];
          });

          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Return hash fragment when called without any parameter.
   *
   * Change hash fragment when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
   * var hash = $location.hash();
   * // => "hashValue"
   * ```
   *
   * @param {(string|number)=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', function(hash) {
    return hash !== null ? hash.toString() : '';
  }),

  /**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during current `$digest` will be replacing current history
   * record, instead of adding new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
  Location.prototype = Object.create(locationPrototype);

  /**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */
  Location.prototype.state = function(state) {
    if (!arguments.length)
      return this.$$state;

    if (Location !== LocationHtml5Url || !this.$$html5) {
      throw $locationMinErr('nostate', 'History API state support is available only ' +
        'in HTML5 mode and only in browsers supporting HTML5 History API');
    }
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
    // but we're changing the $$state reference to $browser.state() during the $digest
    // so the modification window is narrow.
    this.$$state = isUndefined(state) ? null : state;

    return this;
  };
});


function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value))
      return this[property];

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */

/**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider() {
  var hashPrefix = '',
      html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true
      };

  /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables url rewriting for relative links.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isBoolean(mode)) {
      html5Mode.enabled = mode;
      return this;
    } else if (isObject(mode)) {

      if (isBoolean(mode.enabled)) {
        html5Mode.enabled = mode.enabled;
      }

      if (isBoolean(mode.requireBase)) {
        html5Mode.requireBase = mode.requireBase;
      }

      if (isBoolean(mode.rewriteLinks)) {
        html5Mode.rewriteLinks = mode.rewriteLinks;
      }

      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
      function($rootScope, $browser, $sniffer, $rootElement, $window) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode.enabled) {
      if (!baseHref && html5Mode.requireBase) {
        throw $locationMinErr('nobase',
          "$location in HTML5 mode requires a <base> tag to be present!");
      }
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    $location = new LocationMode(appBase, '#' + hashPrefix);
    $location.$$parseLinkUrl(initialUrl, initialUrl);

    $location.$$state = $browser.state();

    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

    function setBrowserUrlWithFallback(url, replace, state) {
      var oldUrl = $location.url();
      var oldState = $location.$$state;
      try {
        $browser.url(url, replace, state);

        // Make sure $location.state() returns referentially identical (not just deeply equal)
        // state object; this makes possible quick checking if the state changed in the digest
        // loop. Checking deep equality would be too expensive.
        $location.$$state = $browser.state();
      } catch (e) {
        // Restore old values if pushState fails
        $location.url(oldUrl);
        $location.$$state = oldState;

        throw e;
      }
    }

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (nodeName_(elm[0]) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');
      // get the actual href attribute - see
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
      var relHref = elm.attr('href') || elm.attr('xlink:href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      // Ignore when url is started with javascript: or mailto:
      if (IGNORE_URI_REGEXP.test(absHref)) return;

      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
        if ($location.$$parseLinkUrl(absHref, relHref)) {
          // We do a preventDefault for all urls that are part of the angular application,
          // in html5mode and also without, so that we are able to abort navigation without
          // getting double entries in the location history.
          event.preventDefault();
          // update location manually
          if ($location.absUrl() != $browser.url()) {
            $rootScope.$apply();
            // hack to work around FF6 bug 684208 when scenario runner clicks on links
            $window.angular['ff-684208-preventDefault'] = true;
          }
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
      $browser.url($location.absUrl(), true);
    }

    var initializing = true;

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl, newState) {
      $rootScope.$evalAsync(function() {
        var oldUrl = $location.absUrl();
        var oldState = $location.$$state;
        var defaultPrevented;

        $location.$$parse(newUrl);
        $location.$$state = newState;

        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
            newState, oldState).defaultPrevented;

        // if the location was changed by a `$locationChangeStart` handler then stop
        // processing this location change
        if ($location.absUrl() !== newUrl) return;

        if (defaultPrevented) {
          $location.$$parse(oldUrl);
          $location.$$state = oldState;
          setBrowserUrlWithFallback(oldUrl, false, oldState);
        } else {
          initializing = false;
          afterLocationChange(oldUrl, oldState);
        }
      });
      if (!$rootScope.$$phase) $rootScope.$digest();
    });

    // update browser
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = trimEmptyHash($browser.url());
      var newUrl = trimEmptyHash($location.absUrl());
      var oldState = $browser.state();
      var currentReplace = $location.$$replace;
      var urlOrStateChanged = oldUrl !== newUrl ||
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

      if (initializing || urlOrStateChanged) {
        initializing = false;

        $rootScope.$evalAsync(function() {
          var newUrl = $location.absUrl();
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
              $location.$$state, oldState).defaultPrevented;

          // if the location was changed by a `$locationChangeStart` handler then stop
          // processing this location change
          if ($location.absUrl() !== newUrl) return;

          if (defaultPrevented) {
            $location.$$parse(oldUrl);
            $location.$$state = oldState;
          } else {
            if (urlOrStateChanged) {
              setBrowserUrlWithFallback(newUrl, currentReplace,
                                        oldState === $location.$$state ? null : $location.$$state);
            }
            afterLocationChange(oldUrl, oldState);
          }
        });
      }

      $location.$$replace = false;

      // we don't need to return anything because $evalAsync will make the digest loop dirty when
      // there is a change
    });

    return $location;

    function afterLocationChange(oldUrl, oldState) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
        $location.$$state, oldState);
    }
}];
}

/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
         <button ng-click="$log.debug(message)">debug</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider() {
  var debug = true,
      self = this;

  /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
    return this;
    } else {
      return debug;
    }
  };

  this.$get = ['$window', function($window) {
    return {
      /**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),

      /**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */
      debug: (function() {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !!logFn.apply;
      } catch (e) {}

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $parseMinErr = minErr('$parse');

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
// native objects.
//
// See https://docs.angularjs.org/guide/security


function ensureSafeMemberName(name, fullExpression) {
  if (name === "__defineGetter__" || name === "__defineSetter__"
      || name === "__lookupGetter__" || name === "__lookupSetter__"
      || name === "__proto__") {
    throw $parseMinErr('isecfld',
        'Attempting to access a disallowed field in Angular expressions! '
        + 'Expression: {0}', fullExpression);
  }
  return name;
}

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isWindow(obj)
        obj.window === obj) {
      throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
      throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// block Object so that we can't get hold of dangerous Object.* methods
        obj === Object) {
      throw $parseMinErr('isecobj',
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    }
  }
  return obj;
}

var CALL = Function.prototype.call;
var APPLY = Function.prototype.apply;
var BIND = Function.prototype.bind;

function ensureSafeFunction(obj, fullExpression) {
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    } else if (obj === CALL || obj === APPLY || obj === BIND) {
      throw $parseMinErr('isecff',
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
  }
}

//Keyword constants
var CONSTANTS = createMap();
forEach({
  'null': function() { return null; },
  'true': function() { return true; },
  'false': function() { return false; },
  'undefined': function() {}
}, function(constantGetter, name) {
  constantGetter.constant = constantGetter.literal = constantGetter.sharedGetter = true;
  CONSTANTS[name] = constantGetter;
});

//Not quite a constant, but can be lex/parsed the same
CONSTANTS['this'] = function(self) { return self; };
CONSTANTS['this'].sharedGetter = true;


//Operators - will be wrapped by binaryFn/unaryFn/assignment/filter
var OPERATORS = extend(createMap(), {
    '+':function(self, locals, a, b) {
      a=a(self, locals); b=b(self, locals);
      if (isDefined(a)) {
        if (isDefined(b)) {
          return a + b;
        }
        return a;
      }
      return isDefined(b) ? b : undefined;},
    '-':function(self, locals, a, b) {
          a=a(self, locals); b=b(self, locals);
          return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
        },
    '*':function(self, locals, a, b) {return a(self, locals) * b(self, locals);},
    '/':function(self, locals, a, b) {return a(self, locals) / b(self, locals);},
    '%':function(self, locals, a, b) {return a(self, locals) % b(self, locals);},
    '===':function(self, locals, a, b) {return a(self, locals) === b(self, locals);},
    '!==':function(self, locals, a, b) {return a(self, locals) !== b(self, locals);},
    '==':function(self, locals, a, b) {return a(self, locals) == b(self, locals);},
    '!=':function(self, locals, a, b) {return a(self, locals) != b(self, locals);},
    '<':function(self, locals, a, b) {return a(self, locals) < b(self, locals);},
    '>':function(self, locals, a, b) {return a(self, locals) > b(self, locals);},
    '<=':function(self, locals, a, b) {return a(self, locals) <= b(self, locals);},
    '>=':function(self, locals, a, b) {return a(self, locals) >= b(self, locals);},
    '&&':function(self, locals, a, b) {return a(self, locals) && b(self, locals);},
    '||':function(self, locals, a, b) {return a(self, locals) || b(self, locals);},
    '!':function(self, locals, a) {return !a(self, locals);},

    //Tokenized as operators but parsed as assignment/filters
    '=':true,
    '|':true
});
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function(options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function(text) {
    this.text = text;
    this.index = 0;
    this.tokens = [];

    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (ch === '"' || ch === "'") {
        this.readString(ch);
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdent(ch)) {
        this.readIdent();
      } else if (this.is(ch, '(){}[].,;:?')) {
        this.tokens.push({index: this.index, text: ch});
        this.index++;
      } else if (this.isWhitespace(ch)) {
        this.index++;
      } else {
        var ch2 = ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var op1 = OPERATORS[ch];
        var op2 = OPERATORS[ch2];
        var op3 = OPERATORS[ch3];
        if (op1 || op2 || op3) {
          var token = op3 ? ch3 : (op2 ? ch2 : ch);
          this.tokens.push({index: this.index, text: token, operator: true});
          this.index += token.length;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
    }
    return this.tokens;
  },

  is: function(ch, chars) {
    return chars.indexOf(ch) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9') && typeof ch === "string";
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdent: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch == '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch == 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: number,
      constant: true,
      value: Number(number)
    });
  },

  readIdent: function() {
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (!(this.isIdent(ch) || this.isNumber(ch))) {
        break;
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: this.text.slice(start, this.index),
      identifier: true
    });
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i))
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          string = string + (rep || ch);
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          constant: true,
          value: string
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};


function isConstant(exp) {
  return exp.constant;
}

/**
 * @constructor
 */
var Parser = function(lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
};

Parser.ZERO = extend(function() {
  return 0;
}, {
  sharedGetter: true,
  constant: true
});

Parser.prototype = {
  constructor: Parser,

  parse: function(text) {
    this.text = text;
    this.tokens = this.lexer.lex(text);

    var value = this.statements();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    value.literal = !!value.literal;
    value.constant = !!value.constant;

    return value;
  },

  primary: function() {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else if (this.peek().identifier && this.peek().text in CONSTANTS) {
      primary = CONSTANTS[this.consume().text];
    } else if (this.peek().identifier) {
      primary = this.identifier();
    } else if (this.peek().constant) {
      primary = this.constant();
    } else {
      this.throwError('not a primary expression', this.peek());
    }

    var next, context;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = this.functionCall(primary, context);
        context = null;
      } else if (next.text === '[') {
        context = primary;
        primary = this.objectIndex(primary);
      } else if (next.text === '.') {
        context = primary;
        primary = this.fieldAccess(primary);
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  peekToken: function() {
    if (this.tokens.length === 0)
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    return this.peekAhead(0, e1, e2, e3, e4);
  },
  peekAhead: function(i, e1, e2, e3, e4) {
    if (this.tokens.length > i) {
      var token = this.tokens[i];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4) {
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      this.tokens.shift();
      return token;
    }
    return false;
  },

  consume: function(e1) {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }

    var token = this.expect(e1);
    if (!token) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
    return token;
  },

  unaryFn: function(op, right) {
    var fn = OPERATORS[op];
    return extend(function $parseUnaryFn(self, locals) {
      return fn(self, locals, right);
    }, {
      constant:right.constant,
      inputs: [right]
    });
  },

  binaryFn: function(left, op, right, isBranching) {
    var fn = OPERATORS[op];
    return extend(function $parseBinaryFn(self, locals) {
      return fn(self, locals, left, right);
    }, {
      constant: left.constant && right.constant,
      inputs: !isBranching && [left, right]
    });
  },

  identifier: function() {
    var id = this.consume().text;

    //Continue reading each `.identifier` unless it is a method invocation
    while (this.peek('.') && this.peekAhead(1).identifier && !this.peekAhead(2, '(')) {
      id += this.consume().text + this.consume().text;
    }

    return getterFn(id, this.options, this.text);
  },

  constant: function() {
    var value = this.consume().value;

    return extend(function $parseConstant() {
      return value;
    }, {
      constant: true,
      literal: true
    });
  },

  statements: function() {
    var statements = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        statements.push(this.filterChain());
      if (!this.expect(';')) {
        // optimize for the common case where there is only one statement.
        // TODO(size): maybe we should not support multiple statements?
        return (statements.length === 1)
            ? statements[0]
            : function $parseStatements(self, locals) {
                var value;
                for (var i = 0, ii = statements.length; i < ii; i++) {
                  value = statements[i](self, locals);
                }
                return value;
              };
      }
    }
  },

  filterChain: function() {
    var left = this.expression();
    var token;
    while ((token = this.expect('|'))) {
      left = this.filter(left);
    }
    return left;
  },

  filter: function(inputFn) {
    var fn = this.$filter(this.consume().text);
    var argsFn;
    var args;

    if (this.peek(':')) {
      argsFn = [];
      args = []; // we can safely reuse the array
      while (this.expect(':')) {
        argsFn.push(this.expression());
      }
    }

    var inputs = [inputFn].concat(argsFn || []);

    return extend(function $parseFilter(self, locals) {
      var input = inputFn(self, locals);
      if (args) {
        args[0] = input;

        var i = argsFn.length;
        while (i--) {
          args[i + 1] = argsFn[i](self, locals);
        }

        return fn.apply(undefined, args);
      }

      return fn(input);
    }, {
      constant: !fn.$stateful && inputs.every(isConstant),
      inputs: !fn.$stateful && inputs
    });
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var left = this.ternary();
    var right;
    var token;
    if ((token = this.expect('='))) {
      if (!left.assign) {
        this.throwError('implies assignment but [' +
            this.text.substring(0, token.index) + '] can not be assigned to', token);
      }
      right = this.ternary();
      return extend(function $parseAssignment(scope, locals) {
        return left.assign(scope, right(scope, locals), locals);
      }, {
        inputs: [left, right]
      });
    }
    return left;
  },

  ternary: function() {
    var left = this.logicalOR();
    var middle;
    var token;
    if ((token = this.expect('?'))) {
      middle = this.assignment();
      if (this.consume(':')) {
        var right = this.assignment();

        return extend(function $parseTernary(self, locals) {
          return left(self, locals) ? middle(self, locals) : right(self, locals);
        }, {
          constant: left.constant && middle.constant && right.constant
        });
      }
    }

    return left;
  },

  logicalOR: function() {
    var left = this.logicalAND();
    var token;
    while ((token = this.expect('||'))) {
      left = this.binaryFn(left, token.text, this.logicalAND(), true);
    }
    return left;
  },

  logicalAND: function() {
    var left = this.equality();
    var token;
    while ((token = this.expect('&&'))) {
      left = this.binaryFn(left, token.text, this.equality(), true);
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    while ((token = this.expect('==','!=','===','!=='))) {
      left = this.binaryFn(left, token.text, this.relational());
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    while ((token = this.expect('<', '>', '<=', '>='))) {
      left = this.binaryFn(left, token.text, this.additive());
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = this.binaryFn(left, token.text, this.multiplicative());
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = this.binaryFn(left, token.text, this.unary());
    }
    return left;
  },

  unary: function() {
    var token;
    if (this.expect('+')) {
      return this.primary();
    } else if ((token = this.expect('-'))) {
      return this.binaryFn(Parser.ZERO, token.text, this.unary());
    } else if ((token = this.expect('!'))) {
      return this.unaryFn(token.text, this.unary());
    } else {
      return this.primary();
    }
  },

  fieldAccess: function(object) {
    var getter = this.identifier();

    return extend(function $parseFieldAccess(scope, locals, self) {
      var o = self || object(scope, locals);
      return (o == null) ? undefined : getter(o);
    }, {
      assign: function(scope, value, locals) {
        var o = object(scope, locals);
        if (!o) object.assign(scope, o = {}, locals);
        return getter.assign(o, value);
      }
    });
  },

  objectIndex: function(obj) {
    var expression = this.text;

    var indexFn = this.expression();
    this.consume(']');

    return extend(function $parseObjectIndex(self, locals) {
      var o = obj(self, locals),
          i = indexFn(self, locals),
          v;

      ensureSafeMemberName(i, expression);
      if (!o) return undefined;
      v = ensureSafeObject(o[i], expression);
      return v;
    }, {
      assign: function(self, value, locals) {
        var key = ensureSafeMemberName(indexFn(self, locals), expression);
        // prevent overwriting of Function.constructor which would break ensureSafeObject check
        var o = ensureSafeObject(obj(self, locals), expression);
        if (!o) obj.assign(self, o = {}, locals);
        return o[key] = value;
      }
    });
  },

  functionCall: function(fnGetter, contextGetter) {
    var argsFn = [];
    if (this.peekToken().text !== ')') {
      do {
        argsFn.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(')');

    var expressionText = this.text;
    // we can safely reuse the array across invocations
    var args = argsFn.length ? [] : null;

    return function $parseFunctionCall(scope, locals) {
      var context = contextGetter ? contextGetter(scope, locals) : isDefined(contextGetter) ? undefined : scope;
      var fn = fnGetter(scope, locals, context) || noop;

      if (args) {
        var i = argsFn.length;
        while (i--) {
          args[i] = ensureSafeObject(argsFn[i](scope, locals), expressionText);
        }
      }

      ensureSafeObject(context, expressionText);
      ensureSafeFunction(fn, expressionText);

      // IE doesn't have apply for some native functions
      var v = fn.apply
            ? fn.apply(context, args)
            : fn(args[0], args[1], args[2], args[3], args[4]);

      if (args) {
        // Free-up the memory (arguments of the last function call).
        args.length = 0;
      }

      return ensureSafeObject(v, expressionText);
      };
  },

  // This is used with json array declaration
  arrayDeclaration: function() {
    var elementFns = [];
    if (this.peekToken().text !== ']') {
      do {
        if (this.peek(']')) {
          // Support trailing commas per ES5.1.
          break;
        }
        elementFns.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(']');

    return extend(function $parseArrayLiteral(self, locals) {
      var array = [];
      for (var i = 0, ii = elementFns.length; i < ii; i++) {
        array.push(elementFns[i](self, locals));
      }
      return array;
    }, {
      literal: true,
      constant: elementFns.every(isConstant),
      inputs: elementFns
    });
  },

  object: function() {
    var keys = [], valueFns = [];
    if (this.peekToken().text !== '}') {
      do {
        if (this.peek('}')) {
          // Support trailing commas per ES5.1.
          break;
        }
        var token = this.consume();
        if (token.constant) {
          keys.push(token.value);
        } else if (token.identifier) {
          keys.push(token.text);
        } else {
          this.throwError("invalid key", token);
        }
        this.consume(':');
        valueFns.push(this.expression());
      } while (this.expect(','));
    }
    this.consume('}');

    return extend(function $parseObjectLiteral(self, locals) {
      var object = {};
      for (var i = 0, ii = valueFns.length; i < ii; i++) {
        object[keys[i]] = valueFns[i](self, locals);
      }
      return object;
    }, {
      literal: true,
      constant: valueFns.every(isConstant),
      inputs: valueFns
    });
  }
};


//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

function setter(obj, locals, path, setValue, fullExp) {
  ensureSafeObject(obj, fullExp);
  ensureSafeObject(locals, fullExp);

  var element = path.split('.'), key;
  for (var i = 0; element.length > 1; i++) {
    key = ensureSafeMemberName(element.shift(), fullExp);
    var propertyObj = (i === 0 && locals && locals[key]) || obj[key];
    if (!propertyObj) {
      propertyObj = {};
      obj[key] = propertyObj;
    }
    obj = ensureSafeObject(propertyObj, fullExp);
  }
  key = ensureSafeMemberName(element.shift(), fullExp);
  ensureSafeObject(obj[key], fullExp);
  obj[key] = setValue;
  return setValue;
}

var getterFnCacheDefault = createMap();
var getterFnCacheExpensive = createMap();

function isPossiblyDangerousMemberName(name) {
  return name == 'constructor';
}

/**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, expensiveChecks) {
  ensureSafeMemberName(key0, fullExp);
  ensureSafeMemberName(key1, fullExp);
  ensureSafeMemberName(key2, fullExp);
  ensureSafeMemberName(key3, fullExp);
  ensureSafeMemberName(key4, fullExp);
  var eso = function(o) {
    return ensureSafeObject(o, fullExp);
  };
  var eso0 = (expensiveChecks || isPossiblyDangerousMemberName(key0)) ? eso : identity;
  var eso1 = (expensiveChecks || isPossiblyDangerousMemberName(key1)) ? eso : identity;
  var eso2 = (expensiveChecks || isPossiblyDangerousMemberName(key2)) ? eso : identity;
  var eso3 = (expensiveChecks || isPossiblyDangerousMemberName(key3)) ? eso : identity;
  var eso4 = (expensiveChecks || isPossiblyDangerousMemberName(key4)) ? eso : identity;

  return function cspSafeGetter(scope, locals) {
    var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;

    if (pathVal == null) return pathVal;
    pathVal = eso0(pathVal[key0]);

    if (!key1) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso1(pathVal[key1]);

    if (!key2) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso2(pathVal[key2]);

    if (!key3) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso3(pathVal[key3]);

    if (!key4) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso4(pathVal[key4]);

    return pathVal;
  };
}

function getterFnWithEnsureSafeObject(fn, fullExpression) {
  return function(s, l) {
    return fn(s, l, ensureSafeObject, fullExpression);
  };
}

function getterFn(path, options, fullExp) {
  var expensiveChecks = options.expensiveChecks;
  var getterFnCache = (expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault);
  var fn = getterFnCache[path];
  if (fn) return fn;


  var pathKeys = path.split('.'),
      pathKeysLength = pathKeys.length;

  // http://jsperf.com/angularjs-parse-getter/6
  if (options.csp) {
    if (pathKeysLength < 6) {
      fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, expensiveChecks);
    } else {
      fn = function cspSafeGetter(scope, locals) {
        var i = 0, val;
        do {
          val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],
                                pathKeys[i++], fullExp, expensiveChecks)(scope, locals);

          locals = undefined; // clear after first iteration
          scope = val;
        } while (i < pathKeysLength);
        return val;
      };
    }
  } else {
    var code = '';
    if (expensiveChecks) {
      code += 's = eso(s, fe);\nl = eso(l, fe);\n';
    }
    var needsEnsureSafeObject = expensiveChecks;
    forEach(pathKeys, function(key, index) {
      ensureSafeMemberName(key, fullExp);
      var lookupJs = (index
                      // we simply dereference 's' on any .dot notation
                      ? 's'
                      // but if we are first then we check locals first, and if so read it first
                      : '((l&&l.hasOwnProperty("' + key + '"))?l:s)') + '.' + key;
      if (expensiveChecks || isPossiblyDangerousMemberName(key)) {
        lookupJs = 'eso(' + lookupJs + ', fe)';
        needsEnsureSafeObject = true;
      }
      code += 'if(s == null) return undefined;\n' +
              's=' + lookupJs + ';\n';
    });
    code += 'return s;';

    /* jshint -W054 */
    var evaledFnGetter = new Function('s', 'l', 'eso', 'fe', code); // s=scope, l=locals, eso=ensureSafeObject
    /* jshint +W054 */
    evaledFnGetter.toString = valueFn(code);
    if (needsEnsureSafeObject) {
      evaledFnGetter = getterFnWithEnsureSafeObject(evaledFnGetter, fullExp);
    }
    fn = evaledFnGetter;
  }

  fn.sharedGetter = true;
  fn.assign = function(self, value, locals) {
    return setter(self, locals, path, value, path);
  };
  getterFnCache[path] = fn;
  return fn;
}

var objectValueOf = Object.prototype.valueOf;

function getValueOf(value) {
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
}

///////////////////////////////////

/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc provider
 * @name $parseProvider
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cacheDefault = createMap();
  var cacheExpensive = createMap();



  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {
    var $parseOptions = {
          csp: $sniffer.csp,
          expensiveChecks: false
        },
        $parseOptionsExpensive = {
          csp: $sniffer.csp,
          expensiveChecks: true
        };

    function wrapSharedExpression(exp) {
      var wrapped = exp;

      if (exp.sharedGetter) {
        wrapped = function $parseWrapper(self, locals) {
          return exp(self, locals);
        };
        wrapped.literal = exp.literal;
        wrapped.constant = exp.constant;
        wrapped.assign = exp.assign;
      }

      return wrapped;
    }

    return function $parse(exp, interceptorFn, expensiveChecks) {
      var parsedExpression, oneTime, cacheKey;

      switch (typeof exp) {
        case 'string':
          cacheKey = exp = exp.trim();

          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
          parsedExpression = cache[cacheKey];

          if (!parsedExpression) {
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
              oneTime = true;
              exp = exp.substring(2);
            }

            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
            var lexer = new Lexer(parseOptions);
            var parser = new Parser(lexer, $filter, parseOptions);
            parsedExpression = parser.parse(exp);

            if (parsedExpression.constant) {
              parsedExpression.$$watchDelegate = constantWatchDelegate;
            } else if (oneTime) {
              //oneTime is not part of the exp passed to the Parser so we may have to
              //wrap the parsedExpression before adding a $$watchDelegate
              parsedExpression = wrapSharedExpression(parsedExpression);
              parsedExpression.$$watchDelegate = parsedExpression.literal ?
                oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
            } else if (parsedExpression.inputs) {
              parsedExpression.$$watchDelegate = inputsWatchDelegate;
            }

            cache[cacheKey] = parsedExpression;
          }
          return addInterceptor(parsedExpression, interceptorFn);

        case 'function':
          return addInterceptor(exp, interceptorFn);

        default:
          return addInterceptor(noop, interceptorFn);
      }
    };

    function collectExpressionInputs(inputs, list) {
      for (var i = 0, ii = inputs.length; i < ii; i++) {
        var input = inputs[i];
        if (!input.constant) {
          if (input.inputs) {
            collectExpressionInputs(input.inputs, list);
          } else if (list.indexOf(input) === -1) { // TODO(perf) can we do better?
            list.push(input);
          }
        }
      }

      return list;
    }

    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

      if (newValue == null || oldValueOfValue == null) { // null/undefined
        return newValue === oldValueOfValue;
      }

      if (typeof newValue === 'object') {

        // attempt to convert the value to a primitive type
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
        //             be cheaply dirty-checked
        newValue = getValueOf(newValue);

        if (typeof newValue === 'object') {
          // objects/arrays are not supported - deep-watching them would be too expensive
          return false;
        }

        // fall-through to the primitive equality check
      }

      //Primitive or NaN
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
    }

    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var inputExpressions = parsedExpression.$$inputs ||
                    (parsedExpression.$$inputs = collectExpressionInputs(parsedExpression.inputs, []));

      var lastResult;

      if (inputExpressions.length === 1) {
        var oldInputValue = expressionInputDirtyCheck; // init to something unique so that equals check fails
        inputExpressions = inputExpressions[0];
        return scope.$watch(function expressionInputWatch(scope) {
          var newInputValue = inputExpressions(scope);
          if (!expressionInputDirtyCheck(newInputValue, oldInputValue)) {
            lastResult = parsedExpression(scope);
            oldInputValue = newInputValue && getValueOf(newInputValue);
          }
          return lastResult;
        }, listener, objectEquality);
      }

      var oldInputValueOfValues = [];
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
      }

      return scope.$watch(function expressionInputsWatch(scope) {
        var changed = false;

        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
          var newInputValue = inputExpressions[i](scope);
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
          }
        }

        if (changed) {
          lastResult = parsedExpression(scope);
        }

        return lastResult;
      }, listener, objectEquality);
    }

    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        if (isDefined(value)) {
          scope.$$postDigest(function() {
            if (isDefined(lastValue)) {
              unwatch();
            }
          });
        }
      }, objectEquality);
    }

    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.call(this, value, old, scope);
        }
        if (isAllDefined(value)) {
          scope.$$postDigest(function() {
            if (isAllDefined(lastValue)) unwatch();
          });
        }
      }, objectEquality);

      function isAllDefined(value) {
        var allDefined = true;
        forEach(value, function(val) {
          if (!isDefined(val)) allDefined = false;
        });
        return allDefined;
      }
    }

    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch;
      return unwatch = scope.$watch(function constantWatch(scope) {
        return parsedExpression(scope);
      }, function constantListener(value, old, scope) {
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        unwatch();
      }, objectEquality);
    }

    function addInterceptor(parsedExpression, interceptorFn) {
      if (!interceptorFn) return parsedExpression;
      var watchDelegate = parsedExpression.$$watchDelegate;

      var regularWatch =
          watchDelegate !== oneTimeLiteralWatchDelegate &&
          watchDelegate !== oneTimeWatchDelegate;

      var fn = regularWatch ? function regularInterceptedExpression(scope, locals) {
        var value = parsedExpression(scope, locals);
        return interceptorFn(value, scope, locals);
      } : function oneTimeInterceptedExpression(scope, locals) {
        var value = parsedExpression(scope, locals);
        var result = interceptorFn(value, scope, locals);
        // we only return the interceptor's result if the
        // initial value is defined (for bind-once)
        return isDefined(value) ? result : value;
      };

      // Propagate $$watchDelegates other then inputsWatchDelegate
      if (parsedExpression.$$watchDelegate &&
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
      } else if (!interceptorFn.$stateful) {
        // If there is an interceptor, but no watchDelegate then treat the interceptor like
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
        fn.$$watchDelegate = inputsWatchDelegate;
        fn.inputs = [parsedExpression];
      }

      return fn;
    }
  }];
}

/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is an implementation of promises/deferred objects inspired by
 * [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}

function $$QProvider() {
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
    return qFactory(function(callback) {
      $browser.defer(callback);
    }, $exceptionHandler);
  }];
}

/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {
  var $qMinErr = minErr('$q', TypeError);
  function callOnce(self, resolveFn, rejectFn) {
    var called = false;
    function wrap(fn) {
      return function(value) {
        if (called) return;
        called = true;
        fn.call(self, value);
      };
    }

    return [wrap(resolveFn), wrap(rejectFn)];
  }

  /**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    return new Deferred();
  };

  function Promise() {
    this.$$state = { status: 0 };
  }

  Promise.prototype = {
    then: function(onFulfilled, onRejected, progressBack) {
      var result = new Deferred();

      this.$$state.pending = this.$$state.pending || [];
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

      return result.promise;
    },

    "catch": function(callback) {
      return this.then(null, callback);
    },

    "finally": function(callback, progressBack) {
      return this.then(function(value) {
        return handleCallback(value, true, callback);
      }, function(error) {
        return handleCallback(error, false, callback);
      }, progressBack);
    }
  };

  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
  function simpleBind(context, fn) {
    return function(value) {
      fn.call(context, value);
    };
  }

  function processQueue(state) {
    var fn, promise, pending;

    pending = state.pending;
    state.processScheduled = false;
    state.pending = undefined;
    for (var i = 0, ii = pending.length; i < ii; ++i) {
      promise = pending[i][0];
      fn = pending[i][state.status];
      try {
        if (isFunction(fn)) {
          promise.resolve(fn(state.value));
        } else if (state.status === 1) {
          promise.resolve(state.value);
        } else {
          promise.reject(state.value);
        }
      } catch (e) {
        promise.reject(e);
        exceptionHandler(e);
      }
    }
  }

  function scheduleProcessQueue(state) {
    if (state.processScheduled || !state.pending) return;
    state.processScheduled = true;
    nextTick(function() { processQueue(state); });
  }

  function Deferred() {
    this.promise = new Promise();
    //Necessary to support unbound execution :/
    this.resolve = simpleBind(this, this.resolve);
    this.reject = simpleBind(this, this.reject);
    this.notify = simpleBind(this, this.notify);
  }

  Deferred.prototype = {
    resolve: function(val) {
      if (this.promise.$$state.status) return;
      if (val === this.promise) {
        this.$$reject($qMinErr(
          'qcycle',
          "Expected promise to be resolved with value other than itself '{0}'",
          val));
      } else {
        this.$$resolve(val);
      }

    },

    $$resolve: function(val) {
      var then, fns;

      fns = callOnce(this, this.$$resolve, this.$$reject);
      try {
        if ((isObject(val) || isFunction(val))) then = val && val.then;
        if (isFunction(then)) {
          this.promise.$$state.status = -1;
          then.call(val, fns[0], fns[1], this.notify);
        } else {
          this.promise.$$state.value = val;
          this.promise.$$state.status = 1;
          scheduleProcessQueue(this.promise.$$state);
        }
      } catch (e) {
        fns[1](e);
        exceptionHandler(e);
      }
    },

    reject: function(reason) {
      if (this.promise.$$state.status) return;
      this.$$reject(reason);
    },

    $$reject: function(reason) {
      this.promise.$$state.value = reason;
      this.promise.$$state.status = 2;
      scheduleProcessQueue(this.promise.$$state);
    },

    notify: function(progress) {
      var callbacks = this.promise.$$state.pending;

      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
        nextTick(function() {
          var callback, result;
          for (var i = 0, ii = callbacks.length; i < ii; i++) {
            result = callbacks[i][0];
            callback = callbacks[i][3];
            try {
              result.notify(isFunction(callback) ? callback(progress) : progress);
            } catch (e) {
              exceptionHandler(e);
            }
          }
        });
      }
    }
  };

  /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    var result = new Deferred();
    result.reject(reason);
    return result.promise;
  };

  var makePromise = function makePromise(value, resolved) {
    var result = new Deferred();
    if (resolved) {
      result.resolve(value);
    } else {
      result.reject(value);
    }
    return result.promise;
  };

  var handleCallback = function handleCallback(value, isResolved, callback) {
    var callbackOutput = null;
    try {
      if (isFunction(callback)) callbackOutput = callback();
    } catch (e) {
      return makePromise(e, false);
    }
    if (isPromiseLike(callbackOutput)) {
      return callbackOutput.then(function() {
        return makePromise(value, isResolved);
      }, function(error) {
        return makePromise(error, false);
      });
    } else {
      return makePromise(value, isResolved);
    }
  };

  /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */


  var when = function(value, callback, errback, progressBack) {
    var result = new Deferred();
    result.resolve(value);
    return result.promise.then(callback, errback, progressBack);
  };

  /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */

  function all(promises) {
    var deferred = new Deferred(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      when(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  var $Q = function Q(resolver) {
    if (!isFunction(resolver)) {
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
    }

    if (!(this instanceof Q)) {
      // More useful when $Q is the Promise itself.
      return new Q(resolver);
    }

    var deferred = new Deferred();

    function resolveFn(value) {
      deferred.resolve(value);
    }

    function rejectFn(reason) {
      deferred.reject(reason);
    }

    resolver(resolveFn, rejectFn);

    return deferred.promise;
  };

  $Q.defer = defer;
  $Q.reject = reject;
  $Q.when = when;
  $Q.all = all;

  return $Q;
}

function $$RAFProvider() { //rAF
  this.$get = ['$window', '$timeout', function($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame ||
                                $window.webkitRequestAnimationFrame;

    var cancelAnimationFrame = $window.cancelAnimationFrame ||
                               $window.webkitCancelAnimationFrame ||
                               $window.webkitCancelRequestAnimationFrame;

    var rafSupported = !!requestAnimationFrame;
    var raf = rafSupported
      ? function(fn) {
          var id = requestAnimationFrame(fn);
          return function() {
            cancelAnimationFrame(id);
          };
        }
      : function(fn) {
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
          return function() {
            $timeout.cancel(timer);
          };
        };

    raf.supported = rafSupported;

    return raf;
  }];
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */


/**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider() {
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;
  var applyAsyncId = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  function createChildScopeClass(parent) {
    function ChildScope() {
      this.$$watchers = this.$$nextSibling =
          this.$$childHead = this.$$childTail = null;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$id = nextUid();
      this.$$ChildScope = null;
    }
    ChildScope.prototype = parent;
    return ChildScope;
  }

  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function($injector, $exceptionHandler, $parse, $browser) {

    function destroyChildScope($event) {
        $event.currentScope.$$destroyed = true;
    }

    /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * ```html
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * ```
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this.$root = this;
      this.$$destroyed = false;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$isolateBindings = null;
    }

    /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */

     /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */

      /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */

    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
       *                              of the newly created scope. Defaults to `this` scope if not provided.
       *                              This is used when creating a transclude scope to correctly place it
       *                              in the scope hierarchy while maintaining the correct prototypical
       *                              inheritance.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate, parent) {
        var child;

        parent = parent || this;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
        } else {
          // Only create a child scope class if somebody asks for one,
          // but cache it to allow the VM to optimize lookups.
          if (!this.$$ChildScope) {
            this.$$ChildScope = createChildScopeClass(this);
          }
          child = new this.$$ChildScope();
        }
        child.$parent = parent;
        child.$$prevSibling = parent.$$childTail;
        if (parent.$$childHead) {
          parent.$$childTail.$$nextSibling = child;
          parent.$$childTail = child;
        } else {
          parent.$$childHead = parent.$$childTail = child;
        }

        // When the new scope is not isolated or we inherit from `this`, and
        // the parent scope is destroyed, the property `$$destroyed` is inherited
        // prototypically. In all other cases, this property needs to be set
        // when the parent scope is destroyed.
        // The listener needs to be added after the parent is set
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

        return child;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (Since
       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
       *   `watchExpression` can execute multiple times per
       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
       * change is detected, be prepared for multiple calls to your listener.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality) {
        var get = $parse(watchExp);

        if (get.$$watchDelegate) {
          return get.$$watchDelegate(this, listener, objectEquality, get);
        }
        var scope = this,
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        if (!isFunction(listener)) {
          watcher.fn = noop;
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);

        return function deregisterWatch() {
          arrayRemove(array, watcher);
          lastDirtyWatch = null;
        };
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchGroup
       * @kind function
       *
       * @description
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
       * If any one expression in the collection changes the `listener` is executed.
       *
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
       *
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
       *
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
       *    expression in `watchExpressions` changes
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    The `scope` refers to the current scope.
       * @returns {function()} Returns a de-registration function for all listeners.
       */
      $watchGroup: function(watchExpressions, listener) {
        var oldValues = new Array(watchExpressions.length);
        var newValues = new Array(watchExpressions.length);
        var deregisterFns = [];
        var self = this;
        var changeReactionScheduled = false;
        var firstRun = true;

        if (!watchExpressions.length) {
          // No expressions means we call the listener ASAP
          var shouldCall = true;
          self.$evalAsync(function() {
            if (shouldCall) listener(newValues, newValues, self);
          });
          return function deregisterWatchGroup() {
            shouldCall = false;
          };
        }

        if (watchExpressions.length === 1) {
          // Special case size of one
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
            newValues[0] = value;
            oldValues[0] = oldValue;
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
          });
        }

        forEach(watchExpressions, function(expr, i) {
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
            newValues[i] = value;
            oldValues[i] = oldValue;
            if (!changeReactionScheduled) {
              changeReactionScheduled = true;
              self.$evalAsync(watchGroupAction);
            }
          });
          deregisterFns.push(unwatchFn);
        });

        function watchGroupAction() {
          changeReactionScheduled = false;

          if (firstRun) {
            firstRun = false;
            listener(newValues, newValues, self);
          } else {
            listener(newValues, oldValues, self);
          }
        }

        return function deregisterWatchGroup() {
          while (deregisterFns.length) {
            deregisterFns.shift()();
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        $watchCollectionInterceptor.$stateful = true;

        var self = this;
        // the current value, updated on each dirty-check run
        var newValue;
        // a shallow copy of the newValue from the last dirty-check run,
        // updated to match newValue during dirty-check run
        var oldValue;
        // a shallow copy of the newValue from when the last change happened
        var veryOldValue;
        // only track veryOldValue if the listener is asking for it
        var trackVeryOldValue = (listener.length > 1);
        var changeDetected = 0;
        var changeDetector = $parse(obj, $watchCollectionInterceptor);
        var internalArray = [];
        var internalObject = {};
        var initRun = true;
        var oldLength = 0;

        function $watchCollectionInterceptor(_value) {
          newValue = _value;
          var newLength, key, bothNaN, newItem, oldItem;

          // If the new value is undefined, then return undefined as the watch may be a one-time watch
          if (isUndefined(newValue)) return;

          if (!isObject(newValue)) { // if primitive
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              oldItem = oldValue[i];
              newItem = newValue[i];

              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
              if (!bothNaN && (oldItem !== newItem)) {
                changeDetected++;
                oldValue[i] = newItem;
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (newValue.hasOwnProperty(key)) {
                newLength++;
                newItem = newValue[key];
                oldItem = oldValue[key];

                if (key in oldValue) {
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                  if (!bothNaN && (oldItem !== newItem)) {
                    changeDetected++;
                    oldValue[key] = newItem;
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newItem;
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for (key in oldValue) {
                if (!newValue.hasOwnProperty(key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          if (initRun) {
            initRun = false;
            listener(newValue, newValue, self);
          } else {
            listener(newValue, veryOldValue, self);
          }

          // make a copy for the next time a collection is changed
          if (trackVeryOldValue) {
            if (!isObject(newValue)) {
              //primitive
              veryOldValue = newValue;
            } else if (isArrayLike(newValue)) {
              veryOldValue = new Array(newValue.length);
              for (var i = 0; i < newValue.length; i++) {
                veryOldValue[i] = newValue[i];
              }
            } else { // if object
              veryOldValue = {};
              for (var key in newValue) {
                if (hasOwnProperty.call(newValue, key)) {
                  veryOldValue[key] = newValue[key];
                }
              }
            }
          }
        }

        return this.$watch(changeDetector, $watchCollectionAction);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
      $digest: function() {
        var watch, value, last,
            watchers,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg, asyncTask;

        beginPhase('$digest');
        // Check for changes to browser url that happened in sync before the call to $digest
        $browser.$$checkUrlChange();

        if (this === $rootScope && applyAsyncId !== null) {
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
          $browser.defer.cancel(applyAsyncId);
          flushApplyAsync();
        }

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while (asyncQueue.length) {
            try {
              asyncTask = asyncQueue.shift();
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
            } catch (e) {
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    if ((value = watch.get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (typeof value === 'number' && typeof last === 'number'
                               && isNaN(value) && isNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value, null) : value;
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        watchLog[logIdx].push({
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                          newVal: value,
                          oldVal: last
                        });
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = (current.$$childHead ||
                (current !== target && current.$$nextSibling)))) {
              while (current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if ((dirty || asyncQueue.length) && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, watchLog);
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        while (postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // we can't destroy the root scope or a scope that has been already destroyed
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;
        if (this === $rootScope) return;

        for (var eventName in this.$$listenerCount) {
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
        }

        // sever all the references to parent scopes (after this cleanup, the current scope should
        // not be retained by any of our references and should be eligible for garbage collection)
        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // Disable listeners, watchers and apply/digest methods
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
        this.$$listeners = {};

        // All of the code below is bogus code that works around V8's memory leak via optimized code
        // and inline caches.
        //
        // see:
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
            this.$$childTail = this.$root = this.$$watchers = null;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       */
      $evalAsync: function(expr, locals) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !asyncQueue.length) {
          $browser.defer(function() {
            if (asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        asyncQueue.push({scope: this, expression: expr, locals: locals});
      },

      $$postDigest: function(fn) {
        postDigestQueue.push(fn);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          return this.$eval(expr);
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          clearPhase();
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$applyAsync
       * @kind function
       *
       * @description
       * Schedule the invocation of $apply to occur at a later time. The actual time difference
       * varies across browsers, but is typically around ~10 milliseconds.
       *
       * This can be used to queue up multiple expressions which need to be evaluated in the same
       * digest.
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       */
      $applyAsync: function(expr) {
        var scope = this;
        expr && applyAsyncQueue.push($applyAsyncExpression);
        scheduleApplyAsync();

        function $applyAsyncExpression() {
          scope.$eval(expr);
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
       *     event propagates through the scope hierarchy, this property is set to null.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          var indexOfListener = namedListeners.indexOf(listener);
          if (indexOfListener !== -1) {
            namedListeners[indexOfListener] = null;
            decrementListenerCount(self, 1, name);
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i = 0, length = namedListeners.length; i < length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) {
            event.currentScope = null;
            return event;
          }
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        event.currentScope = null;

        return event;
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            };

        if (!target.$$listenerCount[name]) return event;

        var listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i = 0, length = listeners.length; i < length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while (current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        event.currentScope = null;
        return event;
      }
    };

    var $rootScope = new Scope();

    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
    var asyncQueue = $rootScope.$$asyncQueue = [];
    var postDigestQueue = $rootScope.$$postDigestQueue = [];
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }


    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}

    function flushApplyAsync() {
      while (applyAsyncQueue.length) {
        try {
          applyAsyncQueue.shift()();
        } catch (e) {
          $exceptionHandler(e);
        }
      }
      applyAsyncId = null;
    }

    function scheduleApplyAsync() {
      if (applyAsyncId === null) {
        applyAsyncId = $browser.defer(function() {
          $rootScope.$apply(flushApplyAsync);
        });
      }
    }
  }];
}

/**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      normalizedVal = urlResolve(uri).href;
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
        return 'unsafe:' + normalizedVal;
      }
      return uri;
    };
  };
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace('\\*\\*', '.*').
                  replace('\\*', '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function(value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function(value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/* jshint maxlen: false*/

/**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *           self.userComments = userComments;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
/* jshint maxlen: 100 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function(value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sceDelegate', function(
                $parse,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && msie < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = shallowCopy(SCE_CONTEXTS);

    /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function() {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return $parse(expr, function(value) {
          return sce.getTrusted(type, value);
        });
      }
    };

    /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function(enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function(expr) {
        return parse(enumValue, expr);
      };
      sce[camelCase("get_trusted_" + lName)] = function(value) {
        return getTrusted(enumValue, value);
      };
      sce[camelCase("trust_as_" + lName)] = function(value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android =
          int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for (var prop in bodyStyle) {
        if (match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if (!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions ||  !animations)) {
        transitions = isString(document.body.style.webkitTransition);
        animations = isString(document.body.style.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      // jshint -W018
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      // jshint +W018
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        // IE10+ implements 'input' event but it erroneously fires under various situations,
        // e.g. when placeholder changes, or a form is focused.
        if (event === 'input' && msie <= 11) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      vendorPrefix: vendorPrefix,
      transitions: transitions,
      animations: animations,
      android: android
    };
  }];
}

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc service
 * @name $templateRequest
 *
 * @description
 * The `$templateRequest` service downloads the provided template using `$http` and, upon success,
 * stores the contents inside of `$templateCache`. If the HTTP request fails or the response data
 * of the HTTP request is empty, a `$compile` error will be thrown (the exception can be thwarted
 * by setting the 2nd parameter of the function to true).
 *
 * @param {string} tpl The HTTP request template URL
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *
 * @return {Promise} the HTTP Promise for the given.
 *
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
 */
function $TemplateRequestProvider() {
  this.$get = ['$templateCache', '$http', '$q', function($templateCache, $http, $q) {
    function handleRequestFn(tpl, ignoreRequestError) {
      handleRequestFn.totalPendingRequests++;

      var transformResponse = $http.defaults && $http.defaults.transformResponse;

      if (isArray(transformResponse)) {
        transformResponse = transformResponse.filter(function(transformer) {
          return transformer !== defaultHttpResponseTransform;
        });
      } else if (transformResponse === defaultHttpResponseTransform) {
        transformResponse = null;
      }

      var httpOptions = {
        cache: $templateCache,
        transformResponse: transformResponse
      };

      return $http.get(tpl, httpOptions)
        ['finally'](function() {
          handleRequestFn.totalPendingRequests--;
        })
        .then(function(response) {
          return response.data;
        }, handleError);

      function handleError(resp) {
        if (!ignoreRequestError) {
          throw $compileMinErr('tpload', 'Failed to load template: {0}', tpl);
        }
        return $q.reject(resp);
      }
    }

    handleRequestFn.totalPendingRequests = 0;

    return handleRequestFn;
  }];
}

function $$TestabilityProvider() {
  this.$get = ['$rootScope', '$browser', '$location',
       function($rootScope,   $browser,   $location) {

    /**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */
    var testability = {};

    /**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */
    testability.findBindings = function(element, expression, opt_exactMatch) {
      var bindings = element.getElementsByClassName('ng-binding');
      var matches = [];
      forEach(bindings, function(binding) {
        var dataBinding = angular.element(binding).data('$binding');
        if (dataBinding) {
          forEach(dataBinding, function(bindingName) {
            if (opt_exactMatch) {
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
              if (matcher.test(bindingName)) {
                matches.push(binding);
              }
            } else {
              if (bindingName.indexOf(expression) != -1) {
                matches.push(binding);
              }
            }
          });
        }
      });
      return matches;
    };

    /**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */
    testability.findModels = function(element, expression, opt_exactMatch) {
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
      for (var p = 0; p < prefixes.length; ++p) {
        var attributeEquals = opt_exactMatch ? '=' : '*=';
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
        var elements = element.querySelectorAll(selector);
        if (elements.length) {
          return elements;
        }
      }
    };

    /**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */
    testability.getLocation = function() {
      return $location.url();
    };

    /**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */
    testability.setLocation = function(url) {
      if (url !== $location.url()) {
        $location.url(url);
        $rootScope.$digest();
      }
    };

    /**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */
    testability.whenStable = function(callback) {
      $browser.notifyWhenNoOutstandingRequests(callback);
    };

    return testability;
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {
    var deferreds = {};


     /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
    function timeout(fn, delay, invokeApply) {
      var skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise,
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn());
        } catch (e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = document.createElement("a");
var originUrl = urlResolve(window.location.href);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url) {
  var href = url;

  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute("href", href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
function $WindowProvider() {
  this.$get = valueFn(window);
}

/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

/**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */

/**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if (isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////

  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object or its nested object properties. That's equivalent to the simple
 *     substring match with a `string` as described above. The predicate can be negated by prefixing
 *     the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The
 *     function is called for each element of `array`. The final result is an array of those
 *     elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
function filterFilter() {
  return function(array, expression, comparator) {
    if (!isArray(array)) return array;

    var predicateFn;
    var matchAgainstAnyProp;

    switch (typeof expression) {
      case 'function':
        predicateFn = expression;
        break;
      case 'boolean':
      case 'number':
      case 'string':
        matchAgainstAnyProp = true;
        //jshint -W086
      case 'object':
        //jshint +W086
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
        break;
      default:
        return array;
    }

    return array.filter(predicateFn);
  };
}

// Helper functions for `filterFilter`
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
  var predicateFn;

  if (comparator === true) {
    comparator = equals;
  } else if (!isFunction(comparator)) {
    comparator = function(actual, expected) {
      if (isObject(actual) || isObject(expected)) {
        // Prevent an object to be considered equal to a string like `'[object'`
        return false;
      }

      actual = lowercase('' + actual);
      expected = lowercase('' + expected);
      return actual.indexOf(expected) !== -1;
    };
  }

  predicateFn = function(item) {
    if (shouldMatchPrimitives && !isObject(item)) {
      return deepCompare(item, expression.$, comparator, false);
    }
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
  };

  return predicateFn;
}

function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
  var actualType = (actual !== null) ? typeof actual : 'null';
  var expectedType = (expected !== null) ? typeof expected : 'null';

  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
  } else if (isArray(actual)) {
    // In case `actual` is an array, consider it a match
    // if ANY of it's items matches `expected`
    return actual.some(function(item) {
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
    });
  }

  switch (actualType) {
    case 'object':
      var key;
      if (matchAgainstAnyProp) {
        for (key in actual) {
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
            return true;
          }
        }
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
      } else if (expectedType === 'object') {
        for (key in expected) {
          var expectedVal = expected[key];
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
            continue;
          }

          var matchAnyProperty = key === '$';
          var actualVal = matchAnyProperty ? actual : actual[key];
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
            return false;
          }
        }
        return true;
      } else {
        return comparator(actual, expected);
      }
      break;
    case 'function':
      return false;
    default:
      return comparator(actual, expected);
  }
}

/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');
       });
     </file>
   </example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol, fractionSize) {
    if (isUndefined(currencySymbol)) {
      currencySymbol = formats.CURRENCY_SYM;
    }

    if (isUndefined(fractionSize)) {
      fractionSize = formats.PATTERNS[1].maxFrac;
    }

    // if null or undefined pass it through
    return (amount == null)
        ? amount
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
            replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter number: <input ng-model='val'><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */


numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {

    // if null or undefined pass it through
    return (number == null)
        ? number
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
                       fractionSize);
  };
}

var DECIMAL_SEP = '.';
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
  if (!isFinite(number) || isObject(number)) return '';

  var isNegative = number < 0;
  number = Math.abs(number);
  var numStr = number + '',
      formatedText = '',
      parts = [];

  var hasExponent = false;
  if (numStr.indexOf('e') !== -1) {
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
      number = 0;
    } else {
      formatedText = numStr;
      hasExponent = true;
    }
  }

  if (!hasExponent) {
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

    // determine fractionSize if it is not specified
    if (isUndefined(fractionSize)) {
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
    }

    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
    // inspired by:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

    var fraction = ('' + number).split(DECIMAL_SEP);
    var whole = fraction[0];
    fraction = fraction[1] || '';

    var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

    if (whole.length >= (lgroup + group)) {
      pos = whole.length - lgroup;
      for (i = 0; i < pos; i++) {
        if ((pos - i) % group === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
    }

    for (i = pos; i < whole.length; i++) {
      if ((whole.length - i) % lgroup === 0 && i !== 0) {
        formatedText += groupSep;
      }
      formatedText += whole.charAt(i);
    }

    // format fraction part.
    while (fraction.length < fractionSize) {
      fraction += '0';
    }

    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
  } else {
    if (fractionSize > 0 && number < 1) {
      formatedText = number.toFixed(fractionSize);
      number = parseFloat(formatedText);
    }
  }

  if (number === 0) {
    isNegative = false;
  }

  parts.push(isNegative ? pattern.negPre : pattern.posPre,
             formatedText,
             isNegative ? pattern.negSuf : pattern.posSuf);
  return parts.join('');
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset)
      value += offset;
    if (value === 0 && offset == -12) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date) {
  var zone = -1 * date.getTimezoneOffset();
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
}

function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(),
      // 4 = index of Thursday
      datetime.getDate() + (4 - datetime.getDay()));
}

function weekGetter(size) {
   return function(date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
         thisThurs = getThursdayThisWeek(date);

      var diff = +thisThurs - +firstThurs,
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

      return padNumber(result, size);
   };
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

function eraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
}

function longEraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter,
    ww: weekGetter(2),
     w: weekGetter(1),
     G: eraGetter,
     GG: eraGetter,
     GGG: eraGetter,
     GGGG: longEraGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. Right now, only `'UTC'` is supported.
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = int(match[9] + match[10]);
        tzMin = int(match[9] + match[11]);
      }
      dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
      var h = int(match[4] || 0) - tzHour;
      var m = int(match[5] || 0) - tzMin;
      var s = int(match[6] || 0);
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format, timezone) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date)) {
      return date;
    }

    while (format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    if (timezone && timezone === 'UTC') {
      date = new Date(date.getTime());
      date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
    }
    forEach(parts, function(value) {
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS)
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
function jsonFilter() {
  return function(object, spacing) {
    if (isUndefined(spacing)) {
        spacing = 2;
    }
    return toJson(object, spacing);
  };
}


/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
 * converted to a string.
 *
 * @param {Array|string|number} input Source array, string or number to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         Limit {{longNumber}} to: <input type="number" step="1" ng-model="longNumberLimit">
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
function limitToFilter() {
  return function(input, limit) {
    if (isNumber(input)) input = input.toString();
    if (!isArray(input) && !isString(input)) return input;

    if (Math.abs(Number(limit)) === Infinity) {
      limit = Number(limit);
    } else {
      limit = int(limit);
    }

    //NaN check on limit
    if (limit) {
      return limit > 0 ? input.slice(0, limit) : input.slice(limit);
    } else {
      return isString(input) ? "" : [];
    }
  };
}

/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * correctly, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
 *      element itself is used to compare where sorting.
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 *    If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 *
 * @example
 * The example below demonstrates a simple ngRepeat, where the data is sorted
 * by age in descending order (predicate is set to `'-age'`).
 * `reverse` is not set, which means it defaults to `false`.
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
           }]);
       </script>
       <div ng-controller="ExampleController">
         <table class="friend">
           <tr>
             <th>Name</th>
             <th>Phone Number</th>
             <th>Age</th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:'-age'">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * The predicate and reverse parameters can be controlled dynamically through scope properties,
 * as shown in the next example.
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = '-age';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse) {
  return function(array, sortPredicate, reverseOrder) {
    if (!(isArrayLike(array))) return array;
    sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }
    sortPredicate = sortPredicate.map(function(predicate) {
      var descending = false, get = predicate || identity;
      if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-';
          predicate = predicate.substring(1);
        }
        if (predicate === '') {
          // Effectively no predicate was passed so we compare identity
          return reverseComparator(compare, descending);
        }
        get = $parse(predicate);
        if (get.constant) {
          var key = get();
          return reverseComparator(function(a, b) {
            return compare(a[key], b[key]);
          }, descending);
        }
      }
      return reverseComparator(function(a, b) {
        return compare(get(a),get(b));
      }, descending);
    });
    return slice.call(array).sort(reverseComparator(comparator, reverseOrder));

    function comparator(o1, o2) {
      for (var i = 0; i < sortPredicate.length; i++) {
        var comp = sortPredicate[i](o1, o2);
        if (comp !== 0) return comp;
      }
      return 0;
    }
    function reverseComparator(comp, descending) {
      return descending
          ? function(a, b) {return comp(b,a);}
          : comp;
    }

    function isPrimitive(value) {
      switch (typeof value) {
        case 'number': /* falls through */
        case 'boolean': /* falls through */
        case 'string':
          return true;
        default:
          return false;
      }
    }

    function objectToString(value) {
      if (value === null) return 'null';
      if (typeof value.valueOf === 'function') {
        value = value.valueOf();
        if (isPrimitive(value)) return value;
      }
      if (typeof value.toString === 'function') {
        value = value.toString();
        if (isPrimitive(value)) return value;
      }
      return '';
    }

    function compare(v1, v2) {
      var t1 = typeof v1;
      var t2 = typeof v2;
      if (t1 === t2 && t1 === "object") {
        v1 = objectToString(v1);
        v2 = objectToString(v2);
      }
      if (t1 === t2) {
        if (t1 === "string") {
           v1 = v1.toLowerCase();
           v2 = v2.toLowerCase();
        }
        if (v1 === v2) return 0;
        return v1 < v2 ? -1 : 1;
      } else {
        return t1 < t2 ? -1 : 1;
      }
    }
  };
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {
    if (!attr.href && !attr.xlinkHref && !attr.name) {
      return function(scope, element) {
        // If the linked element is not an anchor tag anymore, do nothing
        if (element[0].nodeName.toLowerCase() !== 'a') return;

        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                   'xlink:href' : 'href';
        element.on('click', function(event) {
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr(href)) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * This directive sets the `disabled` attribute on the element if the
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `disabled`
 * attribute.  The following example would make the button enabled on Chrome/Firefox
 * but not on older IEs:
 *
 * ```html
 * <!-- See below for an example of ng-disabled being used correctly -->
 * <div ng-init="isDisabled = false">
 *  <button disabled="{{isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * This is because the HTML specification does not require browsers to preserve the values of
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 *
 * @example
    <example>
      <file name="index.html">
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then the `disabled` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then special attribute "checked" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};


// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      restrict: 'A',
      priority: 100,
      link: function(scope, element, attr) {
        scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
          attr.$set(attrName, !!value);
        });
      }
    };
  };
});

// aliased input attrs are evaluated
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
  ngAttributeAliasDirectives[ngAttr] = function() {
    return {
      priority: 100,
      link: function(scope, element, attr) {
        //special case ngPattern when a literal regular expression value
        //is used as the expression (this way we don't have to watch anything).
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
          if (match) {
            attr.$set("ngPattern", new RegExp(match[1], match[2]));
            return;
          }
        }

        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
          attr.$set(ngAttr, value);
        });
      }
    };
  };
});

// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        var propName = attrName,
            name = attrName;

        if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
          name = 'xlinkHref';
          attr.$attr[name] = 'xlink:href';
          propName = null;
        }

        attr.$observe(normalized, function(value) {
          if (!value) {
            if (attrName === 'href') {
              attr.$set(name, null);
            }
            return;
          }

          attr.$set(name, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie && propName) element.prop(propName, attr[name]);
        });
      }
    };
  };
});

/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
 */
var nullFormCtrl = {
  $addControl: noop,
  $$renameControl: nullFormRenameControl,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop,
  $setSubmitted: noop
},
SUBMITTED_CLASS = 'ng-submitted';

function nullFormRenameControl(control, name) {
  control.$name = name;
}

/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $error Is an object hash, containing references to controls or
 *  forms with failing validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for given error name.
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
function FormController(element, attrs, $scope, $animate, $interpolate) {
  var form = this,
      controls = [];

  var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;

  // init state
  form.$error = {};
  form.$$success = {};
  form.$pending = undefined;
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;
  form.$submitted = false;

  parentForm.$addControl(form);

  /**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */
  form.$rollbackViewValue = function() {
    forEach(controls, function(control) {
      control.$rollbackViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  form.$commitViewValue = function() {
    forEach(controls, function(control) {
      control.$commitViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$addControl
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
  form.$addControl = function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    controls.push(control);

    if (control.$name) {
      form[control.$name] = control;
    }
  };

  // Private API: rename a form control
  form.$$renameControl = function(control, newName) {
    var oldName = control.$name;

    if (form[oldName] === control) {
      delete form[oldName];
    }
    form[newName] = control;
    control.$name = newName;
  };

  /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(form.$pending, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$error, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$$success, function(value, name) {
      form.$setValidity(name, null, control);
    });

    arrayRemove(controls, control);
  };


  /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: element,
    set: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        object[property] = [controller];
      } else {
        var index = list.indexOf(controller);
        if (index === -1) {
          list.push(controller);
        }
      }
    },
    unset: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        return;
      }
      arrayRemove(list, controller);
      if (list.length === 0) {
        delete object[property];
      }
    },
    parentForm: parentForm,
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    $animate.removeClass(element, PRISTINE_CLASS);
    $animate.addClass(element, DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function() {
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    form.$submitted = false;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */
  form.$setUntouched = function() {
    forEach(controls, function(control) {
      control.$setUntouched();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */
  form.$setSubmitted = function() {
    $animate.addClass(element, SUBMITTED_CLASS);
    form.$submitted = true;
    parentForm.$setSubmitted();
  };
}

/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', function($timeout) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      controller: FormController,
      compile: function ngFormCompile(formElement, attr) {
        // Setup initial state of the control
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

        return {
          pre: function ngFormPreLink(scope, formElement, attr, controller) {
            // if `action` attr is not present on the form, prevent the default action (submission)
            if (!('action' in attr)) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var handleFormSubmission = function(event) {
                scope.$apply(function() {
                  controller.$commitViewValue();
                  controller.$setSubmitted();
                });

                event.preventDefault();
              };

              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                }, 0, false);
              });
            }

            var parentFormCtrl = controller.$$parentForm;

            if (nameAttr) {
              setter(scope, null, controller.$name, controller, controller.$name);
              attr.$observe(nameAttr, function(newValue) {
                if (controller.$name === newValue) return;
                setter(scope, null, controller.$name, undefined, controller.$name);
                parentFormCtrl.$$renameControl(controller, newValue);
                setter(scope, null, controller.$name, controller, controller.$name);
              });
            }
            formElement.on('$destroy', function() {
              parentFormCtrl.$removeControl(controller);
              if (nameAttr) {
                setter(scope, null, attr[nameAttr], undefined, controller.$name);
              }
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
            });
          }
        };
      }
    };

    return formDirective;
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

/* global VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  UNTOUCHED_CLASS: false,
  TOUCHED_CLASS: false,
  $ngModelMinErr: false,
*/

// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

var inputType = {

  /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Single word: <input type="text" name="input" ng-model="example.text"
                               ng-pattern="example.word" required ng-trim="false">
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.pattern">
             Single word only!</span>

           <tt>text = {{example.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'text': textInputType,

    /**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise Angular will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO date string (yyyy-MM-dd).
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO date string (yyyy-MM-dd).
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          Pick a date in 2013:
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.date">
              Not a valid date!</span>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));
        var input = element(by.model('example.value'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */
  'date': createDateInputType('date', DATE_REGEXP,
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
         'yyyy-MM-dd'),

   /**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
    * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a date between in 2013:
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.datetimelocal">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
      'yyyy-MM-ddTHH:mm:ss.sss'),

  /**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
   * valid ISO time format (HH:mm:ss).
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
   * valid ISO time format (HH:mm:ss).
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a between 8am and 5pm:
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.time">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'time': createDateInputType('time', TIME_REGEXP,
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
     'HH:mm:ss.sss'),

   /**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
    * valid ISO week format (yyyy-W##).
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO week format (yyyy-W##).
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a date between in 2013:
        <input id="exampleInput" type="week" name="input" ng-model="example.value"
            placeholder="YYYY-W##" min="2012-W32" max="2013-W52" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.week">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

  /**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be
   * a valid ISO month format (yyyy-MM).
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must
   * be a valid ISO month format (yyyy-MM).
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       Pick a month in 2013:
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <span class="error" ng-show="myForm.input.$error.required">
          Required!</span>
       <span class="error" ng-show="myForm.input.$error.month">
          Not a valid month!</span>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'month': createDateInputType('month', MONTH_REGEXP,
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
     'yyyy-MM'),

  /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * The model must always be a number, otherwise Angular will throw an error.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Number: <input type="number" name="input" ng-model="example.value"
                          min="0" max="99" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.number">
             Not valid number!</span>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'number': numberInputType,


  /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           URL: <input type="url" name="input" ng-model="url.text" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.url">
             Not valid url!</span>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'url': urlInputType,


  /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             Email: <input type="email" name="input" ng-model="email.text" required>
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.email">
               Not valid email!</span>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'email': emailInputType,


  /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the expression should be set when selected.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression which sets the value to which the expression should
   *    be set when selected.
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <input type="radio" ng-model="color.name" value="red">  Red <br/>
           <input type="radio" ng-model="color.name" ng-value="specialValue"> Green <br/>
           <input type="radio" ng-model="color.name" value="blue"> Blue <br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color.name')).get(0).click();

            expect(color.getText()).toContain('red');
          });
        </file>
      </example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Value1: <input type="checkbox" ng-model="checkboxModel.value1"> <br/>
           Value2: <input type="checkbox" ng-model="checkboxModel.value2"
                          ng-true-value="'YES'" ng-false-value="'NO'"> <br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop,
  'file': noop
};

function stringBasedInputType(ctrl) {
  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? value : value.toString();
  });
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);
}

function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  var type = lowercase(element[0].type);

  // In composition mode, users are still inputing intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function(data) {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
      listener();
    });
  }

  var listener = function(ev) {
    if (timeout) {
      $browser.defer.cancel(timeout);
      timeout = null;
    }
    if (composing) return;
    var value = element.val(),
        event = ev && ev.type;

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // If input type is 'password', the value is never trimmed
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
      value = trim(value);
    }

    // If a control is suffering from bad input (due to native validators), browsers discard its
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
    // control's value is the same empty value twice in a row.
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
      ctrl.$setViewValue(value, event);
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function(ev, input, origValue) {
      if (!timeout) {
        timeout = $browser.defer(function() {
          timeout = null;
          if (!input || input.value !== origValue) {
            listener(ev);
          }
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener(event, this, this.value);
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  ctrl.$render = function() {
    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
  };
}

function weekParser(isoWeek, existingDate) {
  if (isDate(isoWeek)) {
    return isoWeek;
  }

  if (isString(isoWeek)) {
    WEEK_REGEXP.lastIndex = 0;
    var parts = WEEK_REGEXP.exec(isoWeek);
    if (parts) {
      var year = +parts[1],
          week = +parts[2],
          hours = 0,
          minutes = 0,
          seconds = 0,
          milliseconds = 0,
          firstThurs = getFirstThursdayOfYear(year),
          addDays = (week - 1) * 7;

      if (existingDate) {
        hours = existingDate.getHours();
        minutes = existingDate.getMinutes();
        seconds = existingDate.getSeconds();
        milliseconds = existingDate.getMilliseconds();
      }

      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
    }
  }

  return NaN;
}

function createDateParser(regexp, mapping) {
  return function(iso, date) {
    var parts, map;

    if (isDate(iso)) {
      return iso;
    }

    if (isString(iso)) {
      // When a date is JSON'ified to wraps itself inside of an extra
      // set of double quotes. This makes the date parsing code unable
      // to match the date string and parse it as a date.
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
        iso = iso.substring(1, iso.length - 1);
      }
      if (ISO_DATE_REGEXP.test(iso)) {
        return new Date(iso);
      }
      regexp.lastIndex = 0;
      parts = regexp.exec(iso);

      if (parts) {
        parts.shift();
        if (date) {
          map = {
            yyyy: date.getFullYear(),
            MM: date.getMonth() + 1,
            dd: date.getDate(),
            HH: date.getHours(),
            mm: date.getMinutes(),
            ss: date.getSeconds(),
            sss: date.getMilliseconds() / 1000
          };
        } else {
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
        }

        forEach(parts, function(part, index) {
          if (index < mapping.length) {
            map[mapping[index]] = +part;
          }
        });
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
      }
    }

    return NaN;
  };
}

function createDateInputType(type, regexp, parseDate, format) {
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
    badInputChecker(scope, element, attr, ctrl);
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
    var previousDate;

    ctrl.$$parserName = type;
    ctrl.$parsers.push(function(value) {
      if (ctrl.$isEmpty(value)) return null;
      if (regexp.test(value)) {
        // Note: We cannot read ctrl.$modelValue, as there might be a different
        // parser/formatter in the processing chain so that the model
        // contains some different data format!
        var parsedDate = parseDate(value, previousDate);
        if (timezone === 'UTC') {
          parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset());
        }
        return parsedDate;
      }
      return undefined;
    });

    ctrl.$formatters.push(function(value) {
      if (value && !isDate(value)) {
        throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
      }
      if (isValidDate(value)) {
        previousDate = value;
        if (previousDate && timezone === 'UTC') {
          var timezoneOffset = 60000 * previousDate.getTimezoneOffset();
          previousDate = new Date(previousDate.getTime() + timezoneOffset);
        }
        return $filter('date')(value, format, timezone);
      } else {
        previousDate = null;
        return '';
      }
    });

    if (isDefined(attr.min) || attr.ngMin) {
      var minVal;
      ctrl.$validators.min = function(value) {
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
      };
      attr.$observe('min', function(val) {
        minVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    if (isDefined(attr.max) || attr.ngMax) {
      var maxVal;
      ctrl.$validators.max = function(value) {
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
      };
      attr.$observe('max', function(val) {
        maxVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    function isValidDate(value) {
      // Invalid Date: getTime() returns NaN
      return value && !(value.getTime && value.getTime() !== value.getTime());
    }

    function parseObservedDateValue(val) {
      return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;
    }
  };
}

function badInputChecker(scope, element, attr, ctrl) {
  var node = element[0];
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
  if (nativeValidation) {
    ctrl.$parsers.push(function(value) {
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
      // - also sets validity.badInput (should only be validity.typeMismatch).
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
      // - can ignore this case as we can still read out the erroneous email...
      return validity.badInput && !validity.typeMismatch ? undefined : value;
    });
  }
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  badInputChecker(scope, element, attr, ctrl);
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$$parserName = 'number';
  ctrl.$parsers.push(function(value) {
    if (ctrl.$isEmpty(value))      return null;
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
    return undefined;
  });

  ctrl.$formatters.push(function(value) {
    if (!ctrl.$isEmpty(value)) {
      if (!isNumber(value)) {
        throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
      }
      value = value.toString();
    }
    return value;
  });

  if (isDefined(attr.min) || attr.ngMin) {
    var minVal;
    ctrl.$validators.min = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
    };

    attr.$observe('min', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }

  if (isDefined(attr.max) || attr.ngMax) {
    var maxVal;
    ctrl.$validators.max = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
    };

    attr.$observe('max', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'url';
  ctrl.$validators.url = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
  };
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'email';
  ctrl.$validators.email = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
  };
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  var listener = function(ev) {
    if (element[0].checked) {
      ctrl.$setViewValue(attr.value, ev && ev.type);
    }
  };

  element.on('click', listener);

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function parseConstantExpr($parse, context, name, expression, fallback) {
  var parseFn;
  if (isDefined(expression)) {
    parseFn = $parse(expression);
    if (!parseFn.constant) {
      throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +
                                   '`{1}`.', name, expression);
    }
    return parseFn(context);
  }
  return fallback;
}

function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

  var listener = function(ev) {
    ctrl.$setViewValue(element[0].checked, ev && ev.type);
  };

  element.on('click', listener);

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
  // it to a boolean.
  ctrl.$isEmpty = function(value) {
    return value === false;
  };

  ctrl.$formatters.push(function(value) {
    return equals(value, trueValue);
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */


/**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
    function($browser, $sniffer, $filter, $parse) {
  return {
    restrict: 'E',
    require: ['?ngModel'],
    link: {
      pre: function(scope, element, attr, ctrls) {
        if (ctrls[0]) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
                                                              $browser, $filter, $parse);
        }
      }
    }
  };
}];



var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
 * the bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using
 * {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * Likewise, `ngValue` can be used to generate `<option>` elements for
 * the {@link select `select`} element. In that case however, only strings are supported
 * for the `value `attribute, so the resulting `ngModel` will always be a string.
 * Support for `select` models with non-string values is available via `ngOptions`.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
var ngValueDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
var ngBindDirective = ['$compile', function($compile) {
  return {
    restrict: 'AC',
    compile: function ngBindCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBind);
        element = element[0];
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
          element.textContent = value === undefined ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
  return {
    compile: function ngBindTemplateCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindTemplateLink(scope, element, attr) {
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
        $compile.$$addBindingInfo(element, interpolateFn.expressions);
        element = element[0];
        attr.$observe('ngBindTemplate', function(value) {
          element.textContent = value === undefined ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
  return {
    restrict: 'A',
    compile: function ngBindHtmlCompile(tElement, tAttrs) {
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
        return (value || '').toString();
      });
      $compile.$$addBindingClass(tElement);

      return function ngBindHtmlLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBindHtml);

        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
          // we re-evaluate the expr because we want a TrustedValueHolderType
          // for $sce, not a string
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
var ngChangeDirective = valueFn({
  restrict: 'A',
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ['$animate', function($animate) {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            // jshint bitwise: false
            var mod = $index & 1;
            if (mod !== (old$index & 1)) {
              var classes = arrayClasses(scope.$eval(attr[name]));
              mod === selector ?
                addClasses(classes) :
                removeClasses(classes);
            }
          });
        }

        function addClasses(classes) {
          var newClasses = digestClassCounts(classes, 1);
          attr.$addClass(newClasses);
        }

        function removeClasses(classes) {
          var newClasses = digestClassCounts(classes, -1);
          attr.$removeClass(newClasses);
        }

        function digestClassCounts(classes, count) {
          var classCounts = element.data('$classCounts') || {};
          var classesToUpdate = [];
          forEach(classes, function(className) {
            if (count > 0 || classCounts[className]) {
              classCounts[className] = (classCounts[className] || 0) + count;
              if (classCounts[className] === +(count > 0)) {
                classesToUpdate.push(className);
              }
            }
          });
          element.data('$classCounts', classCounts);
          return classesToUpdate.join(' ');
        }

        function updateClasses(oldClasses, newClasses) {
          var toAdd = arrayDifference(newClasses, oldClasses);
          var toRemove = arrayDifference(oldClasses, newClasses);
          toAdd = digestClassCounts(toAdd, 1);
          toRemove = digestClassCounts(toRemove, -1);
          if (toAdd && toAdd.length) {
            $animate.addClass(element, toAdd);
          }
          if (toRemove && toRemove.length) {
            $animate.removeClass(element, toRemove);
          }
        }

        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            var newClasses = arrayClasses(newVal || []);
            if (!oldVal) {
              addClasses(newClasses);
            } else if (!equals(newVal,oldVal)) {
              var oldClasses = arrayClasses(oldVal);
              updateClasses(oldClasses, newClasses);
            }
          }
          oldVal = shallowCopy(newVal);
        }
      }
    };

    function arrayDifference(tokens1, tokens2) {
      var values = [];

      outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j]) continue outer;
        }
        values.push(token);
      }
      return values;
    }

    function arrayClasses(classVal) {
      if (isArray(classVal)) {
        return classVal;
      } else if (isString(classVal)) {
        return classVal.split(' ');
      } else if (isObject(classVal)) {
        var classes = [];
        forEach(classVal, function(v, k) {
          if (v) {
            classes = classes.concat(k.split(' '));
          }
        });
        return classes;
      }
      return classVal;
    }
  }];
}

/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an array, each element of the array should be a string that is
 * one or more space-delimited class names.
 *
 * 3. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * **add** - happens just before the class is applied to the elements
 *
 * **remove** - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and
   {@link ng.$animate#removeClass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      Name: <input type="text" ng-model="settings.name"/>
 *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value"/>
 *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
 *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
 *        </li>
 *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.linkText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.linkText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     Name: <input type="text" ng-model="name"/>
 *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value"/>
 *         [ <a href="" ng-click="clearContact(contact)">clear</a>
 *         | <a href="" ng-click="removeContact(contact)">X</a> ]
 *       </li>
 *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.linkText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.linkText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
var ngControllerDirective = [function() {
  return {
    restrict: 'A',
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For Angular to be CSP compatible there are only two things that we need to do differently:
 *
 * - don't use `Function` constructor to generate optimized value getters
 * - don't inject custom stylesheet into the document
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
 * autodetection however triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on the root element of the application or on the `angular.js` script tag, whichever
 * appears first in the html document.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      // Note: the suffix `.csp` in the example name triggers
      // csp mode in our http server!
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  // jshint evil:true
                  try {
                    eval('1+2');
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('protractor/node_modules/selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
// bootstrap the system (before $parse is instantiated), for this reason we just have
// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
/*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
var ngEventDirectives = {};

// For events that might fire synchronously during DOM manipulation
// we need to execute their event handlers asynchronously using $evalAsync,
// so that they are not executed in an inconsistent state.
var forceAsyncEvents = {
  'blur': true,
  'focus': true
};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
      return {
        restrict: 'A',
        compile: function($element, attr) {
          // We expose the powerful $event object on the scope that provides access to the Window,
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
          // checks at the cost of speed since event handler expressions are not executed as
          // frequently as regular change detection.
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
          return function ngEventHandler(scope, element) {
            element.on(eventName, function(event) {
              var callback = function() {
                fn(scope, {$event:event});
              };
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                scope.$evalAsync(callback);
              } else {
                scope.$apply(callback);
              }
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    multiElement: true,
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (value) {
            if (!childScope) {
              $transclude(function(clone, newScope) {
                childScope = newScope;
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if (previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if (block) {
              previousElements = getBlockNodes(block.clone);
              $animate.leave(previousElements).then(function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate', '$sce',
                  function($templateRequest,   $anchorScroll,   $animate,   $sce) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            $animate.leave(currentElement).then(function() {
              previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        };

        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
          var afterAnimation = function() {
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
              $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            //set the 2nd param to true to ignore the template request error so that the inner
            //contents and scope can be cleaned up.
            $templateRequest(src, true).then(function(response) {
              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element).then(afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded', src);
              scope.$eval(onloadExp);
            }, function() {
              if (thisChangeId === changeCounter) {
                cleanupLastIncludeContent();
                scope.$emit('$includeContentError', src);
              }
            });
            scope.$emit('$includeContentRequested', src);
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        if (/SVG/.test($element[0].toString())) {
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
          // support innerHTML, so detect this here and try to generate the contents
          // specially.
          $element.empty();
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
              function namespaceAdaptedClone(clone) {
            $element.append(clone);
          }, {futureParentElement: $element});
          return;
        }

        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
 * sure you have parenthesis for correct precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      List: <input name="namesInput" ng-model="names" ng-list required>
 *      <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on whitespace
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */
var ngListDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      // We want to control whitespace trimming so we use this convoluted approach
      // to access the ngList attribute, which doesn't pre-trim the attribute
      var ngList = element.attr(attr.$attr.ngList) || ', ';
      var trimValues = attr.ngTrim !== 'false';
      var separator = trimValues ? trim(ngList) : ngList;

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trimValues ? trim(value) : value);
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(ngList);
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};

/* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
*/

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty',
    UNTOUCHED_CLASS = 'ng-untouched',
    TOUCHED_CLASS = 'ng-touched',
    PENDING_CLASS = 'ng-pending';


var $ngModelMinErr = new minErr('ngModel');

/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM. The functions are called in array order, each passing
       its return value through to the next. The last return value is forwarded to the
       {@link ngModel.NgModelController#$validators `$validators`} collection.

Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
`$viewValue`}.

Returning `undefined` from a parser means a parse error occurred. In that case,
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
is set to `true`. The parse error is stored in `ngModel.$error.parse`.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.
       Used to format / convert values for display in the control.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if ( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
  this.$validators = {};
  this.$asyncValidators = {};
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$untouched = true;
  this.$touched = false;
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$error = {}; // keep invalid keys here
  this.$$success = {}; // keep valid keys here
  this.$pending = undefined; // keep pending keys here
  this.$name = $interpolate($attr.name || '', false)($scope);


  var parsedNgModel = $parse($attr.ngModel),
      parsedNgModelAssign = parsedNgModel.assign,
      ngModelGet = parsedNgModel,
      ngModelSet = parsedNgModelAssign,
      pendingDebounce = null,
      parserValid,
      ctrl = this;

  this.$$setOptions = function(options) {
    ctrl.$options = options;
    if (options && options.getterSetter) {
      var invokeModelGetter = $parse($attr.ngModel + '()'),
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

      ngModelGet = function($scope) {
        var modelValue = parsedNgModel($scope);
        if (isFunction(modelValue)) {
          modelValue = invokeModelGetter($scope);
        }
        return modelValue;
      };
      ngModelSet = function($scope, newValue) {
        if (isFunction(parsedNgModel($scope))) {
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
        } else {
          parsedNgModelAssign($scope, ctrl.$modelValue);
        }
      };
    } else if (!parsedNgModel.assign) {
      throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
          $attr.ngModel, startingTag($element));
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different to last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different to their previous value. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */
  this.$render = noop;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different to the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */
  this.$isEmpty = function(value) {
    return isUndefined(value) || value === '' || value === null || value !== value;
  };

  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
      currentValidationRunId = 0;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notify the form.
   *
   * This method can be called within $parsers/$formatters or a custom validation implementation.
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *                          Skipped is used by Angular when validators do not run because of parse errors and
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: $element,
    set: function(object, property) {
      object[property] = true;
    },
    unset: function(object, property) {
      delete object[property];
    },
    parentForm: parentForm,
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */
  this.$setPristine = function() {
    ctrl.$dirty = false;
    ctrl.$pristine = true;
    $animate.removeClass($element, DIRTY_CLASS);
    $animate.addClass($element, PRISTINE_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */
  this.$setDirty = function() {
    ctrl.$dirty = true;
    ctrl.$pristine = false;
    $animate.removeClass($element, PRISTINE_CLASS);
    $animate.addClass($element, DIRTY_CLASS);
    parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */
  this.$setUntouched = function() {
    ctrl.$touched = false;
    ctrl.$untouched = true;
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */
  this.$setTouched = function() {
    ctrl.$touched = true;
    ctrl.$untouched = false;
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for a some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced events or events such
   * as blur you can have a situation where there is a period when the `$viewValue`
   * is out of synch with the ngModel's `$modelValue`.
   *
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.resetWithCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myForm.myInput1.$rollbackViewValue();
   *           $scope.myValue = '';
   *         }
   *       };
   *       $scope.resetWithoutCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myValue = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Try typing something in each input.  See that the model only updates when you
   *          blur off the input.
   *        </p>
   *        <p>Now see what happens if you start typing then press the Escape key</p>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <p>With $rollbackViewValue()</p>
   *         <input name="myInput1" ng-model="myValue" ng-keydown="resetWithCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *
   *         <p>Without $rollbackViewValue()</p>
   *         <input name="myInput2" ng-model="myValue" ng-keydown="resetWithoutCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *       </form>
   *     </div>
   *   </file>
   * </example>
   */
  this.$rollbackViewValue = function() {
    $timeout.cancel(pendingDebounce);
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
    ctrl.$render();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * modelValue, i.e. either the last parsed value or the last value set from the scope.
   */
  this.$validate = function() {
    // ignore $validate before model is initialized
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      return;
    }

    var viewValue = ctrl.$$lastCommittedViewValue;
    // Note: we use the $$rawModelValue as $modelValue might have been
    // set to undefined during a view -> model update that found validation
    // errors. We can't parse the view here, since that could change
    // the model although neither viewValue nor the model on the scope changed
    var modelValue = ctrl.$$rawModelValue;

    var prevValid = ctrl.$valid;
    var prevModelValue = ctrl.$modelValue;

    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
      // If there was no change in validity, don't update the model
      // This prevents changing an invalid modelValue to undefined
      if (!allowInvalid && prevValid !== allValid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;

        if (ctrl.$modelValue !== prevModelValue) {
          ctrl.$$writeModelToScope();
        }
      }
    });

  };

  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
    currentValidationRunId++;
    var localValidationRunId = currentValidationRunId;

    // check parser error
    if (!processParseErrors()) {
      validationDone(false);
      return;
    }
    if (!processSyncValidators()) {
      validationDone(false);
      return;
    }
    processAsyncValidators();

    function processParseErrors() {
      var errorKey = ctrl.$$parserName || 'parse';
      if (parserValid === undefined) {
        setValidity(errorKey, null);
      } else {
        if (!parserValid) {
          forEach(ctrl.$validators, function(v, name) {
            setValidity(name, null);
          });
          forEach(ctrl.$asyncValidators, function(v, name) {
            setValidity(name, null);
          });
        }
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
        setValidity(errorKey, parserValid);
        return parserValid;
      }
      return true;
    }

    function processSyncValidators() {
      var syncValidatorsValid = true;
      forEach(ctrl.$validators, function(validator, name) {
        var result = validator(modelValue, viewValue);
        syncValidatorsValid = syncValidatorsValid && result;
        setValidity(name, result);
      });
      if (!syncValidatorsValid) {
        forEach(ctrl.$asyncValidators, function(v, name) {
          setValidity(name, null);
        });
        return false;
      }
      return true;
    }

    function processAsyncValidators() {
      var validatorPromises = [];
      var allValid = true;
      forEach(ctrl.$asyncValidators, function(validator, name) {
        var promise = validator(modelValue, viewValue);
        if (!isPromiseLike(promise)) {
          throw $ngModelMinErr("$asyncValidators",
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
        }
        setValidity(name, undefined);
        validatorPromises.push(promise.then(function() {
          setValidity(name, true);
        }, function(error) {
          allValid = false;
          setValidity(name, false);
        }));
      });
      if (!validatorPromises.length) {
        validationDone(true);
      } else {
        $q.all(validatorPromises).then(function() {
          validationDone(allValid);
        }, noop);
      }
    }

    function setValidity(name, isValid) {
      if (localValidationRunId === currentValidationRunId) {
        ctrl.$setValidity(name, isValid);
      }
    }

    function validationDone(allValid) {
      if (localValidationRunId === currentValidationRunId) {

        doneCallback(allValid);
      }
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  this.$commitViewValue = function() {
    var viewValue = ctrl.$viewValue;

    $timeout.cancel(pendingDebounce);

    // If the view value has not changed then we should just exit, except in the case where there is
    // a native validator on the element. In this case the validation state may have changed even though
    // the viewValue has stayed empty.
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
      return;
    }
    ctrl.$$lastCommittedViewValue = viewValue;

    // change to dirty
    if (ctrl.$pristine) {
      this.$setDirty();
    }
    this.$$parseAndValidate();
  };

  this.$$parseAndValidate = function() {
    var viewValue = ctrl.$$lastCommittedViewValue;
    var modelValue = viewValue;
    parserValid = isUndefined(modelValue) ? undefined : true;

    if (parserValid) {
      for (var i = 0; i < ctrl.$parsers.length; i++) {
        modelValue = ctrl.$parsers[i](modelValue);
        if (isUndefined(modelValue)) {
          parserValid = false;
          break;
        }
      }
    }
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      // ctrl.$modelValue has not been touched yet...
      ctrl.$modelValue = ngModelGet($scope);
    }
    var prevModelValue = ctrl.$modelValue;
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
    ctrl.$$rawModelValue = modelValue;

    if (allowInvalid) {
      ctrl.$modelValue = modelValue;
      writeToModelIfNeeded();
    }

    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
    // This can happen if e.g. $setViewValue is called from inside a parser
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
      if (!allowInvalid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;
        writeToModelIfNeeded();
      }
    });

    function writeToModelIfNeeded() {
      if (ctrl.$modelValue !== prevModelValue) {
        ctrl.$$writeModelToScope();
      }
    }
  };

  this.$$writeModelToScope = function() {
    ngModelSet($scope, ctrl.$modelValue);
    forEach(ctrl.$viewChangeListeners, function(listener) {
      try {
        listener();
      } catch (e) {
        $exceptionHandler(e);
      }
    });
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when an input directive want to change the view value; typically,
   * this is done from within a DOM event handler.
   *
   * For example {@link ng.directive:input input} calls it when the value of the input changes and
   * {@link ng.directive:select select} calls it when an option is selected.
   *
   * If the new `value` is an object (rather than a string or a number), we should make a copy of the
   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep
   * watch of objects, it only looks for a change of identity. If you only change the property of
   * the object then ngModel will not realise that the object has changed and will not invoke the
   * `$parsers` and `$validators` pipelines.
   *
   * For this reason, you should not change properties of the copy once it has been passed to
   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * When this method is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value sent directly for processing, finally to be applied to `$modelValue` and then the
   * **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   * @param {string} trigger Event that triggered the update.
   */
  this.$setViewValue = function(value, trigger) {
    ctrl.$viewValue = value;
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
      ctrl.$$debounceViewValueCommit(trigger);
    }
  };

  this.$$debounceViewValueCommit = function(trigger) {
    var debounceDelay = 0,
        options = ctrl.$options,
        debounce;

    if (options && isDefined(options.debounce)) {
      debounce = options.debounce;
      if (isNumber(debounce)) {
        debounceDelay = debounce;
      } else if (isNumber(debounce[trigger])) {
        debounceDelay = debounce[trigger];
      } else if (isNumber(debounce['default'])) {
        debounceDelay = debounce['default'];
      }
    }

    $timeout.cancel(pendingDebounce);
    if (debounceDelay) {
      pendingDebounce = $timeout(function() {
        ctrl.$commitViewValue();
      }, debounceDelay);
    } else if ($rootScope.$$phase) {
      ctrl.$commitViewValue();
    } else {
      $scope.$apply(function() {
        ctrl.$commitViewValue();
      });
    }
  };

  // model -> value
  // Note: we cannot use a normal scope.$watch as we want to detect the following:
  // 1. scope value is 'a'
  // 2. user enters 'b'
  // 3. ng-change kicks in and reverts scope value to 'a'
  //    -> scope value did not change since the last digest as
  //       ng-change executes in apply phase
  // 4. view should be changed back to 'a'
  $scope.$watch(function ngModelWatch() {
    var modelValue = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    // TODO(perf): why not move this to the action fn?
    if (modelValue !== ctrl.$modelValue) {
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
      parserValid = undefined;

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      var viewValue = modelValue;
      while (idx--) {
        viewValue = formatters[idx](viewValue);
      }
      if (ctrl.$viewValue !== viewValue) {
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
        ctrl.$render();

        ctrl.$$runValidators(modelValue, viewValue, noop);
      }
    }

    return modelValue;
  });
}];


/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       Update input to see transitions when valid/invalid.
       Integer is a valid value.
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different than what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           Name:
           <input type="text" name="userName"
                  ng-model="user.name"
                  ng-model-options="{ getterSetter: true }" />
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
               if (angular.isDefined(newName)) {
                 _name = newName;
               }
               return _name;
             }
           };
         }]);
     </file>
 * </example>
 */
var ngModelDirective = ['$rootScope', function($rootScope) {
  return {
    restrict: 'A',
    require: ['ngModel', '^?form', '^?ngModelOptions'],
    controller: NgModelController,
    // Prelink needs to run before any input directive
    // so that we can set the NgModelOptions in NgModelController
    // before anyone else uses it.
    priority: 1,
    compile: function ngModelCompile(element) {
      // Setup initial state of the control
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

      return {
        pre: function ngModelPreLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || nullFormCtrl;

          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

          // notify others, especially parent forms
          formCtrl.$addControl(modelCtrl);

          attr.$observe('name', function(newValue) {
            if (modelCtrl.$name !== newValue) {
              formCtrl.$$renameControl(modelCtrl, newValue);
            }
          });

          scope.$on('$destroy', function() {
            formCtrl.$removeControl(modelCtrl);
          });
        },
        post: function ngModelPostLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0];
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
            element.on(modelCtrl.$options.updateOn, function(ev) {
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
            });
          }

          element.on('blur', function(ev) {
            if (modelCtrl.$touched) return;

            if ($rootScope.$$phase) {
              scope.$evalAsync(modelCtrl.$setTouched);
            } else {
              scope.$apply(modelCtrl.$setTouched);
            }
          });
        }
      };
    }
  };
}];

var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

/**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
 * events that will trigger a model update and/or a debouncing delay so that the actual update only
 * takes place when a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different than the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
 *
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging of the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     `ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"`
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
       `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date">`, `<input type="time">`, ... . Right now, the only supported value is `'UTC'`,
 *     otherwise the default timezone of the browser will be used.
 *
 * @example

  The following example shows how to override immediate updates. Changes on the inputs within the
  form will update the model only when the control loses focus (blur event). If `escape` key is
  pressed while the input field is focused, the value is reset to the value in the current model.

  <example name="ngModelOptions-directive-blur" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ updateOn: 'blur' }"
                 ng-keyup="cancel($event)" /><br />

          Other data:
          <input type="text" ng-model="user.data" /><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say', data: '' };

          $scope.cancel = function(e) {
            if (e.keyCode == 27) {
              $scope.userForm.userName.$rollbackViewValue();
            }
          };
        }]);
    </file>
    <file name="protractor.js" type="protractor">
      var model = element(by.binding('user.name'));
      var input = element(by.model('user.name'));
      var other = element(by.model('user.data'));

      it('should allow custom events', function() {
        input.sendKeys(' hello');
        input.click();
        expect(model.getText()).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say hello');
      });

      it('should $rollbackViewValue when model changes', function() {
        input.sendKeys(' hello');
        expect(input.getAttribute('value')).toEqual('say hello');
        input.sendKeys(protractor.Key.ESCAPE);
        expect(input.getAttribute('value')).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say');
      });
    </file>
  </example>

  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

  <example name="ngModelOptions-directive-debounce" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ debounce: 1000 }" />
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say' };
        }]);
    </file>
  </example>

  This one shows how to bind to getter/setters:

  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ getterSetter: true }" />
        </form>
        <pre>user.name = <span ng-bind="user.name()"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('getterSetterExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          var _name = 'Brian';
          $scope.user = {
            name: function(newName) {
              return angular.isDefined(newName) ? (_name = newName) : _name;
            }
          };
        }]);
    </file>
  </example>
 */
var ngModelOptionsDirective = function() {
  return {
    restrict: 'A',
    controller: ['$scope', '$attrs', function($scope, $attrs) {
      var that = this;
      this.$options = $scope.$eval($attrs.ngModelOptions);
      // Allow adding/overriding bound events
      if (this.$options.updateOn !== undefined) {
        this.$options.updateOnDefault = false;
        // extract "default" pseudo-event from list of events that can trigger a model update
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
          that.$options.updateOnDefault = true;
          return ' ';
        }));
      } else {
        this.$options.updateOnDefault = true;
      }
    }]
  };
};



// helper methods
function addSetValidityMethod(context) {
  var ctrl = context.ctrl,
      $element = context.$element,
      classCache = {},
      set = context.set,
      unset = context.unset,
      parentForm = context.parentForm,
      $animate = context.$animate;

  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

  ctrl.$setValidity = setValidity;

  function setValidity(validationErrorKey, state, controller) {
    if (state === undefined) {
      createAndSet('$pending', validationErrorKey, controller);
    } else {
      unsetAndCleanup('$pending', validationErrorKey, controller);
    }
    if (!isBoolean(state)) {
      unset(ctrl.$error, validationErrorKey, controller);
      unset(ctrl.$$success, validationErrorKey, controller);
    } else {
      if (state) {
        unset(ctrl.$error, validationErrorKey, controller);
        set(ctrl.$$success, validationErrorKey, controller);
      } else {
        set(ctrl.$error, validationErrorKey, controller);
        unset(ctrl.$$success, validationErrorKey, controller);
      }
    }
    if (ctrl.$pending) {
      cachedToggleClass(PENDING_CLASS, true);
      ctrl.$valid = ctrl.$invalid = undefined;
      toggleValidationCss('', null);
    } else {
      cachedToggleClass(PENDING_CLASS, false);
      ctrl.$valid = isObjectEmpty(ctrl.$error);
      ctrl.$invalid = !ctrl.$valid;
      toggleValidationCss('', ctrl.$valid);
    }

    // re-read the state as the set/unset methods could have
    // combined state in ctrl.$error[validationError] (used for forms),
    // where setting/unsetting only increments/decrements the value,
    // and does not replace it.
    var combinedState;
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
      combinedState = undefined;
    } else if (ctrl.$error[validationErrorKey]) {
      combinedState = false;
    } else if (ctrl.$$success[validationErrorKey]) {
      combinedState = true;
    } else {
      combinedState = null;
    }

    toggleValidationCss(validationErrorKey, combinedState);
    parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
  }

  function createAndSet(name, value, controller) {
    if (!ctrl[name]) {
      ctrl[name] = {};
    }
    set(ctrl[name], value, controller);
  }

  function unsetAndCleanup(name, value, controller) {
    if (ctrl[name]) {
      unset(ctrl[name], value, controller);
    }
    if (isObjectEmpty(ctrl[name])) {
      ctrl[name] = undefined;
    }
  }

  function cachedToggleClass(className, switchValue) {
    if (switchValue && !classCache[className]) {
      $animate.addClass($element, className);
      classCache[className] = true;
    } else if (!switchValue && classCache[className]) {
      $animate.removeClass($element, className);
      classCache[className] = false;
    }
  }

  function toggleValidationCss(validationErrorKey, isValid) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
  }
}

function isObjectEmpty(obj) {
  if (obj) {
    for (var prop in obj) {
      return false;
    }
  }
  return true;
}

/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {
  var BRACE = /{}/g,
      IS_WHEN = /^when(Minus)?(.+)$/;

  return {
    restrict: 'EA',
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
          watchRemover = angular.noop,
          lastCount;

      forEach(attr, function(expression, attributeName) {
        var tmpMatch = IS_WHEN.exec(attributeName);
        if (tmpMatch) {
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
          whens[whenKey] = element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

      });

      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
        var count = parseFloat(newVal);
        var countIsNaN = isNaN(count);

        if (!countIsNaN && !(count in whens)) {
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
          // Otherwise, check it against pluralization rules in $locale service.
          count = $locale.pluralCat(count - offset);
        }

        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
        // In JS `NaN !== NaN`, so we have to exlicitly check.
        if ((count !== lastCount) && !(countIsNaN && isNaN(lastCount))) {
          watchRemover();
          watchRemover = scope.$watch(whensExpFns[count], updateElementText);
          lastCount = count;
        }
      });

      function updateElementText(newText) {
        element.text(newText || '');
      }
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * You need to be aware that the JavaScript specification does not define what order
 * it will return the keys for an object. In order to have a guaranteed deterministic order
 * for the keys, Angular versions up to and including 1.3 **sort the keys alphabetically**.
 *
 * If this is not desired, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 * In version 1.4 we will remove the sorting, since it seems that browsers generally follow the
 * strategy of providing keys in the order in which they were defined, although there are exceptions
 * when keys are deleted and reinstated.
 *
 *
 * # Tracking and Duplicates
 *
 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when
 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection
 * items and DOM elements.
 *
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
 * with your own using the `track by` expression.
 *
 * For example, you may track items by the index of each item in the collection, using the
 * special scope property `$index`:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
 *      {{n}}
 *    </div>
 * ```
 *
 * You may use arbitrary expressions in `track by`, including references to custom functions
 * on the scope:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
 *      {{n}}
 *    </div>
 * ```
 *
 * If you are working with objects that have an identifier property, you can track
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
 * will not have to rebuild the DOM elements for items it has already rendered, even if the
 * JavaScript objects in the collection have been substituted for new ones:
 * ```html
 *    <div ng-repeat="model in collection track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
 * `$id` function, which tracks items by their identity:
 * ```html
 *    <div ng-repeat="obj in collection track by $id(obj)">
 *      {{obj.prop}}
 *    </div>
 * ```
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
 *     is specified, ng-repeat associates elements by identity. It is an error to have
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  If filters are used in the expression, they should be
 *     applied before the tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length == 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');

  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
    scope[valueIdentifier] = value;
    if (keyIdentifier) scope[keyIdentifier] = key;
    scope.$index = index;
    scope.$first = (index === 0);
    scope.$last = (index === (arrayLength - 1));
    scope.$middle = !(scope.$first || scope.$last);
    // jshint bitwise: false
    scope.$odd = !(scope.$even = (index&1) === 0);
    // jshint bitwise: true
  };

  var getBlockStart = function(block) {
    return block.clone[0];
  };

  var getBlockEnd = function(block) {
    return block.clone[block.clone.length - 1];
  };


  return {
    restrict: 'A',
    multiElement: true,
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    compile: function ngRepeatCompile($element, $attr) {
      var expression = $attr.ngRepeat;
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

      if (!match) {
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
      }

      var lhs = match[1];
      var rhs = match[2];
      var aliasAs = match[3];
      var trackByExp = match[4];

      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

      if (!match) {
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);
      }
      var valueIdentifier = match[3] || match[1];
      var keyIdentifier = match[2];

      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);
      }

      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
      var hashFnLocals = {$id: hashKey};

      if (trackByExp) {
        trackByExpGetter = $parse(trackByExp);
      } else {
        trackByIdArrayFn = function(key, value) {
          return hashKey(value);
        };
        trackByIdObjFn = function(key) {
          return key;
        };
      }

      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

        if (trackByExpGetter) {
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        }

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        //
        // We are using no-proto object so that we don't need to guard against inherited props via
        // hasOwnProperty.
        var lastBlockMap = createMap();

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
          var index, length,
              previousNode = $element[0],     // node that cloned nodes should be inserted after
                                              // initialized to the comment node anchor
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = createMap(),
              collectionLength,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder,
              elementsToRemove;

          if (aliasAs) {
            $scope[aliasAs] = collection;
          }

          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, sort them and use to determine order of iteration over obj props
            collectionKeys = [];
            for (var itemKey in collection) {
              if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) != '$') {
                collectionKeys.push(itemKey);
              }
            }
            collectionKeys.sort();
          }

          collectionLength = collectionKeys.length;
          nextBlockOrder = new Array(collectionLength);

          // locate existing items
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            if (lastBlockMap[trackById]) {
              // found previously seen block
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap[trackById]) {
              // if collision detected. restore lastBlockMap and throw an error
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              throw ngRepeatMinErr('dupes',
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);
            } else {
              // new never before seen block
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
              nextBlockMap[trackById] = true;
            }
          }

          // remove leftover items
          for (var blockKey in lastBlockMap) {
            block = lastBlockMap[blockKey];
            elementsToRemove = getBlockNodes(block.clone);
            $animate.leave(elementsToRemove);
            if (elementsToRemove[0].parentNode) {
              // if the element was not removed yet because of pending animation, mark it as deleted
              // so that we can ignore it later
              for (index = 0, length = elementsToRemove.length; index < length; index++) {
                elementsToRemove[index][NG_REMOVED] = true;
              }
            }
            block.scope.$destroy();
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element

              nextNode = previousNode;

              // skip nodes that are already pending removal via leave animation
              do {
                nextNode = nextNode.nextSibling;
              } while (nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
            } else {
              // new item which we don't know about
              $transclude(function ngRepeatTransclude(clone, scope) {
                block.scope = scope;
                // http://jsperf.com/clone-vs-createcomment
                var endNode = ngRepeatEndComment.cloneNode(false);
                clone[clone.length++] = endNode;

                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = endNode;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      };
    }
  };
}];

var NG_HIDE_CLASS = 'ng-hide';
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
/**
 * @ngdoc directive
 * @name ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
 * with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   /&#42; this is required as of 1.3x to properly
 *      apply all styling in a show/hide animation &#42;/
 *   transition: 0s linear all;
 * }
 *
 * .my-element.ng-hide-add-active,
 * .my-element.ng-hide-remove-active {
 *   /&#42; the transition is defined in the active class &#42;/
 *   transition: 1s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-show {
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-show.ng-hide-add.ng-hide-add-active,
      .animate-show.ng-hide-remove.ng-hide-remove-active {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
      }

      .animate-show.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
        // we're adding a temporary, animation-specific class for ng-hide since this way
        // we can control when the element is actually displayed on screen without having
        // to have a global/greedy CSS selector that breaks when other animations are run.
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: 0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-hide.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
        // The comment inside of the ngShowDirective explains why we add and
        // remove a temporary class for the show/hide animation
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watchCollection(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  });
});

/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    restrict: 'EA',
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousLeaveAnimations = [],
          selectedScopes = [];

      var spliceFactory = function(array, index) {
          return function() { array.splice(index, 1); };
      };

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        var i, ii;
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
          $animate.cancel(previousLeaveAnimations[i]);
        }
        previousLeaveAnimations.length = 0;

        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
          var selected = getBlockNodes(selectedElements[i].clone);
          selectedScopes[i].$destroy();
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
          promise.then(spliceFactory(previousLeaveAnimations, i));
        }

        selectedElements.length = 0;
        selectedScopes.length = 0;

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          forEach(selectedTranscludes, function(selectedTransclude) {
            selectedTransclude.transclude(function(caseElement, selectedScope) {
              selectedScopes.push(selectedScope);
              var anchor = selectedTransclude.element;
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
              var block = { clone: caseElement };

              selectedElements.push(block);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attrs, ctrl, $transclude) {
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<ng-transclude></ng-transclude>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title"> <br/>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
var ngTranscludeDirective = ngDirective({
  restrict: 'EAC',
  link: function($scope, $element, $attrs, controller, $transclude) {
    if (!$transclude) {
      throw minErr('ngTransclude')('orphan',
       'Illegal use of ngTransclude directive in the template! ' +
       'No parent directive that requires a transclusion found. ' +
       'Element: {0}',
       startingTag($element));
    }

    $transclude(function(clone) {
      $element.empty();
      $element.append(clone);
    });
  }
});

/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

var ngOptionsMinErr = minErr('ngOptions');
/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
 * increasing speed by not creating a new scope for each repeated instance, as well as providing
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
 *  to a non-string value. This is because an option element can only be bound to string values at
 * present.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
 * </div>
 *
 * Consider the following example:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">
 * ```
 *
 * ```js
 * $scope.values = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 *
 * $scope.selected = { name: 'aSubItem' };
 * ```
 *
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
 * following:
 *
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
 * 2. Apply **`track by`** to the already selected value in `ngModel`.
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
 *    selected" option.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light'},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark'},
              {name:'yellow', shade:'light'}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
          </select><br/>


          Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

var ngOptionsDirective = valueFn({
  restrict: 'A',
  terminal: true
});

// jshint maxlen: false
var selectDirective = ['$compile', '$parse', function($compile,   $parse) {
                         //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
  var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
      nullModelCtrl = {$setViewValue: noop};
// jshint maxlen: 100

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
      var self = this,
          optionsMap = {},
          ngModelCtrl = nullModelCtrl,
          nullOption,
          unknownOption;


      self.databound = $attrs.ngModel;


      self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
        ngModelCtrl = ngModelCtrl_;
        nullOption = nullOption_;
        unknownOption = unknownOption_;
      };


      self.addOption = function(value, element) {
        assertNotHasOwnProperty(value, '"option value"');
        optionsMap[value] = true;

        if (ngModelCtrl.$viewValue == value) {
          $element.val(value);
          if (unknownOption.parent()) unknownOption.remove();
        }
        // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
        // Adding an <option selected="selected"> element to a <select required="required"> should
        // automatically select the new element
        if (element && element[0].hasAttribute('selected')) {
          element[0].selected = true;
        }
      };


      self.removeOption = function(value) {
        if (this.hasOption(value)) {
          delete optionsMap[value];
          if (ngModelCtrl.$viewValue === value) {
            this.renderUnknownOption(value);
          }
        }
      };


      self.renderUnknownOption = function(val) {
        var unknownVal = '? ' + hashKey(val) + ' ?';
        unknownOption.val(unknownVal);
        $element.prepend(unknownOption);
        $element.val(unknownVal);
        unknownOption.prop('selected', true); // needed for IE
      };


      self.hasOption = function(value) {
        return optionsMap.hasOwnProperty(value);
      };

      $scope.$on('$destroy', function() {
        // disable unknown option so that we don't do work when the whole select is being destroyed
        self.renderUnknownOption = noop;
      });
    }],

    link: function(scope, element, attr, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      if (!ctrls[1]) return;

      var selectCtrl = ctrls[0],
          ngModelCtrl = ctrls[1],
          multiple = attr.multiple,
          optionsExp = attr.ngOptions,
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)
          emptyOption,
          renderScheduled = false,
          // we can't just jqLite('<option>') since jqLite is not smart enough
          // to create it in <select> and IE barfs otherwise.
          optionTemplate = jqLite(document.createElement('option')),
          optGroupTemplate =jqLite(document.createElement('optgroup')),
          unknownOption = optionTemplate.clone();

      // find "null" option
      for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
        if (children[i].value === '') {
          emptyOption = nullOption = children.eq(i);
          break;
        }
      }

      selectCtrl.init(ngModelCtrl, nullOption, unknownOption);

      // required validator
      if (multiple) {
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };
      }

      if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);
      else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);
      else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);


      ////////////////////////////



      function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
        ngModelCtrl.$render = function() {
          var viewValue = ngModelCtrl.$viewValue;

          if (selectCtrl.hasOption(viewValue)) {
            if (unknownOption.parent()) unknownOption.remove();
            selectElement.val(viewValue);
            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy
          } else {
            if (isUndefined(viewValue) && emptyOption) {
              selectElement.val('');
            } else {
              selectCtrl.renderUnknownOption(viewValue);
            }
          }
        };

        selectElement.on('change', function() {
          scope.$apply(function() {
            if (unknownOption.parent()) unknownOption.remove();
            ngModelCtrl.$setViewValue(selectElement.val());
          });
        });
      }

      function setupAsMultiple(scope, selectElement, ctrl) {
        var lastView;
        ctrl.$render = function() {
          var items = new HashMap(ctrl.$viewValue);
          forEach(selectElement.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        scope.$watch(function selectMultipleWatch() {
          if (!equals(lastView, ctrl.$viewValue)) {
            lastView = shallowCopy(ctrl.$viewValue);
            ctrl.$render();
          }
        });

        selectElement.on('change', function() {
          scope.$apply(function() {
            var array = [];
            forEach(selectElement.find('option'), function(option) {
              if (option.selected) {
                array.push(option.value);
              }
            });
            ctrl.$setViewValue(array);
          });
        });
      }

      function setupAsOptions(scope, selectElement, ctrl) {
        var match;

        if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
          throw ngOptionsMinErr('iexp',
            "Expected expression in form of " +
            "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
            " but got '{0}'. Element: {1}",
            optionsExp, startingTag(selectElement));
        }

        var displayFn = $parse(match[2] || match[1]),
            valueName = match[4] || match[6],
            selectAs = / as /.test(match[0]) && match[1],
            selectAsFn = selectAs ? $parse(selectAs) : null,
            keyName = match[5],
            groupByFn = $parse(match[3] || ''),
            valueFn = $parse(match[2] ? match[1] : valueName),
            valuesFn = $parse(match[7]),
            track = match[8],
            trackFn = track ? $parse(match[8]) : null,
            trackKeysCache = {},
            // This is an array of array of existing option groups in DOM.
            // We try to reuse these if possible
            // - optionGroupsCache[0] is the options with no option group
            // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
            optionGroupsCache = [[{element: selectElement, label:''}]],
            //re-usable object to represent option's locals
            locals = {};

        if (nullOption) {
          // compile the element since there might be bindings in it
          $compile(nullOption)(scope);

          // remove the class, which is added automatically because we recompile the element and it
          // becomes the compilation root
          nullOption.removeClass('ng-scope');

          // we need to remove it before calling selectElement.empty() because otherwise IE will
          // remove the label from the element. wtf?
          nullOption.remove();
        }

        // clear contents, we'll add what's needed based on the model
        selectElement.empty();

        selectElement.on('change', selectionChanged);

        ctrl.$render = render;

        scope.$watchCollection(valuesFn, scheduleRendering);
        scope.$watchCollection(getLabels, scheduleRendering);

        if (multiple) {
          scope.$watchCollection(function() { return ctrl.$modelValue; }, scheduleRendering);
        }

        // ------------------------------------------------------------------ //

        function callExpression(exprFn, key, value) {
          locals[valueName] = value;
          if (keyName) locals[keyName] = key;
          return exprFn(scope, locals);
        }

        function selectionChanged() {
          scope.$apply(function() {
            var collection = valuesFn(scope) || [];
            var viewValue;
            if (multiple) {
              viewValue = [];
              forEach(selectElement.val(), function(selectedKey) {
                  selectedKey = trackFn ? trackKeysCache[selectedKey] : selectedKey;
                viewValue.push(getViewValue(selectedKey, collection[selectedKey]));
              });
            } else {
              var selectedKey = trackFn ? trackKeysCache[selectElement.val()] : selectElement.val();
              viewValue = getViewValue(selectedKey, collection[selectedKey]);
            }
            ctrl.$setViewValue(viewValue);
            render();
          });
        }

        function getViewValue(key, value) {
          if (key === '?') {
            return undefined;
          } else if (key === '') {
            return null;
          } else {
            var viewValueFn = selectAsFn ? selectAsFn : valueFn;
            return callExpression(viewValueFn, key, value);
          }
        }

        function getLabels() {
          var values = valuesFn(scope);
          var toDisplay;
          if (values && isArray(values)) {
            toDisplay = new Array(values.length);
            for (var i = 0, ii = values.length; i < ii; i++) {
              toDisplay[i] = callExpression(displayFn, i, values[i]);
            }
            return toDisplay;
          } else if (values) {
            // TODO: Add a test for this case
            toDisplay = {};
            for (var prop in values) {
              if (values.hasOwnProperty(prop)) {
                toDisplay[prop] = callExpression(displayFn, prop, values[prop]);
              }
            }
          }
          return toDisplay;
        }

        function createIsSelectedFn(viewValue) {
          var selectedSet;
          if (multiple) {
            if (trackFn && isArray(viewValue)) {

              selectedSet = new HashMap([]);
              for (var trackIndex = 0; trackIndex < viewValue.length; trackIndex++) {
                // tracking by key
                selectedSet.put(callExpression(trackFn, null, viewValue[trackIndex]), true);
              }
            } else {
              selectedSet = new HashMap(viewValue);
            }
          } else if (trackFn) {
            viewValue = callExpression(trackFn, null, viewValue);
          }

          return function isSelected(key, value) {
            var compareValueFn;
            if (trackFn) {
              compareValueFn = trackFn;
            } else if (selectAsFn) {
              compareValueFn = selectAsFn;
            } else {
              compareValueFn = valueFn;
            }

            if (multiple) {
              return isDefined(selectedSet.remove(callExpression(compareValueFn, key, value)));
            } else {
              return viewValue === callExpression(compareValueFn, key, value);
            }
          };
        }

        function scheduleRendering() {
          if (!renderScheduled) {
            scope.$$postDigest(render);
            renderScheduled = true;
          }
        }

        /**
         * A new labelMap is created with each render.
         * This function is called for each existing option with added=false,
         * and each new option with added=true.
         * - Labels that are passed to this method twice,
         * (once with added=true and once with added=false) will end up with a value of 0, and
         * will cause no change to happen to the corresponding option.
         * - Labels that are passed to this method only once with added=false will end up with a
         * value of -1 and will eventually be passed to selectCtrl.removeOption()
         * - Labels that are passed to this method only once with added=true will end up with a
         * value of 1 and will eventually be passed to selectCtrl.addOption()
        */
        function updateLabelMap(labelMap, label, added) {
          labelMap[label] = labelMap[label] || 0;
          labelMap[label] += (added ? 1 : -1);
        }

        function render() {
          renderScheduled = false;

          // Temporary location for the option groups before we render them
          var optionGroups = {'':[]},
              optionGroupNames = [''],
              optionGroupName,
              optionGroup,
              option,
              existingParent, existingOptions, existingOption,
              viewValue = ctrl.$viewValue,
              values = valuesFn(scope) || [],
              keys = keyName ? sortedKeys(values) : values,
              key,
              value,
              groupLength, length,
              groupIndex, index,
              labelMap = {},
              selected,
              isSelected = createIsSelectedFn(viewValue),
              anySelected = false,
              lastElement,
              element,
              label,
              optionId;

          trackKeysCache = {};

          // We now build up the list of options we need (we merge later)
          for (index = 0; length = keys.length, index < length; index++) {
            key = index;
            if (keyName) {
              key = keys[index];
              if (key.charAt(0) === '$') continue;
            }
            value = values[key];

            optionGroupName = callExpression(groupByFn, key, value) || '';
            if (!(optionGroup = optionGroups[optionGroupName])) {
              optionGroup = optionGroups[optionGroupName] = [];
              optionGroupNames.push(optionGroupName);
            }

            selected = isSelected(key, value);
            anySelected = anySelected || selected;

            label = callExpression(displayFn, key, value); // what will be seen by the user

            // doing displayFn(scope, locals) || '' overwrites zero values
            label = isDefined(label) ? label : '';
            optionId = trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index);
            if (trackFn) {
              trackKeysCache[optionId] = key;
            }

            optionGroup.push({
              // either the index into array or key from object
              id: optionId,
              label: label,
              selected: selected                   // determine if we should be selected
            });
          }
          if (!multiple) {
            if (nullOption || viewValue === null) {
              // insert null option if we have a placeholder, or the model is null
              optionGroups[''].unshift({id:'', label:'', selected:!anySelected});
            } else if (!anySelected) {
              // option could not be found, we have to insert the undefined item
              optionGroups[''].unshift({id:'?', label:'', selected:true});
            }
          }

          // Now we need to update the list of DOM nodes to match the optionGroups we computed above
          for (groupIndex = 0, groupLength = optionGroupNames.length;
               groupIndex < groupLength;
               groupIndex++) {
            // current option group name or '' if no group
            optionGroupName = optionGroupNames[groupIndex];

            // list of options for that group. (first item has the parent)
            optionGroup = optionGroups[optionGroupName];

            if (optionGroupsCache.length <= groupIndex) {
              // we need to grow the optionGroups
              existingParent = {
                element: optGroupTemplate.clone().attr('label', optionGroupName),
                label: optionGroup.label
              };
              existingOptions = [existingParent];
              optionGroupsCache.push(existingOptions);
              selectElement.append(existingParent.element);
            } else {
              existingOptions = optionGroupsCache[groupIndex];
              existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element

              // update the OPTGROUP label if not the same.
              if (existingParent.label != optionGroupName) {
                existingParent.element.attr('label', existingParent.label = optionGroupName);
              }
            }

            lastElement = null;  // start at the beginning
            for (index = 0, length = optionGroup.length; index < length; index++) {
              option = optionGroup[index];
              if ((existingOption = existingOptions[index + 1])) {
                // reuse elements
                lastElement = existingOption.element;
                if (existingOption.label !== option.label) {
                  updateLabelMap(labelMap, existingOption.label, false);
                  updateLabelMap(labelMap, option.label, true);
                  lastElement.text(existingOption.label = option.label);
                  lastElement.prop('label', existingOption.label);
                }
                if (existingOption.id !== option.id) {
                  lastElement.val(existingOption.id = option.id);
                }
                // lastElement.prop('selected') provided by jQuery has side-effects
                if (lastElement[0].selected !== option.selected) {
                  lastElement.prop('selected', (existingOption.selected = option.selected));
                  if (msie) {
                    // See #7692
                    // The selected item wouldn't visually update on IE without this.
                    // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well
                    lastElement.prop('selected', existingOption.selected);
                  }
                }
              } else {
                // grow elements

                // if it's a null option
                if (option.id === '' && nullOption) {
                  // put back the pre-compiled element
                  element = nullOption;
                } else {
                  // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                  // in this version of jQuery on some browser the .text() returns a string
                  // rather then the element.
                  (element = optionTemplate.clone())
                      .val(option.id)
                      .prop('selected', option.selected)
                      .attr('selected', option.selected)
                      .prop('label', option.label)
                      .text(option.label);
                }

                existingOptions.push(existingOption = {
                    element: element,
                    label: option.label,
                    id: option.id,
                    selected: option.selected
                });
                updateLabelMap(labelMap, option.label, true);
                if (lastElement) {
                  lastElement.after(element);
                } else {
                  existingParent.element.append(element);
                }
                lastElement = element;
              }
            }
            // remove any excessive OPTIONs in a group
            index++; // increment since the existingOptions[0] is parent element not OPTION
            while (existingOptions.length > index) {
              option = existingOptions.pop();
              updateLabelMap(labelMap, option.label, false);
              option.element.remove();
            }
          }
          // remove any excessive OPTGROUPs from select
          while (optionGroupsCache.length > groupIndex) {
            // remove all the labels in the option group
            optionGroup = optionGroupsCache.pop();
            for (index = 1; index < optionGroup.length; ++index) {
              updateLabelMap(labelMap, optionGroup[index].label, false);
            }
            optionGroup[0].element.remove();
          }
          forEach(labelMap, function(count, label) {
            if (count > 0) {
              selectCtrl.addOption(label);
            } else if (count < 0) {
              selectCtrl.removeOption(label);
            }
          });
        }
      }
    }
  };
}];

var optionDirective = ['$interpolate', function($interpolate) {
  var nullSelectCtrl = {
    addOption: noop,
    removeOption: noop
  };

  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {
      if (isUndefined(attr.value)) {
        var interpolateFn = $interpolate(element.text(), true);
        if (!interpolateFn) {
          attr.$set('value', element.text());
        }
      }

      return function(scope, element, attr) {
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        if (!selectCtrl || !selectCtrl.databound) {
          selectCtrl = nullSelectCtrl;
        }

        if (interpolateFn) {
          scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
            attr.$set('value', newVal);
            if (oldVal !== newVal) {
              selectCtrl.removeOption(oldVal);
            }
            selectCtrl.addOption(newVal, element);
          });
        } else {
          selectCtrl.addOption(attr.value, element);
        }

        element.on('$destroy', function() {
          selectCtrl.removeOption(attr.value);
        });
      };
    }
  };
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: false
});

var requiredDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      ctrl.$validators.required = function(modelValue, viewValue) {
        return !attr.required || !ctrl.$isEmpty(viewValue);
      };

      attr.$observe('required', function() {
        ctrl.$validate();
      });
    }
  };
};


var patternDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var regexp, patternExp = attr.ngPattern || attr.pattern;
      attr.$observe('pattern', function(regex) {
        if (isString(regex) && regex.length > 0) {
          regex = new RegExp('^' + regex + '$');
        }

        if (regex && !regex.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
            regex, startingTag(elm));
        }

        regexp = regex || undefined;
        ctrl.$validate();
      });

      ctrl.$validators.pattern = function(value) {
        return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);
      };
    }
  };
};


var maxlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var maxlength = -1;
      attr.$observe('maxlength', function(value) {
        var intVal = int(value);
        maxlength = isNaN(intVal) ? -1 : intVal;
        ctrl.$validate();
      });
      ctrl.$validators.maxlength = function(modelValue, viewValue) {
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
      };
    }
  };
};

var minlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var minlength = 0;
      attr.$observe('minlength', function(value) {
        minlength = int(value) || 0;
        ctrl.$validate();
      });
      ctrl.$validators.minlength = function(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
      };
    }
  };
};

  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }

  //try to bind to jquery now so that one can write jqLite(document).ready()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
; browserify_shim__define__module__export__(typeof angular != "undefined" ? angular : window.angular);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/bluebird/js/browser/bluebird.js":[function(require,module,exports){
(function (process,global){
/* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
/**
 * bluebird build version 2.9.26
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers
*/
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var SomePromiseArray = Promise._SomePromiseArray;
function any(promises) {
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(1);
    ret.setUnwrap();
    ret.init();
    return promise;
}

Promise.any = function (promises) {
    return any(promises);
};

Promise.prototype.any = function () {
    return any(this);
};

};

},{}],2:[function(_dereq_,module,exports){
"use strict";
var firstLineError;
try {throw new Error(); } catch (e) {firstLineError = e;}
var schedule = _dereq_("./schedule.js");
var Queue = _dereq_("./queue.js");
var util = _dereq_("./util.js");

function Async() {
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._trampolineEnabled = true;
    var self = this;
    this.drainQueues = function () {
        self._drainQueues();
    };
    this._schedule =
        schedule.isStatic ? schedule(this.drainQueues) : schedule;
}

Async.prototype.disableTrampolineIfNecessary = function() {
    if (util.hasDevTools) {
        this._trampolineEnabled = false;
    }
};

Async.prototype.enableTrampoline = function() {
    if (!this._trampolineEnabled) {
        this._trampolineEnabled = true;
        this._schedule = function(fn) {
            setTimeout(fn, 0);
        };
    }
};

Async.prototype.haveItemsQueued = function () {
    return this._normalQueue.length() > 0;
};

Async.prototype.throwLater = function(fn, arg) {
    if (arguments.length === 1) {
        arg = fn;
        fn = function () { throw arg; };
    }
    var domain = this._getDomain();
    if (domain !== undefined) fn = domain.bind(fn);
    if (typeof setTimeout !== "undefined") {
        setTimeout(function() {
            fn(arg);
        }, 0);
    } else try {
        this._schedule(function() {
            fn(arg);
        });
    } catch (e) {
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
    }
};

Async.prototype._getDomain = function() {};

if (!true) {
if (util.isNode) {
    var EventsModule = _dereq_("events");

    var domainGetter = function() {
        var domain = process.domain;
        if (domain === null) return undefined;
        return domain;
    };

    if (EventsModule.usingDomains) {
        Async.prototype._getDomain = domainGetter;
    } else {
        var descriptor =
            Object.getOwnPropertyDescriptor(EventsModule, "usingDomains");

        if (descriptor) {
            if (!descriptor.configurable) {
                process.on("domainsActivated", function() {
                    Async.prototype._getDomain = domainGetter;
                });
            } else {
                var usingDomains = false;
                Object.defineProperty(EventsModule, "usingDomains", {
                    configurable: false,
                    enumerable: true,
                    get: function() {
                        return usingDomains;
                    },
                    set: function(value) {
                        if (usingDomains || !value) return;
                        usingDomains = true;
                        Async.prototype._getDomain = domainGetter;
                        util.toFastProperties(process);
                        process.emit("domainsActivated");
                    }
                });
            }
        }
    }
}
}

function AsyncInvokeLater(fn, receiver, arg) {
    var domain = this._getDomain();
    if (domain !== undefined) fn = domain.bind(fn);
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncInvoke(fn, receiver, arg) {
    var domain = this._getDomain();
    if (domain !== undefined) fn = domain.bind(fn);
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncSettlePromises(promise) {
    var domain = this._getDomain();
    if (domain !== undefined) {
        var fn = domain.bind(promise._settlePromises);
        this._normalQueue.push(fn, promise, undefined);
    } else {
        this._normalQueue._pushOne(promise);
    }
    this._queueTick();
}

if (!util.hasDevTools) {
    Async.prototype.invokeLater = AsyncInvokeLater;
    Async.prototype.invoke = AsyncInvoke;
    Async.prototype.settlePromises = AsyncSettlePromises;
} else {
    Async.prototype.invokeLater = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvokeLater.call(this, fn, receiver, arg);
        } else {
            setTimeout(function() {
                fn.call(receiver, arg);
            }, 100);
        }
    };

    Async.prototype.invoke = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvoke.call(this, fn, receiver, arg);
        } else {
            setTimeout(function() {
                fn.call(receiver, arg);
            }, 0);
        }
    };

    Async.prototype.settlePromises = function(promise) {
        if (this._trampolineEnabled) {
            AsyncSettlePromises.call(this, promise);
        } else {
            setTimeout(function() {
                promise._settlePromises();
            }, 0);
        }
    };
}

Async.prototype.invokeFirst = function (fn, receiver, arg) {
    var domain = this._getDomain();
    if (domain !== undefined) fn = domain.bind(fn);
    this._normalQueue.unshift(fn, receiver, arg);
    this._queueTick();
};

Async.prototype._drainQueue = function(queue) {
    while (queue.length() > 0) {
        var fn = queue.shift();
        if (typeof fn !== "function") {
            fn._settlePromises();
            continue;
        }
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
    }
};

Async.prototype._drainQueues = function () {
    this._drainQueue(this._normalQueue);
    this._reset();
    this._drainQueue(this._lateQueue);
};

Async.prototype._queueTick = function () {
    if (!this._isTickUsed) {
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
    }
};

Async.prototype._reset = function () {
    this._isTickUsed = false;
};

module.exports = new Async();
module.exports.firstLineError = firstLineError;

},{"./queue.js":28,"./schedule.js":31,"./util.js":38,"events":39}],3:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise) {
var rejectThis = function(_, e) {
    this._reject(e);
};

var targetRejected = function(e, context) {
    context.promiseRejectionQueued = true;
    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
};

var bindingResolved = function(thisArg, context) {
    this._setBoundTo(thisArg);
    if (this._isPending()) {
        this._resolveCallback(context.target);
    }
};

var bindingRejected = function(e, context) {
    if (!context.promiseRejectionQueued) this._reject(e);
};

Promise.prototype.bind = function (thisArg) {
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);
    ret._propagateFrom(this, 1);
    var target = this._target();
    if (maybePromise instanceof Promise) {
        var context = {
            promiseRejectionQueued: false,
            promise: ret,
            target: target,
            bindingPromise: maybePromise
        };
        target._then(INTERNAL, targetRejected, ret._progress, ret, context);
        maybePromise._then(
            bindingResolved, bindingRejected, ret._progress, ret, context);
    } else {
        ret._setBoundTo(thisArg);
        ret._resolveCallback(target);
    }
    return ret;
};

Promise.prototype._setBoundTo = function (obj) {
    if (obj !== undefined) {
        this._bitField = this._bitField | 131072;
        this._boundTo = obj;
    } else {
        this._bitField = this._bitField & (~131072);
    }
};

Promise.prototype._isBound = function () {
    return (this._bitField & 131072) === 131072;
};

Promise.bind = function (thisArg, value) {
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);

    if (maybePromise instanceof Promise) {
        maybePromise._then(function(thisArg) {
            ret._setBoundTo(thisArg);
            ret._resolveCallback(value);
        }, ret._reject, ret._progress, ret, null);
    } else {
        ret._setBoundTo(thisArg);
        ret._resolveCallback(value);
    }
    return ret;
};
};

},{}],4:[function(_dereq_,module,exports){
"use strict";
var old;
if (typeof Promise !== "undefined") old = Promise;
function noConflict() {
    try { if (Promise === bluebird) Promise = old; }
    catch (e) {}
    return bluebird;
}
var bluebird = _dereq_("./promise.js")();
bluebird.noConflict = noConflict;
module.exports = bluebird;

},{"./promise.js":23}],5:[function(_dereq_,module,exports){
"use strict";
var cr = Object.create;
if (cr) {
    var callerCache = cr(null);
    var getterCache = cr(null);
    callerCache[" size"] = getterCache[" size"] = 0;
}

module.exports = function(Promise) {
var util = _dereq_("./util.js");
var canEvaluate = util.canEvaluate;
var isIdentifier = util.isIdentifier;

var getMethodCaller;
var getGetter;
if (!true) {
var makeMethodCaller = function (methodName) {
    return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
};

var makeGetter = function (propertyName) {
    return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
};

var getCompiled = function(name, compiler, cache) {
    var ret = cache[name];
    if (typeof ret !== "function") {
        if (!isIdentifier(name)) {
            return null;
        }
        ret = compiler(name);
        cache[name] = ret;
        cache[" size"]++;
        if (cache[" size"] > 512) {
            var keys = Object.keys(cache);
            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
            cache[" size"] = keys.length - 256;
        }
    }
    return ret;
};

getMethodCaller = function(name) {
    return getCompiled(name, makeMethodCaller, callerCache);
};

getGetter = function(name) {
    return getCompiled(name, makeGetter, getterCache);
};
}

function ensureMethod(obj, methodName) {
    var fn;
    if (obj != null) fn = obj[methodName];
    if (typeof fn !== "function") {
        var message = "Object " + util.classString(obj) + " has no method '" +
            util.toString(methodName) + "'";
        throw new Promise.TypeError(message);
    }
    return fn;
}

function caller(obj) {
    var methodName = this.pop();
    var fn = ensureMethod(obj, methodName);
    return fn.apply(obj, this);
}
Promise.prototype.call = function (methodName) {
    var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
    if (!true) {
        if (canEvaluate) {
            var maybeCaller = getMethodCaller(methodName);
            if (maybeCaller !== null) {
                return this._then(
                    maybeCaller, undefined, undefined, args, undefined);
            }
        }
    }
    args.push(methodName);
    return this._then(caller, undefined, undefined, args, undefined);
};

function namedGetter(obj) {
    return obj[this];
}
function indexedGetter(obj) {
    var index = +this;
    if (index < 0) index = Math.max(0, index + obj.length);
    return obj[index];
}
Promise.prototype.get = function (propertyName) {
    var isIndex = (typeof propertyName === "number");
    var getter;
    if (!isIndex) {
        if (canEvaluate) {
            var maybeGetter = getGetter(propertyName);
            getter = maybeGetter !== null ? maybeGetter : namedGetter;
        } else {
            getter = namedGetter;
        }
    } else {
        getter = indexedGetter;
    }
    return this._then(getter, undefined, undefined, propertyName, undefined);
};
};

},{"./util.js":38}],6:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var errors = _dereq_("./errors.js");
var async = _dereq_("./async.js");
var CancellationError = errors.CancellationError;

Promise.prototype._cancel = function (reason) {
    if (!this.isCancellable()) return this;
    var parent;
    var promiseToReject = this;
    while ((parent = promiseToReject._cancellationParent) !== undefined &&
        parent.isCancellable()) {
        promiseToReject = parent;
    }
    this._unsetCancellable();
    promiseToReject._target()._rejectCallback(reason, false, true);
};

Promise.prototype.cancel = function (reason) {
    if (!this.isCancellable()) return this;
    if (reason === undefined) reason = new CancellationError();
    async.invokeLater(this._cancel, this, reason);
    return this;
};

Promise.prototype.cancellable = function () {
    if (this._cancellable()) return this;
    async.enableTrampoline();
    this._setCancellable();
    this._cancellationParent = undefined;
    return this;
};

Promise.prototype.uncancellable = function () {
    var ret = this.then();
    ret._unsetCancellable();
    return ret;
};

Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
    var ret = this._then(didFulfill, didReject, didProgress,
                         undefined, undefined);

    ret._setCancellable();
    ret._cancellationParent = undefined;
    return ret;
};
};

},{"./async.js":2,"./errors.js":13}],7:[function(_dereq_,module,exports){
"use strict";
module.exports = function() {
var async = _dereq_("./async.js");
var util = _dereq_("./util.js");
var bluebirdFramePattern =
    /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
var stackFramePattern = null;
var formatStack = null;
var indentStackFrames = false;
var warn;

function CapturedTrace(parent) {
    this._parent = parent;
    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
    captureStackTrace(this, CapturedTrace);
    if (length > 32) this.uncycle();
}
util.inherits(CapturedTrace, Error);

CapturedTrace.prototype.uncycle = function() {
    var length = this._length;
    if (length < 2) return;
    var nodes = [];
    var stackToIndex = {};

    for (var i = 0, node = this; node !== undefined; ++i) {
        nodes.push(node);
        node = node._parent;
    }
    length = this._length = i;
    for (var i = length - 1; i >= 0; --i) {
        var stack = nodes[i].stack;
        if (stackToIndex[stack] === undefined) {
            stackToIndex[stack] = i;
        }
    }
    for (var i = 0; i < length; ++i) {
        var currentStack = nodes[i].stack;
        var index = stackToIndex[currentStack];
        if (index !== undefined && index !== i) {
            if (index > 0) {
                nodes[index - 1]._parent = undefined;
                nodes[index - 1]._length = 1;
            }
            nodes[i]._parent = undefined;
            nodes[i]._length = 1;
            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

            if (index < length - 1) {
                cycleEdgeNode._parent = nodes[index + 1];
                cycleEdgeNode._parent.uncycle();
                cycleEdgeNode._length =
                    cycleEdgeNode._parent._length + 1;
            } else {
                cycleEdgeNode._parent = undefined;
                cycleEdgeNode._length = 1;
            }
            var currentChildLength = cycleEdgeNode._length + 1;
            for (var j = i - 2; j >= 0; --j) {
                nodes[j]._length = currentChildLength;
                currentChildLength++;
            }
            return;
        }
    }
};

CapturedTrace.prototype.parent = function() {
    return this._parent;
};

CapturedTrace.prototype.hasParent = function() {
    return this._parent !== undefined;
};

CapturedTrace.prototype.attachExtraTrace = function(error) {
    if (error.__stackCleaned__) return;
    this.uncycle();
    var parsed = CapturedTrace.parseStackAndMessage(error);
    var message = parsed.message;
    var stacks = [parsed.stack];

    var trace = this;
    while (trace !== undefined) {
        stacks.push(cleanStack(trace.stack.split("\n")));
        trace = trace._parent;
    }
    removeCommonRoots(stacks);
    removeDuplicateOrEmptyJumps(stacks);
    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
    util.notEnumerableProp(error, "__stackCleaned__", true);
};

function reconstructStack(message, stacks) {
    for (var i = 0; i < stacks.length - 1; ++i) {
        stacks[i].push("From previous event:");
        stacks[i] = stacks[i].join("\n");
    }
    if (i < stacks.length) {
        stacks[i] = stacks[i].join("\n");
    }
    return message + "\n" + stacks.join("\n");
}

function removeDuplicateOrEmptyJumps(stacks) {
    for (var i = 0; i < stacks.length; ++i) {
        if (stacks[i].length === 0 ||
            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
            stacks.splice(i, 1);
            i--;
        }
    }
}

function removeCommonRoots(stacks) {
    var current = stacks[0];
    for (var i = 1; i < stacks.length; ++i) {
        var prev = stacks[i];
        var currentLastIndex = current.length - 1;
        var currentLastLine = current[currentLastIndex];
        var commonRootMeetPoint = -1;

        for (var j = prev.length - 1; j >= 0; --j) {
            if (prev[j] === currentLastLine) {
                commonRootMeetPoint = j;
                break;
            }
        }

        for (var j = commonRootMeetPoint; j >= 0; --j) {
            var line = prev[j];
            if (current[currentLastIndex] === line) {
                current.pop();
                currentLastIndex--;
            } else {
                break;
            }
        }
        current = prev;
    }
}

function cleanStack(stack) {
    var ret = [];
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        var isTraceLine = stackFramePattern.test(line) ||
            "    (No stack trace)" === line;
        var isInternalFrame = isTraceLine && shouldIgnore(line);
        if (isTraceLine && !isInternalFrame) {
            if (indentStackFrames && line.charAt(0) !== " ") {
                line = "    " + line;
            }
            ret.push(line);
        }
    }
    return ret;
}

function stackFramesAsArray(error) {
    var stack = error.stack.replace(/\s+$/g, "").split("\n");
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
            break;
        }
    }
    if (i > 0) {
        stack = stack.slice(i);
    }
    return stack;
}

CapturedTrace.parseStackAndMessage = function(error) {
    var stack = error.stack;
    var message = error.toString();
    stack = typeof stack === "string" && stack.length > 0
                ? stackFramesAsArray(error) : ["    (No stack trace)"];
    return {
        message: message,
        stack: cleanStack(stack)
    };
};

CapturedTrace.formatAndLogError = function(error, title) {
    if (typeof console !== "undefined") {
        var message;
        if (typeof error === "object" || typeof error === "function") {
            var stack = error.stack;
            message = title + formatStack(stack, error);
        } else {
            message = title + String(error);
        }
        if (typeof warn === "function") {
            warn(message);
        } else if (typeof console.log === "function" ||
            typeof console.log === "object") {
            console.log(message);
        }
    }
};

CapturedTrace.unhandledRejection = function (reason) {
    CapturedTrace.formatAndLogError(reason, "^--- With additional stack trace: ");
};

CapturedTrace.isSupported = function () {
    return typeof captureStackTrace === "function";
};

CapturedTrace.fireRejectionEvent =
function(name, localHandler, reason, promise) {
    var localEventFired = false;
    try {
        if (typeof localHandler === "function") {
            localEventFired = true;
            if (name === "rejectionHandled") {
                localHandler(promise);
            } else {
                localHandler(reason, promise);
            }
        }
    } catch (e) {
        async.throwLater(e);
    }

    var globalEventFired = false;
    try {
        globalEventFired = fireGlobalEvent(name, reason, promise);
    } catch (e) {
        globalEventFired = true;
        async.throwLater(e);
    }

    var domEventFired = false;
    if (fireDomEvent) {
        try {
            domEventFired = fireDomEvent(name.toLowerCase(), {
                reason: reason,
                promise: promise
            });
        } catch (e) {
            domEventFired = true;
            async.throwLater(e);
        }
    }

    if (!globalEventFired && !localEventFired && !domEventFired &&
        name === "unhandledRejection") {
        CapturedTrace.formatAndLogError(reason, "Unhandled rejection ");
    }
};

function formatNonError(obj) {
    var str;
    if (typeof obj === "function") {
        str = "[function " +
            (obj.name || "anonymous") +
            "]";
    } else {
        str = obj.toString();
        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
        if (ruselessToString.test(str)) {
            try {
                var newStr = JSON.stringify(obj);
                str = newStr;
            }
            catch(e) {

            }
        }
        if (str.length === 0) {
            str = "(empty array)";
        }
    }
    return ("(<" + snip(str) + ">, no stack trace)");
}

function snip(str) {
    var maxChars = 41;
    if (str.length < maxChars) {
        return str;
    }
    return str.substr(0, maxChars - 3) + "...";
}

var shouldIgnore = function() { return false; };
var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
function parseLineInfo(line) {
    var matches = line.match(parseLineInfoRegex);
    if (matches) {
        return {
            fileName: matches[1],
            line: parseInt(matches[2], 10)
        };
    }
}
CapturedTrace.setBounds = function(firstLineError, lastLineError) {
    if (!CapturedTrace.isSupported()) return;
    var firstStackLines = firstLineError.stack.split("\n");
    var lastStackLines = lastLineError.stack.split("\n");
    var firstIndex = -1;
    var lastIndex = -1;
    var firstFileName;
    var lastFileName;
    for (var i = 0; i < firstStackLines.length; ++i) {
        var result = parseLineInfo(firstStackLines[i]);
        if (result) {
            firstFileName = result.fileName;
            firstIndex = result.line;
            break;
        }
    }
    for (var i = 0; i < lastStackLines.length; ++i) {
        var result = parseLineInfo(lastStackLines[i]);
        if (result) {
            lastFileName = result.fileName;
            lastIndex = result.line;
            break;
        }
    }
    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
        firstFileName !== lastFileName || firstIndex >= lastIndex) {
        return;
    }

    shouldIgnore = function(line) {
        if (bluebirdFramePattern.test(line)) return true;
        var info = parseLineInfo(line);
        if (info) {
            if (info.fileName === firstFileName &&
                (firstIndex <= info.line && info.line <= lastIndex)) {
                return true;
            }
        }
        return false;
    };
};

var captureStackTrace = (function stackDetection() {
    var v8stackFramePattern = /^\s*at\s*/;
    var v8stackFormatter = function(stack, error) {
        if (typeof stack === "string") return stack;

        if (error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    if (typeof Error.stackTraceLimit === "number" &&
        typeof Error.captureStackTrace === "function") {
        Error.stackTraceLimit = Error.stackTraceLimit + 6;
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        var captureStackTrace = Error.captureStackTrace;

        shouldIgnore = function(line) {
            return bluebirdFramePattern.test(line);
        };
        return function(receiver, ignoreUntil) {
            Error.stackTraceLimit = Error.stackTraceLimit + 6;
            captureStackTrace(receiver, ignoreUntil);
            Error.stackTraceLimit = Error.stackTraceLimit - 6;
        };
    }
    var err = new Error();

    if (typeof err.stack === "string" &&
        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
        stackFramePattern = /@/;
        formatStack = v8stackFormatter;
        indentStackFrames = true;
        return function captureStackTrace(o) {
            o.stack = new Error().stack;
        };
    }

    var hasStackAfterThrow;
    try { throw new Error(); }
    catch(e) {
        hasStackAfterThrow = ("stack" in e);
    }
    if (!("stack" in err) && hasStackAfterThrow) {
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        return function captureStackTrace(o) {
            Error.stackTraceLimit = Error.stackTraceLimit + 6;
            try { throw new Error(); }
            catch(e) { o.stack = e.stack; }
            Error.stackTraceLimit = Error.stackTraceLimit - 6;
        };
    }

    formatStack = function(stack, error) {
        if (typeof stack === "string") return stack;

        if ((typeof error === "object" ||
            typeof error === "function") &&
            error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    return null;

})([]);

var fireDomEvent;
var fireGlobalEvent = (function() {
    if (util.isNode) {
        return function(name, reason, promise) {
            if (name === "rejectionHandled") {
                return process.emit(name, promise);
            } else {
                return process.emit(name, reason, promise);
            }
        };
    } else {
        var customEventWorks = false;
        var anyEventWorks = true;
        try {
            var ev = new self.CustomEvent("test");
            customEventWorks = ev instanceof CustomEvent;
        } catch (e) {}
        if (!customEventWorks) {
            try {
                var event = document.createEvent("CustomEvent");
                event.initCustomEvent("testingtheevent", false, true, {});
                self.dispatchEvent(event);
            } catch (e) {
                anyEventWorks = false;
            }
        }
        if (anyEventWorks) {
            fireDomEvent = function(type, detail) {
                var event;
                if (customEventWorks) {
                    event = new self.CustomEvent(type, {
                        detail: detail,
                        bubbles: false,
                        cancelable: true
                    });
                } else if (self.dispatchEvent) {
                    event = document.createEvent("CustomEvent");
                    event.initCustomEvent(type, false, true, detail);
                }

                return event ? !self.dispatchEvent(event) : false;
            };
        }

        var toWindowMethodNameMap = {};
        toWindowMethodNameMap["unhandledRejection"] = ("on" +
            "unhandledRejection").toLowerCase();
        toWindowMethodNameMap["rejectionHandled"] = ("on" +
            "rejectionHandled").toLowerCase();

        return function(name, reason, promise) {
            var methodName = toWindowMethodNameMap[name];
            var method = self[methodName];
            if (!method) return false;
            if (name === "rejectionHandled") {
                method.call(self, promise);
            } else {
                method.call(self, reason, promise);
            }
            return true;
        };
    }
})();

if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
    warn = function (message) {
        console.warn(message);
    };
    if (util.isNode && process.stderr.isTTY) {
        warn = function(message) {
            process.stderr.write("\u001b[31m" + message + "\u001b[39m\n");
        };
    } else if (!util.isNode && typeof (new Error().stack) === "string") {
        warn = function(message) {
            console.warn("%c" + message, "color: red");
        };
    }
}

return CapturedTrace;
};

},{"./async.js":2,"./util.js":38}],8:[function(_dereq_,module,exports){
"use strict";
module.exports = function(NEXT_FILTER) {
var util = _dereq_("./util.js");
var errors = _dereq_("./errors.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var keys = _dereq_("./es5.js").keys;
var TypeError = errors.TypeError;

function CatchFilter(instances, callback, promise) {
    this._instances = instances;
    this._callback = callback;
    this._promise = promise;
}

function safePredicate(predicate, e) {
    var safeObject = {};
    var retfilter = tryCatch(predicate).call(safeObject, e);

    if (retfilter === errorObj) return retfilter;

    var safeKeys = keys(safeObject);
    if (safeKeys.length) {
        errorObj.e = new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a");
        return errorObj;
    }
    return retfilter;
}

CatchFilter.prototype.doFilter = function (e) {
    var cb = this._callback;
    var promise = this._promise;
    var boundTo = promise._boundTo;
    for (var i = 0, len = this._instances.length; i < len; ++i) {
        var item = this._instances[i];
        var itemIsErrorType = item === Error ||
            (item != null && item.prototype instanceof Error);

        if (itemIsErrorType && e instanceof item) {
            var ret = tryCatch(cb).call(boundTo, e);
            if (ret === errorObj) {
                NEXT_FILTER.e = ret.e;
                return NEXT_FILTER;
            }
            return ret;
        } else if (typeof item === "function" && !itemIsErrorType) {
            var shouldHandle = safePredicate(item, e);
            if (shouldHandle === errorObj) {
                e = errorObj.e;
                break;
            } else if (shouldHandle) {
                var ret = tryCatch(cb).call(boundTo, e);
                if (ret === errorObj) {
                    NEXT_FILTER.e = ret.e;
                    return NEXT_FILTER;
                }
                return ret;
            }
        }
    }
    NEXT_FILTER.e = e;
    return NEXT_FILTER;
};

return CatchFilter;
};

},{"./errors.js":13,"./es5.js":14,"./util.js":38}],9:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, CapturedTrace, isDebugging) {
var contextStack = [];
function Context() {
    this._trace = new CapturedTrace(peekContext());
}
Context.prototype._pushContext = function () {
    if (!isDebugging()) return;
    if (this._trace !== undefined) {
        contextStack.push(this._trace);
    }
};

Context.prototype._popContext = function () {
    if (!isDebugging()) return;
    if (this._trace !== undefined) {
        contextStack.pop();
    }
};

function createContext() {
    if (isDebugging()) return new Context();
}

function peekContext() {
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) {
        return contextStack[lastIndex];
    }
    return undefined;
}

Promise.prototype._peekContext = peekContext;
Promise.prototype._pushContext = Context.prototype._pushContext;
Promise.prototype._popContext = Context.prototype._popContext;

return createContext;
};

},{}],10:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, CapturedTrace) {
var async = _dereq_("./async.js");
var Warning = _dereq_("./errors.js").Warning;
var util = _dereq_("./util.js");
var canAttachTrace = util.canAttachTrace;
var unhandledRejectionHandled;
var possiblyUnhandledRejection;
var debugging = false || (util.isNode &&
                    (!!process.env["BLUEBIRD_DEBUG"] ||
                     process.env["NODE_ENV"] === "development"));

if (debugging) {
    async.disableTrampolineIfNecessary();
}

Promise.prototype._ensurePossibleRejectionHandled = function () {
    this._setRejectionIsUnhandled();
    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
};

Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
    CapturedTrace.fireRejectionEvent("rejectionHandled",
                                  unhandledRejectionHandled, undefined, this);
};

Promise.prototype._notifyUnhandledRejection = function () {
    if (this._isRejectionUnhandled()) {
        var reason = this._getCarriedStackTrace() || this._settledValue;
        this._setUnhandledRejectionIsNotified();
        CapturedTrace.fireRejectionEvent("unhandledRejection",
                                      possiblyUnhandledRejection, reason, this);
    }
};

Promise.prototype._setUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField | 524288;
};

Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField & (~524288);
};

Promise.prototype._isUnhandledRejectionNotified = function () {
    return (this._bitField & 524288) > 0;
};

Promise.prototype._setRejectionIsUnhandled = function () {
    this._bitField = this._bitField | 2097152;
};

Promise.prototype._unsetRejectionIsUnhandled = function () {
    this._bitField = this._bitField & (~2097152);
    if (this._isUnhandledRejectionNotified()) {
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
    }
};

Promise.prototype._isRejectionUnhandled = function () {
    return (this._bitField & 2097152) > 0;
};

Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
    this._bitField = this._bitField | 1048576;
    this._fulfillmentHandler0 = capturedTrace;
};

Promise.prototype._isCarryingStackTrace = function () {
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._getCarriedStackTrace = function () {
    return this._isCarryingStackTrace()
        ? this._fulfillmentHandler0
        : undefined;
};

Promise.prototype._captureStackTrace = function () {
    if (debugging) {
        this._trace = new CapturedTrace(this._peekContext());
    }
    return this;
};

Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
    if (debugging && canAttachTrace(error)) {
        var trace = this._trace;
        if (trace !== undefined) {
            if (ignoreSelf) trace = trace._parent;
        }
        if (trace !== undefined) {
            trace.attachExtraTrace(error);
        } else if (!error.__stackCleaned__) {
            var parsed = CapturedTrace.parseStackAndMessage(error);
            util.notEnumerableProp(error, "stack",
                parsed.message + "\n" + parsed.stack.join("\n"));
            util.notEnumerableProp(error, "__stackCleaned__", true);
        }
    }
};

Promise.prototype._warn = function(message) {
    var warning = new Warning(message);
    var ctx = this._peekContext();
    if (ctx) {
        ctx.attachExtraTrace(warning);
    } else {
        var parsed = CapturedTrace.parseStackAndMessage(warning);
        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
    }
    CapturedTrace.formatAndLogError(warning, "");
};

Promise.onPossiblyUnhandledRejection = function (fn) {
    possiblyUnhandledRejection = typeof fn === "function" ? fn : undefined;
};

Promise.onUnhandledRejectionHandled = function (fn) {
    unhandledRejectionHandled = typeof fn === "function" ? fn : undefined;
};

Promise.longStackTraces = function () {
    if (async.haveItemsQueued() &&
        debugging === false
   ) {
        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/DT1qyG\u000a");
    }
    debugging = CapturedTrace.isSupported();
    if (debugging) {
        async.disableTrampolineIfNecessary();
    }
};

Promise.hasLongStackTraces = function () {
    return debugging && CapturedTrace.isSupported();
};

if (!CapturedTrace.isSupported()) {
    Promise.longStackTraces = function(){};
    debugging = false;
}

return function() {
    return debugging;
};
};

},{"./async.js":2,"./errors.js":13,"./util.js":38}],11:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util.js");
var isPrimitive = util.isPrimitive;
var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;

module.exports = function(Promise) {
var returner = function () {
    return this;
};
var thrower = function () {
    throw this;
};
var returnUndefined = function() {};
var throwUndefined = function() {
    throw undefined;
};

var wrapper = function (value, action) {
    if (action === 1) {
        return function () {
            throw value;
        };
    } else if (action === 2) {
        return function () {
            return value;
        };
    }
};


Promise.prototype["return"] =
Promise.prototype.thenReturn = function (value) {
    if (value === undefined) return this.then(returnUndefined);

    if (wrapsPrimitiveReceiver && isPrimitive(value)) {
        return this._then(
            wrapper(value, 2),
            undefined,
            undefined,
            undefined,
            undefined
       );
    }
    return this._then(returner, undefined, undefined, value, undefined);
};

Promise.prototype["throw"] =
Promise.prototype.thenThrow = function (reason) {
    if (reason === undefined) return this.then(throwUndefined);

    if (wrapsPrimitiveReceiver && isPrimitive(reason)) {
        return this._then(
            wrapper(reason, 1),
            undefined,
            undefined,
            undefined,
            undefined
       );
    }
    return this._then(thrower, undefined, undefined, reason, undefined);
};
};

},{"./util.js":38}],12:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseReduce = Promise.reduce;

Promise.prototype.each = function (fn) {
    return PromiseReduce(this, fn, null, INTERNAL);
};

Promise.each = function (promises, fn) {
    return PromiseReduce(promises, fn, null, INTERNAL);
};
};

},{}],13:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5.js");
var Objectfreeze = es5.freeze;
var util = _dereq_("./util.js");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;

function subError(nameProperty, defaultMessage) {
    function SubError(message) {
        if (!(this instanceof SubError)) return new SubError(message);
        notEnumerableProp(this, "message",
            typeof message === "string" ? message : defaultMessage);
        notEnumerableProp(this, "name", nameProperty);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        } else {
            Error.call(this);
        }
    }
    inherits(SubError, Error);
    return SubError;
}

var _TypeError, _RangeError;
var Warning = subError("Warning", "warning");
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");
var AggregateError = subError("AggregateError", "aggregate error");
try {
    _TypeError = TypeError;
    _RangeError = RangeError;
} catch(e) {
    _TypeError = subError("TypeError", "type error");
    _RangeError = subError("RangeError", "range error");
}

var methods = ("join pop push shift unshift slice filter forEach some " +
    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

for (var i = 0; i < methods.length; ++i) {
    if (typeof Array.prototype[methods[i]] === "function") {
        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
    }
}

es5.defineProperty(AggregateError.prototype, "length", {
    value: 0,
    configurable: false,
    writable: true,
    enumerable: true
});
AggregateError.prototype["isOperational"] = true;
var level = 0;
AggregateError.prototype.toString = function() {
    var indent = Array(level * 4 + 1).join(" ");
    var ret = "\n" + indent + "AggregateError of:" + "\n";
    level++;
    indent = Array(level * 4 + 1).join(" ");
    for (var i = 0; i < this.length; ++i) {
        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
        var lines = str.split("\n");
        for (var j = 0; j < lines.length; ++j) {
            lines[j] = indent + lines[j];
        }
        str = lines.join("\n");
        ret += str + "\n";
    }
    level--;
    return ret;
};

function OperationalError(message) {
    if (!(this instanceof OperationalError))
        return new OperationalError(message);
    notEnumerableProp(this, "name", "OperationalError");
    notEnumerableProp(this, "message", message);
    this.cause = message;
    this["isOperational"] = true;

    if (message instanceof Error) {
        notEnumerableProp(this, "message", message.message);
        notEnumerableProp(this, "stack", message.stack);
    } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    }

}
inherits(OperationalError, Error);

var errorTypes = Error["__BluebirdErrorTypes__"];
if (!errorTypes) {
    errorTypes = Objectfreeze({
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        OperationalError: OperationalError,
        RejectionError: OperationalError,
        AggregateError: AggregateError
    });
    notEnumerableProp(Error, "__BluebirdErrorTypes__", errorTypes);
}

module.exports = {
    Error: Error,
    TypeError: _TypeError,
    RangeError: _RangeError,
    CancellationError: errorTypes.CancellationError,
    OperationalError: errorTypes.OperationalError,
    TimeoutError: errorTypes.TimeoutError,
    AggregateError: errorTypes.AggregateError,
    Warning: Warning
};

},{"./es5.js":14,"./util.js":38}],14:[function(_dereq_,module,exports){
var isES5 = (function(){
    "use strict";
    return this === undefined;
})();

if (isES5) {
    module.exports = {
        freeze: Object.freeze,
        defineProperty: Object.defineProperty,
        getDescriptor: Object.getOwnPropertyDescriptor,
        keys: Object.keys,
        names: Object.getOwnPropertyNames,
        getPrototypeOf: Object.getPrototypeOf,
        isArray: Array.isArray,
        isES5: isES5,
        propertyIsWritable: function(obj, prop) {
            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
            return !!(!descriptor || descriptor.writable || descriptor.set);
        }
    };
} else {
    var has = {}.hasOwnProperty;
    var str = {}.toString;
    var proto = {}.constructor.prototype;

    var ObjectKeys = function (o) {
        var ret = [];
        for (var key in o) {
            if (has.call(o, key)) {
                ret.push(key);
            }
        }
        return ret;
    };

    var ObjectGetDescriptor = function(o, key) {
        return {value: o[key]};
    };

    var ObjectDefineProperty = function (o, key, desc) {
        o[key] = desc.value;
        return o;
    };

    var ObjectFreeze = function (obj) {
        return obj;
    };

    var ObjectGetPrototypeOf = function (obj) {
        try {
            return Object(obj).constructor.prototype;
        }
        catch (e) {
            return proto;
        }
    };

    var ArrayIsArray = function (obj) {
        try {
            return str.call(obj) === "[object Array]";
        }
        catch(e) {
            return false;
        }
    };

    module.exports = {
        isArray: ArrayIsArray,
        keys: ObjectKeys,
        names: ObjectKeys,
        defineProperty: ObjectDefineProperty,
        getDescriptor: ObjectGetDescriptor,
        freeze: ObjectFreeze,
        getPrototypeOf: ObjectGetPrototypeOf,
        isES5: isES5,
        propertyIsWritable: function() {
            return true;
        }
    };
}

},{}],15:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseMap = Promise.map;

Promise.prototype.filter = function (fn, options) {
    return PromiseMap(this, fn, options, INTERNAL);
};

Promise.filter = function (promises, fn, options) {
    return PromiseMap(promises, fn, options, INTERNAL);
};
};

},{}],16:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, NEXT_FILTER, tryConvertToPromise) {
var util = _dereq_("./util.js");
var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
var isPrimitive = util.isPrimitive;
var thrower = util.thrower;

function returnThis() {
    return this;
}
function throwThis() {
    throw this;
}
function return$(r) {
    return function() {
        return r;
    };
}
function throw$(r) {
    return function() {
        throw r;
    };
}
function promisedFinally(ret, reasonOrValue, isFulfilled) {
    var then;
    if (wrapsPrimitiveReceiver && isPrimitive(reasonOrValue)) {
        then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
    } else {
        then = isFulfilled ? returnThis : throwThis;
    }
    return ret._then(then, thrower, undefined, reasonOrValue, undefined);
}

function finallyHandler(reasonOrValue) {
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundTo)
                    : handler();

    if (ret !== undefined) {
        var maybePromise = tryConvertToPromise(ret, promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            return promisedFinally(maybePromise, reasonOrValue,
                                    promise.isFulfilled());
        }
    }

    if (promise.isRejected()) {
        NEXT_FILTER.e = reasonOrValue;
        return NEXT_FILTER;
    } else {
        return reasonOrValue;
    }
}

function tapHandler(value) {
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundTo, value)
                    : handler(value);

    if (ret !== undefined) {
        var maybePromise = tryConvertToPromise(ret, promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            return promisedFinally(maybePromise, value, true);
        }
    }
    return value;
}

Promise.prototype._passThroughHandler = function (handler, isFinally) {
    if (typeof handler !== "function") return this.then();

    var promiseAndHandler = {
        promise: this,
        handler: handler
    };

    return this._then(
            isFinally ? finallyHandler : tapHandler,
            isFinally ? finallyHandler : undefined, undefined,
            promiseAndHandler, undefined);
};

Promise.prototype.lastly =
Promise.prototype["finally"] = function (handler) {
    return this._passThroughHandler(handler, true);
};

Promise.prototype.tap = function (handler) {
    return this._passThroughHandler(handler, false);
};
};

},{"./util.js":38}],17:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          apiRejection,
                          INTERNAL,
                          tryConvertToPromise) {
var errors = _dereq_("./errors.js");
var TypeError = errors.TypeError;
var util = _dereq_("./util.js");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
var yieldHandlers = [];

function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
    for (var i = 0; i < yieldHandlers.length; ++i) {
        traceParent._pushContext();
        var result = tryCatch(yieldHandlers[i])(value);
        traceParent._popContext();
        if (result === errorObj) {
            traceParent._pushContext();
            var ret = Promise.reject(errorObj.e);
            traceParent._popContext();
            return ret;
        }
        var maybePromise = tryConvertToPromise(result, traceParent);
        if (maybePromise instanceof Promise) return maybePromise;
    }
    return null;
}

function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
    var promise = this._promise = new Promise(INTERNAL);
    promise._captureStackTrace();
    this._stack = stack;
    this._generatorFunction = generatorFunction;
    this._receiver = receiver;
    this._generator = undefined;
    this._yieldHandlers = typeof yieldHandler === "function"
        ? [yieldHandler].concat(yieldHandlers)
        : yieldHandlers;
}

PromiseSpawn.prototype.promise = function () {
    return this._promise;
};

PromiseSpawn.prototype._run = function () {
    this._generator = this._generatorFunction.call(this._receiver);
    this._receiver =
        this._generatorFunction = undefined;
    this._next(undefined);
};

PromiseSpawn.prototype._continue = function (result) {
    if (result === errorObj) {
        return this._promise._rejectCallback(result.e, false, true);
    }

    var value = result.value;
    if (result.done === true) {
        this._promise._resolveCallback(value);
    } else {
        var maybePromise = tryConvertToPromise(value, this._promise);
        if (!(maybePromise instanceof Promise)) {
            maybePromise =
                promiseFromYieldHandler(maybePromise,
                                        this._yieldHandlers,
                                        this._promise);
            if (maybePromise === null) {
                this._throw(
                    new TypeError(
                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/4Y4pDk\u000a\u000a".replace("%s", value) +
                        "From coroutine:\u000a" +
                        this._stack.split("\n").slice(1, -7).join("\n")
                    )
                );
                return;
            }
        }
        maybePromise._then(
            this._next,
            this._throw,
            undefined,
            this,
            null
       );
    }
};

PromiseSpawn.prototype._throw = function (reason) {
    this._promise._attachExtraTrace(reason);
    this._promise._pushContext();
    var result = tryCatch(this._generator["throw"])
        .call(this._generator, reason);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._next = function (value) {
    this._promise._pushContext();
    var result = tryCatch(this._generator.next).call(this._generator, value);
    this._promise._popContext();
    this._continue(result);
};

Promise.coroutine = function (generatorFunction, options) {
    if (typeof generatorFunction !== "function") {
        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
    }
    var yieldHandler = Object(options).yieldHandler;
    var PromiseSpawn$ = PromiseSpawn;
    var stack = new Error().stack;
    return function () {
        var generator = generatorFunction.apply(this, arguments);
        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                      stack);
        spawn._generator = generator;
        spawn._next(undefined);
        return spawn.promise();
    };
};

Promise.coroutine.addYieldHandler = function(fn) {
    if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    yieldHandlers.push(fn);
};

Promise.spawn = function (generatorFunction) {
    if (typeof generatorFunction !== "function") {
        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
    }
    var spawn = new PromiseSpawn(generatorFunction, this);
    var ret = spawn.promise();
    spawn._run(Promise.spawn);
    return ret;
};
};

},{"./errors.js":13,"./util.js":38}],18:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
var util = _dereq_("./util.js");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!true) {
if (canEvaluate) {
    var thenCallback = function(i) {
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
    };

    var caller = function(count) {
        var values = [];
        for (var i = 1; i <= count; ++i) values.push("holder.p" + i);
        return new Function("holder", "                                      \n\
            'use strict';                                                    \n\
            var callback = holder.fn;                                        \n\
            return callback(values);                                         \n\
            ".replace(/values/g, values.join(", ")));
    };
    var thenCallbacks = [];
    var callers = [undefined];
    for (var i = 1; i <= 5; ++i) {
        thenCallbacks.push(thenCallback(i));
        callers.push(caller(i));
    }

    var Holder = function(total, fn) {
        this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
        this.fn = fn;
        this.total = total;
        this.now = 0;
    };

    Holder.prototype.callers = callers;
    Holder.prototype.checkFulfillment = function(promise) {
        var now = this.now;
        now++;
        var total = this.total;
        if (now >= total) {
            var handler = this.callers[total];
            promise._pushContext();
            var ret = tryCatch(handler)(this);
            promise._popContext();
            if (ret === errorObj) {
                promise._rejectCallback(ret.e, false, true);
            } else {
                promise._resolveCallback(ret);
            }
        } else {
            this.now = now;
        }
    };

    var reject = function (reason) {
        this._reject(reason);
    };
}
}

Promise.join = function () {
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") {
        fn = arguments[last];
        if (!true) {
            if (last < 6 && canEvaluate) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var holder = new Holder(last, fn);
                var callbacks = thenCallbacks;
                for (var i = 0; i < last; ++i) {
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) {
                        maybePromise = maybePromise._target();
                        if (maybePromise._isPending()) {
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                        } else if (maybePromise._isFulfilled()) {
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                        } else {
                            ret._reject(maybePromise._reason());
                        }
                    } else {
                        callbacks[i].call(ret, maybePromise, holder);
                    }
                }
                return ret;
            }
        }
    }
    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
};

};

},{"./util.js":38}],19:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL) {
var async = _dereq_("./async.js");
var util = _dereq_("./util.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var PENDING = {};
var EMPTY_ARRAY = [];

function MappingPromiseArray(promises, fn, limit, _filter) {
    this.constructor$(promises);
    this._promise._captureStackTrace();
    this._callback = fn;
    this._preservedValues = _filter === INTERNAL
        ? new Array(this.length())
        : null;
    this._limit = limit;
    this._inFlight = 0;
    this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
    async.invoke(init, this, undefined);
}
util.inherits(MappingPromiseArray, PromiseArray);
function init() {this._init$(undefined, -2);}

MappingPromiseArray.prototype._init = function () {};

MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var values = this._values;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var limit = this._limit;
    if (values[index] === PENDING) {
        values[index] = value;
        if (limit >= 1) {
            this._inFlight--;
            this._drainQueue();
            if (this._isResolved()) return;
        }
    } else {
        if (limit >= 1 && this._inFlight >= limit) {
            values[index] = value;
            this._queue.push(index);
            return;
        }
        if (preservedValues !== null) preservedValues[index] = value;

        var callback = this._callback;
        var receiver = this._promise._boundTo;
        this._promise._pushContext();
        var ret = tryCatch(callback).call(receiver, value, index, length);
        this._promise._popContext();
        if (ret === errorObj) return this._reject(ret.e);

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            if (maybePromise._isPending()) {
                if (limit >= 1) this._inFlight++;
                values[index] = PENDING;
                return maybePromise._proxyPromiseArray(this, index);
            } else if (maybePromise._isFulfilled()) {
                ret = maybePromise._value();
            } else {
                return this._reject(maybePromise._reason());
            }
        }
        values[index] = ret;
    }
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= length) {
        if (preservedValues !== null) {
            this._filter(values, preservedValues);
        } else {
            this._resolve(values);
        }

    }
};

MappingPromiseArray.prototype._drainQueue = function () {
    var queue = this._queue;
    var limit = this._limit;
    var values = this._values;
    while (queue.length > 0 && this._inFlight < limit) {
        if (this._isResolved()) return;
        var index = queue.pop();
        this._promiseFulfilled(values[index], index);
    }
};

MappingPromiseArray.prototype._filter = function (booleans, values) {
    var len = values.length;
    var ret = new Array(len);
    var j = 0;
    for (var i = 0; i < len; ++i) {
        if (booleans[i]) ret[j++] = values[i];
    }
    ret.length = j;
    this._resolve(ret);
};

MappingPromiseArray.prototype.preservedValues = function () {
    return this._preservedValues;
};

function map(promises, fn, options, _filter) {
    var limit = typeof options === "object" && options !== null
        ? options.concurrency
        : 0;
    limit = typeof limit === "number" &&
        isFinite(limit) && limit >= 1 ? limit : 0;
    return new MappingPromiseArray(promises, fn, limit, _filter);
}

Promise.prototype.map = function (fn, options) {
    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

    return map(this, fn, options, null).promise();
};

Promise.map = function (promises, fn, options, _filter) {
    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    return map(promises, fn, options, _filter).promise();
};


};

},{"./async.js":2,"./util.js":38}],20:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util.js");
var tryCatch = util.tryCatch;

Promise.method = function (fn) {
    if (typeof fn !== "function") {
        throw new Promise.TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    }
    return function () {
        var ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._pushContext();
        var value = tryCatch(fn).apply(this, arguments);
        ret._popContext();
        ret._resolveFromSyncValue(value);
        return ret;
    };
};

Promise.attempt = Promise["try"] = function (fn, args, ctx) {
    if (typeof fn !== "function") {
        return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    }
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._pushContext();
    var value = util.isArray(args)
        ? tryCatch(fn).apply(ctx, args)
        : tryCatch(fn).call(ctx, args);
    ret._popContext();
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.prototype._resolveFromSyncValue = function (value) {
    if (value === util.errorObj) {
        this._rejectCallback(value.e, false, true);
    } else {
        this._resolveCallback(value, true);
    }
};
};

},{"./util.js":38}],21:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var util = _dereq_("./util.js");
var async = _dereq_("./async.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function spreadAdapter(val, nodeback) {
    var promise = this;
    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
    var ret = tryCatch(nodeback).apply(promise._boundTo, [null].concat(val));
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

function successAdapter(val, nodeback) {
    var promise = this;
    var receiver = promise._boundTo;
    var ret = val === undefined
        ? tryCatch(nodeback).call(receiver, null)
        : tryCatch(nodeback).call(receiver, null, val);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}
function errorAdapter(reason, nodeback) {
    var promise = this;
    if (!reason) {
        var target = promise._target();
        var newReason = target._getCarriedStackTrace();
        newReason.cause = reason;
        reason = newReason;
    }
    var ret = tryCatch(nodeback).call(promise._boundTo, reason);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

Promise.prototype.asCallback = 
Promise.prototype.nodeify = function (nodeback, options) {
    if (typeof nodeback == "function") {
        var adapter = successAdapter;
        if (options !== undefined && Object(options).spread) {
            adapter = spreadAdapter;
        }
        this._then(
            adapter,
            errorAdapter,
            undefined,
            this,
            nodeback
        );
    }
    return this;
};
};

},{"./async.js":2,"./util.js":38}],22:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, PromiseArray) {
var util = _dereq_("./util.js");
var async = _dereq_("./async.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

Promise.prototype.progressed = function (handler) {
    return this._then(undefined, undefined, handler, undefined, undefined);
};

Promise.prototype._progress = function (progressValue) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._target()._progressUnchecked(progressValue);

};

Promise.prototype._progressHandlerAt = function (index) {
    return index === 0
        ? this._progressHandler0
        : this[(index << 2) + index - 5 + 2];
};

Promise.prototype._doProgressWith = function (progression) {
    var progressValue = progression.value;
    var handler = progression.handler;
    var promise = progression.promise;
    var receiver = progression.receiver;

    var ret = tryCatch(handler).call(receiver, progressValue);
    if (ret === errorObj) {
        if (ret.e != null &&
            ret.e.name !== "StopProgressPropagation") {
            var trace = util.canAttachTrace(ret.e)
                ? ret.e : new Error(util.toString(ret.e));
            promise._attachExtraTrace(trace);
            promise._progress(ret.e);
        }
    } else if (ret instanceof Promise) {
        ret._then(promise._progress, null, null, promise, undefined);
    } else {
        promise._progress(ret);
    }
};


Promise.prototype._progressUnchecked = function (progressValue) {
    var len = this._length();
    var progress = this._progress;
    for (var i = 0; i < len; i++) {
        var handler = this._progressHandlerAt(i);
        var promise = this._promiseAt(i);
        if (!(promise instanceof Promise)) {
            var receiver = this._receiverAt(i);
            if (typeof handler === "function") {
                handler.call(receiver, progressValue, promise);
            } else if (receiver instanceof PromiseArray &&
                       !receiver._isResolved()) {
                receiver._promiseProgressed(progressValue, promise);
            }
            continue;
        }

        if (typeof handler === "function") {
            async.invoke(this._doProgressWith, this, {
                handler: handler,
                promise: promise,
                receiver: this._receiverAt(i),
                value: progressValue
            });
        } else {
            async.invoke(progress, promise, progressValue);
        }
    }
};
};

},{"./async.js":2,"./util.js":38}],23:[function(_dereq_,module,exports){
"use strict";
module.exports = function() {
var makeSelfResolutionError = function () {
    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/LhFpo0\u000a");
};
var reflect = function() {
    return new Promise.PromiseInspection(this._target());
};
var apiRejection = function(msg) {
    return Promise.reject(new TypeError(msg));
};
var util = _dereq_("./util.js");
var async = _dereq_("./async.js");
var errors = _dereq_("./errors.js");
var TypeError = Promise.TypeError = errors.TypeError;
Promise.RangeError = errors.RangeError;
Promise.CancellationError = errors.CancellationError;
Promise.TimeoutError = errors.TimeoutError;
Promise.OperationalError = errors.OperationalError;
Promise.RejectionError = errors.OperationalError;
Promise.AggregateError = errors.AggregateError;
var INTERNAL = function(){};
var APPLY = {};
var NEXT_FILTER = {e: null};
var tryConvertToPromise = _dereq_("./thenables.js")(Promise, INTERNAL);
var PromiseArray =
    _dereq_("./promise_array.js")(Promise, INTERNAL,
                                    tryConvertToPromise, apiRejection);
var CapturedTrace = _dereq_("./captured_trace.js")();
var isDebugging = _dereq_("./debuggability.js")(Promise, CapturedTrace);
 /*jshint unused:false*/
var createContext =
    _dereq_("./context.js")(Promise, CapturedTrace, isDebugging);
var CatchFilter = _dereq_("./catch_filter.js")(NEXT_FILTER);
var PromiseResolver = _dereq_("./promise_resolver.js");
var nodebackForPromise = PromiseResolver._nodebackForPromise;
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
function Promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("the promise constructor requires a resolver function\u000a\u000a    See http://goo.gl/EC22Yn\u000a");
    }
    if (this.constructor !== Promise) {
        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/KsIlge\u000a");
    }
    this._bitField = 0;
    this._fulfillmentHandler0 = undefined;
    this._rejectionHandler0 = undefined;
    this._progressHandler0 = undefined;
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._settledValue = undefined;
    if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
    var len = arguments.length;
    if (len > 1) {
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (typeof item === "function") {
                catchInstances[j++] = item;
            } else {
                return Promise.reject(
                    new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a"));
            }
        }
        catchInstances.length = j;
        fn = arguments[i];
        var catchFilter = new CatchFilter(catchInstances, fn, this);
        return this._then(undefined, catchFilter.doFilter, undefined,
            catchFilter, undefined);
    }
    return this._then(undefined, fn, undefined, undefined, undefined);
};

Promise.prototype.reflect = function () {
    return this._then(reflect, reflect, undefined, this, undefined);
};

Promise.prototype.then = function (didFulfill, didReject, didProgress) {
    if (isDebugging() && arguments.length > 0 &&
        typeof didFulfill !== "function" &&
        typeof didReject !== "function") {
        var msg = ".then() only accepts functions but was passed: " +
                util.classString(didFulfill);
        if (arguments.length > 1) {
            msg += ", " + util.classString(didReject);
        }
        this._warn(msg);
    }
    return this._then(didFulfill, didReject, didProgress,
        undefined, undefined);
};

Promise.prototype.done = function (didFulfill, didReject, didProgress) {
    var promise = this._then(didFulfill, didReject, didProgress,
        undefined, undefined);
    promise._setIsFinal();
};

Promise.prototype.spread = function (didFulfill, didReject) {
    return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined);
};

Promise.prototype.isCancellable = function () {
    return !this.isResolved() &&
        this._cancellable();
};

Promise.prototype.toJSON = function () {
    var ret = {
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: undefined,
        rejectionReason: undefined
    };
    if (this.isFulfilled()) {
        ret.fulfillmentValue = this.value();
        ret.isFulfilled = true;
    } else if (this.isRejected()) {
        ret.rejectionReason = this.reason();
        ret.isRejected = true;
    }
    return ret;
};

Promise.prototype.all = function () {
    return new PromiseArray(this).promise();
};

Promise.prototype.error = function (fn) {
    return this.caught(util.originatesFromRejection, fn);
};

Promise.is = function (val) {
    return val instanceof Promise;
};

Promise.fromNode = function(fn) {
    var ret = new Promise(INTERNAL);
    var result = tryCatch(fn)(nodebackForPromise(ret));
    if (result === errorObj) {
        ret._rejectCallback(result.e, true, true);
    }
    return ret;
};

Promise.all = function (promises) {
    return new PromiseArray(promises).promise();
};

Promise.defer = Promise.pending = function () {
    var promise = new Promise(INTERNAL);
    return new PromiseResolver(promise);
};

Promise.cast = function (obj) {
    var ret = tryConvertToPromise(obj);
    if (!(ret instanceof Promise)) {
        var val = ret;
        ret = new Promise(INTERNAL);
        ret._fulfillUnchecked(val);
    }
    return ret;
};

Promise.resolve = Promise.fulfilled = Promise.cast;

Promise.reject = Promise.rejected = function (reason) {
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._rejectCallback(reason, true);
    return ret;
};

Promise.setScheduler = function(fn) {
    if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    var prev = async._schedule;
    async._schedule = fn;
    return prev;
};

Promise.prototype._then = function (
    didFulfill,
    didReject,
    didProgress,
    receiver,
    internalData
) {
    var haveInternalData = internalData !== undefined;
    var ret = haveInternalData ? internalData : new Promise(INTERNAL);

    if (!haveInternalData) {
        ret._propagateFrom(this, 4 | 1);
        ret._captureStackTrace();
    }

    var target = this._target();
    if (target !== this) {
        if (receiver === undefined) receiver = this._boundTo;
        if (!haveInternalData) ret._setIsMigrated();
    }

    var callbackIndex =
        target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver);

    if (target._isResolved() && !target._isSettlePromisesQueued()) {
        async.invoke(
            target._settlePromiseAtPostResolution, target, callbackIndex);
    }

    return ret;
};

Promise.prototype._settlePromiseAtPostResolution = function (index) {
    if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
    this._settlePromiseAt(index);
};

Promise.prototype._length = function () {
    return this._bitField & 131071;
};

Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
    return (this._bitField & 939524096) > 0;
};

Promise.prototype._isFollowing = function () {
    return (this._bitField & 536870912) === 536870912;
};

Promise.prototype._setLength = function (len) {
    this._bitField = (this._bitField & -131072) |
        (len & 131071);
};

Promise.prototype._setFulfilled = function () {
    this._bitField = this._bitField | 268435456;
};

Promise.prototype._setRejected = function () {
    this._bitField = this._bitField | 134217728;
};

Promise.prototype._setFollowing = function () {
    this._bitField = this._bitField | 536870912;
};

Promise.prototype._setIsFinal = function () {
    this._bitField = this._bitField | 33554432;
};

Promise.prototype._isFinal = function () {
    return (this._bitField & 33554432) > 0;
};

Promise.prototype._cancellable = function () {
    return (this._bitField & 67108864) > 0;
};

Promise.prototype._setCancellable = function () {
    this._bitField = this._bitField | 67108864;
};

Promise.prototype._unsetCancellable = function () {
    this._bitField = this._bitField & (~67108864);
};

Promise.prototype._setIsMigrated = function () {
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._unsetIsMigrated = function () {
    this._bitField = this._bitField & (~4194304);
};

Promise.prototype._isMigrated = function () {
    return (this._bitField & 4194304) > 0;
};

Promise.prototype._receiverAt = function (index) {
    var ret = index === 0
        ? this._receiver0
        : this[
            index * 5 - 5 + 4];
    if (ret === undefined && this._isBound()) {
        return this._boundTo;
    }
    return ret;
};

Promise.prototype._promiseAt = function (index) {
    return index === 0
        ? this._promise0
        : this[index * 5 - 5 + 3];
};

Promise.prototype._fulfillmentHandlerAt = function (index) {
    return index === 0
        ? this._fulfillmentHandler0
        : this[index * 5 - 5 + 0];
};

Promise.prototype._rejectionHandlerAt = function (index) {
    return index === 0
        ? this._rejectionHandler0
        : this[index * 5 - 5 + 1];
};

Promise.prototype._migrateCallbacks = function (follower, index) {
    var fulfill = follower._fulfillmentHandlerAt(index);
    var reject = follower._rejectionHandlerAt(index);
    var progress = follower._progressHandlerAt(index);
    var promise = follower._promiseAt(index);
    var receiver = follower._receiverAt(index);
    if (promise instanceof Promise) promise._setIsMigrated();
    this._addCallbacks(fulfill, reject, progress, promise, receiver);
};

Promise.prototype._addCallbacks = function (
    fulfill,
    reject,
    progress,
    promise,
    receiver
) {
    var index = this._length();

    if (index >= 131071 - 5) {
        index = 0;
        this._setLength(0);
    }

    if (index === 0) {
        this._promise0 = promise;
        if (receiver !== undefined) this._receiver0 = receiver;
        if (typeof fulfill === "function" && !this._isCarryingStackTrace())
            this._fulfillmentHandler0 = fulfill;
        if (typeof reject === "function") this._rejectionHandler0 = reject;
        if (typeof progress === "function") this._progressHandler0 = progress;
    } else {
        var base = index * 5 - 5;
        this[base + 3] = promise;
        this[base + 4] = receiver;
        if (typeof fulfill === "function")
            this[base + 0] = fulfill;
        if (typeof reject === "function")
            this[base + 1] = reject;
        if (typeof progress === "function")
            this[base + 2] = progress;
    }
    this._setLength(index + 1);
    return index;
};

Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
    var index = this._length();

    if (index >= 131071 - 5) {
        index = 0;
        this._setLength(0);
    }
    if (index === 0) {
        this._promise0 = promiseSlotValue;
        this._receiver0 = receiver;
    } else {
        var base = index * 5 - 5;
        this[base + 3] = promiseSlotValue;
        this[base + 4] = receiver;
    }
    this._setLength(index + 1);
};

Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
    this._setProxyHandlers(promiseArray, index);
};

Promise.prototype._resolveCallback = function(value, shouldBind) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    if (value === this)
        return this._rejectCallback(makeSelfResolutionError(), false, true);
    var maybePromise = tryConvertToPromise(value, this);
    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

    var propagationFlags = 1 | (shouldBind ? 4 : 0);
    this._propagateFrom(maybePromise, propagationFlags);
    var promise = maybePromise._target();
    if (promise._isPending()) {
        var len = this._length();
        for (var i = 0; i < len; ++i) {
            promise._migrateCallbacks(this, i);
        }
        this._setFollowing();
        this._setLength(0);
        this._setFollowee(promise);
    } else if (promise._isFulfilled()) {
        this._fulfillUnchecked(promise._value());
    } else {
        this._rejectUnchecked(promise._reason(),
            promise._getCarriedStackTrace());
    }
};

Promise.prototype._rejectCallback =
function(reason, synchronous, shouldNotMarkOriginatingFromRejection) {
    if (!shouldNotMarkOriginatingFromRejection) {
        util.markAsOriginatingFromRejection(reason);
    }
    var trace = util.ensureErrorObject(reason);
    var hasStack = trace === reason;
    this._attachExtraTrace(trace, synchronous ? hasStack : false);
    this._reject(reason, hasStack ? undefined : trace);
};

Promise.prototype._resolveFromResolver = function (resolver) {
    var promise = this;
    this._captureStackTrace();
    this._pushContext();
    var synchronous = true;
    var r = tryCatch(resolver)(function(value) {
        if (promise === null) return;
        promise._resolveCallback(value);
        promise = null;
    }, function (reason) {
        if (promise === null) return;
        promise._rejectCallback(reason, synchronous);
        promise = null;
    });
    synchronous = false;
    this._popContext();

    if (r !== undefined && r === errorObj && promise !== null) {
        promise._rejectCallback(r.e, true, true);
        promise = null;
    }
};

Promise.prototype._settlePromiseFromHandler = function (
    handler, receiver, value, promise
) {
    if (promise._isRejected()) return;
    promise._pushContext();
    var x;
    if (receiver === APPLY && !this._isRejected()) {
        x = tryCatch(handler).apply(this._boundTo, value);
    } else {
        x = tryCatch(handler).call(receiver, value);
    }
    promise._popContext();

    if (x === errorObj || x === promise || x === NEXT_FILTER) {
        var err = x === promise ? makeSelfResolutionError() : x.e;
        promise._rejectCallback(err, false, true);
    } else {
        promise._resolveCallback(x);
    }
};

Promise.prototype._target = function() {
    var ret = this;
    while (ret._isFollowing()) ret = ret._followee();
    return ret;
};

Promise.prototype._followee = function() {
    return this._rejectionHandler0;
};

Promise.prototype._setFollowee = function(promise) {
    this._rejectionHandler0 = promise;
};

Promise.prototype._cleanValues = function () {
    if (this._cancellable()) {
        this._cancellationParent = undefined;
    }
};

Promise.prototype._propagateFrom = function (parent, flags) {
    if ((flags & 1) > 0 && parent._cancellable()) {
        this._setCancellable();
        this._cancellationParent = parent;
    }
    if ((flags & 4) > 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
};

Promise.prototype._fulfill = function (value) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._fulfillUnchecked(value);
};

Promise.prototype._reject = function (reason, carriedStackTrace) {
    if (this._isFollowingOrFulfilledOrRejected()) return;
    this._rejectUnchecked(reason, carriedStackTrace);
};

Promise.prototype._settlePromiseAt = function (index) {
    var promise = this._promiseAt(index);
    var isPromise = promise instanceof Promise;

    if (isPromise && promise._isMigrated()) {
        promise._unsetIsMigrated();
        return async.invoke(this._settlePromiseAt, this, index);
    }
    var handler = this._isFulfilled()
        ? this._fulfillmentHandlerAt(index)
        : this._rejectionHandlerAt(index);

    var carriedStackTrace =
        this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
    var value = this._settledValue;
    var receiver = this._receiverAt(index);


    this._clearCallbackDataAtIndex(index);

    if (typeof handler === "function") {
        if (!isPromise) {
            handler.call(receiver, value, promise);
        } else {
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (receiver instanceof PromiseArray) {
        if (!receiver._isResolved()) {
            if (this._isFulfilled()) {
                receiver._promiseFulfilled(value, promise);
            }
            else {
                receiver._promiseRejected(value, promise);
            }
        }
    } else if (isPromise) {
        if (this._isFulfilled()) {
            promise._fulfill(value);
        } else {
            promise._reject(value, carriedStackTrace);
        }
    }

    if (index >= 4 && (index & 31) === 4)
        async.invokeLater(this._setLength, this, 0);
};

Promise.prototype._clearCallbackDataAtIndex = function(index) {
    if (index === 0) {
        if (!this._isCarryingStackTrace()) {
            this._fulfillmentHandler0 = undefined;
        }
        this._rejectionHandler0 =
        this._progressHandler0 =
        this._receiver0 =
        this._promise0 = undefined;
    } else {
        var base = index * 5 - 5;
        this[base + 3] =
        this[base + 4] =
        this[base + 0] =
        this[base + 1] =
        this[base + 2] = undefined;
    }
};

Promise.prototype._isSettlePromisesQueued = function () {
    return (this._bitField &
            -1073741824) === -1073741824;
};

Promise.prototype._setSettlePromisesQueued = function () {
    this._bitField = this._bitField | -1073741824;
};

Promise.prototype._unsetSettlePromisesQueued = function () {
    this._bitField = this._bitField & (~-1073741824);
};

Promise.prototype._queueSettlePromises = function() {
    async.settlePromises(this);
    this._setSettlePromisesQueued();
};

Promise.prototype._fulfillUnchecked = function (value) {
    if (value === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err, undefined);
    }
    this._setFulfilled();
    this._settledValue = value;
    this._cleanValues();

    if (this._length() > 0) {
        this._queueSettlePromises();
    }
};

Promise.prototype._rejectUncheckedCheckError = function (reason) {
    var trace = util.ensureErrorObject(reason);
    this._rejectUnchecked(reason, trace === reason ? undefined : trace);
};

Promise.prototype._rejectUnchecked = function (reason, trace) {
    if (reason === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._rejectUnchecked(err);
    }
    this._setRejected();
    this._settledValue = reason;
    this._cleanValues();

    if (this._isFinal()) {
        async.throwLater(function(e) {
            if ("stack" in e) {
                async.invokeFirst(
                    CapturedTrace.unhandledRejection, undefined, e);
            }
            throw e;
        }, trace === undefined ? reason : trace);
        return;
    }

    if (trace !== undefined && trace !== reason) {
        this._setCarriedStackTrace(trace);
    }

    if (this._length() > 0) {
        this._queueSettlePromises();
    } else {
        this._ensurePossibleRejectionHandled();
    }
};

Promise.prototype._settlePromises = function () {
    this._unsetSettlePromisesQueued();
    var len = this._length();
    for (var i = 0; i < len; i++) {
        this._settlePromiseAt(i);
    }
};

Promise._makeSelfResolutionError = makeSelfResolutionError;
_dereq_("./progress.js")(Promise, PromiseArray);
_dereq_("./method.js")(Promise, INTERNAL, tryConvertToPromise, apiRejection);
_dereq_("./bind.js")(Promise, INTERNAL, tryConvertToPromise);
_dereq_("./finally.js")(Promise, NEXT_FILTER, tryConvertToPromise);
_dereq_("./direct_resolve.js")(Promise);
_dereq_("./synchronous_inspection.js")(Promise);
_dereq_("./join.js")(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
Promise.Promise = Promise;
_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
_dereq_('./cancel.js')(Promise);
_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
_dereq_('./nodeify.js')(Promise);
_dereq_('./call_get.js')(Promise);
_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
_dereq_('./settle.js')(Promise, PromiseArray);
_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
_dereq_('./promisify.js')(Promise, INTERNAL);
_dereq_('./any.js')(Promise);
_dereq_('./each.js')(Promise, INTERNAL);
_dereq_('./timers.js')(Promise, INTERNAL);
_dereq_('./filter.js')(Promise, INTERNAL);
                                                         
    util.toFastProperties(Promise);                                          
    util.toFastProperties(Promise.prototype);                                
    function fillTypes(value) {                                              
        var p = new Promise(INTERNAL);                                       
        p._fulfillmentHandler0 = value;                                      
        p._rejectionHandler0 = value;                                        
        p._progressHandler0 = value;                                         
        p._promise0 = value;                                                 
        p._receiver0 = value;                                                
        p._settledValue = value;                                             
    }                                                                        
    // Complete slack tracking, opt out of field-type tracking and           
    // stabilize map                                                         
    fillTypes({a: 1});                                                       
    fillTypes({b: 2});                                                       
    fillTypes({c: 3});                                                       
    fillTypes(1);                                                            
    fillTypes(function(){});                                                 
    fillTypes(undefined);                                                    
    fillTypes(false);                                                        
    fillTypes(new Promise(INTERNAL));                                        
    CapturedTrace.setBounds(async.firstLineError, util.lastLineError);       
    return Promise;                                                          

};

},{"./any.js":1,"./async.js":2,"./bind.js":3,"./call_get.js":5,"./cancel.js":6,"./captured_trace.js":7,"./catch_filter.js":8,"./context.js":9,"./debuggability.js":10,"./direct_resolve.js":11,"./each.js":12,"./errors.js":13,"./filter.js":15,"./finally.js":16,"./generators.js":17,"./join.js":18,"./map.js":19,"./method.js":20,"./nodeify.js":21,"./progress.js":22,"./promise_array.js":24,"./promise_resolver.js":25,"./promisify.js":26,"./props.js":27,"./race.js":29,"./reduce.js":30,"./settle.js":32,"./some.js":33,"./synchronous_inspection.js":34,"./thenables.js":35,"./timers.js":36,"./using.js":37,"./util.js":38}],24:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise,
    apiRejection) {
var util = _dereq_("./util.js");
var isArray = util.isArray;

function toResolutionValue(val) {
    switch(val) {
    case -2: return [];
    case -3: return {};
    }
}

function PromiseArray(values) {
    var promise = this._promise = new Promise(INTERNAL);
    var parent;
    if (values instanceof Promise) {
        parent = values;
        promise._propagateFrom(parent, 1 | 4);
    }
    this._values = values;
    this._length = 0;
    this._totalResolved = 0;
    this._init(undefined, -2);
}
PromiseArray.prototype.length = function () {
    return this._length;
};

PromiseArray.prototype.promise = function () {
    return this._promise;
};

PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
    var values = tryConvertToPromise(this._values, this._promise);
    if (values instanceof Promise) {
        values = values._target();
        this._values = values;
        if (values._isFulfilled()) {
            values = values._value();
            if (!isArray(values)) {
                var err = new Promise.TypeError("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
                this.__hardReject__(err);
                return;
            }
        } else if (values._isPending()) {
            values._then(
                init,
                this._reject,
                undefined,
                this,
                resolveValueIfEmpty
           );
            return;
        } else {
            this._reject(values._reason());
            return;
        }
    } else if (!isArray(values)) {
        this._promise._reject(apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a")._reason());
        return;
    }

    if (values.length === 0) {
        if (resolveValueIfEmpty === -5) {
            this._resolveEmptyArray();
        }
        else {
            this._resolve(toResolutionValue(resolveValueIfEmpty));
        }
        return;
    }
    var len = this.getActualLength(values.length);
    this._length = len;
    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
    var promise = this._promise;
    for (var i = 0; i < len; ++i) {
        var isResolved = this._isResolved();
        var maybePromise = tryConvertToPromise(values[i], promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            if (isResolved) {
                maybePromise._unsetRejectionIsUnhandled();
            } else if (maybePromise._isPending()) {
                maybePromise._proxyPromiseArray(this, i);
            } else if (maybePromise._isFulfilled()) {
                this._promiseFulfilled(maybePromise._value(), i);
            } else {
                this._promiseRejected(maybePromise._reason(), i);
            }
        } else if (!isResolved) {
            this._promiseFulfilled(maybePromise, i);
        }
    }
};

PromiseArray.prototype._isResolved = function () {
    return this._values === null;
};

PromiseArray.prototype._resolve = function (value) {
    this._values = null;
    this._promise._fulfill(value);
};

PromiseArray.prototype.__hardReject__ =
PromiseArray.prototype._reject = function (reason) {
    this._values = null;
    this._promise._rejectCallback(reason, false, true);
};

PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
    this._promise._progress({
        index: index,
        value: progressValue
    });
};


PromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
    }
};

PromiseArray.prototype._promiseRejected = function (reason, index) {
    this._totalResolved++;
    this._reject(reason);
};

PromiseArray.prototype.shouldCopyValues = function () {
    return true;
};

PromiseArray.prototype.getActualLength = function (len) {
    return len;
};

return PromiseArray;
};

},{"./util.js":38}],25:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util.js");
var maybeWrapAsError = util.maybeWrapAsError;
var errors = _dereq_("./errors.js");
var TimeoutError = errors.TimeoutError;
var OperationalError = errors.OperationalError;
var haveGetters = util.haveGetters;
var es5 = _dereq_("./es5.js");

function isUntypedError(obj) {
    return obj instanceof Error &&
        es5.getPrototypeOf(obj) === Error.prototype;
}

var rErrorKey = /^(?:name|message|stack|cause)$/;
function wrapAsOperationalError(obj) {
    var ret;
    if (isUntypedError(obj)) {
        ret = new OperationalError(obj);
        ret.name = obj.name;
        ret.message = obj.message;
        ret.stack = obj.stack;
        var keys = es5.keys(obj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!rErrorKey.test(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    util.markAsOriginatingFromRejection(obj);
    return obj;
}

function nodebackForPromise(promise) {
    return function(err, value) {
        if (promise === null) return;

        if (err) {
            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
        } else if (arguments.length > 2) {
            var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
            promise._fulfill(args);
        } else {
            promise._fulfill(value);
        }

        promise = null;
    };
}


var PromiseResolver;
if (!haveGetters) {
    PromiseResolver = function (promise) {
        this.promise = promise;
        this.asCallback = nodebackForPromise(promise);
        this.callback = this.asCallback;
    };
}
else {
    PromiseResolver = function (promise) {
        this.promise = promise;
    };
}
if (haveGetters) {
    var prop = {
        get: function() {
            return nodebackForPromise(this.promise);
        }
    };
    es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
    es5.defineProperty(PromiseResolver.prototype, "callback", prop);
}

PromiseResolver._nodebackForPromise = nodebackForPromise;

PromiseResolver.prototype.toString = function () {
    return "[object PromiseResolver]";
};

PromiseResolver.prototype.resolve =
PromiseResolver.prototype.fulfill = function (value) {
    if (!(this instanceof PromiseResolver)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
    }
    this.promise._resolveCallback(value);
};

PromiseResolver.prototype.reject = function (reason) {
    if (!(this instanceof PromiseResolver)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
    }
    this.promise._rejectCallback(reason);
};

PromiseResolver.prototype.progress = function (value) {
    if (!(this instanceof PromiseResolver)) {
        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
    }
    this.promise._progress(value);
};

PromiseResolver.prototype.cancel = function (err) {
    this.promise.cancel(err);
};

PromiseResolver.prototype.timeout = function () {
    this.reject(new TimeoutError("timeout"));
};

PromiseResolver.prototype.isResolved = function () {
    return this.promise.isResolved();
};

PromiseResolver.prototype.toJSON = function () {
    return this.promise.toJSON();
};

module.exports = PromiseResolver;

},{"./errors.js":13,"./es5.js":14,"./util.js":38}],26:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var THIS = {};
var util = _dereq_("./util.js");
var nodebackForPromise = _dereq_("./promise_resolver.js")
    ._nodebackForPromise;
var withAppended = util.withAppended;
var maybeWrapAsError = util.maybeWrapAsError;
var canEvaluate = util.canEvaluate;
var TypeError = _dereq_("./errors").TypeError;
var defaultSuffix = "Async";
var defaultPromisified = {__isPromisified__: true};
var noCopyPropsPattern =
    /^(?:length|name|arguments|caller|callee|prototype|__isPromisified__)$/;
var defaultFilter = function(name, func) {
    return util.isIdentifier(name) &&
        name.charAt(0) !== "_" &&
        !util.isClass(func);
};

function propsFilter(key) {
    return !noCopyPropsPattern.test(key);
}

function isPromisified(fn) {
    try {
        return fn.__isPromisified__ === true;
    }
    catch (e) {
        return false;
    }
}

function hasPromisified(obj, key, suffix) {
    var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                            defaultPromisified);
    return val ? isPromisified(val) : false;
}
function checkValid(ret, suffix, suffixRegexp) {
    for (var i = 0; i < ret.length; i += 2) {
        var key = ret[i];
        if (suffixRegexp.test(key)) {
            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
            for (var j = 0; j < ret.length; j += 2) {
                if (ret[j] === keyWithoutAsyncSuffix) {
                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/iWrZbw\u000a"
                        .replace("%s", suffix));
                }
            }
        }
    }
}

function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
    var keys = util.inheritedDataKeys(obj);
    var ret = [];
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var value = obj[key];
        var passesDefaultFilter = filter === defaultFilter
            ? true : defaultFilter(key, value, obj);
        if (typeof value === "function" &&
            !isPromisified(value) &&
            !hasPromisified(obj, key, suffix) &&
            filter(key, value, obj, passesDefaultFilter)) {
            ret.push(key, value);
        }
    }
    checkValid(ret, suffix, suffixRegexp);
    return ret;
}

var escapeIdentRegex = function(str) {
    return str.replace(/([$])/, "\\$");
};

var makeNodePromisifiedEval;
if (!true) {
var switchCaseArgumentOrder = function(likelyArgumentCount) {
    var ret = [likelyArgumentCount];
    var min = Math.max(0, likelyArgumentCount - 1 - 3);
    for(var i = likelyArgumentCount - 1; i >= min; --i) {
        ret.push(i);
    }
    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
        ret.push(i);
    }
    return ret;
};

var argumentSequence = function(argumentCount) {
    return util.filledRange(argumentCount, "_arg", "");
};

var parameterDeclaration = function(parameterCount) {
    return util.filledRange(
        Math.max(parameterCount, 3), "_arg", "");
};

var parameterCount = function(fn) {
    if (typeof fn.length === "number") {
        return Math.max(Math.min(fn.length, 1023 + 1), 0);
    }
    return 0;
};

makeNodePromisifiedEval =
function(callback, receiver, originalName, fn) {
    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

    function generateCallForArgumentCount(count) {
        var args = argumentSequence(count).join(", ");
        var comma = count > 0 ? ", " : "";
        var ret;
        if (shouldProxyThis) {
            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
        } else {
            ret = receiver === undefined
                ? "ret = callback({{args}}, nodeback); break;\n"
                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
        }
        return ret.replace("{{args}}", args).replace(", ", comma);
    }

    function generateArgumentSwitchCase() {
        var ret = "";
        for (var i = 0; i < argumentOrder.length; ++i) {
            ret += "case " + argumentOrder[i] +":" +
                generateCallForArgumentCount(argumentOrder[i]);
        }

        ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                ? "ret = callback.apply(this, args);\n"
                                : "ret = callback.apply(receiver, args);\n"));
        return ret;
    }

    var getFunctionCode = typeof callback === "string"
                                ? ("this != null ? this['"+callback+"'] : fn")
                                : "fn";

    return new Function("Promise",
                        "fn",
                        "receiver",
                        "withAppended",
                        "maybeWrapAsError",
                        "nodebackForPromise",
                        "tryCatch",
                        "errorObj",
                        "INTERNAL","'use strict';                            \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise);                      \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            return promise;                                                  \n\
        };                                                                   \n\
        ret.__isPromisified__ = true;                                        \n\
        return ret;                                                          \n\
        "
        .replace("Parameters", parameterDeclaration(newParameterCount))
        .replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
        .replace("[GetFunctionCode]", getFunctionCode))(
            Promise,
            fn,
            receiver,
            withAppended,
            maybeWrapAsError,
            nodebackForPromise,
            util.tryCatch,
            util.errorObj,
            INTERNAL
        );
};
}

function makeNodePromisifiedClosure(callback, receiver, _, fn) {
    var defaultThis = (function() {return this;})();
    var method = callback;
    if (typeof method === "string") {
        callback = fn;
    }
    function promisified() {
        var _receiver = receiver;
        if (receiver === THIS) _receiver = this;
        var promise = new Promise(INTERNAL);
        promise._captureStackTrace();
        var cb = typeof method === "string" && this !== defaultThis
            ? this[method] : callback;
        var fn = nodebackForPromise(promise);
        try {
            cb.apply(_receiver, withAppended(arguments, fn));
        } catch(e) {
            promise._rejectCallback(maybeWrapAsError(e), true, true);
        }
        return promise;
    }
    promisified.__isPromisified__ = true;
    return promisified;
}

var makeNodePromisified = canEvaluate
    ? makeNodePromisifiedEval
    : makeNodePromisifiedClosure;

function promisifyAll(obj, suffix, filter, promisifier) {
    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
    var methods =
        promisifiableMethods(obj, suffix, suffixRegexp, filter);

    for (var i = 0, len = methods.length; i < len; i+= 2) {
        var key = methods[i];
        var fn = methods[i+1];
        var promisifiedKey = key + suffix;
        obj[promisifiedKey] = promisifier === makeNodePromisified
                ? makeNodePromisified(key, THIS, key, fn, suffix)
                : promisifier(fn, function() {
                    return makeNodePromisified(key, THIS, key, fn, suffix);
                });
    }
    util.toFastProperties(obj);
    return obj;
}

function promisify(callback, receiver) {
    return makeNodePromisified(callback, receiver, undefined, callback);
}

Promise.promisify = function (fn, receiver) {
    if (typeof fn !== "function") {
        throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    }
    if (isPromisified(fn)) {
        return fn;
    }
    var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
    util.copyDescriptors(fn, ret, propsFilter);
    return ret;
};

Promise.promisifyAll = function (target, options) {
    if (typeof target !== "function" && typeof target !== "object") {
        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/9ITlV0\u000a");
    }
    options = Object(options);
    var suffix = options.suffix;
    if (typeof suffix !== "string") suffix = defaultSuffix;
    var filter = options.filter;
    if (typeof filter !== "function") filter = defaultFilter;
    var promisifier = options.promisifier;
    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

    if (!util.isIdentifier(suffix)) {
        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/8FZo5V\u000a");
    }

    var keys = util.inheritedDataKeys(target);
    for (var i = 0; i < keys.length; ++i) {
        var value = target[keys[i]];
        if (keys[i] !== "constructor" &&
            util.isClass(value)) {
            promisifyAll(value.prototype, suffix, filter, promisifier);
            promisifyAll(value, suffix, filter, promisifier);
        }
    }

    return promisifyAll(target, suffix, filter, promisifier);
};
};


},{"./errors":13,"./promise_resolver.js":25,"./util.js":38}],27:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util.js");
var isObject = util.isObject;
var es5 = _dereq_("./es5.js");

function PropertiesPromiseArray(obj) {
    var keys = es5.keys(obj);
    var len = keys.length;
    var values = new Array(len * 2);
    for (var i = 0; i < len; ++i) {
        var key = keys[i];
        values[i] = obj[key];
        values[i + len] = key;
    }
    this.constructor$(values);
}
util.inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init = function () {
    this._init$(undefined, -3) ;
};

PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        var val = {};
        var keyOffset = this.length();
        for (var i = 0, len = this.length(); i < len; ++i) {
            val[this._values[i + keyOffset]] = this._values[i];
        }
        this._resolve(val);
    }
};

PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
    this._promise._progress({
        key: this._values[index + this.length()],
        value: value
    });
};

PropertiesPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

PropertiesPromiseArray.prototype.getActualLength = function (len) {
    return len >> 1;
};

function props(promises) {
    var ret;
    var castValue = tryConvertToPromise(promises);

    if (!isObject(castValue)) {
        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
    } else if (castValue instanceof Promise) {
        ret = castValue._then(
            Promise.props, undefined, undefined, undefined, undefined);
    } else {
        ret = new PropertiesPromiseArray(castValue).promise();
    }

    if (castValue instanceof Promise) {
        ret._propagateFrom(castValue, 4);
    }
    return ret;
}

Promise.prototype.props = function () {
    return props(this);
};

Promise.props = function (promises) {
    return props(promises);
};
};

},{"./es5.js":14,"./util.js":38}],28:[function(_dereq_,module,exports){
"use strict";
function arrayMove(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
    }
}

function Queue(capacity) {
    this._capacity = capacity;
    this._length = 0;
    this._front = 0;
}

Queue.prototype._willBeOverCapacity = function (size) {
    return this._capacity < size;
};

Queue.prototype._pushOne = function (arg) {
    var length = this.length();
    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = arg;
    this._length = length + 1;
};

Queue.prototype._unshiftOne = function(value) {
    var capacity = this._capacity;
    this._checkCapacity(this.length() + 1);
    var front = this._front;
    var i = (((( front - 1 ) &
                    ( capacity - 1) ) ^ capacity ) - capacity );
    this[i] = value;
    this._front = i;
    this._length = this.length() + 1;
};

Queue.prototype.unshift = function(fn, receiver, arg) {
    this._unshiftOne(arg);
    this._unshiftOne(receiver);
    this._unshiftOne(fn);
};

Queue.prototype.push = function (fn, receiver, arg) {
    var length = this.length() + 3;
    if (this._willBeOverCapacity(length)) {
        this._pushOne(fn);
        this._pushOne(receiver);
        this._pushOne(arg);
        return;
    }
    var j = this._front + length - 3;
    this._checkCapacity(length);
    var wrapMask = this._capacity - 1;
    this[(j + 0) & wrapMask] = fn;
    this[(j + 1) & wrapMask] = receiver;
    this[(j + 2) & wrapMask] = arg;
    this._length = length;
};

Queue.prototype.shift = function () {
    var front = this._front,
        ret = this[front];

    this[front] = undefined;
    this._front = (front + 1) & (this._capacity - 1);
    this._length--;
    return ret;
};

Queue.prototype.length = function () {
    return this._length;
};

Queue.prototype._checkCapacity = function (size) {
    if (this._capacity < size) {
        this._resizeTo(this._capacity << 1);
    }
};

Queue.prototype._resizeTo = function (capacity) {
    var oldCapacity = this._capacity;
    this._capacity = capacity;
    var front = this._front;
    var length = this._length;
    var moveItemsCount = (front + length) & (oldCapacity - 1);
    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
};

module.exports = Queue;

},{}],29:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
var isArray = _dereq_("./util.js").isArray;

var raceLater = function (promise) {
    return promise.then(function(array) {
        return race(array, promise);
    });
};

function race(promises, parent) {
    var maybePromise = tryConvertToPromise(promises);

    if (maybePromise instanceof Promise) {
        return raceLater(maybePromise);
    } else if (!isArray(promises)) {
        return apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
    }

    var ret = new Promise(INTERNAL);
    if (parent !== undefined) {
        ret._propagateFrom(parent, 4 | 1);
    }
    var fulfill = ret._fulfill;
    var reject = ret._reject;
    for (var i = 0, len = promises.length; i < len; ++i) {
        var val = promises[i];

        if (val === undefined && !(i in promises)) {
            continue;
        }

        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
    }
    return ret;
}

Promise.race = function (promises) {
    return race(promises, undefined);
};

Promise.prototype.race = function () {
    return race(this, undefined);
};

};

},{"./util.js":38}],30:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL) {
var async = _dereq_("./async.js");
var util = _dereq_("./util.js");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
function ReductionPromiseArray(promises, fn, accum, _each) {
    this.constructor$(promises);
    this._promise._captureStackTrace();
    this._preservedValues = _each === INTERNAL ? [] : null;
    this._zerothIsAccum = (accum === undefined);
    this._gotAccum = false;
    this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
    this._valuesPhase = undefined;
    var maybePromise = tryConvertToPromise(accum, this._promise);
    var rejected = false;
    var isPromise = maybePromise instanceof Promise;
    if (isPromise) {
        maybePromise = maybePromise._target();
        if (maybePromise._isPending()) {
            maybePromise._proxyPromiseArray(this, -1);
        } else if (maybePromise._isFulfilled()) {
            accum = maybePromise._value();
            this._gotAccum = true;
        } else {
            this._reject(maybePromise._reason());
            rejected = true;
        }
    }
    if (!(isPromise || this._zerothIsAccum)) this._gotAccum = true;
    this._callback = fn;
    this._accum = accum;
    if (!rejected) async.invoke(init, this, undefined);
}
function init() {
    this._init$(undefined, -5);
}
util.inherits(ReductionPromiseArray, PromiseArray);

ReductionPromiseArray.prototype._init = function () {};

ReductionPromiseArray.prototype._resolveEmptyArray = function () {
    if (this._gotAccum || this._zerothIsAccum) {
        this._resolve(this._preservedValues !== null
                        ? [] : this._accum);
    }
};

ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var values = this._values;
    values[index] = value;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var isEach = preservedValues !== null;
    var gotAccum = this._gotAccum;
    var valuesPhase = this._valuesPhase;
    var valuesPhaseIndex;
    if (!valuesPhase) {
        valuesPhase = this._valuesPhase = new Array(length);
        for (valuesPhaseIndex=0; valuesPhaseIndex<length; ++valuesPhaseIndex) {
            valuesPhase[valuesPhaseIndex] = 0;
        }
    }
    valuesPhaseIndex = valuesPhase[index];

    if (index === 0 && this._zerothIsAccum) {
        this._accum = value;
        this._gotAccum = gotAccum = true;
        valuesPhase[index] = ((valuesPhaseIndex === 0)
            ? 1 : 2);
    } else if (index === -1) {
        this._accum = value;
        this._gotAccum = gotAccum = true;
    } else {
        if (valuesPhaseIndex === 0) {
            valuesPhase[index] = 1;
        } else {
            valuesPhase[index] = 2;
            this._accum = value;
        }
    }
    if (!gotAccum) return;

    var callback = this._callback;
    var receiver = this._promise._boundTo;
    var ret;

    for (var i = this._reducingIndex; i < length; ++i) {
        valuesPhaseIndex = valuesPhase[i];
        if (valuesPhaseIndex === 2) {
            this._reducingIndex = i + 1;
            continue;
        }
        if (valuesPhaseIndex !== 1) return;
        value = values[i];
        this._promise._pushContext();
        if (isEach) {
            preservedValues.push(value);
            ret = tryCatch(callback).call(receiver, value, i, length);
        }
        else {
            ret = tryCatch(callback)
                .call(receiver, this._accum, value, i, length);
        }
        this._promise._popContext();

        if (ret === errorObj) return this._reject(ret.e);

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            if (maybePromise._isPending()) {
                valuesPhase[i] = 4;
                return maybePromise._proxyPromiseArray(this, i);
            } else if (maybePromise._isFulfilled()) {
                ret = maybePromise._value();
            } else {
                return this._reject(maybePromise._reason());
            }
        }

        this._reducingIndex = i + 1;
        this._accum = ret;
    }

    this._resolve(isEach ? preservedValues : this._accum);
};

function reduce(promises, fn, initialValue, _each) {
    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
    return array.promise();
}

Promise.prototype.reduce = function (fn, initialValue) {
    return reduce(this, fn, initialValue, null);
};

Promise.reduce = function (promises, fn, initialValue, _each) {
    return reduce(promises, fn, initialValue, _each);
};
};

},{"./async.js":2,"./util.js":38}],31:[function(_dereq_,module,exports){
"use strict";
var schedule;
var noAsyncScheduler = function() {
    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
};
if (_dereq_("./util.js").isNode) {
    var version = process.versions.node.split(".").map(Number);
    schedule = (version[0] === 0 && version[1] > 10) || (version[0] > 0)
        ? function(fn) { global.setImmediate(fn); } : process.nextTick;

    if (!schedule) {
        if (typeof setImmediate !== "undefined") {
            schedule = setImmediate;
        } else if (typeof setTimeout !== "undefined") {
            schedule = setTimeout;
        } else {
            schedule = noAsyncScheduler;
        }
    }
} else if (typeof MutationObserver !== "undefined") {
    schedule = function(fn) {
        var div = document.createElement("div");
        var observer = new MutationObserver(fn);
        observer.observe(div, {attributes: true});
        return function() { div.classList.toggle("foo"); };
    };
    schedule.isStatic = true;
} else if (typeof setImmediate !== "undefined") {
    schedule = function (fn) {
        setImmediate(fn);
    };
} else if (typeof setTimeout !== "undefined") {
    schedule = function (fn) {
        setTimeout(fn, 0);
    };
} else {
    schedule = noAsyncScheduler;
}
module.exports = schedule;

},{"./util.js":38}],32:[function(_dereq_,module,exports){
"use strict";
module.exports =
    function(Promise, PromiseArray) {
var PromiseInspection = Promise.PromiseInspection;
var util = _dereq_("./util.js");

function SettledPromiseArray(values) {
    this.constructor$(values);
}
util.inherits(SettledPromiseArray, PromiseArray);

SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
    this._values[index] = inspection;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
    }
};

SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var ret = new PromiseInspection();
    ret._bitField = 268435456;
    ret._settledValue = value;
    this._promiseResolved(index, ret);
};
SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
    var ret = new PromiseInspection();
    ret._bitField = 134217728;
    ret._settledValue = reason;
    this._promiseResolved(index, ret);
};

Promise.settle = function (promises) {
    return new SettledPromiseArray(promises).promise();
};

Promise.prototype.settle = function () {
    return new SettledPromiseArray(this).promise();
};
};

},{"./util.js":38}],33:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) {
var util = _dereq_("./util.js");
var RangeError = _dereq_("./errors.js").RangeError;
var AggregateError = _dereq_("./errors.js").AggregateError;
var isArray = util.isArray;


function SomePromiseArray(values) {
    this.constructor$(values);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
}
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () {
    if (!this._initialized) {
        return;
    }
    if (this._howMany === 0) {
        this._resolve([]);
        return;
    }
    this._init$(undefined, -5);
    var isArrayResolved = isArray(this._values);
    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) {
        this._reject(this._getRangeError(this.length()));
    }
};

SomePromiseArray.prototype.init = function () {
    this._initialized = true;
    this._init();
};

SomePromiseArray.prototype.setUnwrap = function () {
    this._unwrap = true;
};

SomePromiseArray.prototype.howMany = function () {
    return this._howMany;
};

SomePromiseArray.prototype.setHowMany = function (count) {
    this._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled = function (value) {
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) {
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) {
            this._resolve(this._values[0]);
        } else {
            this._resolve(this._values);
        }
    }

};
SomePromiseArray.prototype._promiseRejected = function (reason) {
    this._addRejected(reason);
    if (this.howMany() > this._canPossiblyFulfill()) {
        var e = new AggregateError();
        for (var i = this.length(); i < this._values.length; ++i) {
            e.push(this._values[i]);
        }
        this._reject(e);
    }
};

SomePromiseArray.prototype._fulfilled = function () {
    return this._totalResolved;
};

SomePromiseArray.prototype._rejected = function () {
    return this._values.length - this.length();
};

SomePromiseArray.prototype._addRejected = function (reason) {
    this._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled = function (value) {
    this._values[this._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill = function () {
    return this.length() - this._rejected();
};

SomePromiseArray.prototype._getRangeError = function (count) {
    var message = "Input array must contain at least " +
            this._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
};

SomePromiseArray.prototype._resolveEmptyArray = function () {
    this._reject(this._getRangeError(0));
};

function some(promises, howMany) {
    if ((howMany | 0) !== howMany || howMany < 0) {
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/1wAmHx\u000a");
    }
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function (promises, howMany) {
    return some(promises, howMany);
};

Promise.prototype.some = function (howMany) {
    return some(this, howMany);
};

Promise._SomePromiseArray = SomePromiseArray;
};

},{"./errors.js":13,"./util.js":38}],34:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
function PromiseInspection(promise) {
    if (promise !== undefined) {
        promise = promise._target();
        this._bitField = promise._bitField;
        this._settledValue = promise._settledValue;
    }
    else {
        this._bitField = 0;
        this._settledValue = undefined;
    }
}

PromiseInspection.prototype.value = function () {
    if (!this.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
    }
    return this._settledValue;
};

PromiseInspection.prototype.error =
PromiseInspection.prototype.reason = function () {
    if (!this.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
    }
    return this._settledValue;
};

PromiseInspection.prototype.isFulfilled =
Promise.prototype._isFulfilled = function () {
    return (this._bitField & 268435456) > 0;
};

PromiseInspection.prototype.isRejected =
Promise.prototype._isRejected = function () {
    return (this._bitField & 134217728) > 0;
};

PromiseInspection.prototype.isPending =
Promise.prototype._isPending = function () {
    return (this._bitField & 402653184) === 0;
};

PromiseInspection.prototype.isResolved =
Promise.prototype._isResolved = function () {
    return (this._bitField & 402653184) > 0;
};

Promise.prototype.isPending = function() {
    return this._target()._isPending();
};

Promise.prototype.isRejected = function() {
    return this._target()._isRejected();
};

Promise.prototype.isFulfilled = function() {
    return this._target()._isFulfilled();
};

Promise.prototype.isResolved = function() {
    return this._target()._isResolved();
};

Promise.prototype._value = function() {
    return this._settledValue;
};

Promise.prototype._reason = function() {
    this._unsetRejectionIsUnhandled();
    return this._settledValue;
};

Promise.prototype.value = function() {
    var target = this._target();
    if (!target.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
    }
    return target._settledValue;
};

Promise.prototype.reason = function() {
    var target = this._target();
    if (!target.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
    }
    target._unsetRejectionIsUnhandled();
    return target._settledValue;
};


Promise.PromiseInspection = PromiseInspection;
};

},{}],35:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = _dereq_("./util.js");
var errorObj = util.errorObj;
var isObject = util.isObject;

function tryConvertToPromise(obj, context) {
    if (isObject(obj)) {
        if (obj instanceof Promise) {
            return obj;
        }
        else if (isAnyBluebirdPromise(obj)) {
            var ret = new Promise(INTERNAL);
            obj._then(
                ret._fulfillUnchecked,
                ret._rejectUncheckedCheckError,
                ret._progressUnchecked,
                ret,
                null
            );
            return ret;
        }
        var then = util.tryCatch(getThen)(obj);
        if (then === errorObj) {
            if (context) context._pushContext();
            var ret = Promise.reject(then.e);
            if (context) context._popContext();
            return ret;
        } else if (typeof then === "function") {
            return doThenable(obj, then, context);
        }
    }
    return obj;
}

function getThen(obj) {
    return obj.then;
}

var hasProp = {}.hasOwnProperty;
function isAnyBluebirdPromise(obj) {
    return hasProp.call(obj, "_promise0");
}

function doThenable(x, then, context) {
    var promise = new Promise(INTERNAL);
    var ret = promise;
    if (context) context._pushContext();
    promise._captureStackTrace();
    if (context) context._popContext();
    var synchronous = true;
    var result = util.tryCatch(then).call(x,
                                        resolveFromThenable,
                                        rejectFromThenable,
                                        progressFromThenable);
    synchronous = false;
    if (promise && result === errorObj) {
        promise._rejectCallback(result.e, true, true);
        promise = null;
    }

    function resolveFromThenable(value) {
        if (!promise) return;
        if (x === value) {
            promise._rejectCallback(
                Promise._makeSelfResolutionError(), false, true);
        } else {
            promise._resolveCallback(value);
        }
        promise = null;
    }

    function rejectFromThenable(reason) {
        if (!promise) return;
        promise._rejectCallback(reason, synchronous, true);
        promise = null;
    }

    function progressFromThenable(value) {
        if (!promise) return;
        if (typeof promise._progress === "function") {
            promise._progress(value);
        }
    }
    return ret;
}

return tryConvertToPromise;
};

},{"./util.js":38}],36:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = _dereq_("./util.js");
var TimeoutError = Promise.TimeoutError;

var afterTimeout = function (promise, message) {
    if (!promise.isPending()) return;
    if (typeof message !== "string") {
        message = "operation timed out";
    }
    var err = new TimeoutError(message);
    util.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._cancel(err);
};

var afterValue = function(value) { return delay(+this).thenReturn(value); };
var delay = Promise.delay = function (value, ms) {
    if (ms === undefined) {
        ms = value;
        value = undefined;
        var ret = new Promise(INTERNAL);
        setTimeout(function() { ret._fulfill(); }, ms);
        return ret;
    }
    ms = +ms;
    return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
};

Promise.prototype.delay = function (ms) {
    return delay(this, ms);
};

function successClear(value) {
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    return value;
}

function failureClear(reason) {
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    throw reason;
}

Promise.prototype.timeout = function (ms, message) {
    ms = +ms;
    var ret = this.then().cancellable();
    ret._cancellationParent = this;
    var handle = setTimeout(function timeoutTimeout() {
        afterTimeout(ret, message);
    }, ms);
    return ret._then(successClear, failureClear, undefined, handle, undefined);
};

};

},{"./util.js":38}],37:[function(_dereq_,module,exports){
"use strict";
module.exports = function (Promise, apiRejection, tryConvertToPromise,
    createContext) {
    var TypeError = _dereq_("./errors.js").TypeError;
    var inherits = _dereq_("./util.js").inherits;
    var PromiseInspection = Promise.PromiseInspection;

    function inspectionMapper(inspections) {
        var len = inspections.length;
        for (var i = 0; i < len; ++i) {
            var inspection = inspections[i];
            if (inspection.isRejected()) {
                return Promise.reject(inspection.error());
            }
            inspections[i] = inspection._settledValue;
        }
        return inspections;
    }

    function thrower(e) {
        setTimeout(function(){throw e;}, 0);
    }

    function castPreservingDisposable(thenable) {
        var maybePromise = tryConvertToPromise(thenable);
        if (maybePromise !== thenable &&
            typeof thenable._isDisposable === "function" &&
            typeof thenable._getDisposer === "function" &&
            thenable._isDisposable()) {
            maybePromise._setDisposable(thenable._getDisposer());
        }
        return maybePromise;
    }
    function dispose(resources, inspection) {
        var i = 0;
        var len = resources.length;
        var ret = Promise.defer();
        function iterator() {
            if (i >= len) return ret.resolve();
            var maybePromise = castPreservingDisposable(resources[i++]);
            if (maybePromise instanceof Promise &&
                maybePromise._isDisposable()) {
                try {
                    maybePromise = tryConvertToPromise(
                        maybePromise._getDisposer().tryDispose(inspection),
                        resources.promise);
                } catch (e) {
                    return thrower(e);
                }
                if (maybePromise instanceof Promise) {
                    return maybePromise._then(iterator, thrower,
                                              null, null, null);
                }
            }
            iterator();
        }
        iterator();
        return ret.promise;
    }

    function disposerSuccess(value) {
        var inspection = new PromiseInspection();
        inspection._settledValue = value;
        inspection._bitField = 268435456;
        return dispose(this, inspection).thenReturn(value);
    }

    function disposerFail(reason) {
        var inspection = new PromiseInspection();
        inspection._settledValue = reason;
        inspection._bitField = 134217728;
        return dispose(this, inspection).thenThrow(reason);
    }

    function Disposer(data, promise, context) {
        this._data = data;
        this._promise = promise;
        this._context = context;
    }

    Disposer.prototype.data = function () {
        return this._data;
    };

    Disposer.prototype.promise = function () {
        return this._promise;
    };

    Disposer.prototype.resource = function () {
        if (this.promise().isFulfilled()) {
            return this.promise().value();
        }
        return null;
    };

    Disposer.prototype.tryDispose = function(inspection) {
        var resource = this.resource();
        var context = this._context;
        if (context !== undefined) context._pushContext();
        var ret = resource !== null
            ? this.doDispose(resource, inspection) : null;
        if (context !== undefined) context._popContext();
        this._promise._unsetDisposable();
        this._data = null;
        return ret;
    };

    Disposer.isDisposer = function (d) {
        return (d != null &&
                typeof d.resource === "function" &&
                typeof d.tryDispose === "function");
    };

    function FunctionDisposer(fn, promise, context) {
        this.constructor$(fn, promise, context);
    }
    inherits(FunctionDisposer, Disposer);

    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
        var fn = this.data();
        return fn.call(resource, resource, inspection);
    };

    function maybeUnwrapDisposer(value) {
        if (Disposer.isDisposer(value)) {
            this.resources[this.index]._setDisposable(value);
            return value.promise();
        }
        return value;
    }

    Promise.using = function () {
        var len = arguments.length;
        if (len < 2) return apiRejection(
                        "you must pass at least 2 arguments to Promise.using");
        var fn = arguments[len - 1];
        if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
        len--;
        var resources = new Array(len);
        for (var i = 0; i < len; ++i) {
            var resource = arguments[i];
            if (Disposer.isDisposer(resource)) {
                var disposer = resource;
                resource = resource.promise();
                resource._setDisposable(disposer);
            } else {
                var maybePromise = tryConvertToPromise(resource);
                if (maybePromise instanceof Promise) {
                    resource =
                        maybePromise._then(maybeUnwrapDisposer, null, null, {
                            resources: resources,
                            index: i
                    }, undefined);
                }
            }
            resources[i] = resource;
        }

        var promise = Promise.settle(resources)
            .then(inspectionMapper)
            .then(function(vals) {
                promise._pushContext();
                var ret;
                try {
                    ret = fn.apply(undefined, vals);
                } finally {
                    promise._popContext();
                }
                return ret;
            })
            ._then(
                disposerSuccess, disposerFail, undefined, resources, undefined);
        resources.promise = promise;
        return promise;
    };

    Promise.prototype._setDisposable = function (disposer) {
        this._bitField = this._bitField | 262144;
        this._disposer = disposer;
    };

    Promise.prototype._isDisposable = function () {
        return (this._bitField & 262144) > 0;
    };

    Promise.prototype._getDisposer = function () {
        return this._disposer;
    };

    Promise.prototype._unsetDisposable = function () {
        this._bitField = this._bitField & (~262144);
        this._disposer = undefined;
    };

    Promise.prototype.disposer = function (fn) {
        if (typeof fn === "function") {
            return new FunctionDisposer(fn, this, createContext());
        }
        throw new TypeError();
    };

};

},{"./errors.js":13,"./util.js":38}],38:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5.js");
var canEvaluate = typeof navigator == "undefined";
var haveGetters = (function(){
    try {
        var o = {};
        es5.defineProperty(o, "f", {
            get: function () {
                return 3;
            }
        });
        return o.f === 3;
    }
    catch (e) {
        return false;
    }

})();

var errorObj = {e: {}};
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

var inherits = function(Child, Parent) {
    var hasProp = {}.hasOwnProperty;

    function T() {
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) {
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) {
                this[propertyName + "$"] = Parent.prototype[propertyName];
            }
        }
    }
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};


function isPrimitive(val) {
    return val == null || val === true || val === false ||
        typeof val === "string" || typeof val === "number";

}

function isObject(value) {
    return !isPrimitive(value);
}

function maybeWrapAsError(maybeError) {
    if (!isPrimitive(maybeError)) return maybeError;

    return new Error(safeToString(maybeError));
}

function withAppended(target, appendee) {
    var len = target.length;
    var ret = new Array(len + 1);
    var i;
    for (i = 0; i < len; ++i) {
        ret[i] = target[i];
    }
    ret[i] = appendee;
    return ret;
}

function getDataPropertyOrDefault(obj, key, defaultValue) {
    if (es5.isES5) {
        var desc = Object.getOwnPropertyDescriptor(obj, key);
        if (desc != null) {
            return desc.get == null && desc.set == null
                    ? desc.value
                    : defaultValue;
        }
    } else {
        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
    }
}

function notEnumerableProp(obj, name, value) {
    if (isPrimitive(obj)) return obj;
    var descriptor = {
        value: value,
        configurable: true,
        enumerable: false,
        writable: true
    };
    es5.defineProperty(obj, name, descriptor);
    return obj;
}


var wrapsPrimitiveReceiver = (function() {
    return this !== "string";
}).call("string");

function thrower(r) {
    throw r;
}

var inheritedDataKeys = (function() {
    if (es5.isES5) {
        var oProto = Object.prototype;
        var getKeys = Object.getOwnPropertyNames;
        return function(obj) {
            var ret = [];
            var visitedKeys = Object.create(null);
            while (obj != null && obj !== oProto) {
                var keys;
                try {
                    keys = getKeys(obj);
                } catch (e) {
                    return ret;
                }
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (visitedKeys[key]) continue;
                    visitedKeys[key] = true;
                    var desc = Object.getOwnPropertyDescriptor(obj, key);
                    if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key);
                    }
                }
                obj = es5.getPrototypeOf(obj);
            }
            return ret;
        };
    } else {
        return function(obj) {
            var ret = [];
            /*jshint forin:false */
            for (var key in obj) {
                ret.push(key);
            }
            return ret;
        };
    }

})();

function isClass(fn) {
    try {
        if (typeof fn === "function") {
            var keys = es5.names(fn.prototype);
            if (es5.isES5) return keys.length > 1;
            return keys.length > 0 &&
                   !(keys.length === 1 && keys[0] === "constructor");
        }
        return false;
    } catch (e) {
        return false;
    }
}

function toFastProperties(obj) {
    /*jshint -W027,-W055,-W031*/
    function f() {}
    f.prototype = obj;
    var l = 8;
    while (l--) new f();
    return obj;
    eval(obj);
}

var rident = /^[a-z$_][a-z$_0-9]*$/i;
function isIdentifier(str) {
    return rident.test(str);
}

function filledRange(count, prefix, suffix) {
    var ret = new Array(count);
    for(var i = 0; i < count; ++i) {
        ret[i] = prefix + i + suffix;
    }
    return ret;
}

function safeToString(obj) {
    try {
        return obj + "";
    } catch (e) {
        return "[no string representation]";
    }
}

function markAsOriginatingFromRejection(e) {
    try {
        notEnumerableProp(e, "isOperational", true);
    }
    catch(ignore) {}
}

function originatesFromRejection(e) {
    if (e == null) return false;
    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
        e["isOperational"] === true);
}

function canAttachTrace(obj) {
    return obj instanceof Error && es5.propertyIsWritable(obj, "stack");
}

var ensureErrorObject = (function() {
    if (!("stack" in new Error())) {
        return function(value) {
            if (canAttachTrace(value)) return value;
            try {throw new Error(safeToString(value));}
            catch(err) {return err;}
        };
    } else {
        return function(value) {
            if (canAttachTrace(value)) return value;
            return new Error(safeToString(value));
        };
    }
})();

function classString(obj) {
    return {}.toString.call(obj);
}

function copyDescriptors(from, to, filter) {
    var keys = es5.names(from);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (filter(key)) {
            es5.defineProperty(to, key, es5.getDescriptor(from, key));
        }
    }
}

var ret = {
    isClass: isClass,
    isIdentifier: isIdentifier,
    inheritedDataKeys: inheritedDataKeys,
    getDataPropertyOrDefault: getDataPropertyOrDefault,
    thrower: thrower,
    isArray: es5.isArray,
    haveGetters: haveGetters,
    notEnumerableProp: notEnumerableProp,
    isPrimitive: isPrimitive,
    isObject: isObject,
    canEvaluate: canEvaluate,
    errorObj: errorObj,
    tryCatch: tryCatch,
    inherits: inherits,
    withAppended: withAppended,
    maybeWrapAsError: maybeWrapAsError,
    wrapsPrimitiveReceiver: wrapsPrimitiveReceiver,
    toFastProperties: toFastProperties,
    filledRange: filledRange,
    toString: safeToString,
    canAttachTrace: canAttachTrace,
    ensureErrorObject: ensureErrorObject,
    originatesFromRejection: originatesFromRejection,
    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
    classString: classString,
    copyDescriptors: copyDescriptors,
    hasDevTools: typeof chrome !== "undefined" && chrome &&
                 typeof chrome.loadTimes === "function",
    isNode: typeof process !== "undefined" &&
        classString(process).toLowerCase() === "[object process]"
};
try {throw new Error(); } catch (e) {ret.lastLineError = e;}
module.exports = ret;

},{"./es5.js":14}],39:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}]},{},[4])(4)
});                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/browserify/node_modules/process/browser.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-angular/dist/js-data-angular.js":[function(require,module,exports){
(function (global){

; require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js");
DSLocalForageAdapter = global.DSLocalForageAdapter = require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-localforage/dist/js-data-localforage.js");
;__browserify_shim_require__=require;(function browserifyShim(module, define, require) {
/*!
 * js-data-angular
 * @version 2.4.0 - Homepage <https://www.js-data.io/docs/js-data-angular/>
 * @author Jason Dobry <jason.dobry@gmail.com>
 * @copyright (c) 2014-2015 Jason Dobry 
 * @license MIT <https://github.com/js-data/js-data-angular/blob/master/LICENSE>
 * 
 * @overview Angular wrapper for js-data.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("js-data"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("angular"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["js-data", "angular"], factory);
	else if(typeof exports === 'object')
		exports["jsDataAngularModuleName"] = factory((function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("js-data"); } catch(e) {} }()), (function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("angular"); } catch(e) {} }()));
	else
		root["jsDataAngularModuleName"] = factory(root["JSData"], root["angular"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	/*jshint loopfunc:true*/
	var angular = undefined,
	    JSData = undefined;
	try {
	  JSData = __webpack_require__(1);
	} catch (e) {}

	if (!JSData) {
	  try {
	    JSData = window.JSData;
	  } catch (e) {}
	}
	if (!JSData) {
	  throw new Error('js-data must be loaded!');
	}
	try {
	  angular = __webpack_require__(2);
	} catch (e) {}

	if (!angular) {
	  try {
	    angular = window.angular;
	  } catch (e) {}
	}
	if (!angular) {
	  throw new Error('angular must be loaded!');
	}

	var DSUtils = JSData.DSUtils;
	var DSErrors = JSData.DSErrors;
	var deepMixIn = DSUtils.deepMixIn;
	var copy = DSUtils.copy;
	var removeCircular = DSUtils.removeCircular;
	var isString = DSUtils.isString;
	var isNumber = DSUtils.isNumber;
	var makePath = DSUtils.makePath;
	var httpLoaded = false;

	var adapters = [{
	  project: 'js-data-http',
	  name: 'http',
	  'class': 'DSHttpAdapter'
	}, {
	  project: 'js-data-localstorage',
	  name: 'localstorage',
	  'class': 'DSLocalStorageAdapter'
	}, {
	  project: 'js-data-localforage',
	  name: 'localforage',
	  'class': 'DSLocalForageAdapter'
	}, {
	  project: 'js-data-firebase',
	  name: 'firebase',
	  'class': 'DSFirebaseAdapter'
	}, {
	  project: 'js-data-sql',
	  name: 'sql',
	  'class': 'DSSqlAdapter'
	}];

	var functionsToWrap = ['compute', 'digest', 'eject', 'inject', 'link', 'linkAll', 'linkInverse', 'unlinkInverse'];

	function registerAdapter(adapter) {
	  var Adapter = undefined;

	  try {
	    Adapter = __webpack_require__(3)(adapter.project);
	  } catch (e) {}

	  if (!Adapter) {
	    Adapter = window[adapter['class']];
	  }

	  if (Adapter) {
	    if (adapter.name === 'http') {
	      httpLoaded = true;
	    }
	    adapter.loaded = true;
	    angular.module('js-data').provider(adapter['class'], function () {
	      var _this = this;
	      _this.defaults = {};
	      _this.$get = [function () {
	        return new Adapter(_this.defaults);
	      }];
	    });
	  }
	}

	var DSProvider = function DSProvider() {
	  _classCallCheck(this, DSProvider);

	  var _this = this;
	  var deps = [];

	  for (var i = 0; i < adapters.length; i++) {
	    if (adapters[i].loaded) {
	      deps.push(adapters[i]['class']);
	    }
	  }

	  _this.defaults = {};

	  JSData.DS.prototype.bindAll = function (resourceName, params, scope, expr, cb) {
	    var _this = this;

	    params = params || {};

	    if (!_this.definitions[resourceName]) {
	      throw new DSErrors.NER(resourceName);
	    } else if (!DSUtils.isObject(params)) {
	      throw new DSErrors.IA('"params" must be an object!');
	    } else if (!DSUtils.isObject(scope)) {
	      throw new DSErrors.IA('"scope" must be an object!');
	    } else if (!DSUtils.isString(expr)) {
	      throw new DSErrors.IA('"expr" must be a string!');
	    }

	    try {
	      return scope.$watch(function () {
	        return _this.lastModified(resourceName);
	      }, function () {
	        var items = _this.filter(resourceName, params);
	        DSUtils.set(scope, expr, items);
	        if (cb) {
	          cb(null, items);
	        }
	      });
	    } catch (err) {
	      if (cb) {
	        cb(err);
	      } else {
	        throw err;
	      }
	    }
	  };

	  JSData.DS.prototype.bindOne = function (resourceName, id, scope, expr, cb) {
	    var _this = this;

	    id = DSUtils.resolveId(_this.definitions[resourceName], id);
	    if (!_this.definitions[resourceName]) {
	      throw new DSErrors.NER(resourceName);
	    } else if (!DSUtils.isString(id) && !DSUtils.isNumber(id)) {
	      throw new DSErrors.IA('"id" must be a string or a number!');
	    } else if (!DSUtils.isObject(scope)) {
	      throw new DSErrors.IA('"scope" must be an object!');
	    } else if (!DSUtils.isString(expr)) {
	      throw new DSErrors.IA('"expr" must be a string!');
	    }

	    try {
	      return scope.$watch(function () {
	        return _this.lastModified(resourceName, id);
	      }, function () {
	        var item = _this.get(resourceName, id);
	        if (item) {
	          _this.compute(resourceName, id);
	        }
	        DSUtils.set(scope, expr, item);
	        if (cb) {
	          cb(null, item);
	        }
	      });
	    } catch (err) {
	      if (cb) {
	        cb(err);
	      } else {
	        throw err;
	      }
	    }
	  };

	  function load() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var $rootScope = args[args.length - 2];
	    var $q = args[args.length - 1];
	    var store = new JSData.DS(_this.defaults);
	    var originals = {};

	    function QPromise(executor) {
	      var deferred = $q.defer();

	      try {
	        executor.call(undefined, angular.bind(deferred, deferred.resolve), angular.bind(deferred, deferred.reject));
	      } catch (err) {
	        deferred.reject(err);
	      }

	      return deferred.promise;
	    }

	    QPromise.all = $q.all;
	    QPromise.when = $q.when;
	    QPromise.reject = $q.reject;

	    DSUtils.Promise = QPromise;

	    // Register any adapters that have been loaded
	    if (args.length) {
	      for (var i = 0; i < args.length; i++) {
	        for (var j = 0; j < adapters.length; j++) {
	          if (adapters[j].loaded && !adapters[j].registered) {
	            adapters[j].registered = true;
	            store.registerAdapter(adapters[j].name, args[i]);
	            break;
	          }
	        }
	      }
	    }

	    var _loop = function () {
	      var name = functionsToWrap[k];
	      originals[name] = store[name];
	      store[name] = function () {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        if (!$rootScope.$$phase) {
	          return $rootScope.$apply(function () {
	            return originals[name].apply(store, args);
	          });
	        }
	        return originals[name].apply(store, args);
	      };
	    };

	    // Wrap certain sync functions with $apply
	    for (var k = 0; k < functionsToWrap.length; k++) {
	      _loop();
	    }

	    // Hook into the digest loop
	    if (typeof Object.observe !== 'function' || typeof Array.observe !== 'function') {
	      $rootScope.$watch(function () {
	        return store.observe.Platform.performMicrotaskCheckpoint();
	      });
	    }

	    return store;
	  }

	  deps.push('$rootScope');
	  deps.push('$q');
	  deps.push(load);

	  _this.$get = deps;
	};

	angular.module('js-data', ['ng']).value('DSUtils', JSData.DSUtils).value('DSErrors', JSData.DSErrors).provider('DS', DSProvider);

	for (var i = 0; i < adapters.length; i++) {
	  registerAdapter(adapters[i]);
	}

	if (!httpLoaded) {
	  (function () {
	    var Defaults = (function () {
	      function Defaults() {
	        _classCallCheck(this, Defaults);
	      }

	      _createClass(Defaults, [{
	        key: 'queryTransform',
	        value: function queryTransform(resourceConfig, params) {
	          return params;
	        }
	      }, {
	        key: 'deserialize',
	        value: function deserialize(resourceConfig, data) {
	          return data ? 'data' in data ? data.data : data : data;
	        }
	      }, {
	        key: 'serialize',
	        value: function serialize(resourceConfig, data) {
	          return data;
	        }
	      }, {
	        key: 'log',
	        value: function log() {}
	      }, {
	        key: 'error',
	        value: function error() {}
	      }]);

	      return Defaults;
	    })();

	    var defaultsPrototype = Defaults.prototype;

	    defaultsPrototype.basePath = '';

	    defaultsPrototype.forceTrailingSlash = '';

	    defaultsPrototype.httpConfig = {};

	    var DSHttpAdapter = (function () {
	      function DSHttpAdapter(options) {
	        _classCallCheck(this, DSHttpAdapter);

	        this.defaults = new Defaults();
	        if (console) {
	          this.defaults.log = function (a, b) {
	            return console[typeof console.info === 'function' ? 'info' : 'log'](a, b);
	          };
	        }
	        if (console) {
	          this.defaults.error = function (a, b) {
	            return console[typeof console.error === 'function' ? 'error' : 'log'](a, b);
	          };
	        }
	        deepMixIn(this.defaults, options);
	      }

	      _createClass(DSHttpAdapter, [{
	        key: 'getPath',
	        value: function getPath(method, resourceConfig, id, options) {
	          var _this = this;
	          options = options || {};
	          var args = [options.basePath || _this.defaults.basePath || resourceConfig.basePath, resourceConfig.getEndpoint(isString(id) || isNumber(id) || method === 'create' ? id : null, options)];
	          if (method === 'find' || method === 'update' || method === 'destroy') {
	            args.push(id);
	          }
	          return makePath.apply(DSUtils, args);
	        }
	      }, {
	        key: 'GET',
	        value: function GET(url, config) {
	          config = config || {};
	          if (!('method' in config)) {
	            config.method = 'get';
	          }
	          return this.HTTP(deepMixIn(config, {
	            url: url
	          }));
	        }
	      }, {
	        key: 'POST',
	        value: function POST(url, attrs, config) {
	          config = config || {};
	          config = DSUtils.copy(config);
	          if (!('method' in config)) {
	            config.method = 'post';
	          }
	          return this.HTTP(deepMixIn(config, {
	            url: url,
	            data: attrs
	          }));
	        }
	      }, {
	        key: 'PUT',
	        value: function PUT(url, attrs, config) {
	          config = config || {};
	          if (!('method' in config)) {
	            config.method = 'put';
	          }
	          return this.HTTP(deepMixIn(config, {
	            url: url,
	            data: attrs || {}
	          }));
	        }
	      }, {
	        key: 'DEL',
	        value: function DEL(url, config) {
	          config = config || {};
	          if (!('method' in config)) {
	            config.method = 'delete';
	          }
	          return this.HTTP(deepMixIn(config, {
	            url: url
	          }));
	        }
	      }, {
	        key: 'find',
	        value: function find(resourceConfig, id, options) {
	          var _this = this;
	          options = options ? copy(options) : {};
	          options.suffix = options.suffix || resourceConfig.suffix;
	          options.params = options.params || {};
	          options.params = _this.defaults.queryTransform(resourceConfig, options.params);
	          return _this.GET(_this.getPath('find', resourceConfig, id, options), options).then(function (data) {
	            var item = (options.deserialize ? options.deserialize : _this.defaults.deserialize)(resourceConfig, data);
	            return !item ? JSData.DSUtils.Promise.reject(new Error('Not Found!')) : item;
	          });
	        }
	      }, {
	        key: 'findAll',
	        value: function findAll(resourceConfig, params, options) {
	          var _this = this;
	          options = options ? copy(options) : {};
	          options.suffix = options.suffix || resourceConfig.suffix;
	          options.params = options.params || {};
	          if (params) {
	            params = _this.defaults.queryTransform(resourceConfig, params);
	            deepMixIn(options.params, params);
	          }
	          return _this.GET(_this.getPath('findAll', resourceConfig, params, options), options).then(function (data) {
	            return (options.deserialize ? options.deserialize : _this.defaults.deserialize)(resourceConfig, data);
	          });
	        }
	      }, {
	        key: 'create',
	        value: function create(resourceConfig, attrs, options) {
	          var _this = this;
	          options = options ? copy(options) : {};
	          options.suffix = options.suffix || resourceConfig.suffix;
	          options.params = options.params || {};
	          options.params = _this.defaults.queryTransform(resourceConfig, options.params);
	          return _this.POST(_this.getPath('create', resourceConfig, attrs, options), (options.serialize ? options.serialize : _this.defaults.serialize)(resourceConfig, attrs), options).then(function (data) {
	            return (options.deserialize ? options.deserialize : _this.defaults.deserialize)(resourceConfig, data);
	          });
	        }
	      }, {
	        key: 'update',
	        value: function update(resourceConfig, id, attrs, options) {
	          var _this = this;
	          options = options ? copy(options) : {};
	          options.suffix = options.suffix || resourceConfig.suffix;
	          options.params = options.params || {};
	          options.params = _this.defaults.queryTransform(resourceConfig, options.params);
	          return _this.PUT(_this.getPath('update', resourceConfig, id, options), (options.serialize ? options.serialize : _this.defaults.serialize)(resourceConfig, attrs), options).then(function (data) {
	            return (options.deserialize ? options.deserialize : _this.defaults.deserialize)(resourceConfig, data);
	          });
	        }
	      }, {
	        key: 'updateAll',
	        value: function updateAll(resourceConfig, attrs, params, options) {
	          var _this = this;
	          options = options ? copy(options) : {};
	          options.suffix = options.suffix || resourceConfig.suffix;
	          options.params = options.params || {};
	          if (params) {
	            params = _this.defaults.queryTransform(resourceConfig, params);
	            deepMixIn(options.params, params);
	          }
	          return this.PUT(_this.getPath('updateAll', resourceConfig, attrs, options), (options.serialize ? options.serialize : _this.defaults.serialize)(resourceConfig, attrs), options).then(function (data) {
	            return (options.deserialize ? options.deserialize : _this.defaults.deserialize)(resourceConfig, data);
	          });
	        }
	      }, {
	        key: 'destroy',
	        value: function destroy(resourceConfig, id, options) {
	          var _this = this;
	          options = options ? copy(options) : {};
	          options.suffix = options.suffix || resourceConfig.suffix;
	          options.params = options.params || {};
	          options.params = _this.defaults.queryTransform(resourceConfig, options.params);
	          return _this.DEL(_this.getPath('destroy', resourceConfig, id, options), options).then(function (data) {
	            return (options.deserialize ? options.deserialize : _this.defaults.deserialize)(resourceConfig, data);
	          });
	        }
	      }, {
	        key: 'destroyAll',
	        value: function destroyAll(resourceConfig, params, options) {
	          var _this = this;
	          options = options ? copy(options) : {};
	          options.suffix = options.suffix || resourceConfig.suffix;
	          options.params = options.params || {};
	          if (params) {
	            params = _this.defaults.queryTransform(resourceConfig, params);
	            deepMixIn(options.params, params);
	          }
	          return this.DEL(_this.getPath('destroyAll', resourceConfig, params, options), options).then(function (data) {
	            return (options.deserialize ? options.deserialize : _this.defaults.deserialize)(resourceConfig, data);
	          });
	        }
	      }]);

	      return DSHttpAdapter;
	    })();

	    var dsHttpAdapterPrototype = DSHttpAdapter.prototype;

	    var DSHttpAdapterProvider = function DSHttpAdapterProvider() {
	      _classCallCheck(this, DSHttpAdapterProvider);

	      var _this = this;
	      _this.defaults = {};
	      _this.$get = ['$http', 'DS', '$q', function ($http, DS, $q) {
	        dsHttpAdapterPrototype.HTTP = function (config) {
	          var _this = this;
	          var start = new Date();
	          config = copy(config);
	          config = deepMixIn(config, _this.defaults.httpConfig);
	          if (_this.defaults.forceTrailingSlash && config.url[config.url.length - 1] !== '/') {
	            config.url += '/';
	          }
	          config.method = config.method.toUpperCase();
	          if (typeof config.data === 'object') {
	            config.data = removeCircular(config.data);
	          }
	          var suffix = config.suffix || _this.defaults.suffix;
	          if (suffix && config.url.substr(config.url.length - suffix.length) !== suffix) {
	            config.url += suffix;
	          }

	          function logResponse(data) {
	            var str = '' + start.toUTCString() + ' - ' + data.config.method.toUpperCase() + ' ' + data.config.url + ' - ' + data.status + ' ' + (new Date().getTime() - start.getTime()) + 'ms';
	            if (data.status >= 200 && data.status < 300) {
	              if (_this.defaults.log) {
	                _this.defaults.log(str, data);
	              }
	              return data;
	            } else {
	              if (_this.defaults.error) {
	                _this.defaults.error('FAILED: ' + str, data);
	              }
	              return $q.reject(data);
	            }
	          }

	          return $http(config).then(logResponse, logResponse);
	        };

	        var adapter = new DSHttpAdapter(_this.defaults);
	        DS.registerAdapter('http', adapter, { 'default': true });
	        return adapter;
	      }];
	    };

	    angular.module('js-data').provider('DSHttpAdapter', DSHttpAdapterProvider);
	  })();
	}
	angular.module('js-data').run(['DS', 'DSHttpAdapter', function (DS, DSHttpAdapter) {
	  return DS.registerAdapter('http', DSHttpAdapter, { 'default': true });
	}]);

	// return the module name
	exports['default'] = 'js-data';
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	if(typeof __WEBPACK_EXTERNAL_MODULE_1__ === 'undefined') {var e = new Error("Cannot find module \"undefined\""); e.code = 'MODULE_NOT_FOUND'; throw e;}
	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	if(typeof __WEBPACK_EXTERNAL_MODULE_2__ === 'undefined') {var e = new Error("Cannot find module \"angular\""); e.code = 'MODULE_NOT_FOUND'; throw e;}
	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var map = {};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 3;


/***/ }
/******/ ])
});
;
}).call(global, module, undefined, undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-localforage/dist/js-data-localforage.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-localforage/dist/js-data-localforage.js","/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-localforage/dist/js-data-localforage.js":[function(require,module,exports){
(function (global){

; Promise = global.Promise = require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/bluebird/js/browser/bluebird.js");
JSData = global.JSData = require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js");
localforage = global.localforage = require("localforage");
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*!
 * js-data-localforage
 * @version 1.1.0 - Homepage <http://www.js-data.io/docs/dslocalforageadapter>
 * @author Jason Dobry <jason.dobry@gmail.com>
 * @copyright (c) 2014-2015 Jason Dobry 
 * @license MIT <https://github.com/js-data/js-data-localforage/blob/master/LICENSE>
 * 
 * @overview localforage adapter for js-data.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(__browserify_shim_require__("js-data"), __browserify_shim_require__("localforage"));
	else if(typeof define === 'function' && define.amd)
		define(["js-data", "localforage"], factory);
	else if(typeof exports === 'object')
		exports["DSLocalForageAdapter"] = factory(__browserify_shim_require__("js-data"), __browserify_shim_require__("localforage"));
	else
		root["DSLocalForageAdapter"] = factory(root["JSData"], root["localforage"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var JSData = _interopRequire(__webpack_require__(1));

	var localforage = _interopRequire(__webpack_require__(2));

	var emptyStore = new JSData.DS();
	var DSUtils = JSData.DSUtils;
	var makePath = DSUtils.makePath;
	var deepMixIn = DSUtils.deepMixIn;
	var forEach = DSUtils.forEach;
	var filter = emptyStore.defaults.defaultFilter;
	var removeCircular = DSUtils.removeCircular;
	var omit = __webpack_require__(3);
	var guid = __webpack_require__(5);
	var keys = __webpack_require__(4);
	var P = DSUtils.Promise;

	var Defaults = function Defaults() {
	  _classCallCheck(this, Defaults);
	};

	Defaults.prototype.basePath = "";

	var DSLocalForageAdapter = (function () {
	  function DSLocalForageAdapter(options) {
	    _classCallCheck(this, DSLocalForageAdapter);

	    this.defaults = new Defaults();
	    deepMixIn(this.defaults, options);
	  }

	  _createClass(DSLocalForageAdapter, {
	    getPath: {
	      value: function getPath(resourceConfig, options) {
	        return makePath(options.basePath || this.defaults.basePath || resourceConfig.basePath, resourceConfig.name);
	      }
	    },
	    getIdPath: {
	      value: function getIdPath(resourceConfig, options, id) {
	        return makePath(options.basePath || this.defaults.basePath || resourceConfig.basePath, resourceConfig.getEndpoint(id, options), id);
	      }
	    },
	    getIds: {
	      value: function getIds(resourceConfig, options) {
	        var idsPath = this.getPath(resourceConfig, options);
	        return new P(function (resolve, reject) {
	          localforage.getItem(idsPath, function (err, ids) {
	            if (err) {
	              return reject(err);
	            } else if (ids) {
	              return resolve(ids);
	            } else {
	              return localforage.setItem(idsPath, {}, function (err, v) {
	                if (err) {
	                  reject(err);
	                } else {
	                  resolve(v);
	                }
	              });
	            }
	          });
	        });
	      }
	    },
	    saveKeys: {
	      value: function saveKeys(ids, resourceConfig, options) {
	        var keysPath = this.getPath(resourceConfig, options);
	        return new P(function (resolve, reject) {
	          localforage.setItem(keysPath, ids, function (err, v) {
	            if (err) {
	              reject(err);
	            } else {
	              resolve(v);
	            }
	          });
	        });
	      }
	    },
	    ensureId: {
	      value: function ensureId(id, resourceConfig, options) {
	        var _this = this;

	        return this.getIds(resourceConfig, options).then(function (ids) {
	          ids[id] = 1;
	          return _this.saveKeys(ids, resourceConfig, options);
	        });
	      }
	    },
	    removeId: {
	      value: function removeId(id, resourceConfig, options) {
	        var _this = this;

	        return this.getIds(resourceConfig, options).then(function (ids) {
	          delete ids[id];
	          return _this.saveKeys(ids, resourceConfig, options);
	        });
	      }
	    },
	    GET: {
	      value: function GET(key) {
	        return new P(function (resolve, reject) {
	          localforage.getItem(key, function (err, v) {
	            if (err) {
	              reject(err);
	            } else {
	              resolve(v);
	            }
	          });
	        });
	      }
	    },
	    PUT: {
	      value: function PUT(key, value) {
	        value = removeCircular(value);
	        return this.GET(key).then(function (item) {
	          if (item) {
	            deepMixIn(item, value);
	          }
	          return new P(function (resolve, reject) {
	            localforage.setItem(key, item || value, function (err, v) {
	              return err ? reject(err) : resolve(v);
	            });
	          });
	        });
	      }
	    },
	    DEL: {
	      value: function DEL(key) {
	        return new P(function (resolve) {
	          return localforage.removeItem(key, resolve);
	        });
	      }
	    },
	    find: {
	      value: function find(resourceConfig, id, options) {
	        options = options || {};
	        return this.GET(this.getIdPath(resourceConfig, options, id)).then(function (item) {
	          if (!item) {
	            return P.reject(new Error("Not Found!"));
	          } else {
	            return item;
	          }
	        });
	      }
	    },
	    findAll: {
	      value: function findAll(resourceConfig, params, options) {
	        var _this = this;

	        options = options || {};
	        return this.getIds(resourceConfig, options).then(function (ids) {
	          var idsArray = keys(ids);
	          if (!("allowSimpleWhere" in options)) {
	            options.allowSimpleWhere = true;
	          }
	          var tasks = [];
	          forEach(idsArray, function (id) {
	            tasks.push(_this.GET(_this.getIdPath(resourceConfig, options, id)));
	          });
	          return P.all(tasks);
	        }).then(function (items) {
	          return filter.call(emptyStore, items, resourceConfig.name, params, options);
	        });
	      }
	    },
	    create: {
	      value: function create(resourceConfig, attrs, options) {
	        var _this = this;

	        var i = undefined;
	        attrs[resourceConfig.idAttribute] = attrs[resourceConfig.idAttribute] || guid();
	        options = options || {};
	        return this.PUT(makePath(this.getIdPath(resourceConfig, options, attrs[resourceConfig.idAttribute])), omit(attrs, resourceConfig.relationFields || [])).then(function (item) {
	          i = item;
	          return _this.ensureId(item[resourceConfig.idAttribute], resourceConfig, options);
	        }).then(function () {
	          return i;
	        });
	      }
	    },
	    update: {
	      value: function update(resourceConfig, id, attrs, options) {
	        var _this = this;

	        var i = undefined;
	        options = options || {};
	        return this.PUT(this.getIdPath(resourceConfig, options, id), omit(attrs, resourceConfig.relationFields || [])).then(function (item) {
	          i = item;
	          return _this.ensureId(item[resourceConfig.idAttribute], resourceConfig, options);
	        }).then(function () {
	          return i;
	        });
	      }
	    },
	    updateAll: {
	      value: function updateAll(resourceConfig, attrs, params, options) {
	        var _this = this;

	        return this.findAll(resourceConfig, params, options).then(function (items) {
	          var tasks = [];
	          forEach(items, function (item) {
	            tasks.push(_this.update(resourceConfig, item[resourceConfig.idAttribute], omit(attrs, resourceConfig.relationFields || []), options));
	          });
	          return P.all(tasks);
	        });
	      }
	    },
	    destroy: {
	      value: function destroy(resourceConfig, id, options) {
	        var _this = this;

	        options = options || {};
	        return this.DEL(this.getIdPath(resourceConfig, options, id)).then(function () {
	          return _this.removeId(id, resourceConfig, options);
	        }).then(function () {
	          return null;
	        });
	      }
	    },
	    destroyAll: {
	      value: function destroyAll(resourceConfig, params, options) {
	        var _this = this;

	        return this.findAll(resourceConfig, params, options).then(function (items) {
	          var tasks = [];
	          forEach(items, function (item) {
	            tasks.push(_this.destroy(resourceConfig, item[resourceConfig.idAttribute], options));
	          });
	          return P.all(tasks);
	        });
	      }
	    }
	  });

	  return DSLocalForageAdapter;
	})();

	module.exports = DSLocalForageAdapter;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var slice = __webpack_require__(6);
	var contains = __webpack_require__(7);

	    /**
	     * Return a copy of the object, filtered to only contain properties except the blacklisted keys.
	     */
	    function omit(obj, var_keys){
	        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
	            out = {};

	        for (var property in obj) {
	            if (obj.hasOwnProperty(property) && !contains(keys, property)) {
	                out[property] = obj[property];
	            }
	        }
	        return out;
	    }

	    module.exports = omit;




/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(8);

	    /**
	     * Get object keys
	     */
	     var keys = Object.keys || function (obj) {
	            var keys = [];
	            forOwn(obj, function(val, key){
	                keys.push(key);
	            });
	            return keys;
	        };

	    module.exports = keys;




/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var randHex = __webpack_require__(9);
	var choice = __webpack_require__(10);

	  /**
	   * Returns pseudo-random guid (UUID v4)
	   * IMPORTANT: it's not totally "safe" since randHex/choice uses Math.random
	   * by default and sequences can be predicted in some cases. See the
	   * "random/random" documentation for more info about it and how to replace
	   * the default PRNG.
	   */
	  function guid() {
	    return (
	        randHex(8)+'-'+
	        randHex(4)+'-'+
	        // v4 UUID always contain "4" at this position to specify it was
	        // randomly generated
	        '4' + randHex(3) +'-'+
	        // v4 UUID always contain chars [a,b,8,9] at this position
	        choice(8, 9, 'a', 'b') + randHex(3)+'-'+
	        randHex(12)
	    );
	  }
	  module.exports = guid;



/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Create slice of source array or array-like object
	     */
	    function slice(arr, start, end){
	        var len = arr.length;

	        if (start == null) {
	            start = 0;
	        } else if (start < 0) {
	            start = Math.max(len + start, 0);
	        } else {
	            start = Math.min(start, len);
	        }

	        if (end == null) {
	            end = len;
	        } else if (end < 0) {
	            end = Math.max(len + end, 0);
	        } else {
	            end = Math.min(end, len);
	        }

	        var result = [];
	        while (start < end) {
	            result.push(arr[start++]);
	        }

	        return result;
	    }

	    module.exports = slice;




/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(11);

	    /**
	     * If array contains values.
	     */
	    function contains(arr, val) {
	        return indexOf(arr, val) !== -1;
	    }
	    module.exports = contains;



/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = __webpack_require__(12);
	var forIn = __webpack_require__(13);

	    /**
	     * Similar to Array/forEach but works over object properties and fixes Don't
	     * Enum bug on IE.
	     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
	     */
	    function forOwn(obj, fn, thisObj){
	        forIn(obj, function(val, key){
	            if (hasOwn(obj, key)) {
	                return fn.call(thisObj, obj[key], key, obj);
	            }
	        });
	    }

	    module.exports = forOwn;




/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var choice = __webpack_require__(10);

	    var _chars = '0123456789abcdef'.split('');

	    /**
	     * Returns a random hexadecimal string
	     */
	    function randHex(size){
	        size = size && size > 0? size : 6;
	        var str = '';
	        while (size--) {
	            str += choice(_chars);
	        }
	        return str;
	    }

	    module.exports = randHex;




/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var randInt = __webpack_require__(14);
	var isArray = __webpack_require__(15);

	    /**
	     * Returns a random element from the supplied arguments
	     * or from the array (if single argument is an array).
	     */
	    function choice(items) {
	        var target = (arguments.length === 1 && isArray(items))? items : arguments;
	        return target[ randInt(0, target.length - 1) ];
	    }

	    module.exports = choice;




/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Array.indexOf
	     */
	    function indexOf(arr, item, fromIndex) {
	        fromIndex = fromIndex || 0;
	        if (arr == null) {
	            return -1;
	        }

	        var len = arr.length,
	            i = fromIndex < 0 ? len + fromIndex : fromIndex;
	        while (i < len) {
	            // we iterate over sparse items since there is no way to make it
	            // work properly on IE 7-8. see #64
	            if (arr[i] === item) {
	                return i;
	            }

	            i++;
	        }

	        return -1;
	    }

	    module.exports = indexOf;



/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Safer Object.hasOwnProperty
	     */
	     function hasOwn(obj, prop){
	         return Object.prototype.hasOwnProperty.call(obj, prop);
	     }

	     module.exports = hasOwn;




/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = __webpack_require__(12);

	    var _hasDontEnumBug,
	        _dontEnums;

	    function checkDontEnum(){
	        _dontEnums = [
	                'toString',
	                'toLocaleString',
	                'valueOf',
	                'hasOwnProperty',
	                'isPrototypeOf',
	                'propertyIsEnumerable',
	                'constructor'
	            ];

	        _hasDontEnumBug = true;

	        for (var key in {'toString': null}) {
	            _hasDontEnumBug = false;
	        }
	    }

	    /**
	     * Similar to Array/forEach but works over object properties and fixes Don't
	     * Enum bug on IE.
	     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
	     */
	    function forIn(obj, fn, thisObj){
	        var key, i = 0;
	        // no need to check if argument is a real object that way we can use
	        // it for arrays, functions, date, etc.

	        //post-pone check till needed
	        if (_hasDontEnumBug == null) checkDontEnum();

	        for (key in obj) {
	            if (exec(fn, obj, key, thisObj) === false) {
	                break;
	            }
	        }


	        if (_hasDontEnumBug) {
	            var ctor = obj.constructor,
	                isProto = !!ctor && obj === ctor.prototype;

	            while (key = _dontEnums[i++]) {
	                // For constructor, if it is a prototype object the constructor
	                // is always non-enumerable unless defined otherwise (and
	                // enumerated above).  For non-prototype objects, it will have
	                // to be defined on this object, since it cannot be defined on
	                // any prototype objects.
	                //
	                // For other [[DontEnum]] properties, check if the value is
	                // different than Object prototype value.
	                if (
	                    (key !== 'constructor' ||
	                        (!isProto && hasOwn(obj, key))) &&
	                    obj[key] !== Object.prototype[key]
	                ) {
	                    if (exec(fn, obj, key, thisObj) === false) {
	                        break;
	                    }
	                }
	            }
	        }
	    }

	    function exec(fn, obj, key, thisObj){
	        return fn.call(thisObj, obj[key], key, obj);
	    }

	    module.exports = forIn;




/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var MIN_INT = __webpack_require__(16);
	var MAX_INT = __webpack_require__(17);
	var rand = __webpack_require__(18);

	    /**
	     * Gets random integer inside range or snap to min/max values.
	     */
	    function randInt(min, max){
	        min = min == null? MIN_INT : ~~min;
	        max = max == null? MAX_INT : ~~max;
	        // can't be max + 0.5 otherwise it will round up if `rand`
	        // returns `max` causing it to overflow range.
	        // -0.5 and + 0.49 are required to avoid bias caused by rounding
	        return Math.round( rand(min - 0.5, max + 0.499999999999) );
	    }

	    module.exports = randInt;



/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(19);
	    /**
	     */
	    var isArray = Array.isArray || function (val) {
	        return isKind(val, 'Array');
	    };
	    module.exports = isArray;



/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @constant Minimum 32-bit signed integer value (-2^31).
	 */

	    module.exports = -2147483648;



/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @constant Maximum 32-bit signed integer value. (2^31 - 1)
	 */

	    module.exports = 2147483647;



/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var random = __webpack_require__(20);
	var MIN_INT = __webpack_require__(16);
	var MAX_INT = __webpack_require__(17);

	    /**
	     * Returns random number inside range
	     */
	    function rand(min, max){
	        min = min == null? MIN_INT : min;
	        max = max == null? MAX_INT : max;
	        return min + (max - min) * random();
	    }

	    module.exports = rand;



/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var kindOf = __webpack_require__(21);
	    /**
	     * Check if value is from a specific "kind".
	     */
	    function isKind(val, kind){
	        return kindOf(val) === kind;
	    }
	    module.exports = isKind;



/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Just a wrapper to Math.random. No methods inside mout/random should call
	     * Math.random() directly so we can inject the pseudo-random number
	     * generator if needed (ie. in case we need a seeded random or a better
	     * algorithm than the native one)
	     */
	    function random(){
	        return random.get();
	    }

	    // we expose the method so it can be swapped if needed
	    random.get = Math.random;

	    module.exports = random;




/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	

	    var _rKind = /^\[object (.*)\]$/,
	        _toString = Object.prototype.toString,
	        UNDEF;

	    /**
	     * Gets the "kind" of value. (e.g. "String", "Number", etc)
	     */
	    function kindOf(val) {
	        if (val === null) {
	            return 'Null';
	        } else if (val === UNDEF) {
	            return 'Undefined';
	        } else {
	            return _rKind.exec( _toString.call(val) )[1];
	        }
	    }
	    module.exports = kindOf;



/***/ }
/******/ ])
});
;
; browserify_shim__define__module__export__(typeof DSLocalForageAdapter != "undefined" ? DSLocalForageAdapter : window.DSLocalForageAdapter);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/bluebird/js/browser/bluebird.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/bluebird/js/browser/bluebird.js","/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js","localforage":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/localforage.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-schema/dist/js-data-schema.js":[function(require,module,exports){
(function (global){
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*!
 * js-data-schema
 * @version 1.2.4 - Homepage <https://github.com/js-data/js-data-schema/>
 * @author Jason Dobry <jason.dobry@gmail.com>
 * @copyright (c) 2013-2015 Jason Dobry 
 * @license MIT <https://github.com/js-data/js-data-schema/blob/master/LICENSE>
 * 
 * @overview Define and validate rules, datatypes and schemata in Node and in the browser.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else if(typeof exports === 'object')
		exports["Schemator"] = factory();
	else
		root["Schemator"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var utils = _interopRequire(__webpack_require__(1));

	var defaultDataTypes = _interopRequire(__webpack_require__(2));

	var defaultRules = _interopRequire(__webpack_require__(3));

	var Schema = _interopRequire(__webpack_require__(4));

	var id = 1;

	var Schemator = (function () {
	  function Schemator() {
	    _classCallCheck(this, Schemator);

	    this.dataTypes = {};
	    this.rules = {};
	    this.schemata = {};
	    this.id = id++;
	  }

	  _createClass(Schemator, {
	    availableDataTypes: {
	      value: function availableDataTypes() {
	        return utils.unique(utils.keys(this.dataTypes).concat(utils.keys(defaultDataTypes)));
	      }
	    },
	    availableRules: {
	      value: function availableRules() {
	        return utils.unique(utils.keys(this.rules).concat(utils.keys(defaultRules)));
	      }
	    },
	    availableSchemata: {
	      value: function availableSchemata() {
	        return utils.keys(this.schemata);
	      }
	    },
	    defineDataType: {
	      value: function defineDataType(name, typeDefinition) {
	        if (!utils.isString(name)) {
	          throw new Error("\"name\" must be a string!");
	        } else if (!utils.isFunction(typeDefinition)) {
	          throw new Error("\"typeDefinition\" must be a function!");
	        } else if (this.dataTypes[name]) {
	          throw new Error("dataType already registered!");
	        }
	        this.dataTypes[name] = typeDefinition;
	      }
	    },
	    defineRule: {
	      value: function defineRule(name, ruleFunc, async) {
	        if (!utils.isString(name)) {
	          throw new Error("\"name\" must be a string!");
	        } else if (!utils.isFunction(ruleFunc)) {
	          throw new Error("\"ruleFunc\" must be a function!");
	        } else if (this.rules[name]) {
	          throw new Error("rule already registered!");
	        }
	        this.rules[name] = ruleFunc;
	        this.rules[name].async = !!async;
	      }
	    },
	    defineSchema: {
	      value: function defineSchema(name, schema) {
	        if (this.schemata[name]) {
	          throw new Error("schema already registered!");
	        } else if (schema instanceof Schema) {
	          throw new Error("schema registered elsewhere!");
	        }
	        this.schemata[name] = new Schema(name, schema, this);
	        this.schemata[name].parent = this;
	        return this.schemata[name];
	      }
	    },
	    getDataType: {
	      value: function getDataType(name) {
	        return this.dataTypes[name] || defaultDataTypes[name];
	      }
	    },
	    getRule: {
	      value: function getRule(name) {
	        return this.rules[name] || defaultRules[name];
	      }
	    },
	    getSchema: {
	      value: function getSchema(name) {
	        return this.schemata[name];
	      }
	    },
	    removeDataType: {
	      value: function removeDataType(name) {
	        delete this.dataTypes[name];
	      }
	    },
	    removeRule: {
	      value: function removeRule(name) {
	        delete this.rules[name];
	      }
	    },
	    removeSchema: {
	      value: function removeSchema(name) {
	        delete this.schemata[name];
	      }
	    },
	    schemaCheck: {
	      value: function schemaCheck(name) {
	        if (!this.schemata[name]) {
	          throw new Error("schema is not registered!");
	        }
	      }
	    },
	    validateSync: {
	      value: function validateSync(name, attrs, options) {
	        this.schemaCheck(name);
	        return this.schemata[name].validateSync(attrs, options);
	      }
	    },
	    validate: {
	      value: function validate(name, attrs, options, cb) {
	        this.schemaCheck(name);
	        return this.schemata[name].validate(attrs, options, cb);
	      }
	    },
	    addDefaultsToTarget: {
	      value: function addDefaultsToTarget(name, target, overwrite) {
	        this.schemaCheck(name);
	        return this.schemata[name].addDefaultsToTarget(target, overwrite);
	      }
	    },
	    setDefaults: {
	      value: function setDefaults(name, attrs) {
	        this.schemaCheck(name);
	        return this.schemata[name].setDefaults(attrs);
	      }
	    },
	    getDefaults: {
	      value: function getDefaults(name) {
	        this.schemaCheck(name);
	        return this.schemata[name].getDefaults();
	      }
	    },
	    stripNonSchemaAttrs: {
	      value: function stripNonSchemaAttrs(name, attrs) {
	        this.schemaCheck(name);
	        return this.schemata[name].stripNonSchemaAttrs(attrs);
	      }
	    }
	  });

	  return Schemator;
	})();

	module.exports = Schemator;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var isString = _interopRequire(__webpack_require__(5));

	var isBoolean = _interopRequire(__webpack_require__(6));

	var isNumber = _interopRequire(__webpack_require__(7));

	var isObject = _interopRequire(__webpack_require__(8));

	var isDate = _interopRequire(__webpack_require__(9));

	var isFunction = _interopRequire(__webpack_require__(10));

	var isUndefined = _interopRequire(__webpack_require__(11));

	var isArray = _interopRequire(__webpack_require__(12));

	var isEmpty = _interopRequire(__webpack_require__(13));

	var toString = _interopRequire(__webpack_require__(14));

	var toNumber = _interopRequire(__webpack_require__(15));

	var _get = _interopRequire(__webpack_require__(16));

	var deepMixIn = _interopRequire(__webpack_require__(17));

	var deepFillIn = _interopRequire(__webpack_require__(18));

	var forOwn = _interopRequire(__webpack_require__(19));

	var keys = _interopRequire(__webpack_require__(20));

	var pick = _interopRequire(__webpack_require__(21));

	var filter = _interopRequire(__webpack_require__(22));

	var map = _interopRequire(__webpack_require__(23));

	var merge = _interopRequire(__webpack_require__(24));

	var unset = _interopRequire(__webpack_require__(25));

	var contains = _interopRequire(__webpack_require__(26));

	var intersection = _interopRequire(__webpack_require__(27));

	var difference = _interopRequire(__webpack_require__(28));

	var unique = _interopRequire(__webpack_require__(29));

	var toInt = _interopRequire(__webpack_require__(30));

	module.exports = {
	  isString: isString,
	  isBoolean: isBoolean,
	  isNumber: isNumber,
	  isObject: isObject,
	  isDate: isDate,
	  isFunction: isFunction,
	  isUndefined: isUndefined,
	  isArray: isArray,
	  isEmpty: isEmpty,
	  toString: toString,
	  toNumber: toNumber,

	  get: _get,
	  deepMixIn: deepMixIn,
	  deepFillIn: deepFillIn,
	  forOwn: forOwn,
	  keys: keys,
	  pick: pick,
	  filter: filter,
	  map: map,
	  merge: merge,
	  unset: unset,

	  contains: contains,
	  intersection: intersection,
	  difference: difference,
	  unique: unique,

	  toInt: toInt,

	  errMsg: function errMsg(rule, actual, expected) {
	    return {
	      rule: rule,
	      actual: actual,
	      expected: expected
	    };
	  },

	  parallel: function parallel(tasks, cb) {
	    var results = {};
	    var completed = 0;
	    var length = 0;

	    forOwn(tasks, function () {
	      length += 1;
	    });

	    forOwn(tasks, function (task, key) {
	      task(function (err) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        if (args.length <= 1) {
	          args = args[0];
	        }
	        results[key] = args;
	        done(err);
	      });
	    });

	    function done(err) {
	      completed += 1;
	      if (err || completed >= length) {
	        cb(err, results);
	      }
	    }
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var utils = _interopRequire(__webpack_require__(1));

	module.exports = {
	  string: function string(x) {
	    return utils.isString(x) ? null : utils.errMsg("type", typeof x, "string");
	  },
	  number: function number(x) {
	    return utils.isNumber(x) ? null : utils.errMsg("type", typeof x, "number");
	  },
	  integer: function integer(x) {
	    if (!utils.isNumber(x)) {
	      return utils.errMsg("type", typeof x, "integer");
	    } else if (Math.abs(x) - Math.abs(utils.toInt(x)) !== 0) {
	      return utils.errMsg("type", "real", "integer");
	    } else {
	      return null;
	    }
	  },
	  float: function float(x) {
	    return utils.isNumber(x) ? null : utils.errMsg("type", typeof x, "float");
	  },
	  array: function array(x) {
	    return utils.isArray(x) ? null : utils.errMsg("type", typeof x, "array");
	  },
	  object: function object(x) {
	    return utils.isObject(x) ? null : utils.errMsg("type", typeof x, "object");
	  },
	  boolean: function boolean(x) {
	    return utils.isBoolean(x) ? null : utils.errMsg("type", typeof x, "boolean");
	  },
	  date: function date(x) {
	    return utils.isDate(x) ? null : utils.errMsg("type", typeof x, "date");
	  }
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var utils = _interopRequire(__webpack_require__(1));

	var defaultDataTypes = _interopRequire(__webpack_require__(2));

	module.exports = {
	  nullable: (function (_nullable) {
	    var _nullableWrapper = function nullable(_x, _x2) {
	      return _nullable.apply(this, arguments);
	    };

	    _nullableWrapper.toString = function () {
	      return _nullable.toString();
	    };

	    return _nullableWrapper;
	  })(function (x, nullable) {
	    return (x === null || x === undefined) && !nullable ? utils.errMsg("nullable", "x === " + x, "x !== null && x !== undefined") : null;
	  }),
	  max: (function (_max) {
	    var _maxWrapper = function max(_x, _x2) {
	      return _max.apply(this, arguments);
	    };

	    _maxWrapper.toString = function () {
	      return _max.toString();
	    };

	    return _maxWrapper;
	  })(function (x, max) {
	    return utils.isNumber(x) && utils.isNumber(max) && x > max ? utils.errMsg("max", "" + x + " > " + max, "" + x + " <= " + max) : null;
	  }),
	  min: (function (_min) {
	    var _minWrapper = function min(_x, _x2) {
	      return _min.apply(this, arguments);
	    };

	    _minWrapper.toString = function () {
	      return _min.toString();
	    };

	    return _minWrapper;
	  })(function (x, min) {
	    return utils.isNumber(x) && utils.isNumber(min) && x < min ? utils.errMsg("min", "" + x + " < " + min, "" + x + " >= " + min) : null;
	  }),
	  maxLength: (function (_maxLength) {
	    var _maxLengthWrapper = function maxLength(_x, _x2) {
	      return _maxLength.apply(this, arguments);
	    };

	    _maxLengthWrapper.toString = function () {
	      return _maxLength.toString();
	    };

	    return _maxLengthWrapper;
	  })(function (x, maxLength) {
	    return (utils.isString(x) || utils.isArray(x)) && utils.isNumber(maxLength) && x.length > maxLength ? utils.errMsg("maxLength", "" + x.length + " > " + maxLength, "" + x.length + " <= " + maxLength) : null;
	  }),
	  minLength: (function (_minLength) {
	    var _minLengthWrapper = function minLength(_x, _x2) {
	      return _minLength.apply(this, arguments);
	    };

	    _minLengthWrapper.toString = function () {
	      return _minLength.toString();
	    };

	    return _minLengthWrapper;
	  })(function (x, minLength) {
	    return (utils.isString(x) || utils.isArray(x)) && utils.isNumber(minLength) && x.length < minLength ? utils.errMsg("minLength", "" + x.length + " < " + minLength, "" + x.length + " >= " + minLength) : null;
	  }),
	  type: (function (_type) {
	    var _typeWrapper = function type(_x, _x2, _x3, _x4) {
	      return _type.apply(this, arguments);
	    };

	    _typeWrapper.toString = function () {
	      return _type.toString();
	    };

	    return _typeWrapper;
	  })(function (x, type, customType, parent) {
	    return customType ? customType(x) : parent.dataTypes[type] ? parent.dataTypes[type](x) : defaultDataTypes[type] ? defaultDataTypes[type](x) : null;
	  })
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	/*jshint latedef:false*/

	var utils = _interopRequire(__webpack_require__(1));

	var defaultRules = _interopRequire(__webpack_require__(3));

	var hasObject = function (v) {
	  var has = false;
	  utils.forOwn(v, function (_v) {
	    if (utils.isObject(_v)) {
	      has = true;
	      return false;
	    }
	  });
	  return has;
	};

	function _executeRulesSync(targetKey, options, errors, value, key) {
	  var _this = this;

	  var nestedKey = targetKey + (targetKey.length ? "." : "") + key;
	  var schemaRules = utils.get(this.schema, nestedKey);

	  if (utils.isObject(value) || hasObject(schemaRules)) {
	    var err = _validateSync.apply(this, [nestedKey, value || {}, options]);
	    if (err) {
	      errors[key] = err;
	    }
	  } else {
	    if (!utils.isObject(schemaRules)) {
	      return;
	    } else if (schemaRules.nullable === true) {
	      var nullable = this.parent.rules.nullable || defaultRules.nullable;
	      var nErr = nullable.call(options.ctx, value, true, undefined, this.parent);

	      if (nErr === null) {
	        return;
	      }
	    }
	    utils.forOwn(schemaRules, function (ruleValue, ruleKey) {
	      var rule = _this.parent.rules[ruleKey] || defaultRules[ruleKey];
	      if (rule && !rule.async) {
	        var err = rule.call(options.ctx, value, ruleValue, undefined, _this.parent);
	        if (err) {
	          if (!errors[key]) {
	            errors[key] = {
	              errors: []
	            };
	          }
	          errors[key].errors.push(err);
	        }
	      }
	    });
	  }
	}

	/**
	 * @see Schema#validateSync
	 */
	function _validateSync(targetKey, attrs, options) {
	  var _this = this;

	  var errors = {};

	  try {
	    // Validate present attributes
	    utils.forOwn(attrs, function (value, key) {
	      _executeRulesSync.call(_this, targetKey, options, errors, value, key);
	    });
	    // Validate missing attributes
	    if (!options.ignoreMissing) {
	      var schema = targetKey ? utils.get(this.schema, targetKey) || {} : this.schema;
	      var missing = utils.difference(utils.keys(schema), utils.keys(attrs));
	      missing = utils.pick(this.schema, missing);
	      missing = utils.map(missing, function () {
	        return undefined;
	      });
	      utils.forOwn(missing, function (value, key) {
	        _executeRulesSync.call(_this, targetKey, options, errors, value, key);
	      });
	    }
	    if (!utils.isEmpty(errors)) {
	      return errors;
	    } else {
	      return null;
	    }
	  } catch (err) {
	    return err;
	  }
	}

	function _executeRules(options, value, key, prefix, errors, deepQueue, ruleQueue) {
	  var _this = this;

	  var nestedKey = prefix + key;
	  var schemaRules = utils.get(this.schema, nestedKey);

	  if (utils.isObject(value) || hasObject(schemaRules)) {
	    // Recurse down into nested attributes
	    deepQueue[key] = (function (nK, val) {
	      return function (next) {
	        _validate.apply(_this, [nK, val || {}, options, next]);
	      };
	    })(nestedKey, value);
	  } else {
	    if (!utils.isObject(schemaRules)) {
	      return;
	    } else if (schemaRules.nullable === true) {
	      var nullable = this.parent.rules.nullable || defaultRules.nullable;
	      var nErr = nullable.call(options.ctx, value, true, undefined, this.parent);

	      if (nErr === null) {
	        return;
	      }
	    }
	    utils.forOwn(schemaRules, function (ruleValue, ruleKey) {
	      var rule = _this.parent.rules[ruleKey] || defaultRules[ruleKey];
	      // Asynchronous rules get added to the queue
	      if (rule && rule.async) {
	        ruleQueue["" + ruleKey + "_" + ruleValue] = (function (r, key, val, rVal) {
	          return function (next) {
	            r.call(options.ctx, val, rVal, function (err) {
	              next(null, { err: err, key: key });
	            });
	          };
	        })(rule, key, value, ruleValue);
	      } else {
	        // Get results of synchronous rules immediately
	        var err = rule.call(options.ctx, value, ruleValue, undefined, _this.parent);
	        if (err) {
	          if (!errors[key]) {
	            errors[key] = {
	              errors: []
	            };
	          }
	          errors[key].errors.push(err);
	        }
	      }
	    });
	  }
	}

	/**
	 * @see Schema#validate
	 */
	function _validate(targetKey, attrs, options, cb) {
	  var _this = this;

	  var errors = {};
	  var prefix = targetKey + (targetKey.length ? "." : "");
	  var deepQueue = {};
	  var ruleQueue = {};
	  var first = options.first;

	  delete options.first;

	  utils.forOwn(attrs, function (value, key) {
	    _executeRules.call(_this, options, value, key, prefix, errors, deepQueue, ruleQueue);
	  });

	  // Validate missing attributes
	  if (!options.ignoreMissing) {
	    var schema = targetKey ? utils.get(this.schema, targetKey) || {} : this.schema;
	    var missing = utils.difference(utils.keys(schema), utils.keys(attrs));

	    missing = utils.pick(this.schema, missing);
	    missing = utils.map(missing, function () {
	      return undefined;
	    });

	    utils.forOwn(missing, function (value, key) {
	      _executeRules.call(_this, options, value, key, prefix, errors, deepQueue, ruleQueue);
	    });
	  }

	  var finalQueue = {};

	  if (!utils.isEmpty(deepQueue)) {
	    finalQueue.deepQueue = function (next) {
	      utils.parallel(deepQueue, next);
	    };
	  }
	  if (!utils.isEmpty(ruleQueue)) {
	    finalQueue.ruleQueue = function (next) {
	      utils.parallel(ruleQueue, next);
	    };
	  }

	  if (!utils.isEmpty(finalQueue)) {
	    utils.parallel(finalQueue, function (err, results) {

	      // Merge results of recursion
	      if (results.deepQueue) {
	        results.deepQueue = utils.filter(results.deepQueue, function (x) {
	          return x !== undefined && x !== null;
	        });
	        utils.deepMixIn(errors, results.deepQueue);
	      }

	      // Merge results of asynchronous rules
	      if (results.ruleQueue) {
	        if (results.ruleQueue) {
	          results.ruleQueue = utils.filter(results.ruleQueue, function (x) {
	            return x.err !== undefined && x.err !== null;
	          });
	        }
	        utils.forOwn(results.ruleQueue, function (value) {
	          if (!errors[value.key]) {
	            errors[value.key] = {
	              errors: []
	            };
	          }
	          errors[value.key].errors.push(value.err);
	        });
	      }

	      if (!utils.isEmpty(errors)) {
	        first ? cb(errors) : cb(null, errors);
	      } else {
	        cb(null);
	      }
	    });
	  } else {
	    if (!utils.isEmpty(errors)) {
	      first ? cb(errors) : cb(null, errors);
	    } else {
	      cb(null);
	    }
	  }
	}

	function _validateSchema(attrs, rules) {
	  rules = rules || [];
	  var keys = utils.keys(attrs);
	  var noRules = utils.intersection(keys, rules).length === 0;

	  utils.forOwn(attrs, function (value, key) {
	    if (noRules && utils.isString(value)) {
	      attrs[key] = {
	        type: value
	      };
	    } else if (utils.isObject(value)) {
	      _validateSchema(value, rules);
	    }
	  });
	}

	var errors = {
	  a: "Schema#validateSync(attrs[, options]): ",
	  b: "Schema#validate(attrs[, options], cb): "
	};

	var Schema = (function () {
	  function Schema(name, schema, parent) {
	    _classCallCheck(this, Schema);

	    if (!utils.isString(name)) {
	      throw new Error("\"name\" must be a string!");
	    } else if (!utils.isObject(schema)) {
	      throw new Error("\"schema\" must be an object!");
	    }
	    this.name = name;
	    _validateSchema(schema, parent ? parent.availableRules() : defaultRules);
	    this.schema = schema;
	  }

	  _createClass(Schema, {
	    validateSync: {
	      value: function validateSync(attrs, options) {
	        options = options ? options === true ? { ignoreMissing: true } : options : {};
	        if (!utils.isObject(attrs)) {
	          throw new Error("" + errors.a + "attrs: Must be an object!");
	        } else if (!utils.isObject(options)) {
	          throw new Error("" + errors.a + "options: Must be an object!");
	        }
	        options.ctx = attrs;
	        return _validateSync.call(this, "", attrs, options);
	      }
	    },
	    validate: {
	      value: function validate(attrs, options, cb) {
	        options = options ? options === true ? { ignoreMissing: true } : options : {};
	        if (utils.isFunction(options)) {
	          cb = options;
	          options = {};
	        }
	        if (!utils.isFunction(cb)) {
	          throw new Error("" + errors.b + "cb: Must be a function!");
	        } else if (!utils.isObject(attrs)) {
	          return cb(new Error("" + errors.b + "attrs: Must be an object!"));
	        } else if (!utils.isObject(options)) {
	          return cb(new Error("" + errors.b + "options: Must be an object!"));
	        }
	        options.first = true;
	        options.ctx = attrs;
	        _validate.call(this, "", attrs, options, cb);
	      }
	    },
	    addDefaultsToTarget: {
	      value: function addDefaultsToTarget(target, overwrite) {
	        if (!utils.isObject(target)) {
	          throw new Error("\"target\" must be an object!");
	        } else if (!this.defaults) {
	          throw new Error("No defaults have been set!");
	        } else if (overwrite) {
	          utils.deepMixIn(target, this.defaults);
	        } else {
	          utils.deepFillIn(target, this.defaults);
	        }
	      }
	    },
	    setDefaults: {
	      value: function setDefaults(attrs) {
	        if (!utils.isObject(attrs)) {
	          throw new Error("Schema#defaults(attrs): attrs: Must be an object!");
	        } else {
	          this.defaults = utils.merge({}, attrs);
	        }
	        return this;
	      }
	    },
	    getDefaults: {
	      value: function getDefaults() {
	        return utils.merge({}, this.defaults);
	      }
	    },
	    stripNonSchemaAttrs: {
	      value: function stripNonSchemaAttrs(attrs) {
	        _stripNonSchemaAttrs(attrs, this.schema);
	        return attrs;
	      }
	    }
	  });

	  return Schema;
	})();

	function _stripNonSchemaAttrs(attrs, schemaLevel) {
	  utils.forOwn(attrs, function (value, key) {
	    if (schemaLevel[key]) {
	      if (utils.isObject(value) && utils.isObject(schemaLevel[key])) {
	        _stripNonSchemaAttrs(value, schemaLevel[key]);
	      }
	    } else {
	      utils.unset(attrs, key);
	    }
	  });
	}

	module.exports = Schema;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(31);
	    /**
	     */
	    function isString(val) {
	        return isKind(val, 'String');
	    }
	    module.exports = isString;



/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(31);
	    /**
	     */
	    function isBoolean(val) {
	        return isKind(val, 'Boolean');
	    }
	    module.exports = isBoolean;



/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(31);
	    /**
	     */
	    function isNumber(val) {
	        return isKind(val, 'Number');
	    }
	    module.exports = isNumber;



/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(31);
	    /**
	     */
	    function isObject(val) {
	        return isKind(val, 'Object');
	    }
	    module.exports = isObject;



/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(31);
	    /**
	     */
	    function isDate(val) {
	        return isKind(val, 'Date');
	    }
	    module.exports = isDate;



/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(31);
	    /**
	     */
	    function isFunction(val) {
	        return isKind(val, 'Function');
	    }
	    module.exports = isFunction;



/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	
	    var UNDEF;

	    /**
	     */
	    function isUndef(val){
	        return val === UNDEF;
	    }
	    module.exports = isUndef;



/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isKind = __webpack_require__(31);
	    /**
	     */
	    var isArray = Array.isArray || function (val) {
	        return isKind(val, 'Array');
	    };
	    module.exports = isArray;



/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);
	var isArray = __webpack_require__(12);

	    function isEmpty(val){
	        if (val == null) {
	            // typeof null == 'object' so we check it first
	            return true;
	        } else if ( typeof val === 'string' || isArray(val) ) {
	            return !val.length;
	        } else if ( typeof val === 'object' ) {
	            var result = true;
	            forOwn(val, function(){
	                result = false;
	                return false; // break loop
	            });
	            return result;
	        } else {
	            return true;
	        }
	    }

	    module.exports = isEmpty;




/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Typecast a value to a String, using an empty string value for null or
	     * undefined.
	     */
	    function toString(val){
	        return val == null ? '' : val.toString();
	    }

	    module.exports = toString;




/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(12);

	    /**
	     * covert value into number if numeric
	     */
	    function toNumber(val){
	        // numberic values should come first because of -0
	        if (typeof val === 'number') return val;
	        // we want all falsy values (besides -0) to return zero to avoid
	        // headaches
	        if (!val) return 0;
	        if (typeof val === 'string') return parseFloat(val);
	        // arrays are edge cases. `Number([4]) === 4`
	        if (isArray(val)) return NaN;
	        return Number(val);
	    }

	    module.exports = toNumber;




/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var isPrimitive = __webpack_require__(32);

	    /**
	     * get "nested" object property
	     */
	    function get(obj, prop){
	        var parts = prop.split('.'),
	            last = parts.pop();

	        while (prop = parts.shift()) {
	            obj = obj[prop];
	            if (obj == null) return;
	        }

	        return obj[last];
	    }

	    module.exports = get;




/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);
	var isPlainObject = __webpack_require__(33);

	    /**
	     * Mixes objects into the target object, recursively mixing existing child
	     * objects.
	     */
	    function deepMixIn(target, objects) {
	        var i = 0,
	            n = arguments.length,
	            obj;

	        while(++i < n){
	            obj = arguments[i];
	            if (obj) {
	                forOwn(obj, copyProp, target);
	            }
	        }

	        return target;
	    }

	    function copyProp(val, key) {
	        var existing = this[key];
	        if (isPlainObject(val) && isPlainObject(existing)) {
	            deepMixIn(existing, val);
	        } else {
	            this[key] = val;
	        }
	    }

	    module.exports = deepMixIn;




/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);
	var isPlainObject = __webpack_require__(33);

	    /**
	     * Deeply copy missing properties in the target from the defaults.
	     */
	    function deepFillIn(target, defaults){
	        var i = 0,
	            n = arguments.length,
	            obj;

	        while(++i < n) {
	            obj = arguments[i];
	            if (obj) {
	                // jshint loopfunc: true
	                forOwn(obj, function(newValue, key) {
	                    var curValue = target[key];
	                    if (curValue == null) {
	                        target[key] = newValue;
	                    } else if (isPlainObject(curValue) &&
	                               isPlainObject(newValue)) {
	                        deepFillIn(curValue, newValue);
	                    }
	                });
	            }
	        }

	        return target;
	    }

	    module.exports = deepFillIn;




/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = __webpack_require__(34);
	var forIn = __webpack_require__(35);

	    /**
	     * Similar to Array/forEach but works over object properties and fixes Don't
	     * Enum bug on IE.
	     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
	     */
	    function forOwn(obj, fn, thisObj){
	        forIn(obj, function(val, key){
	            if (hasOwn(obj, key)) {
	                return fn.call(thisObj, obj[key], key, obj);
	            }
	        });
	    }

	    module.exports = forOwn;




/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);

	    /**
	     * Get object keys
	     */
	     var keys = Object.keys || function (obj) {
	            var keys = [];
	            forOwn(obj, function(val, key){
	                keys.push(key);
	            });
	            return keys;
	        };

	    module.exports = keys;




/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var slice = __webpack_require__(36);

	    /**
	     * Return a copy of the object, filtered to only have values for the whitelisted keys.
	     */
	    function pick(obj, var_keys){
	        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
	            out = {},
	            i = 0, key;
	        while (key = keys[i++]) {
	            out[key] = obj[key];
	        }
	        return out;
	    }

	    module.exports = pick;




/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);
	var makeIterator = __webpack_require__(37);

	    /**
	     * Creates a new object with all the properties where the callback returns
	     * true.
	     */
	    function filterValues(obj, callback, thisObj) {
	        callback = makeIterator(callback, thisObj);
	        var output = {};
	        forOwn(obj, function(value, key, obj) {
	            if (callback(value, key, obj)) {
	                output[key] = value;
	            }
	        });

	        return output;
	    }
	    module.exports = filterValues;



/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);
	var makeIterator = __webpack_require__(37);

	    /**
	     * Creates a new object where all the values are the result of calling
	     * `callback`.
	     */
	    function mapValues(obj, callback, thisObj) {
	        callback = makeIterator(callback, thisObj);
	        var output = {};
	        forOwn(obj, function(val, key, obj) {
	            output[key] = callback(val, key, obj);
	        });

	        return output;
	    }
	    module.exports = mapValues;



/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = __webpack_require__(34);
	var deepClone = __webpack_require__(38);
	var isObject = __webpack_require__(8);

	    /**
	     * Deep merge objects.
	     */
	    function merge() {
	        var i = 1,
	            key, val, obj, target;

	        // make sure we don't modify source element and it's properties
	        // objects are passed by reference
	        target = deepClone( arguments[0] );

	        while (obj = arguments[i++]) {
	            for (key in obj) {
	                if ( ! hasOwn(obj, key) ) {
	                    continue;
	                }

	                val = obj[key];

	                if ( isObject(val) && isObject(target[key]) ){
	                    // inception, deep merge objects
	                    target[key] = merge(target[key], val);
	                } else {
	                    // make sure arrays, regexp, date, objects are cloned
	                    target[key] = deepClone(val);
	                }

	            }
	        }

	        return target;
	    }

	    module.exports = merge;




/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var has = __webpack_require__(39);

	    /**
	     * Unset object property.
	     */
	    function unset(obj, prop){
	        if (has(obj, prop)) {
	            var parts = prop.split('.'),
	                last = parts.pop();
	            while (prop = parts.shift()) {
	                obj = obj[prop];
	            }
	            return (delete obj[last]);

	        } else {
	            // if property doesn't exist treat as deleted
	            return true;
	        }
	    }

	    module.exports = unset;




/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(40);

	    /**
	     * If array contains values.
	     */
	    function contains(arr, val) {
	        return indexOf(arr, val) !== -1;
	    }
	    module.exports = contains;



/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var unique = __webpack_require__(29);
	var filter = __webpack_require__(41);
	var every = __webpack_require__(42);
	var contains = __webpack_require__(26);
	var slice = __webpack_require__(36);


	    /**
	     * Return a new Array with elements common to all Arrays.
	     * - based on underscore.js implementation
	     */
	    function intersection(arr) {
	        var arrs = slice(arguments, 1),
	            result = filter(unique(arr), function(needle){
	                return every(arrs, function(haystack){
	                    return contains(haystack, needle);
	                });
	            });
	        return result;
	    }

	    module.exports = intersection;




/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var unique = __webpack_require__(29);
	var filter = __webpack_require__(41);
	var some = __webpack_require__(43);
	var contains = __webpack_require__(26);
	var slice = __webpack_require__(36);


	    /**
	     * Return a new Array with elements that aren't present in the other Arrays.
	     */
	    function difference(arr) {
	        var arrs = slice(arguments, 1),
	            result = filter(unique(arr), function(needle){
	                return !some(arrs, function(haystack){
	                    return contains(haystack, needle);
	                });
	            });
	        return result;
	    }

	    module.exports = difference;




/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var filter = __webpack_require__(41);

	    /**
	     * @return {array} Array of unique items
	     */
	    function unique(arr, compare){
	        compare = compare || isEqual;
	        return filter(arr, function(item, i, arr){
	            var n = arr.length;
	            while (++i < n) {
	                if ( compare(item, arr[i]) ) {
	                    return false;
	                }
	            }
	            return true;
	        });
	    }

	    function isEqual(a, b){
	        return a === b;
	    }

	    module.exports = unique;




/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * "Convert" value into an 32-bit integer.
	     * Works like `Math.floor` if val > 0 and `Math.ceil` if val < 0.
	     * IMPORTANT: val will wrap at 2^31 and -2^31.
	     * Perf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7
	     */
	    function toInt(val){
	        // we do not use lang/toNumber because of perf and also because it
	        // doesn't break the functionality
	        return ~~val;
	    }

	    module.exports = toInt;




/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var kindOf = __webpack_require__(44);
	    /**
	     * Check if value is from a specific "kind".
	     */
	    function isKind(val, kind){
	        return kindOf(val) === kind;
	    }
	    module.exports = isKind;



/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Checks if the object is a primitive
	     */
	    function isPrimitive(value) {
	        // Using switch fallthrough because it's simple to read and is
	        // generally fast: http://jsperf.com/testing-value-is-primitive/5
	        switch (typeof value) {
	            case "string":
	            case "number":
	            case "boolean":
	                return true;
	        }

	        return value == null;
	    }

	    module.exports = isPrimitive;




/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Checks if the value is created by the `Object` constructor.
	     */
	    function isPlainObject(value) {
	        return (!!value && typeof value === 'object' &&
	            value.constructor === Object);
	    }

	    module.exports = isPlainObject;




/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Safer Object.hasOwnProperty
	     */
	     function hasOwn(obj, prop){
	         return Object.prototype.hasOwnProperty.call(obj, prop);
	     }

	     module.exports = hasOwn;




/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = __webpack_require__(34);

	    var _hasDontEnumBug,
	        _dontEnums;

	    function checkDontEnum(){
	        _dontEnums = [
	                'toString',
	                'toLocaleString',
	                'valueOf',
	                'hasOwnProperty',
	                'isPrototypeOf',
	                'propertyIsEnumerable',
	                'constructor'
	            ];

	        _hasDontEnumBug = true;

	        for (var key in {'toString': null}) {
	            _hasDontEnumBug = false;
	        }
	    }

	    /**
	     * Similar to Array/forEach but works over object properties and fixes Don't
	     * Enum bug on IE.
	     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
	     */
	    function forIn(obj, fn, thisObj){
	        var key, i = 0;
	        // no need to check if argument is a real object that way we can use
	        // it for arrays, functions, date, etc.

	        //post-pone check till needed
	        if (_hasDontEnumBug == null) checkDontEnum();

	        for (key in obj) {
	            if (exec(fn, obj, key, thisObj) === false) {
	                break;
	            }
	        }


	        if (_hasDontEnumBug) {
	            var ctor = obj.constructor,
	                isProto = !!ctor && obj === ctor.prototype;

	            while (key = _dontEnums[i++]) {
	                // For constructor, if it is a prototype object the constructor
	                // is always non-enumerable unless defined otherwise (and
	                // enumerated above).  For non-prototype objects, it will have
	                // to be defined on this object, since it cannot be defined on
	                // any prototype objects.
	                //
	                // For other [[DontEnum]] properties, check if the value is
	                // different than Object prototype value.
	                if (
	                    (key !== 'constructor' ||
	                        (!isProto && hasOwn(obj, key))) &&
	                    obj[key] !== Object.prototype[key]
	                ) {
	                    if (exec(fn, obj, key, thisObj) === false) {
	                        break;
	                    }
	                }
	            }
	        }
	    }

	    function exec(fn, obj, key, thisObj){
	        return fn.call(thisObj, obj[key], key, obj);
	    }

	    module.exports = forIn;




/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Create slice of source array or array-like object
	     */
	    function slice(arr, start, end){
	        var len = arr.length;

	        if (start == null) {
	            start = 0;
	        } else if (start < 0) {
	            start = Math.max(len + start, 0);
	        } else {
	            start = Math.min(start, len);
	        }

	        if (end == null) {
	            end = len;
	        } else if (end < 0) {
	            end = Math.max(len + end, 0);
	        } else {
	            end = Math.min(end, len);
	        }

	        var result = [];
	        while (start < end) {
	            result.push(arr[start++]);
	        }

	        return result;
	    }

	    module.exports = slice;




/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(45);
	var prop = __webpack_require__(46);
	var deepMatches = __webpack_require__(47);

	    /**
	     * Converts argument into a valid iterator.
	     * Used internally on most array/object/collection methods that receives a
	     * callback/iterator providing a shortcut syntax.
	     */
	    function makeIterator(src, thisObj){
	        if (src == null) {
	            return identity;
	        }
	        switch(typeof src) {
	            case 'function':
	                // function is the first to improve perf (most common case)
	                // also avoid using `Function#call` if not needed, which boosts
	                // perf a lot in some cases
	                return (typeof thisObj !== 'undefined')? function(val, i, arr){
	                    return src.call(thisObj, val, i, arr);
	                } : src;
	            case 'object':
	                return function(val){
	                    return deepMatches(val, src);
	                };
	            case 'string':
	            case 'number':
	                return prop(src);
	        }
	    }

	    module.exports = makeIterator;




/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var clone = __webpack_require__(48);
	var forOwn = __webpack_require__(19);
	var kindOf = __webpack_require__(44);
	var isPlainObject = __webpack_require__(33);

	    /**
	     * Recursively clone native types.
	     */
	    function deepClone(val, instanceClone) {
	        switch ( kindOf(val) ) {
	            case 'Object':
	                return cloneObject(val, instanceClone);
	            case 'Array':
	                return cloneArray(val, instanceClone);
	            default:
	                return clone(val);
	        }
	    }

	    function cloneObject(source, instanceClone) {
	        if (isPlainObject(source)) {
	            var out = {};
	            forOwn(source, function(val, key) {
	                this[key] = deepClone(val, instanceClone);
	            }, out);
	            return out;
	        } else if (instanceClone) {
	            return instanceClone(source);
	        } else {
	            return source;
	        }
	    }

	    function cloneArray(arr, instanceClone) {
	        var out = [],
	            i = -1,
	            n = arr.length,
	            val;
	        while (++i < n) {
	            out[i] = deepClone(arr[i], instanceClone);
	        }
	        return out;
	    }

	    module.exports = deepClone;





/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var get = __webpack_require__(16);

	    var UNDEF;

	    /**
	     * Check if object has nested property.
	     */
	    function has(obj, prop){
	        return get(obj, prop) !== UNDEF;
	    }

	    module.exports = has;





/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Array.indexOf
	     */
	    function indexOf(arr, item, fromIndex) {
	        fromIndex = fromIndex || 0;
	        if (arr == null) {
	            return -1;
	        }

	        var len = arr.length,
	            i = fromIndex < 0 ? len + fromIndex : fromIndex;
	        while (i < len) {
	            // we iterate over sparse items since there is no way to make it
	            // work properly on IE 7-8. see #64
	            if (arr[i] === item) {
	                return i;
	            }

	            i++;
	        }

	        return -1;
	    }

	    module.exports = indexOf;



/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var makeIterator = __webpack_require__(37);

	    /**
	     * Array filter
	     */
	    function filter(arr, callback, thisObj) {
	        callback = makeIterator(callback, thisObj);
	        var results = [];
	        if (arr == null) {
	            return results;
	        }

	        var i = -1, len = arr.length, value;
	        while (++i < len) {
	            value = arr[i];
	            if (callback(value, i, arr)) {
	                results.push(value);
	            }
	        }

	        return results;
	    }

	    module.exports = filter;




/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var makeIterator = __webpack_require__(37);

	    /**
	     * Array every
	     */
	    function every(arr, callback, thisObj) {
	        callback = makeIterator(callback, thisObj);
	        var result = true;
	        if (arr == null) {
	            return result;
	        }

	        var i = -1, len = arr.length;
	        while (++i < len) {
	            // we iterate over sparse items since there is no way to make it
	            // work properly on IE 7-8. see #64
	            if (!callback(arr[i], i, arr) ) {
	                result = false;
	                break;
	            }
	        }

	        return result;
	    }

	    module.exports = every;



/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var makeIterator = __webpack_require__(37);

	    /**
	     * Array some
	     */
	    function some(arr, callback, thisObj) {
	        callback = makeIterator(callback, thisObj);
	        var result = false;
	        if (arr == null) {
	            return result;
	        }

	        var i = -1, len = arr.length;
	        while (++i < len) {
	            // we iterate over sparse items since there is no way to make it
	            // work properly on IE 7-8. see #64
	            if ( callback(arr[i], i, arr) ) {
	                result = true;
	                break;
	            }
	        }

	        return result;
	    }

	    module.exports = some;



/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	

	    var _rKind = /^\[object (.*)\]$/,
	        _toString = Object.prototype.toString,
	        UNDEF;

	    /**
	     * Gets the "kind" of value. (e.g. "String", "Number", etc)
	     */
	    function kindOf(val) {
	        if (val === null) {
	            return 'Null';
	        } else if (val === UNDEF) {
	            return 'Undefined';
	        } else {
	            return _rKind.exec( _toString.call(val) )[1];
	        }
	    }
	    module.exports = kindOf;



/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Returns the first argument provided to it.
	     */
	    function identity(val){
	        return val;
	    }

	    module.exports = identity;




/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Returns a function that gets a property of the passed object
	     */
	    function prop(name){
	        return function(obj){
	            return obj[name];
	        };
	    }

	    module.exports = prop;




/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);
	var isArray = __webpack_require__(12);

	    function containsMatch(array, pattern) {
	        var i = -1, length = array.length;
	        while (++i < length) {
	            if (deepMatches(array[i], pattern)) {
	                return true;
	            }
	        }

	        return false;
	    }

	    function matchArray(target, pattern) {
	        var i = -1, patternLength = pattern.length;
	        while (++i < patternLength) {
	            if (!containsMatch(target, pattern[i])) {
	                return false;
	            }
	        }

	        return true;
	    }

	    function matchObject(target, pattern) {
	        var result = true;
	        forOwn(pattern, function(val, key) {
	            if (!deepMatches(target[key], val)) {
	                // Return false to break out of forOwn early
	                return (result = false);
	            }
	        });

	        return result;
	    }

	    /**
	     * Recursively check if the objects match.
	     */
	    function deepMatches(target, pattern){
	        if (target && typeof target === 'object') {
	            if (isArray(target) && isArray(pattern)) {
	                return matchArray(target, pattern);
	            } else {
	                return matchObject(target, pattern);
	            }
	        } else {
	            return target === pattern;
	        }
	    }

	    module.exports = deepMatches;




/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var kindOf = __webpack_require__(44);
	var isPlainObject = __webpack_require__(33);
	var mixIn = __webpack_require__(49);

	    /**
	     * Clone native types.
	     */
	    function clone(val){
	        switch (kindOf(val)) {
	            case 'Object':
	                return cloneObject(val);
	            case 'Array':
	                return cloneArray(val);
	            case 'RegExp':
	                return cloneRegExp(val);
	            case 'Date':
	                return cloneDate(val);
	            default:
	                return val;
	        }
	    }

	    function cloneObject(source) {
	        if (isPlainObject(source)) {
	            return mixIn({}, source);
	        } else {
	            return source;
	        }
	    }

	    function cloneRegExp(r) {
	        var flags = '';
	        flags += r.multiline ? 'm' : '';
	        flags += r.global ? 'g' : '';
	        flags += r.ignoreCase ? 'i' : '';
	        return new RegExp(r.source, flags);
	    }

	    function cloneDate(date) {
	        return new Date(+date);
	    }

	    function cloneArray(arr) {
	        return arr.slice();
	    }

	    module.exports = clone;




/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(19);

	    /**
	    * Combine properties from all the objects into first one.
	    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
	    * @param {object} target    Target Object
	    * @param {...object} objects    Objects to be combined (0...n objects).
	    * @return {object} Target Object.
	    */
	    function mixIn(target, objects){
	        var i = 0,
	            n = arguments.length,
	            obj;
	        while(++i < n){
	            obj = arguments[i];
	            if (obj != null) {
	                forOwn(obj, copyProp, target);
	            }
	        }
	        return target;
	    }

	    function copyProp(val, key){
	        this[key] = val;
	    }

	    module.exports = mixIn;



/***/ }
/******/ ])
});
;
; browserify_shim__define__module__export__(typeof jsDataSchema != "undefined" ? jsDataSchema : window.jsDataSchema);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js":[function(require,module,exports){
(function (global){

; Promise = global.Promise = require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/bluebird/js/browser/bluebird.js");
require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-schema/dist/js-data-schema.js");
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*!
 * js-data
 * @version 1.8.0 - Homepage <http://www.js-data.io/>
 * @author Jason Dobry <jason.dobry@gmail.com>
 * @copyright (c) 2014-2015 Jason Dobry 
 * @license MIT <https://github.com/js-data/js-data/blob/master/LICENSE>
 * 
 * @overview Robust framework-agnostic data store.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory((typeof window !== "undefined" ? window.Promise : typeof global !== "undefined" ? global.Promise : null), (function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("js-data-schema"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["bluebird", "js-data-schema"], factory);
	else if(typeof exports === 'object')
		exports["JSData"] = factory((typeof window !== "undefined" ? window.Promise : typeof global !== "undefined" ? global.Promise : null), (function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("js-data-schema"); } catch(e) {} }()));
	else
		root["JSData"] = factory(root["bluebird"], root["Schemator"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var DSUtils = _interopRequire(__webpack_require__(1));

	var DSErrors = _interopRequire(__webpack_require__(2));

	var DS = _interopRequire(__webpack_require__(3));

	module.exports = {
	  DS: DS,
	  createStore: function createStore(options) {
	    return new DS(options);
	  },
	  DSUtils: DSUtils,
	  DSErrors: DSErrors,
	  version: {
	    full: "1.8.0",
	    major: parseInt("1", 10),
	    minor: parseInt("8", 10),
	    patch: parseInt("0", 10),
	    alpha: true ? "false" : false,
	    beta: true ? "false" : false
	  }
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	/* jshint eqeqeq:false */

	var DSErrors = _interopRequire(__webpack_require__(2));

	var forEach = _interopRequire(__webpack_require__(9));

	var slice = _interopRequire(__webpack_require__(10));

	var forOwn = _interopRequire(__webpack_require__(14));

	var contains = _interopRequire(__webpack_require__(11));

	var deepMixIn = _interopRequire(__webpack_require__(15));

	var pascalCase = _interopRequire(__webpack_require__(19));

	var remove = _interopRequire(__webpack_require__(12));

	var pick = _interopRequire(__webpack_require__(16));

	var sort = _interopRequire(__webpack_require__(13));

	var upperCase = _interopRequire(__webpack_require__(20));

	var observe = _interopRequire(__webpack_require__(8));

	var es6Promise = _interopRequire(__webpack_require__(21));

	var BinaryHeap = _interopRequire(__webpack_require__(22));

	var w = undefined,
	    _Promise = undefined;
	var DSUtils = undefined;
	var objectProto = Object.prototype;
	var toString = objectProto.toString;
	es6Promise.polyfill();

	var isArray = Array.isArray || function isArray(value) {
	  return toString.call(value) == "[object Array]" || false;
	};

	var isRegExp = function (value) {
	  return toString.call(value) == "[object RegExp]" || false;
	};

	// adapted from lodash.isBoolean
	var isBoolean = function (value) {
	  return value === true || value === false || value && typeof value == "object" && toString.call(value) == "[object Boolean]" || false;
	};

	// adapted from lodash.isString
	var isString = function (value) {
	  return typeof value == "string" || value && typeof value == "object" && toString.call(value) == "[object String]" || false;
	};

	var isObject = function (value) {
	  return toString.call(value) == "[object Object]" || false;
	};

	// adapted from lodash.isDate
	var isDate = function (value) {
	  return value && typeof value == "object" && toString.call(value) == "[object Date]" || false;
	};

	// adapted from lodash.isNumber
	var isNumber = function (value) {
	  var type = typeof value;
	  return type == "number" || value && type == "object" && toString.call(value) == "[object Number]" || false;
	};

	// adapted from lodash.isFunction
	var isFunction = function (value) {
	  return typeof value == "function" || value && toString.call(value) === "[object Function]" || false;
	};

	// shorthand argument checking functions, using these shaves 1.18 kb off of the minified build
	var isStringOrNumber = function (value) {
	  return isString(value) || isNumber(value);
	};
	var isStringOrNumberErr = function (field) {
	  return new DSErrors.IA("\"" + field + "\" must be a string or a number!");
	};
	var isObjectErr = function (field) {
	  return new DSErrors.IA("\"" + field + "\" must be an object!");
	};
	var isArrayErr = function (field) {
	  return new DSErrors.IA("\"" + field + "\" must be an array!");
	};

	// adapted from mout.isEmpty
	var isEmpty = function (val) {
	  if (val == null) {
	    // jshint ignore:line
	    // typeof null == 'object' so we check it first
	    return true;
	  } else if (typeof val === "string" || isArray(val)) {
	    return !val.length;
	  } else if (typeof val === "object") {
	    var _ret = (function () {
	      var result = true;
	      forOwn(val, function () {
	        result = false;
	        return false; // break loop
	      });
	      return {
	        v: result
	      };
	    })();

	    if (typeof _ret === "object") return _ret.v;
	  } else {
	    return true;
	  }
	};

	var intersection = function (array1, array2) {
	  if (!array1 || !array2) {
	    return [];
	  }
	  var result = [];
	  var item = undefined;
	  for (var i = 0, _length = array1.length; i < _length; i++) {
	    item = array1[i];
	    if (DSUtils.contains(result, item)) {
	      continue;
	    }
	    if (DSUtils.contains(array2, item)) {
	      result.push(item);
	    }
	  }
	  return result;
	};

	var filter = function (array, cb, thisObj) {
	  var results = [];
	  forEach(array, function (value, key, arr) {
	    if (cb(value, key, arr)) {
	      results.push(value);
	    }
	  }, thisObj);
	  return results;
	};

	function finallyPolyfill(cb) {
	  var constructor = this.constructor;

	  return this.then(function (value) {
	    return constructor.resolve(cb()).then(function () {
	      return value;
	    });
	  }, function (reason) {
	    return constructor.resolve(cb()).then(function () {
	      throw reason;
	    });
	  });
	}

	try {
	  w = window;
	  if (!w.Promise.prototype["finally"]) {
	    w.Promise.prototype["finally"] = finallyPolyfill;
	  }
	  _Promise = w.Promise;
	  w = {};
	} catch (e) {
	  w = null;
	  _Promise = __webpack_require__(4);
	}

	function Events(target) {
	  var events = {};
	  target = target || this;
	  target.on = function (type, func, ctx) {
	    events[type] = events[type] || [];
	    events[type].push({
	      f: func,
	      c: ctx
	    });
	  };
	  target.off = function (type, func) {
	    var listeners = events[type];
	    if (!listeners) {
	      events = {};
	    } else if (func) {
	      for (var i = 0; i < listeners.length; i++) {
	        if (listeners[i] === func) {
	          listeners.splice(i, 1);
	          break;
	        }
	      }
	    } else {
	      listeners.splice(0, listeners.length);
	    }
	  };
	  target.emit = function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var listeners = events[args.shift()] || [];
	    if (listeners) {
	      for (var i = 0; i < listeners.length; i++) {
	        listeners[i].f.apply(listeners[i].c, args);
	      }
	    }
	  };
	}

	var toPromisify = ["beforeValidate", "validate", "afterValidate", "beforeCreate", "afterCreate", "beforeUpdate", "afterUpdate", "beforeDestroy", "afterDestroy"];

	var isBlacklisted = function (prop, bl) {
	  var i = undefined;
	  if (!bl || !bl.length) {
	    return false;
	  }
	  for (i = 0; i < bl.length; i++) {
	    if (bl[i] === prop) {
	      return true;
	    }
	  }
	  return false;
	};

	// adapted from angular.copy
	var copy = function (source, destination, stackSource, stackDest, blacklist) {
	  if (!destination) {
	    destination = source;
	    if (source) {
	      if (isArray(source)) {
	        destination = copy(source, [], stackSource, stackDest, blacklist);
	      } else if (isDate(source)) {
	        destination = new Date(source.getTime());
	      } else if (isRegExp(source)) {
	        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
	        destination.lastIndex = source.lastIndex;
	      } else if (isObject(source)) {
	        destination = copy(source, Object.create(Object.getPrototypeOf(source)), stackSource, stackDest, blacklist);
	      }
	    }
	  } else {
	    if (source === destination) {
	      throw new Error("Cannot copy! Source and destination are identical.");
	    }

	    stackSource = stackSource || [];
	    stackDest = stackDest || [];

	    if (isObject(source)) {
	      var index = stackSource.indexOf(source);
	      if (index !== -1) {
	        return stackDest[index];
	      }

	      stackSource.push(source);
	      stackDest.push(destination);
	    }

	    var result = undefined;
	    if (isArray(source)) {
	      var i = undefined;
	      destination.length = 0;
	      for (i = 0; i < source.length; i++) {
	        result = copy(source[i], null, stackSource, stackDest, blacklist);
	        if (isObject(source[i])) {
	          stackSource.push(source[i]);
	          stackDest.push(result);
	        }
	        destination.push(result);
	      }
	    } else {
	      if (isArray(destination)) {
	        destination.length = 0;
	      } else {
	        forEach(destination, function (value, key) {
	          delete destination[key];
	        });
	      }
	      for (var key in source) {
	        if (source.hasOwnProperty(key)) {
	          if (isBlacklisted(key, blacklist)) {
	            continue;
	          }
	          result = copy(source[key], null, stackSource, stackDest, blacklist);
	          if (isObject(source[key])) {
	            stackSource.push(source[key]);
	            stackDest.push(result);
	          }
	          destination[key] = result;
	        }
	      }
	    }
	  }
	  return destination;
	};

	// adapted from angular.equals
	var equals = function (o1, o2) {
	  if (o1 === o2) {
	    return true;
	  }
	  if (o1 === null || o2 === null) {
	    return false;
	  }
	  if (o1 !== o1 && o2 !== o2) {
	    return true;
	  } // NaN === NaN
	  var t1 = typeof o1,
	      t2 = typeof o2,
	      length,
	      key,
	      keySet;
	  if (t1 == t2) {
	    if (t1 == "object") {
	      if (isArray(o1)) {
	        if (!isArray(o2)) {
	          return false;
	        }
	        if ((length = o1.length) == o2.length) {
	          // jshint ignore:line
	          for (key = 0; key < length; key++) {
	            if (!equals(o1[key], o2[key])) {
	              return false;
	            }
	          }
	          return true;
	        }
	      } else if (isDate(o1)) {
	        if (!isDate(o2)) {
	          return false;
	        }
	        return equals(o1.getTime(), o2.getTime());
	      } else if (isRegExp(o1) && isRegExp(o2)) {
	        return o1.toString() == o2.toString();
	      } else {
	        if (isArray(o2)) {
	          return false;
	        }
	        keySet = {};
	        for (key in o1) {
	          if (key.charAt(0) === "$" || isFunction(o1[key])) {
	            continue;
	          }
	          if (!equals(o1[key], o2[key])) {
	            return false;
	          }
	          keySet[key] = true;
	        }
	        for (key in o2) {
	          if (!keySet.hasOwnProperty(key) && key.charAt(0) !== "$" && o2[key] !== undefined && !isFunction(o2[key])) {
	            return false;
	          }
	        }
	        return true;
	      }
	    }
	  }
	  return false;
	};

	var resolveId = function (definition, idOrInstance) {
	  if (isString(idOrInstance) || isNumber(idOrInstance)) {
	    return idOrInstance;
	  } else if (idOrInstance && definition) {
	    return idOrInstance[definition.idAttribute] || idOrInstance;
	  } else {
	    return idOrInstance;
	  }
	};

	var resolveItem = function (resource, idOrInstance) {
	  if (resource && (isString(idOrInstance) || isNumber(idOrInstance))) {
	    return resource.index[idOrInstance] || idOrInstance;
	  } else {
	    return idOrInstance;
	  }
	};

	var isValidString = function (val) {
	  return val != null && val !== ""; // jshint ignore:line
	};

	var join = function (items, separator) {
	  separator = separator || "";
	  return filter(items, isValidString).join(separator);
	};

	var makePath = function () {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var result = join(args, "/");
	  return result.replace(/([^:\/]|^)\/{2,}/g, "$1/");
	};

	DSUtils = {
	  // Options that inherit from defaults
	  _: function _(parent, options) {
	    var _this = this;
	    options = options || {};
	    if (options && options.constructor === parent.constructor) {
	      return options;
	    } else if (!isObject(options)) {
	      throw new DSErrors.IA("\"options\" must be an object!");
	    }
	    forEach(toPromisify, function (name) {
	      if (typeof options[name] === "function" && options[name].toString().indexOf("for (var _len = arg") === -1) {
	        options[name] = _this.promisify(options[name]);
	      }
	    });
	    var O = function Options(attrs) {
	      var self = this;
	      forOwn(attrs, function (value, key) {
	        self[key] = value;
	      });
	    };
	    O.prototype = parent;
	    O.prototype.orig = function () {
	      var orig = {};
	      forOwn(this, function (value, key) {
	        orig[key] = value;
	      });
	      return orig;
	    };
	    return new O(options);
	  },
	  _n: isNumber,
	  _s: isString,
	  _sn: isStringOrNumber,
	  _snErr: isStringOrNumberErr,
	  _o: isObject,
	  _oErr: isObjectErr,
	  _a: isArray,
	  _aErr: isArrayErr,
	  compute: function compute(fn, field) {
	    var _this = this;
	    var args = [];
	    forEach(fn.deps, function (dep) {
	      args.push(_this[dep]);
	    });
	    // compute property
	    _this[field] = fn[fn.length - 1].apply(_this, args);
	  },
	  contains: contains,
	  copy: copy,
	  deepMixIn: deepMixIn,
	  diffObjectFromOldObject: observe.diffObjectFromOldObject,
	  BinaryHeap: BinaryHeap,
	  equals: equals,
	  Events: Events,
	  filter: filter,
	  forEach: forEach,
	  forOwn: forOwn,
	  fromJson: function fromJson(json) {
	    return isString(json) ? JSON.parse(json) : json;
	  },
	  get: __webpack_require__(17),
	  intersection: intersection,
	  isArray: isArray,
	  isBoolean: isBoolean,
	  isDate: isDate,
	  isEmpty: isEmpty,
	  isFunction: isFunction,
	  isObject: isObject,
	  isNumber: isNumber,
	  isRegExp: isRegExp,
	  isString: isString,
	  makePath: makePath,
	  observe: observe,
	  pascalCase: pascalCase,
	  pick: pick,
	  Promise: _Promise,
	  promisify: function promisify(fn, target) {
	    var _this = this;
	    if (!fn) {
	      return;
	    } else if (typeof fn !== "function") {
	      throw new Error("Can only promisify functions!");
	    }
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return new _this.Promise(function (resolve, reject) {

	        args.push(function (err, result) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(result);
	          }
	        });

	        try {
	          var promise = fn.apply(target || this, args);
	          if (promise && promise.then) {
	            promise.then(resolve, reject);
	          }
	        } catch (err) {
	          reject(err);
	        }
	      });
	    };
	  },
	  remove: remove,
	  set: __webpack_require__(18),
	  slice: slice,
	  sort: sort,
	  toJson: JSON.stringify,
	  updateTimestamp: function updateTimestamp(timestamp) {
	    var newTimestamp = typeof Date.now === "function" ? Date.now() : new Date().getTime();
	    if (timestamp && newTimestamp <= timestamp) {
	      return timestamp + 1;
	    } else {
	      return newTimestamp;
	    }
	  },
	  upperCase: upperCase,
	  removeCircular: function removeCircular(object) {
	    return (function rmCirc(value, context) {
	      var i = undefined;
	      var nu = undefined;

	      if (typeof value === "object" && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String)) {

	        // check if current object points back to itself
	        var current = context.current;
	        var parent = context.context;
	        while (parent) {
	          if (parent.current === current) {
	            return undefined;
	          }
	          parent = parent.context;
	        }

	        if (DSUtils.isArray(value)) {
	          nu = [];
	          for (i = 0; i < value.length; i += 1) {
	            nu[i] = rmCirc(value[i], { context: context, current: value[i] });
	          }
	        } else {
	          nu = {};
	          forOwn(value, function (v, k) {
	            nu[k] = rmCirc(value[k], { context: context, current: value[k] });
	          });
	        }
	        return nu;
	      }
	      return value;
	    })(object, { context: null, current: object });
	  },
	  resolveItem: resolveItem,
	  resolveId: resolveId,
	  w: w
	};

	module.exports = DSUtils;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var IllegalArgumentError = (function (_Error) {
	  function IllegalArgumentError(message) {
	    _classCallCheck(this, IllegalArgumentError);

	    _get(Object.getPrototypeOf(IllegalArgumentError.prototype), "constructor", this).call(this, this);
	    if (typeof Error.captureStackTrace === "function") {
	      Error.captureStackTrace(this, this.constructor);
	    }
	    this.type = this.constructor.name;
	    this.message = message || "Illegal Argument!";
	  }

	  _inherits(IllegalArgumentError, _Error);

	  return IllegalArgumentError;
	})(Error);

	var RuntimeError = (function (_Error2) {
	  function RuntimeError(message) {
	    _classCallCheck(this, RuntimeError);

	    _get(Object.getPrototypeOf(RuntimeError.prototype), "constructor", this).call(this, this);
	    if (typeof Error.captureStackTrace === "function") {
	      Error.captureStackTrace(this, this.constructor);
	    }
	    this.type = this.constructor.name;
	    this.message = message || "RuntimeError Error!";
	  }

	  _inherits(RuntimeError, _Error2);

	  return RuntimeError;
	})(Error);

	var NonexistentResourceError = (function (_Error3) {
	  function NonexistentResourceError(resourceName) {
	    _classCallCheck(this, NonexistentResourceError);

	    _get(Object.getPrototypeOf(NonexistentResourceError.prototype), "constructor", this).call(this, this);
	    if (typeof Error.captureStackTrace === "function") {
	      Error.captureStackTrace(this, this.constructor);
	    }
	    this.type = this.constructor.name;
	    this.message = "" + resourceName + " is not a registered resource!";
	  }

	  _inherits(NonexistentResourceError, _Error3);

	  return NonexistentResourceError;
	})(Error);

	module.exports = {
	  IllegalArgumentError: IllegalArgumentError,
	  IA: IllegalArgumentError,
	  RuntimeError: RuntimeError,
	  R: RuntimeError,
	  NonexistentResourceError: NonexistentResourceError,
	  NER: NonexistentResourceError
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	/* jshint eqeqeq:false */

	var DSUtils = _interopRequire(__webpack_require__(1));

	var DSErrors = _interopRequire(__webpack_require__(2));

	var syncMethods = _interopRequire(__webpack_require__(6));

	var asyncMethods = _interopRequire(__webpack_require__(7));

	var Schemator = undefined;

	function lifecycleNoopCb(resource, attrs, cb) {
	  cb(null, attrs);
	}

	function lifecycleNoop(resource, attrs) {
	  return attrs;
	}

	function compare(_x, _x2, _x3, _x4) {
	  var _again = true;

	  _function: while (_again) {
	    _again = false;
	    var orderBy = _x,
	        index = _x2,
	        a = _x3,
	        b = _x4;
	    def = cA = cB = undefined;

	    var def = orderBy[index];
	    var cA = DSUtils.get(a, def[0]),
	        cB = DSUtils.get(b, def[0]);
	    if (DSUtils._s(cA)) {
	      cA = DSUtils.upperCase(cA);
	    }
	    if (DSUtils._s(cB)) {
	      cB = DSUtils.upperCase(cB);
	    }
	    if (def[1] === "DESC") {
	      if (cB < cA) {
	        return -1;
	      } else if (cB > cA) {
	        return 1;
	      } else {
	        if (index < orderBy.length - 1) {
	          _x = orderBy;
	          _x2 = index + 1;
	          _x3 = a;
	          _x4 = b;
	          _again = true;
	          continue _function;
	        } else {
	          return 0;
	        }
	      }
	    } else {
	      if (cA < cB) {
	        return -1;
	      } else if (cA > cB) {
	        return 1;
	      } else {
	        if (index < orderBy.length - 1) {
	          _x = orderBy;
	          _x2 = index + 1;
	          _x3 = a;
	          _x4 = b;
	          _again = true;
	          continue _function;
	        } else {
	          return 0;
	        }
	      }
	    }
	  }
	}

	var Defaults = (function () {
	  function Defaults() {
	    _classCallCheck(this, Defaults);
	  }

	  _createClass(Defaults, {
	    errorFn: {
	      value: function errorFn(a, b) {
	        if (this.error && typeof this.error === "function") {
	          try {
	            if (typeof a === "string") {
	              throw new Error(a);
	            } else {
	              throw a;
	            }
	          } catch (err) {
	            a = err;
	          }
	          this.error(this.name || null, a || null, b || null);
	        }
	      }
	    }
	  });

	  return Defaults;
	})();

	var defaultsPrototype = Defaults.prototype;

	defaultsPrototype.actions = {};
	defaultsPrototype.afterCreate = lifecycleNoopCb;
	defaultsPrototype.afterCreateInstance = lifecycleNoop;
	defaultsPrototype.afterDestroy = lifecycleNoopCb;
	defaultsPrototype.afterEject = lifecycleNoop;
	defaultsPrototype.afterInject = lifecycleNoop;
	defaultsPrototype.afterReap = lifecycleNoop;
	defaultsPrototype.afterUpdate = lifecycleNoopCb;
	defaultsPrototype.afterValidate = lifecycleNoopCb;
	defaultsPrototype.allowSimpleWhere = true;
	defaultsPrototype.basePath = "";
	defaultsPrototype.beforeCreate = lifecycleNoopCb;
	defaultsPrototype.beforeCreateInstance = lifecycleNoop;
	defaultsPrototype.beforeDestroy = lifecycleNoopCb;
	defaultsPrototype.beforeEject = lifecycleNoop;
	defaultsPrototype.beforeInject = lifecycleNoop;
	defaultsPrototype.beforeReap = lifecycleNoop;
	defaultsPrototype.beforeUpdate = lifecycleNoopCb;
	defaultsPrototype.beforeValidate = lifecycleNoopCb;
	defaultsPrototype.bypassCache = false;
	defaultsPrototype.cacheResponse = !!DSUtils.w;
	defaultsPrototype.defaultAdapter = "http";
	defaultsPrototype.debug = true;
	defaultsPrototype.eagerEject = false;
	// TODO: Implement eagerInject in DS#create
	defaultsPrototype.eagerInject = false;
	defaultsPrototype.endpoint = "";
	defaultsPrototype.error = console ? function (a, b, c) {
	  return console[typeof console.error === "function" ? "error" : "log"](a, b, c);
	} : false;
	defaultsPrototype.fallbackAdapters = ["http"];
	defaultsPrototype.findBelongsTo = true;
	defaultsPrototype.findHasOne = true;
	defaultsPrototype.findHasMany = true;
	defaultsPrototype.findInverseLinks = true;
	defaultsPrototype.findStrictCache = true;
	defaultsPrototype.idAttribute = "id";
	defaultsPrototype.ignoredChanges = [/\$/];
	defaultsPrototype.ignoreMissing = false;
	defaultsPrototype.keepChangeHistory = false;
	defaultsPrototype.loadFromServer = false;
	defaultsPrototype.log = console ? function (a, b, c, d, e) {
	  return console[typeof console.info === "function" ? "info" : "log"](a, b, c, d, e);
	} : false;

	defaultsPrototype.logFn = function (a, b, c, d) {
	  var _this = this;
	  if (_this.debug && _this.log && typeof _this.log === "function") {
	    _this.log(_this.name || null, a || null, b || null, c || null, d || null);
	  }
	};

	defaultsPrototype.maxAge = false;
	defaultsPrototype.notify = !!DSUtils.w;
	defaultsPrototype.reapAction = !!DSUtils.w ? "inject" : "none";
	defaultsPrototype.reapInterval = !!DSUtils.w ? 30000 : false;
	defaultsPrototype.resetHistoryOnInject = true;
	defaultsPrototype.strategy = "single";
	defaultsPrototype.upsert = !!DSUtils.w;
	defaultsPrototype.useClass = true;
	defaultsPrototype.useFilter = false;
	defaultsPrototype.validate = lifecycleNoopCb;
	defaultsPrototype.defaultFilter = function (collection, resourceName, params, options) {
	  var filtered = collection;
	  var where = null;
	  var reserved = {
	    skip: "",
	    offset: "",
	    where: "",
	    limit: "",
	    orderBy: "",
	    sort: ""
	  };

	  params = params || {};
	  options = options || {};

	  if (DSUtils._o(params.where)) {
	    where = params.where;
	  } else {
	    where = {};
	  }

	  if (options.allowSimpleWhere) {
	    DSUtils.forOwn(params, function (value, key) {
	      if (!(key in reserved) && !(key in where)) {
	        where[key] = {
	          "==": value
	        };
	      }
	    });
	  }

	  if (DSUtils.isEmpty(where)) {
	    where = null;
	  }

	  if (where) {
	    filtered = DSUtils.filter(filtered, function (attrs) {
	      var first = true;
	      var keep = true;
	      DSUtils.forOwn(where, function (clause, field) {
	        if (DSUtils._s(clause)) {
	          clause = {
	            "===": clause
	          };
	        } else if (DSUtils._n(clause) || DSUtils.isBoolean(clause)) {
	          clause = {
	            "==": clause
	          };
	        }
	        if (DSUtils._o(clause)) {
	          DSUtils.forOwn(clause, function (term, op) {
	            var expr = undefined;
	            var isOr = op[0] === "|";
	            var val = attrs[field];
	            op = isOr ? op.substr(1) : op;
	            if (op === "==") {
	              expr = val == term;
	            } else if (op === "===") {
	              expr = val === term;
	            } else if (op === "!=") {
	              expr = val != term;
	            } else if (op === "!==") {
	              expr = val !== term;
	            } else if (op === ">") {
	              expr = val > term;
	            } else if (op === ">=") {
	              expr = val >= term;
	            } else if (op === "<") {
	              expr = val < term;
	            } else if (op === "<=") {
	              expr = val <= term;
	            } else if (op === "isectEmpty") {
	              expr = !DSUtils.intersection(val || [], term || []).length;
	            } else if (op === "isectNotEmpty") {
	              expr = DSUtils.intersection(val || [], term || []).length;
	            } else if (op === "in") {
	              if (DSUtils._s(term)) {
	                expr = term.indexOf(val) !== -1;
	              } else {
	                expr = DSUtils.contains(term, val);
	              }
	            } else if (op === "notIn") {
	              if (DSUtils._s(term)) {
	                expr = term.indexOf(val) === -1;
	              } else {
	                expr = !DSUtils.contains(term, val);
	              }
	            } else if (op === "contains") {
	              if (DSUtils._s(val)) {
	                expr = val.indexOf(term) !== -1;
	              } else {
	                expr = DSUtils.contains(val, term);
	              }
	            } else if (op === "notContains") {
	              if (DSUtils._s(val)) {
	                expr = val.indexOf(term) === -1;
	              } else {
	                expr = !DSUtils.contains(val, term);
	              }
	            }
	            if (expr !== undefined) {
	              keep = first ? expr : isOr ? keep || expr : keep && expr;
	            }
	            first = false;
	          });
	        }
	      });
	      return keep;
	    });
	  }

	  var orderBy = null;

	  if (DSUtils._s(params.orderBy)) {
	    orderBy = [[params.orderBy, "ASC"]];
	  } else if (DSUtils._a(params.orderBy)) {
	    orderBy = params.orderBy;
	  }

	  if (!orderBy && DSUtils._s(params.sort)) {
	    orderBy = [[params.sort, "ASC"]];
	  } else if (!orderBy && DSUtils._a(params.sort)) {
	    orderBy = params.sort;
	  }

	  // Apply 'orderBy'
	  if (orderBy) {
	    (function () {
	      var index = 0;
	      DSUtils.forEach(orderBy, function (def, i) {
	        if (DSUtils._s(def)) {
	          orderBy[i] = [def, "ASC"];
	        } else if (!DSUtils._a(def)) {
	          throw new DSErrors.IA("DS.filter(\"" + resourceName + "\"[, params][, options]): " + DSUtils.toJson(def) + ": Must be a string or an array!", {
	            params: {
	              "orderBy[i]": {
	                actual: typeof def,
	                expected: "string|array"
	              }
	            }
	          });
	        }
	      });
	      filtered = DSUtils.sort(filtered, function (a, b) {
	        return compare(orderBy, index, a, b);
	      });
	    })();
	  }

	  var limit = DSUtils._n(params.limit) ? params.limit : null;
	  var skip = null;

	  if (DSUtils._n(params.skip)) {
	    skip = params.skip;
	  } else if (DSUtils._n(params.offset)) {
	    skip = params.offset;
	  }

	  // Apply 'limit' and 'skip'
	  if (limit && skip) {
	    filtered = DSUtils.slice(filtered, skip, Math.min(filtered.length, skip + limit));
	  } else if (DSUtils._n(limit)) {
	    filtered = DSUtils.slice(filtered, 0, Math.min(filtered.length, limit));
	  } else if (DSUtils._n(skip)) {
	    if (skip < filtered.length) {
	      filtered = DSUtils.slice(filtered, skip);
	    } else {
	      filtered = [];
	    }
	  }

	  return filtered;
	};

	var DS = (function () {
	  function DS(options) {
	    _classCallCheck(this, DS);

	    var _this = this;
	    options = options || {};

	    try {
	      Schemator = __webpack_require__(5);
	    } catch (e) {}

	    if (!Schemator || typeof Schemator !== "function") {
	      try {
	        Schemator = window.Schemator;
	      } catch (e) {}
	    }

	    Schemator = Schemator || options.schemator;
	    if (typeof Schemator === "function") {
	      _this.schemator = new Schemator();
	    }

	    _this.store = {};
	    // alias store, shaves 0.1 kb off the minified build
	    _this.s = _this.store;
	    _this.definitions = {};
	    // alias definitions, shaves 0.3 kb off the minified build
	    _this.defs = _this.definitions;
	    _this.adapters = {};
	    _this.defaults = new Defaults();
	    _this.observe = DSUtils.observe;
	    DSUtils.forOwn(options, function (v, k) {
	      _this.defaults[k] = v;
	    });
	  }

	  _createClass(DS, {
	    getAdapter: {
	      value: function getAdapter(options) {
	        var errorIfNotExist = false;
	        options = options || {};
	        if (DSUtils._s(options)) {
	          errorIfNotExist = true;
	          options = {
	            adapter: options
	          };
	        }
	        var adapter = this.adapters[options.adapter];
	        if (adapter) {
	          return adapter;
	        } else if (errorIfNotExist) {
	          throw new Error("" + options.adapter + " is not a registered adapter!");
	        } else {
	          return this.adapters[options.defaultAdapter];
	        }
	      }
	    },
	    registerAdapter: {
	      value: function registerAdapter(name, Adapter, options) {
	        var _this = this;
	        options = options || {};
	        if (DSUtils.isFunction(Adapter)) {
	          _this.adapters[name] = new Adapter(options);
	        } else {
	          _this.adapters[name] = Adapter;
	        }
	        if (options["default"]) {
	          _this.defaults.defaultAdapter = name;
	        }
	      }
	    },
	    is: {
	      value: function is(resourceName, instance) {
	        var definition = this.defs[resourceName];
	        if (!definition) {
	          throw new DSErrors.NER(resourceName);
	        }
	        return instance instanceof definition[definition["class"]];
	      }
	    }
	  });

	  return DS;
	})();

	var dsPrototype = DS.prototype;

	dsPrototype.getAdapter.shorthand = false;
	dsPrototype.registerAdapter.shorthand = false;
	dsPrototype.errors = DSErrors;
	dsPrototype.utils = DSUtils;
	DSUtils.deepMixIn(dsPrototype, syncMethods);
	DSUtils.deepMixIn(dsPrototype, asyncMethods);

	module.exports = DS;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	if(typeof __WEBPACK_EXTERNAL_MODULE_5__ === 'undefined') {var e = new Error("Cannot find module \"undefined\""); e.code = 'MODULE_NOT_FOUND'; throw e;}
	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var DSUtils = _interopRequire(__webpack_require__(1));

	var DSErrors = _interopRequire(__webpack_require__(2));

	var defineResource = _interopRequire(__webpack_require__(23));

	var eject = _interopRequire(__webpack_require__(24));

	var ejectAll = _interopRequire(__webpack_require__(25));

	var filter = _interopRequire(__webpack_require__(26));

	var inject = _interopRequire(__webpack_require__(27));

	var link = _interopRequire(__webpack_require__(28));

	var linkAll = _interopRequire(__webpack_require__(29));

	var linkInverse = _interopRequire(__webpack_require__(30));

	var unlinkInverse = _interopRequire(__webpack_require__(31));

	var NER = DSErrors.NER;
	var IA = DSErrors.IA;
	var R = DSErrors.R;

	function diffIsEmpty(diff) {
	  return !(DSUtils.isEmpty(diff.added) && DSUtils.isEmpty(diff.removed) && DSUtils.isEmpty(diff.changed));
	}

	module.exports = {
	  changes: function changes(resourceName, id, options) {
	    var _this = this;
	    var definition = _this.defs[resourceName];
	    options = options || {};

	    id = DSUtils.resolveId(definition, id);
	    if (!definition) {
	      throw new NER(resourceName);
	    } else if (!DSUtils._sn(id)) {
	      throw DSUtils._snErr("id");
	    }
	    options = DSUtils._(definition, options);


	    var item = _this.get(resourceName, id);
	    if (item) {
	      var _ret = (function () {
	        if (DSUtils.w) {
	          _this.s[resourceName].observers[id].deliver();
	        }
	        var ignoredChanges = options.ignoredChanges || [];
	        DSUtils.forEach(definition.relationFields, function (field) {
	          return ignoredChanges.push(field);
	        });
	        var diff = DSUtils.diffObjectFromOldObject(item, _this.s[resourceName].previousAttributes[id], DSUtils.equals, ignoredChanges);
	        DSUtils.forOwn(diff, function (changeset, name) {
	          var toKeep = [];
	          DSUtils.forOwn(changeset, function (value, field) {
	            if (!DSUtils.isFunction(value)) {
	              toKeep.push(field);
	            }
	          });
	          diff[name] = DSUtils.pick(diff[name], toKeep);
	        });
	        DSUtils.forEach(definition.relationFields, function (field) {
	          delete diff.added[field];
	          delete diff.removed[field];
	          delete diff.changed[field];
	        });
	        return {
	          v: diff
	        };
	      })();

	      if (typeof _ret === "object") {
	        return _ret.v;
	      }
	    }
	  },
	  changeHistory: function changeHistory(resourceName, id) {
	    var _this = this;
	    var definition = _this.defs[resourceName];
	    var resource = _this.s[resourceName];

	    id = DSUtils.resolveId(definition, id);
	    if (resourceName && !_this.defs[resourceName]) {
	      throw new NER(resourceName);
	    } else if (id && !DSUtils._sn(id)) {
	      throw DSUtils._snErr("id");
	    }


	    if (!definition.keepChangeHistory) {
	      definition.errorFn("changeHistory is disabled for this resource!");
	    } else {
	      if (resourceName) {
	        var item = _this.get(resourceName, id);
	        if (item) {
	          return resource.changeHistories[id];
	        }
	      } else {
	        return resource.changeHistory;
	      }
	    }
	  },
	  compute: function compute(resourceName, instance) {
	    var _this = this;
	    var definition = _this.defs[resourceName];

	    instance = DSUtils.resolveItem(_this.s[resourceName], instance);
	    if (!definition) {
	      throw new NER(resourceName);
	    } else if (!instance) {
	      throw new R("Item not in the store!");
	    } else if (!DSUtils._o(instance) && !DSUtils._sn(instance)) {
	      throw new IA("\"instance\" must be an object, string or number!");
	    }

	    DSUtils.forOwn(definition.computed, function (fn, field) {
	      DSUtils.compute.call(instance, fn, field);
	    });
	    return instance;
	  },
	  createInstance: function createInstance(resourceName, attrs, options) {
	    var definition = this.defs[resourceName];
	    var item = undefined;

	    attrs = attrs || {};

	    if (!definition) {
	      throw new NER(resourceName);
	    } else if (attrs && !DSUtils.isObject(attrs)) {
	      throw new IA("\"attrs\" must be an object!");
	    }

	    options = DSUtils._(definition, options);


	    if (options.notify) {
	      options.beforeCreateInstance(options, attrs);
	    }

	    if (options.useClass) {
	      var Constructor = definition[definition["class"]];
	      item = new Constructor();
	    } else {
	      item = {};
	    }
	    DSUtils.deepMixIn(item, attrs);
	    if (definition.computed) {
	      this.compute(definition.name, item);
	    }
	    if (options.notify) {
	      options.afterCreateInstance(options, item);
	    }
	    return item;
	  },
	  defineResource: defineResource,
	  digest: function digest() {
	    this.observe.Platform.performMicrotaskCheckpoint();
	  },
	  eject: eject,
	  ejectAll: ejectAll,
	  filter: filter,
	  get: function get(resourceName, id, options) {
	    var _this = this;
	    var definition = _this.defs[resourceName];

	    if (!definition) {
	      throw new NER(resourceName);
	    } else if (!DSUtils._sn(id)) {
	      throw DSUtils._snErr("id");
	    }

	    options = DSUtils._(definition, options);


	    // cache miss, request resource from server
	    var item = _this.s[resourceName].index[id];
	    if (!item && options.loadFromServer) {
	      _this.find(resourceName, id, options);
	    }

	    // return resource from cache
	    return item;
	  },
	  getAll: function getAll(resourceName, ids) {
	    var _this = this;
	    var definition = _this.defs[resourceName];
	    var resource = _this.s[resourceName];
	    var collection = [];

	    if (!definition) {
	      throw new NER(resourceName);
	    } else if (ids && !DSUtils._a(ids)) {
	      throw DSUtils._aErr("ids");
	    }


	    if (DSUtils._a(ids)) {
	      var _length = ids.length;
	      for (var i = 0; i < _length; i++) {
	        if (resource.index[ids[i]]) {
	          collection.push(resource.index[ids[i]]);
	        }
	      }
	    } else {
	      collection = resource.collection.slice();
	    }

	    return collection;
	  },
	  hasChanges: function hasChanges(resourceName, id) {
	    var _this = this;
	    var definition = _this.defs[resourceName];

	    id = DSUtils.resolveId(definition, id);

	    if (!definition) {
	      throw new NER(resourceName);
	    } else if (!DSUtils._sn(id)) {
	      throw DSUtils._snErr("id");
	    }


	    // return resource from cache
	    if (_this.get(resourceName, id)) {
	      return diffIsEmpty(_this.changes(resourceName, id));
	    } else {
	      return false;
	    }
	  },
	  inject: inject,
	  lastModified: function lastModified(resourceName, id) {
	    var definition = this.defs[resourceName];
	    var resource = this.s[resourceName];

	    id = DSUtils.resolveId(definition, id);
	    if (!definition) {
	      throw new NER(resourceName);
	    }


	    if (id) {
	      if (!(id in resource.modified)) {
	        resource.modified[id] = 0;
	      }
	      return resource.modified[id];
	    }
	    return resource.collectionModified;
	  },
	  lastSaved: function lastSaved(resourceName, id) {
	    var definition = this.defs[resourceName];
	    var resource = this.s[resourceName];

	    id = DSUtils.resolveId(definition, id);
	    if (!definition) {
	      throw new NER(resourceName);
	    }


	    if (!(id in resource.saved)) {
	      resource.saved[id] = 0;
	    }
	    return resource.saved[id];
	  },
	  link: link,
	  linkAll: linkAll,
	  linkInverse: linkInverse,
	  previous: function previous(resourceName, id) {
	    var _this = this;
	    var definition = _this.defs[resourceName];
	    var resource = _this.s[resourceName];

	    id = DSUtils.resolveId(definition, id);
	    if (!definition) {
	      throw new NER(resourceName);
	    } else if (!DSUtils._sn(id)) {
	      throw DSUtils._snErr("id");
	    }


	    // return resource from cache
	    return resource.previousAttributes[id] ? DSUtils.copy(resource.previousAttributes[id]) : undefined;
	  },
	  unlinkInverse: unlinkInverse
	};

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var create = _interopRequire(__webpack_require__(40));

	var destroy = _interopRequire(__webpack_require__(41));

	var destroyAll = _interopRequire(__webpack_require__(42));

	var find = _interopRequire(__webpack_require__(43));

	var findAll = _interopRequire(__webpack_require__(44));

	var loadRelations = _interopRequire(__webpack_require__(45));

	var reap = _interopRequire(__webpack_require__(46));

	var save = _interopRequire(__webpack_require__(47));

	var update = _interopRequire(__webpack_require__(48));

	var updateAll = _interopRequire(__webpack_require__(49));

	module.exports = {
	  create: create,
	  destroy: destroy,
	  destroyAll: destroyAll,
	  find: find,
	  findAll: findAll,
	  loadRelations: loadRelations,
	  reap: reap,
	  refresh: function refresh(resourceName, id, options) {
	    var _this = this;
	    var DSUtils = _this.utils;

	    return new DSUtils.Promise(function (resolve, reject) {
	      var definition = _this.defs[resourceName];
	      id = DSUtils.resolveId(_this.defs[resourceName], id);
	      if (!definition) {
	        reject(new _this.errors.NER(resourceName));
	      } else if (!DSUtils._sn(id)) {
	        reject(DSUtils._snErr("id"));
	      } else {
	        options = DSUtils._(definition, options);
	        options.bypassCache = true;
	        resolve(_this.get(resourceName, id));
	      }
	    }).then(function (item) {
	      return item ? _this.find(resourceName, id, options) : item;
	    });
	  },
	  save: save,
	  update: update,
	  updateAll: updateAll
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	 */

	// Modifications
	// Copyright 2014-2015 Jason Dobry
	//
	// Summary of modifications:
	// Fixed use of "delete" keyword for IE8 compatibility
	// Exposed diffObjectFromOldObject on the exported object
	// Added the "equals" argument to diffObjectFromOldObject to be used to check equality
	// Added a way in diffObjectFromOldObject to ignore changes to certain properties
	// Removed all code related to:
	// - ArrayObserver
	// - ArraySplice
	// - PathObserver
	// - CompoundObserver
	// - Path
	// - ObserverTransform

	(function(global) {
	  var testingExposeCycleCount = global.testingExposeCycleCount;

	  // Detect and do basic sanity checking on Object/Array.observe.
	  function detectObjectObserve() {
	    if (typeof Object.observe !== 'function' ||
	        typeof Array.observe !== 'function') {
	      return false;
	    }

	    var records = [];

	    function callback(recs) {
	      records = recs;
	    }

	    var test = {};
	    var arr = [];
	    Object.observe(test, callback);
	    Array.observe(arr, callback);
	    test.id = 1;
	    test.id = 2;
	    delete test.id;
	    arr.push(1, 2);
	    arr.length = 0;

	    Object.deliverChangeRecords(callback);
	    if (records.length !== 5)
	      return false;

	    if (records[0].type != 'add' ||
	        records[1].type != 'update' ||
	        records[2].type != 'delete' ||
	        records[3].type != 'splice' ||
	        records[4].type != 'splice') {
	      return false;
	    }

	    Object.unobserve(test, callback);
	    Array.unobserve(arr, callback);

	    return true;
	  }

	  var hasObserve = detectObjectObserve();

	  var createObject = ('__proto__' in {}) ?
	    function(obj) { return obj; } :
	    function(obj) {
	      var proto = obj.__proto__;
	      if (!proto)
	        return obj;
	      var newObject = Object.create(proto);
	      Object.getOwnPropertyNames(obj).forEach(function(name) {
	        Object.defineProperty(newObject, name,
	                             Object.getOwnPropertyDescriptor(obj, name));
	      });
	      return newObject;
	    };

	  var MAX_DIRTY_CHECK_CYCLES = 1000;

	  function dirtyCheck(observer) {
	    var cycles = 0;
	    while (cycles < MAX_DIRTY_CHECK_CYCLES && observer.check_()) {
	      cycles++;
	    }
	    if (testingExposeCycleCount)
	      global.dirtyCheckCycleCount = cycles;

	    return cycles > 0;
	  }

	  function objectIsEmpty(object) {
	    for (var prop in object)
	      return false;
	    return true;
	  }

	  function diffIsEmpty(diff) {
	    return objectIsEmpty(diff.added) &&
	           objectIsEmpty(diff.removed) &&
	           objectIsEmpty(diff.changed);
	  }

	  function isBlacklisted(prop, bl) {
	    if (!bl || !bl.length) {
	      return false;
	    }
	    var matches;
	    for (var i = 0; i < bl.length; i++) {
	      if ((Object.prototype.toString.call(bl[i]) === '[object RegExp]' && bl[i].test(prop)) || bl[i] === prop) {
	        return matches = prop;
	      }
	    }
	    return !!matches;
	  }

	  function diffObjectFromOldObject(object, oldObject, equals, bl) {
	    var added = {};
	    var removed = {};
	    var changed = {};

	    for (var prop in oldObject) {
	      var newValue = object[prop];

	      if (isBlacklisted(prop, bl))
	        continue;

	      if (newValue !== undefined && (equals ? equals(newValue, oldObject[prop]) : newValue === oldObject[prop]))
	        continue;

	      if (!(prop in object)) {
	        removed[prop] = undefined;
	        continue;
	      }

	      if (equals ? !equals(newValue, oldObject[prop]) : newValue !== oldObject[prop])
	        changed[prop] = newValue;
	    }

	    for (var prop in object) {
	      if (prop in oldObject)
	        continue;

	      if (isBlacklisted(prop, bl))
	        continue;

	      added[prop] = object[prop];
	    }

	    if (Array.isArray(object) && object.length !== oldObject.length)
	      changed.length = object.length;

	    return {
	      added: added,
	      removed: removed,
	      changed: changed
	    };
	  }

	  var eomTasks = [];
	  function runEOMTasks() {
	    if (!eomTasks.length)
	      return false;

	    for (var i = 0; i < eomTasks.length; i++) {
	      eomTasks[i]();
	    }
	    eomTasks.length = 0;
	    return true;
	  }

	  var runEOM = hasObserve ? (function(){
	    return function(fn) {
	      return Promise.resolve().then(fn);
	    }
	  })() :
	  (function() {
	    return function(fn) {
	      eomTasks.push(fn);
	    };
	  })();

	  var observedObjectCache = [];

	  function newObservedObject() {
	    var observer;
	    var object;
	    var discardRecords = false;
	    var first = true;

	    function callback(records) {
	      if (observer && observer.state_ === OPENED && !discardRecords)
	        observer.check_(records);
	    }

	    return {
	      open: function(obs) {
	        if (observer)
	          throw Error('ObservedObject in use');

	        if (!first)
	          Object.deliverChangeRecords(callback);

	        observer = obs;
	        first = false;
	      },
	      observe: function(obj, arrayObserve) {
	        object = obj;
	        if (arrayObserve)
	          Array.observe(object, callback);
	        else
	          Object.observe(object, callback);
	      },
	      deliver: function(discard) {
	        discardRecords = discard;
	        Object.deliverChangeRecords(callback);
	        discardRecords = false;
	      },
	      close: function() {
	        observer = undefined;
	        Object.unobserve(object, callback);
	        observedObjectCache.push(this);
	      }
	    };
	  }

	  function getObservedObject(observer, object, arrayObserve) {
	    var dir = observedObjectCache.pop() || newObservedObject();
	    dir.open(observer);
	    dir.observe(object, arrayObserve);
	    return dir;
	  }

	  var UNOPENED = 0;
	  var OPENED = 1;
	  var CLOSED = 2;

	  var nextObserverId = 1;

	  function Observer() {
	    this.state_ = UNOPENED;
	    this.callback_ = undefined;
	    this.target_ = undefined; // TODO(rafaelw): Should be WeakRef
	    this.directObserver_ = undefined;
	    this.value_ = undefined;
	    this.id_ = nextObserverId++;
	  }

	  Observer.prototype = {
	    open: function(callback, target) {
	      if (this.state_ != UNOPENED)
	        throw Error('Observer has already been opened.');

	      addToAll(this);
	      this.callback_ = callback;
	      this.target_ = target;
	      this.connect_();
	      this.state_ = OPENED;
	      return this.value_;
	    },

	    close: function() {
	      if (this.state_ != OPENED)
	        return;

	      removeFromAll(this);
	      this.disconnect_();
	      this.value_ = undefined;
	      this.callback_ = undefined;
	      this.target_ = undefined;
	      this.state_ = CLOSED;
	    },

	    deliver: function() {
	      if (this.state_ != OPENED)
	        return;

	      dirtyCheck(this);
	    },

	    report_: function(changes) {
	      try {
	        this.callback_.apply(this.target_, changes);
	      } catch (ex) {
	        Observer._errorThrownDuringCallback = true;
	        console.error('Exception caught during observer callback: ' +
	                       (ex.stack || ex));
	      }
	    },

	    discardChanges: function() {
	      this.check_(undefined, true);
	      return this.value_;
	    }
	  }

	  var collectObservers = !hasObserve;
	  var allObservers;
	  Observer._allObserversCount = 0;

	  if (collectObservers) {
	    allObservers = [];
	  }

	  function addToAll(observer) {
	    Observer._allObserversCount++;
	    if (!collectObservers)
	      return;

	    allObservers.push(observer);
	  }

	  function removeFromAll(observer) {
	    Observer._allObserversCount--;
	  }

	  var runningMicrotaskCheckpoint = false;

	  global.Platform = global.Platform || {};

	  global.Platform.performMicrotaskCheckpoint = function() {
	    if (runningMicrotaskCheckpoint)
	      return;

	    if (!collectObservers)
	      return;

	    runningMicrotaskCheckpoint = true;

	    var cycles = 0;
	    var anyChanged, toCheck;

	    do {
	      cycles++;
	      toCheck = allObservers;
	      allObservers = [];
	      anyChanged = false;

	      for (var i = 0; i < toCheck.length; i++) {
	        var observer = toCheck[i];
	        if (observer.state_ != OPENED)
	          continue;

	        if (observer.check_())
	          anyChanged = true;

	        allObservers.push(observer);
	      }
	      if (runEOMTasks())
	        anyChanged = true;
	    } while (cycles < MAX_DIRTY_CHECK_CYCLES && anyChanged);

	    if (testingExposeCycleCount)
	      global.dirtyCheckCycleCount = cycles;

	    runningMicrotaskCheckpoint = false;
	  };

	  if (collectObservers) {
	    global.Platform.clearObservers = function() {
	      allObservers = [];
	    };
	  }

	  function ObjectObserver(object) {
	    Observer.call(this);
	    this.value_ = object;
	    this.oldObject_ = undefined;
	  }

	  ObjectObserver.prototype = createObject({
	    __proto__: Observer.prototype,

	    arrayObserve: false,

	    connect_: function(callback, target) {
	      if (hasObserve) {
	        this.directObserver_ = getObservedObject(this, this.value_,
	                                                 this.arrayObserve);
	      } else {
	        this.oldObject_ = this.copyObject(this.value_);
	      }

	    },

	    copyObject: function(object) {
	      var copy = Array.isArray(object) ? [] : {};
	      for (var prop in object) {
	        copy[prop] = object[prop];
	      };
	      if (Array.isArray(object))
	        copy.length = object.length;
	      return copy;
	    },

	    check_: function(changeRecords, skipChanges) {
	      var diff;
	      var oldValues;
	      if (hasObserve) {
	        if (!changeRecords)
	          return false;

	        oldValues = {};
	        diff = diffObjectFromChangeRecords(this.value_, changeRecords,
	                                           oldValues);
	      } else {
	        oldValues = this.oldObject_;
	        diff = diffObjectFromOldObject(this.value_, this.oldObject_);
	      }

	      if (diffIsEmpty(diff))
	        return false;

	      if (!hasObserve)
	        this.oldObject_ = this.copyObject(this.value_);

	      this.report_([
	        diff.added || {},
	        diff.removed || {},
	        diff.changed || {},
	        function(property) {
	          return oldValues[property];
	        }
	      ]);

	      return true;
	    },

	    disconnect_: function() {
	      if (hasObserve) {
	        this.directObserver_.close();
	        this.directObserver_ = undefined;
	      } else {
	        this.oldObject_ = undefined;
	      }
	    },

	    deliver: function() {
	      if (this.state_ != OPENED)
	        return;

	      if (hasObserve)
	        this.directObserver_.deliver(false);
	      else
	        dirtyCheck(this);
	    },

	    discardChanges: function() {
	      if (this.directObserver_)
	        this.directObserver_.deliver(true);
	      else
	        this.oldObject_ = this.copyObject(this.value_);

	      return this.value_;
	    }
	  });

	  var observerSentinel = {};

	  var expectedRecordTypes = {
	    add: true,
	    update: true,
	    'delete': true
	  };

	  function diffObjectFromChangeRecords(object, changeRecords, oldValues) {
	    var added = {};
	    var removed = {};

	    for (var i = 0; i < changeRecords.length; i++) {
	      var record = changeRecords[i];
	      if (!expectedRecordTypes[record.type]) {
	        console.error('Unknown changeRecord type: ' + record.type);
	        console.error(record);
	        continue;
	      }

	      if (!(record.name in oldValues))
	        oldValues[record.name] = record.oldValue;

	      if (record.type == 'update')
	        continue;

	      if (record.type == 'add') {
	        if (record.name in removed)
	          delete removed[record.name];
	        else
	          added[record.name] = true;

	        continue;
	      }

	      // type = 'delete'
	      if (record.name in added) {
	        delete added[record.name];
	        delete oldValues[record.name];
	      } else {
	        removed[record.name] = true;
	      }
	    }

	    for (var prop in added)
	      added[prop] = object[prop];

	    for (var prop in removed)
	      removed[prop] = undefined;

	    var changed = {};
	    for (var prop in oldValues) {
	      if (prop in added || prop in removed)
	        continue;

	      var newValue = object[prop];
	      if (oldValues[prop] !== newValue)
	        changed[prop] = newValue;
	    }

	    return {
	      added: added,
	      removed: removed,
	      changed: changed
	    };
	  }

	  // Export the observe-js object for **Node.js**, with backwards-compatibility
	  // for the old `require()` API. Also ensure `exports` is not a DOM Element.
	  // If we're in the browser, export as a global object.

	  global.Observer = Observer;
	  global.Observer.runEOM_ = runEOM;
	  global.Observer.observerSentinel_ = observerSentinel; // for testing.
	  global.Observer.hasObjectObserve = hasObserve;
	  global.diffObjectFromOldObject = diffObjectFromOldObject;
	  global.ObjectObserver = ObjectObserver;

	})(exports);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Array forEach
	     */
	    function forEach(arr, callback, thisObj) {
	        if (arr == null) {
	            return;
	        }
	        var i = -1,
	            len = arr.length;
	        while (++i < len) {
	            // we iterate over sparse items since there is no way to make it
	            // work properly on IE 7-8. see #64
	            if ( callback.call(thisObj, arr[i], i, arr) === false ) {
	                break;
	            }
	        }
	    }

	    module.exports = forEach;




/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Create slice of source array or array-like object
	     */
	    function slice(arr, start, end){
	        var len = arr.length;

	        if (start == null) {
	            start = 0;
	        } else if (start < 0) {
	            start = Math.max(len + start, 0);
	        } else {
	            start = Math.min(start, len);
	        }

	        if (end == null) {
	            end = len;
	        } else if (end < 0) {
	            end = Math.max(len + end, 0);
	        } else {
	            end = Math.min(end, len);
	        }

	        var result = [];
	        while (start < end) {
	            result.push(arr[start++]);
	        }

	        return result;
	    }

	    module.exports = slice;




/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(32);

	    /**
	     * If array contains values.
	     */
	    function contains(arr, val) {
	        return indexOf(arr, val) !== -1;
	    }
	    module.exports = contains;



/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(32);

	    /**
	     * Remove a single item from the array.
	     * (it won't remove duplicates, just a single item)
	     */
	    function remove(arr, item){
	        var idx = indexOf(arr, item);
	        if (idx !== -1) arr.splice(idx, 1);
	    }

	    module.exports = remove;



/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Merge sort (http://en.wikipedia.org/wiki/Merge_sort)
	     */
	    function mergeSort(arr, compareFn) {
	        if (arr == null) {
	            return [];
	        } else if (arr.length < 2) {
	            return arr;
	        }

	        if (compareFn == null) {
	            compareFn = defaultCompare;
	        }

	        var mid, left, right;

	        mid   = ~~(arr.length / 2);
	        left  = mergeSort( arr.slice(0, mid), compareFn );
	        right = mergeSort( arr.slice(mid, arr.length), compareFn );

	        return merge(left, right, compareFn);
	    }

	    function defaultCompare(a, b) {
	        return a < b ? -1 : (a > b? 1 : 0);
	    }

	    function merge(left, right, compareFn) {
	        var result = [];

	        while (left.length && right.length) {
	            if (compareFn(left[0], right[0]) <= 0) {
	                // if 0 it should preserve same order (stable)
	                result.push(left.shift());
	            } else {
	                result.push(right.shift());
	            }
	        }

	        if (left.length) {
	            result.push.apply(result, left);
	        }

	        if (right.length) {
	            result.push.apply(result, right);
	        }

	        return result;
	    }

	    module.exports = mergeSort;




/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = __webpack_require__(33);
	var forIn = __webpack_require__(34);

	    /**
	     * Similar to Array/forEach but works over object properties and fixes Don't
	     * Enum bug on IE.
	     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
	     */
	    function forOwn(obj, fn, thisObj){
	        forIn(obj, function(val, key){
	            if (hasOwn(obj, key)) {
	                return fn.call(thisObj, obj[key], key, obj);
	            }
	        });
	    }

	    module.exports = forOwn;




/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var forOwn = __webpack_require__(14);
	var isPlainObject = __webpack_require__(36);

	    /**
	     * Mixes objects into the target object, recursively mixing existing child
	     * objects.
	     */
	    function deepMixIn(target, objects) {
	        var i = 0,
	            n = arguments.length,
	            obj;

	        while(++i < n){
	            obj = arguments[i];
	            if (obj) {
	                forOwn(obj, copyProp, target);
	            }
	        }

	        return target;
	    }

	    function copyProp(val, key) {
	        var existing = this[key];
	        if (isPlainObject(val) && isPlainObject(existing)) {
	            deepMixIn(existing, val);
	        } else {
	            this[key] = val;
	        }
	    }

	    module.exports = deepMixIn;




/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var slice = __webpack_require__(10);

	    /**
	     * Return a copy of the object, filtered to only have values for the whitelisted keys.
	     */
	    function pick(obj, var_keys){
	        var keys = typeof arguments[1] !== 'string'? arguments[1] : slice(arguments, 1),
	            out = {},
	            i = 0, key;
	        while (key = keys[i++]) {
	            out[key] = obj[key];
	        }
	        return out;
	    }

	    module.exports = pick;




/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var isPrimitive = __webpack_require__(35);

	    /**
	     * get "nested" object property
	     */
	    function get(obj, prop){
	        var parts = prop.split('.'),
	            last = parts.pop();

	        while (prop = parts.shift()) {
	            obj = obj[prop];
	            if (obj == null) return;
	        }

	        return obj[last];
	    }

	    module.exports = get;




/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var namespace = __webpack_require__(37);

	    /**
	     * set "nested" object property
	     */
	    function set(obj, prop, val){
	        var parts = (/^(.+)\.(.+)$/).exec(prop);
	        if (parts){
	            namespace(obj, parts[1])[parts[2]] = val;
	        } else {
	            obj[prop] = val;
	        }
	    }

	    module.exports = set;




/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(38);
	var camelCase = __webpack_require__(39);
	var upperCase = __webpack_require__(20);
	    /**
	     * camelCase + UPPERCASE first char
	     */
	    function pascalCase(str){
	        str = toString(str);
	        return camelCase(str).replace(/^[a-z]/, upperCase);
	    }

	    module.exports = pascalCase;



/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(38);
	    /**
	     * "Safer" String.toUpperCase()
	     */
	    function upperCase(str){
	        str = toString(str);
	        return str.toUpperCase();
	    }
	    module.exports = upperCase;



/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   2.0.1
	 */

	(function() {
	    "use strict";

	    function $$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }

	    function $$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }

	    function $$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }

	    var $$utils$$_isArray;

	    if (!Array.isArray) {
	      $$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      $$utils$$_isArray = Array.isArray;
	    }

	    var $$utils$$isArray = $$utils$$_isArray;
	    var $$utils$$now = Date.now || function() { return new Date().getTime(); };
	    function $$utils$$F() { }

	    var $$utils$$o_create = (Object.create || function (o) {
	      if (arguments.length > 1) {
	        throw new Error('Second argument not supported');
	      }
	      if (typeof o !== 'object') {
	        throw new TypeError('Argument must be an object');
	      }
	      $$utils$$F.prototype = o;
	      return new $$utils$$F();
	    });

	    var $$asap$$len = 0;

	    var $$asap$$default = function asap(callback, arg) {
	      $$asap$$queue[$$asap$$len] = callback;
	      $$asap$$queue[$$asap$$len + 1] = arg;
	      $$asap$$len += 2;
	      if ($$asap$$len === 2) {
	        // If len is 1, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        $$asap$$scheduleFlush();
	      }
	    };

	    var $$asap$$browserGlobal = (typeof window !== 'undefined') ? window : {};
	    var $$asap$$BrowserMutationObserver = $$asap$$browserGlobal.MutationObserver || $$asap$$browserGlobal.WebKitMutationObserver;

	    // test for web worker but not in IE10
	    var $$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';

	    // node
	    function $$asap$$useNextTick() {
	      return function() {
	        process.nextTick($$asap$$flush);
	      };
	    }

	    function $$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new $$asap$$BrowserMutationObserver($$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });

	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }

	    // web worker
	    function $$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = $$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }

	    function $$asap$$useSetTimeout() {
	      return function() {
	        setTimeout($$asap$$flush, 1);
	      };
	    }

	    var $$asap$$queue = new Array(1000);

	    function $$asap$$flush() {
	      for (var i = 0; i < $$asap$$len; i+=2) {
	        var callback = $$asap$$queue[i];
	        var arg = $$asap$$queue[i+1];

	        callback(arg);

	        $$asap$$queue[i] = undefined;
	        $$asap$$queue[i+1] = undefined;
	      }

	      $$asap$$len = 0;
	    }

	    var $$asap$$scheduleFlush;

	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	      $$asap$$scheduleFlush = $$asap$$useNextTick();
	    } else if ($$asap$$BrowserMutationObserver) {
	      $$asap$$scheduleFlush = $$asap$$useMutationObserver();
	    } else if ($$asap$$isWorker) {
	      $$asap$$scheduleFlush = $$asap$$useMessageChannel();
	    } else {
	      $$asap$$scheduleFlush = $$asap$$useSetTimeout();
	    }

	    function $$$internal$$noop() {}
	    var $$$internal$$PENDING   = void 0;
	    var $$$internal$$FULFILLED = 1;
	    var $$$internal$$REJECTED  = 2;
	    var $$$internal$$GET_THEN_ERROR = new $$$internal$$ErrorObject();

	    function $$$internal$$selfFullfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }

	    function $$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.')
	    }

	    function $$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        $$$internal$$GET_THEN_ERROR.error = error;
	        return $$$internal$$GET_THEN_ERROR;
	      }
	    }

	    function $$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }

	    function $$$internal$$handleForeignThenable(promise, thenable, then) {
	       $$asap$$default(function(promise) {
	        var sealed = false;
	        var error = $$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            $$$internal$$resolve(promise, value);
	          } else {
	            $$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;

	          $$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));

	        if (!sealed && error) {
	          sealed = true;
	          $$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }

	    function $$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === $$$internal$$FULFILLED) {
	        $$$internal$$fulfill(promise, thenable._result);
	      } else if (promise._state === $$$internal$$REJECTED) {
	        $$$internal$$reject(promise, thenable._result);
	      } else {
	        $$$internal$$subscribe(thenable, undefined, function(value) {
	          $$$internal$$resolve(promise, value);
	        }, function(reason) {
	          $$$internal$$reject(promise, reason);
	        });
	      }
	    }

	    function $$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        $$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = $$$internal$$getThen(maybeThenable);

	        if (then === $$$internal$$GET_THEN_ERROR) {
	          $$$internal$$reject(promise, $$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          $$$internal$$fulfill(promise, maybeThenable);
	        } else if ($$utils$$isFunction(then)) {
	          $$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          $$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }

	    function $$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        $$$internal$$reject(promise, $$$internal$$selfFullfillment());
	      } else if ($$utils$$objectOrFunction(value)) {
	        $$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        $$$internal$$fulfill(promise, value);
	      }
	    }

	    function $$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }

	      $$$internal$$publish(promise);
	    }

	    function $$$internal$$fulfill(promise, value) {
	      if (promise._state !== $$$internal$$PENDING) { return; }

	      promise._result = value;
	      promise._state = $$$internal$$FULFILLED;

	      if (promise._subscribers.length === 0) {
	      } else {
	        $$asap$$default($$$internal$$publish, promise);
	      }
	    }

	    function $$$internal$$reject(promise, reason) {
	      if (promise._state !== $$$internal$$PENDING) { return; }
	      promise._state = $$$internal$$REJECTED;
	      promise._result = reason;

	      $$asap$$default($$$internal$$publishRejection, promise);
	    }

	    function $$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;

	      parent._onerror = null;

	      subscribers[length] = child;
	      subscribers[length + $$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + $$$internal$$REJECTED]  = onRejection;

	      if (length === 0 && parent._state) {
	        $$asap$$default($$$internal$$publish, parent);
	      }
	    }

	    function $$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;

	      if (subscribers.length === 0) { return; }

	      var child, callback, detail = promise._result;

	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];

	        if (child) {
	          $$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }

	      promise._subscribers.length = 0;
	    }

	    function $$$internal$$ErrorObject() {
	      this.error = null;
	    }

	    var $$$internal$$TRY_CATCH_ERROR = new $$$internal$$ErrorObject();

	    function $$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        $$$internal$$TRY_CATCH_ERROR.error = e;
	        return $$$internal$$TRY_CATCH_ERROR;
	      }
	    }

	    function $$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = $$utils$$isFunction(callback),
	          value, error, succeeded, failed;

	      if (hasCallback) {
	        value = $$$internal$$tryCatch(callback, detail);

	        if (value === $$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }

	        if (promise === value) {
	          $$$internal$$reject(promise, $$$internal$$cannotReturnOwn());
	          return;
	        }

	      } else {
	        value = detail;
	        succeeded = true;
	      }

	      if (promise._state !== $$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        $$$internal$$resolve(promise, value);
	      } else if (failed) {
	        $$$internal$$reject(promise, error);
	      } else if (settled === $$$internal$$FULFILLED) {
	        $$$internal$$fulfill(promise, value);
	      } else if (settled === $$$internal$$REJECTED) {
	        $$$internal$$reject(promise, value);
	      }
	    }

	    function $$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          $$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          $$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        $$$internal$$reject(promise, e);
	      }
	    }

	    function $$$enumerator$$makeSettledResult(state, position, value) {
	      if (state === $$$internal$$FULFILLED) {
	        return {
	          state: 'fulfilled',
	          value: value
	        };
	      } else {
	        return {
	          state: 'rejected',
	          reason: value
	        };
	      }
	    }

	    function $$$enumerator$$Enumerator(Constructor, input, abortOnReject, label) {
	      this._instanceConstructor = Constructor;
	      this.promise = new Constructor($$$internal$$noop, label);
	      this._abortOnReject = abortOnReject;

	      if (this._validateInput(input)) {
	        this._input     = input;
	        this.length     = input.length;
	        this._remaining = input.length;

	        this._init();

	        if (this.length === 0) {
	          $$$internal$$fulfill(this.promise, this._result);
	        } else {
	          this.length = this.length || 0;
	          this._enumerate();
	          if (this._remaining === 0) {
	            $$$internal$$fulfill(this.promise, this._result);
	          }
	        }
	      } else {
	        $$$internal$$reject(this.promise, this._validationError());
	      }
	    }

	    $$$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return $$utils$$isArray(input);
	    };

	    $$$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };

	    $$$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };

	    var $$$enumerator$$default = $$$enumerator$$Enumerator;

	    $$$enumerator$$Enumerator.prototype._enumerate = function() {
	      var length  = this.length;
	      var promise = this.promise;
	      var input   = this._input;

	      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {
	        this._eachEntry(input[i], i);
	      }
	    };

	    $$$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var c = this._instanceConstructor;
	      if ($$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== $$$internal$$PENDING) {
	          entry._onerror = null;
	          this._settledAt(entry._state, i, entry._result);
	        } else {
	          this._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        this._remaining--;
	        this._result[i] = this._makeResult($$$internal$$FULFILLED, i, entry);
	      }
	    };

	    $$$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var promise = this.promise;

	      if (promise._state === $$$internal$$PENDING) {
	        this._remaining--;

	        if (this._abortOnReject && state === $$$internal$$REJECTED) {
	          $$$internal$$reject(promise, value);
	        } else {
	          this._result[i] = this._makeResult(state, i, value);
	        }
	      }

	      if (this._remaining === 0) {
	        $$$internal$$fulfill(promise, this._result);
	      }
	    };

	    $$$enumerator$$Enumerator.prototype._makeResult = function(state, i, value) {
	      return value;
	    };

	    $$$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;

	      $$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt($$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt($$$internal$$REJECTED, i, reason);
	      });
	    };

	    var $$promise$all$$default = function all(entries, label) {
	      return new $$$enumerator$$default(this, entries, true /* abort on reject */, label).promise;
	    };

	    var $$promise$race$$default = function race(entries, label) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      var promise = new Constructor($$$internal$$noop, label);

	      if (!$$utils$$isArray(entries)) {
	        $$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }

	      var length = entries.length;

	      function onFulfillment(value) {
	        $$$internal$$resolve(promise, value);
	      }

	      function onRejection(reason) {
	        $$$internal$$reject(promise, reason);
	      }

	      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {
	        $$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }

	      return promise;
	    };

	    var $$promise$resolve$$default = function resolve(object, label) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }

	      var promise = new Constructor($$$internal$$noop, label);
	      $$$internal$$resolve(promise, object);
	      return promise;
	    };

	    var $$promise$reject$$default = function reject(reason, label) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor($$$internal$$noop, label);
	      $$$internal$$reject(promise, reason);
	      return promise;
	    };

	    var $$es6$promise$promise$$counter = 0;

	    function $$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }

	    function $$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }

	    var $$es6$promise$promise$$default = $$es6$promise$promise$$Promise;

	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise’s eventual value or the reason
	      why the promise cannot be fulfilled.

	      Terminology
	      -----------

	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.

	      A promise can be in one of three states: pending, fulfilled, or rejected.

	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.

	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.


	      Basic Usage:
	      ------------

	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);

	        // on failure
	        reject(reason);
	      });

	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Advanced Usage:
	      ---------------

	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.

	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();

	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();

	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }

	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Unlike callbacks, promises are great composable primitives.

	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON

	        return values;
	      });
	      ```

	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function $$es6$promise$promise$$Promise(resolver) {
	      this._id = $$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];

	      if ($$$internal$$noop !== resolver) {
	        if (!$$utils$$isFunction(resolver)) {
	          $$es6$promise$promise$$needsResolver();
	        }

	        if (!(this instanceof $$es6$promise$promise$$Promise)) {
	          $$es6$promise$promise$$needsNew();
	        }

	        $$$internal$$initializePromise(this, resolver);
	      }
	    }

	    $$es6$promise$promise$$Promise.all = $$promise$all$$default;
	    $$es6$promise$promise$$Promise.race = $$promise$race$$default;
	    $$es6$promise$promise$$Promise.resolve = $$promise$resolve$$default;
	    $$es6$promise$promise$$Promise.reject = $$promise$reject$$default;

	    $$es6$promise$promise$$Promise.prototype = {
	      constructor: $$es6$promise$promise$$Promise,

	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.

	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```

	      Chaining
	      --------

	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.

	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });

	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```

	      Assimilation
	      ------------

	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```

	      If the assimliated promise rejects, then the downstream promise will also reject.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```

	      Simple Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var result;

	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```

	      Advanced Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var author, books;

	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js

	      function foundBooks(books) {

	      }

	      function failure(reason) {

	      }

	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;

	        if (state === $$$internal$$FULFILLED && !onFulfillment || state === $$$internal$$REJECTED && !onRejection) {
	          return this;
	        }

	        var child = new this.constructor($$$internal$$noop);
	        var result = parent._result;

	        if (state) {
	          var callback = arguments[state - 1];
	          $$asap$$default(function(){
	            $$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          $$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }

	        return child;
	      },

	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.

	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }

	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }

	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };

	    var $$es6$promise$polyfill$$default = function polyfill() {
	      var local;

	      if (typeof global !== 'undefined') {
	        local = global;
	      } else if (typeof window !== 'undefined' && window.document) {
	        local = window;
	      } else {
	        local = self;
	      }

	      var es6PromiseSupport =
	        "Promise" in local &&
	        // Some of these methods are missing from
	        // Firefox/Chrome experimental implementations
	        "resolve" in local.Promise &&
	        "reject" in local.Promise &&
	        "all" in local.Promise &&
	        "race" in local.Promise &&
	        // Older version of the spec had a resolver object
	        // as the arg rather than a function
	        (function() {
	          var resolve;
	          new local.Promise(function(r) { resolve = r; });
	          return $$utils$$isFunction(resolve);
	        }());

	      if (!es6PromiseSupport) {
	        local.Promise = $$es6$promise$promise$$default;
	      }
	    };

	    var es6$promise$umd$$ES6Promise = {
	      'Promise': $$es6$promise$promise$$default,
	      'polyfill': $$es6$promise$polyfill$$default
	    };

	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(51)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = es6$promise$umd$$ES6Promise;
	    }
	}).call(this);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(50), (function() { return this; }()), __webpack_require__(52)(module)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * yabh
	 * @version 1.0.0 - Homepage <http://jmdobry.github.io/yabh/>
	 * @author Jason Dobry <jason.dobry@gmail.com>
	 * @copyright (c) 2015 Jason Dobry 
	 * @license MIT <https://github.com/jmdobry/yabh/blob/master/LICENSE>
	 * 
	 * @overview Yet another Binary Heap.
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define(factory);
		else if(typeof exports === 'object')
			exports["BinaryHeap"] = factory();
		else
			root["BinaryHeap"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

		var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

		/**
		 * @method bubbleUp
		 * @param {array} heap The heap.
		 * @param {function} weightFunc The weight function.
		 * @param {number} n The index of the element to bubble up.
		 */
		function bubbleUp(heap, weightFunc, n) {
		  var element = heap[n];
		  var weight = weightFunc(element);
		  // When at 0, an element can not go up any further.
		  while (n > 0) {
		    // Compute the parent element's index, and fetch it.
		    var parentN = Math.floor((n + 1) / 2) - 1;
		    var _parent = heap[parentN];
		    // If the parent has a lesser weight, things are in order and we
		    // are done.
		    if (weight >= weightFunc(_parent)) {
		      break;
		    } else {
		      heap[parentN] = element;
		      heap[n] = _parent;
		      n = parentN;
		    }
		  }
		}

		/**
		 * @method bubbleDown
		 * @param {array} heap The heap.
		 * @param {function} weightFunc The weight function.
		 * @param {number} n The index of the element to sink down.
		 */
		var bubbleDown = function (heap, weightFunc, n) {
		  var length = heap.length;
		  var node = heap[n];
		  var nodeWeight = weightFunc(node);

		  while (true) {
		    var child2N = (n + 1) * 2,
		        child1N = child2N - 1;
		    var swap = null;
		    if (child1N < length) {
		      var child1 = heap[child1N],
		          child1Weight = weightFunc(child1);
		      // If the score is less than our node's, we need to swap.
		      if (child1Weight < nodeWeight) {
		        swap = child1N;
		      }
		    }
		    // Do the same checks for the other child.
		    if (child2N < length) {
		      var child2 = heap[child2N],
		          child2Weight = weightFunc(child2);
		      if (child2Weight < (swap === null ? nodeWeight : weightFunc(heap[child1N]))) {
		        swap = child2N;
		      }
		    }

		    if (swap === null) {
		      break;
		    } else {
		      heap[n] = heap[swap];
		      heap[swap] = node;
		      n = swap;
		    }
		  }
		};

		var BinaryHeap = (function () {
		  function BinaryHeap(weightFunc, compareFunc) {
		    _classCallCheck(this, BinaryHeap);

		    if (!weightFunc) {
		      weightFunc = function (x) {
		        return x;
		      };
		    }
		    if (!compareFunc) {
		      compareFunc = function (x, y) {
		        return x === y;
		      };
		    }
		    if (typeof weightFunc !== "function") {
		      throw new Error("BinaryHeap([weightFunc][, compareFunc]): \"weightFunc\" must be a function!");
		    }
		    if (typeof compareFunc !== "function") {
		      throw new Error("BinaryHeap([weightFunc][, compareFunc]): \"compareFunc\" must be a function!");
		    }
		    this.weightFunc = weightFunc;
		    this.compareFunc = compareFunc;
		    this.heap = [];
		  }

		  _createClass(BinaryHeap, {
		    push: {
		      value: function push(node) {
		        this.heap.push(node);
		        bubbleUp(this.heap, this.weightFunc, this.heap.length - 1);
		      }
		    },
		    peek: {
		      value: function peek() {
		        return this.heap[0];
		      }
		    },
		    pop: {
		      value: function pop() {
		        var front = this.heap[0];
		        var end = this.heap.pop();
		        if (this.heap.length > 0) {
		          this.heap[0] = end;
		          bubbleDown(this.heap, this.weightFunc, 0);
		        }
		        return front;
		      }
		    },
		    remove: {
		      value: function remove(node) {
		        var length = this.heap.length;
		        for (var i = 0; i < length; i++) {
		          if (this.compareFunc(this.heap[i], node)) {
		            var removed = this.heap[i];
		            var end = this.heap.pop();
		            if (i !== length - 1) {
		              this.heap[i] = end;
		              bubbleUp(this.heap, this.weightFunc, i);
		              bubbleDown(this.heap, this.weightFunc, i);
		            }
		            return removed;
		          }
		        }
		        return null;
		      }
		    },
		    removeAll: {
		      value: function removeAll() {
		        this.heap = [];
		      }
		    },
		    size: {
		      value: function size() {
		        return this.heap.length;
		      }
		    }
		  });

		  return BinaryHeap;
		})();

		module.exports = BinaryHeap;

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	module.exports = defineResource;
	/*jshint evil:true, loopfunc:true*/

	var DSUtils = _interopRequire(__webpack_require__(1));

	var DSErrors = _interopRequire(__webpack_require__(2));

	var Resource = function Resource(options) {
	  _classCallCheck(this, Resource);

	  DSUtils.deepMixIn(this, options);
	  if ("endpoint" in options) {
	    this.endpoint = options.endpoint;
	  } else {
	    this.endpoint = this.name;
	  }
	};

	var instanceMethods = ["compute", "refresh", "save", "update", "destroy", "loadRelations", "changeHistory", "changes", "hasChanges", "lastModified", "lastSaved", "link", "linkInverse", "previous", "unlinkInverse"];

	function defineResource(definition) {
	  var _this = this;
	  var definitions = _this.defs;

	  if (DSUtils._s(definition)) {
	    definition = {
	      name: definition.replace(/\s/gi, "")
	    };
	  }
	  if (!DSUtils._o(definition)) {
	    throw DSUtils._oErr("definition");
	  } else if (!DSUtils._s(definition.name)) {
	    throw new DSErrors.IA("\"name\" must be a string!");
	  } else if (_this.s[definition.name]) {
	    throw new DSErrors.R("" + definition.name + " is already registered!");
	  }

	  try {
	    var def;

	    var _class;

	    var _ret = (function () {
	      // Inherit from global defaults
	      Resource.prototype = _this.defaults;
	      definitions[definition.name] = new Resource(definition);

	      def = definitions[definition.name];

	      // alias name, shaves 0.08 kb off the minified build
	      def.n = def.name;


	      if (!DSUtils._s(def.idAttribute)) {
	        throw new DSErrors.IA("\"idAttribute\" must be a string!");
	      }

	      // Setup nested parent configuration
	      if (def.relations) {
	        def.relationList = [];
	        def.relationFields = [];
	        DSUtils.forOwn(def.relations, function (relatedModels, type) {
	          DSUtils.forOwn(relatedModels, function (defs, relationName) {
	            if (!DSUtils._a(defs)) {
	              relatedModels[relationName] = [defs];
	            }
	            DSUtils.forEach(relatedModels[relationName], function (d) {
	              d.type = type;
	              d.relation = relationName;
	              d.name = def.n;
	              def.relationList.push(d);
	              if (d.localField) {
	                def.relationFields.push(d.localField);
	              }
	            });
	          });
	        });
	        if (def.relations.belongsTo) {
	          DSUtils.forOwn(def.relations.belongsTo, function (relatedModel, modelName) {
	            DSUtils.forEach(relatedModel, function (relation) {
	              if (relation.parent) {
	                def.parent = modelName;
	                def.parentKey = relation.localKey;
	                def.parentField = relation.localField;
	              }
	            });
	          });
	        }
	        if (typeof Object.freeze === "function") {
	          Object.freeze(def.relations);
	          Object.freeze(def.relationList);
	        }
	      }

	      def.getResource = function (resourceName) {
	        return _this.defs[resourceName];
	      };

	      def.getEndpoint = function (id, options) {
	        options.params = options.params || {};

	        var item = undefined;
	        var parentKey = def.parentKey;
	        var endpoint = options.hasOwnProperty("endpoint") ? options.endpoint : def.endpoint;
	        var parentField = def.parentField;
	        var parentDef = definitions[def.parent];
	        var parentId = options.params[parentKey];

	        if (parentId === false || !parentKey || !parentDef) {
	          if (parentId === false) {
	            delete options.params[parentKey];
	          }
	          return endpoint;
	        } else {
	          delete options.params[parentKey];

	          if (DSUtils._sn(id)) {
	            item = def.get(id);
	          } else if (DSUtils._o(id)) {
	            item = id;
	          }

	          if (item) {
	            parentId = parentId || item[parentKey] || (item[parentField] ? item[parentField][parentDef.idAttribute] : null);
	          }

	          if (parentId) {
	            var _ret2 = (function () {
	              delete options.endpoint;
	              var _options = {};
	              DSUtils.forOwn(options, function (value, key) {
	                _options[key] = value;
	              });
	              return {
	                v: DSUtils.makePath(parentDef.getEndpoint(parentId, DSUtils._(parentDef, _options)), parentId, endpoint)
	              };
	            })();

	            if (typeof _ret2 === "object") return _ret2.v;
	          } else {
	            return endpoint;
	          }
	        }
	      };

	      // Remove this in v0.11.0 and make a breaking change notice
	      // the the `filter` option has been renamed to `defaultFilter`
	      if (def.filter) {
	        def.defaultFilter = def.filter;
	        delete def.filter;
	      }

	      // Create the wrapper class for the new resource
	      _class = def["class"] = DSUtils.pascalCase(def.name);

	      try {
	        if (typeof def.useClass === "function") {
	          eval("function " + _class + "() { def.useClass.call(this); }");
	          def[_class] = eval(_class);
	          def[_class].prototype = (function (proto) {
	            function Ctor() {}

	            Ctor.prototype = proto;
	            return new Ctor();
	          })(def.useClass.prototype);
	        } else {
	          eval("function " + _class + "() {}");
	          def[_class] = eval(_class);
	        }
	      } catch (e) {
	        def[_class] = function () {};
	      }

	      // Apply developer-defined methods
	      if (def.methods) {
	        DSUtils.deepMixIn(def[_class].prototype, def.methods);
	      }

	      def[_class].prototype.set = function (key, value) {
	        DSUtils.set(this, key, value);
	        _this.compute(def.n, this);
	        return this;
	      };

	      def[_class].prototype.get = function (key) {
	        return DSUtils.get(this, key);
	      };

	      // Prepare for computed properties
	      if (def.computed) {
	        DSUtils.forOwn(def.computed, function (fn, field) {
	          if (DSUtils.isFunction(fn)) {
	            def.computed[field] = [fn];
	            fn = def.computed[field];
	          }
	          if (def.methods && field in def.methods) {
	            def.errorFn("Computed property \"" + field + "\" conflicts with previously defined prototype method!");
	          }
	          var deps;
	          if (fn.length === 1) {
	            var match = fn[0].toString().match(/function.*?\(([\s\S]*?)\)/);
	            deps = match[1].split(",");
	            def.computed[field] = deps.concat(fn);
	            fn = def.computed[field];
	            if (deps.length) {
	              def.errorFn("Use the computed property array syntax for compatibility with minified code!");
	            }
	          }
	          deps = fn.slice(0, fn.length - 1);
	          DSUtils.forEach(deps, function (val, index) {
	            deps[index] = val.trim();
	          });
	          fn.deps = DSUtils.filter(deps, function (dep) {
	            return !!dep;
	          });
	        });
	      }

	      if (definition.schema && _this.schemator) {
	        def.schema = _this.schemator.defineSchema(def.n, definition.schema);

	        if (!definition.hasOwnProperty("validate")) {
	          def.validate = function (resourceName, attrs, cb) {
	            def.schema.validate(attrs, {
	              ignoreMissing: def.ignoreMissing
	            }, function (err) {
	              if (err) {
	                return cb(err);
	              } else {
	                return cb(null, attrs);
	              }
	            });
	          };
	        }
	      }

	      DSUtils.forEach(instanceMethods, function (name) {
	        def[_class].prototype["DS" + DSUtils.pascalCase(name)] = function () {
	          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          args.unshift(this[def.idAttribute] || this);
	          args.unshift(def.n);
	          return _this[name].apply(_this, args);
	        };
	      });

	      def[_class].prototype.DSCreate = function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        args.unshift(this);
	        args.unshift(def.n);
	        return _this.create.apply(_this, args);
	      };

	      // Initialize store data for the new resource
	      _this.s[def.n] = {
	        collection: [],
	        expiresHeap: new DSUtils.BinaryHeap(function (x) {
	          return x.expires;
	        }, function (x, y) {
	          return x.item === y;
	        }),
	        completedQueries: {},
	        queryData: {},
	        pendingQueries: {},
	        index: {},
	        modified: {},
	        saved: {},
	        previousAttributes: {},
	        observers: {},
	        changeHistories: {},
	        changeHistory: [],
	        collectionModified: 0
	      };

	      if (def.reapInterval) {
	        setInterval(function () {
	          return _this.reap(def.n, { isInterval: true });
	        }, def.reapInterval);
	      }

	      // Proxy DS methods with shorthand ones
	      var fns = ["registerAdapter", "getAdapter", "is"];
	      for (key in _this) {
	        if (typeof _this[key] === "function") {
	          fns.push(key);
	        }
	      }

	      DSUtils.forEach(fns, function (key) {
	        var k = key;
	        if (_this[k].shorthand !== false) {
	          def[k] = function () {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	              args[_key] = arguments[_key];
	            }

	            args.unshift(def.n);
	            return _this[k].apply(_this, args);
	          };
	        } else {
	          def[k] = function () {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	              args[_key] = arguments[_key];
	            }

	            return _this[k].apply(_this, args);
	          };
	        }
	      });

	      def.beforeValidate = DSUtils.promisify(def.beforeValidate);
	      def.validate = DSUtils.promisify(def.validate);
	      def.afterValidate = DSUtils.promisify(def.afterValidate);
	      def.beforeCreate = DSUtils.promisify(def.beforeCreate);
	      def.afterCreate = DSUtils.promisify(def.afterCreate);
	      def.beforeUpdate = DSUtils.promisify(def.beforeUpdate);
	      def.afterUpdate = DSUtils.promisify(def.afterUpdate);
	      def.beforeDestroy = DSUtils.promisify(def.beforeDestroy);
	      def.afterDestroy = DSUtils.promisify(def.afterDestroy);

	      var defaultAdapter = undefined;
	      if (def.hasOwnProperty("defaultAdapter")) {
	        defaultAdapter = def.defaultAdapter;
	      }
	      DSUtils.forOwn(def.actions, function (action, name) {
	        if (def[name] && !def.actions[name]) {
	          throw new Error("Cannot override existing method \"" + name + "\"!");
	        }
	        def[name] = function (id, options) {
	          if (DSUtils._o(id)) {
	            options = id;
	          }
	          options = options || {};
	          var adapter = _this.getAdapter(action.adapter || defaultAdapter || "http");
	          var config = DSUtils.deepMixIn({}, action);
	          if (!options.hasOwnProperty("endpoint") && config.endpoint) {
	            options.endpoint = config.endpoint;
	          }
	          if (typeof options.getEndpoint === "function") {
	            config.url = options.getEndpoint(def, options);
	          } else {
	            var args = [options.basePath || adapter.defaults.basePath || def.basePath, def.getEndpoint(DSUtils._sn(id) ? id : null, options)];
	            if (DSUtils._sn(id)) {
	              args.push(id);
	            }
	            args.push(action.pathname || name);
	            config.url = DSUtils.makePath.apply(null, args);
	          }
	          config.method = config.method || "GET";
	          DSUtils.deepMixIn(config, options);
	          return adapter.HTTP(config);
	        };
	      });

	      // Mix-in events
	      DSUtils.Events(def);


	      return {
	        v: def
	      };
	    })();

	    if (typeof _ret === "object") return _ret.v;
	  } catch (err) {
	    delete definitions[definition.name];
	    delete _this.s[definition.name];
	    throw err;
	  }
	}

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = eject;

	function eject(resourceName, id, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  var resource = _this.s[resourceName];
	  var item = undefined;
	  var found = false;

	  id = DSUtils.resolveId(definition, id);

	  if (!definition) {
	    throw new _this.errors.NER(resourceName);
	  } else if (!DSUtils._sn(id)) {
	    throw DSUtils._snErr("id");
	  }

	  options = DSUtils._(definition, options);


	  for (var i = 0; i < resource.collection.length; i++) {
	    if (resource.collection[i][definition.idAttribute] == id) {
	      // jshint ignore:line
	      item = resource.collection[i];
	      resource.expiresHeap.remove(item);
	      found = true;
	      break;
	    }
	  }
	  if (found) {
	    var _ret = (function () {
	      if (options.notify) {
	        definition.beforeEject(options, item);
	        definition.emit("DS.beforeEject", definition, item);
	      }
	      _this.unlinkInverse(definition.n, id);
	      resource.collection.splice(i, 1);
	      if (DSUtils.w) {
	        resource.observers[id].close();
	      }
	      delete resource.observers[id];

	      delete resource.index[id];
	      delete resource.previousAttributes[id];
	      delete resource.completedQueries[id];
	      delete resource.pendingQueries[id];
	      DSUtils.forEach(resource.changeHistories[id], function (changeRecord) {
	        DSUtils.remove(resource.changeHistory, changeRecord);
	      });
	      var toRemove = [];
	      DSUtils.forOwn(resource.queryData, function (items, queryHash) {
	        if (items.$$injected) {
	          DSUtils.remove(items, item);
	        }
	        if (!items.length) {
	          toRemove.push(queryHash);
	        }
	      });
	      DSUtils.forEach(toRemove, function (queryHash) {
	        delete resource.completedQueries[queryHash];
	        delete resource.queryData[queryHash];
	      });
	      delete resource.changeHistories[id];
	      delete resource.modified[id];
	      delete resource.saved[id];
	      resource.collectionModified = DSUtils.updateTimestamp(resource.collectionModified);

	      if (options.notify) {
	        definition.afterEject(options, item);
	        definition.emit("DS.afterEject", definition, item);
	      }

	      return {
	        v: item
	      };
	    })();

	    if (typeof _ret === "object") {
	      return _ret.v;
	    }
	  }
	}

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = ejectAll;

	function ejectAll(resourceName, params, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  params = params || {};

	  if (!definition) {
	    throw new _this.errors.NER(resourceName);
	  } else if (!DSUtils._o(params)) {
	    throw DSUtils._oErr("params");
	  }


	  var resource = _this.s[resourceName];
	  var queryHash = DSUtils.toJson(params);
	  var items = _this.filter(definition.n, params);
	  var ids = [];
	  if (DSUtils.isEmpty(params)) {
	    resource.completedQueries = {};
	  } else {
	    delete resource.completedQueries[queryHash];
	  }
	  DSUtils.forEach(items, function (item) {
	    if (item && item[definition.idAttribute]) {
	      ids.push(item[definition.idAttribute]);
	    }
	  });
	  DSUtils.forEach(ids, function (id) {
	    _this.eject(definition.n, id, options);
	  });
	  resource.collectionModified = DSUtils.updateTimestamp(resource.collectionModified);
	  return items;
	}

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = filter;

	function filter(resourceName, params, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  var resource = _this.s[resourceName];

	  if (!definition) {
	    throw new _this.errors.NER(resourceName);
	  } else if (params && !DSUtils._o(params)) {
	    throw DSUtils._oErr("params");
	  }

	  // Protect against null
	  params = params || {};

	  options = DSUtils._(definition, options);


	  var queryHash = DSUtils.toJson(params);

	  if (!(queryHash in resource.completedQueries) && options.loadFromServer) {
	    // This particular query has never been completed

	    if (!resource.pendingQueries[queryHash]) {
	      // This particular query has never even been started
	      _this.findAll(resourceName, params, options);
	    }
	  }

	  return definition.defaultFilter.call(_this, resource.collection, resourceName, params, options);
	}

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	module.exports = inject;

	var DSUtils = _interopRequire(__webpack_require__(1));

	var DSErrors = _interopRequire(__webpack_require__(2));

	function _getReactFunction(DS, definition, resource) {
	  var name = definition.n;
	  return function _react(added, removed, changed, oldValueFn, firstTime) {
	    var target = this;
	    var item = undefined;
	    var innerId = oldValueFn && oldValueFn(definition.idAttribute) ? oldValueFn(definition.idAttribute) : target[definition.idAttribute];

	    DSUtils.forEach(definition.relationFields, function (field) {
	      delete added[field];
	      delete removed[field];
	      delete changed[field];
	    });

	    if (!DSUtils.isEmpty(added) || !DSUtils.isEmpty(removed) || !DSUtils.isEmpty(changed) || firstTime) {
	      item = DS.get(name, innerId);
	      resource.modified[innerId] = DSUtils.updateTimestamp(resource.modified[innerId]);
	      resource.collectionModified = DSUtils.updateTimestamp(resource.collectionModified);
	      if (definition.keepChangeHistory) {
	        var changeRecord = {
	          resourceName: name,
	          target: item,
	          added: added,
	          removed: removed,
	          changed: changed,
	          timestamp: resource.modified[innerId]
	        };
	        resource.changeHistories[innerId].push(changeRecord);
	        resource.changeHistory.push(changeRecord);
	      }
	    }

	    if (definition.computed) {
	      item = item || DS.get(name, innerId);
	      DSUtils.forOwn(definition.computed, function (fn, field) {
	        var compute = false;
	        // check if required fields changed
	        DSUtils.forEach(fn.deps, function (dep) {
	          if (dep in added || dep in removed || dep in changed || !(field in item)) {
	            compute = true;
	          }
	        });
	        compute = compute || !fn.deps.length;
	        if (compute) {
	          DSUtils.compute.call(item, fn, field);
	        }
	      });
	    }

	    if (definition.relations) {
	      item = item || DS.get(name, innerId);
	      DSUtils.forEach(definition.relationList, function (def) {
	        if (item[def.localField] && (def.localKey in added || def.localKey in removed || def.localKey in changed)) {
	          DS.link(name, item[definition.idAttribute], [def.relation]);
	        }
	      });
	    }

	    if (definition.idAttribute in changed) {
	      definition.errorFn("Doh! You just changed the primary key of an object! Your data for the \"" + name + "\" resource is now in an undefined (probably broken) state.");
	    }
	  };
	}

	function _inject(definition, resource, attrs, options) {
	  var _this = this;
	  var _react = _getReactFunction(_this, definition, resource, attrs, options);

	  var injected = undefined;
	  if (DSUtils._a(attrs)) {
	    injected = [];
	    for (var i = 0; i < attrs.length; i++) {
	      injected.push(_inject.call(_this, definition, resource, attrs[i], options));
	    }
	  } else {
	    // check if "idAttribute" is a computed property
	    var c = definition.computed;
	    var idA = definition.idAttribute;
	    if (c && c[idA]) {
	      (function () {
	        var args = [];
	        DSUtils.forEach(c[idA].deps, function (dep) {
	          args.push(attrs[dep]);
	        });
	        attrs[idA] = c[idA][c[idA].length - 1].apply(attrs, args);
	      })();
	    }
	    if (!(idA in attrs)) {
	      var error = new DSErrors.R("" + definition.n + ".inject: \"attrs\" must contain the property specified by \"idAttribute\"!");
	      options.errorFn(error);
	      throw error;
	    } else {
	      try {
	        DSUtils.forEach(definition.relationList, function (def) {
	          var relationName = def.relation;
	          var relationDef = _this.defs[relationName];
	          var toInject = attrs[def.localField];
	          if (toInject) {
	            if (!relationDef) {
	              throw new DSErrors.R("" + definition.n + " relation is defined but the resource is not!");
	            }
	            if (DSUtils._a(toInject)) {
	              (function () {
	                var items = [];
	                DSUtils.forEach(toInject, function (toInjectItem) {
	                  if (toInjectItem !== _this.s[relationName].index[toInjectItem[relationDef.idAttribute]]) {
	                    try {
	                      var injectedItem = _this.inject(relationName, toInjectItem, options.orig());
	                      if (def.foreignKey) {
	                        injectedItem[def.foreignKey] = attrs[definition.idAttribute];
	                      }
	                      items.push(injectedItem);
	                    } catch (err) {
	                      options.errorFn(err, "Failed to inject " + def.type + " relation: \"" + relationName + "\"!");
	                    }
	                  }
	                });
	                attrs[def.localField] = items;
	              })();
	            } else {
	              if (toInject !== _this.s[relationName].index[toInject[relationDef.idAttribute]]) {
	                try {
	                  attrs[def.localField] = _this.inject(relationName, attrs[def.localField], options.orig());
	                  if (def.foreignKey) {
	                    attrs[def.localField][def.foreignKey] = attrs[definition.idAttribute];
	                  }
	                } catch (err) {
	                  options.errorFn(err, "Failed to inject " + def.type + " relation: \"" + relationName + "\"!");
	                }
	              }
	            }
	          }
	        });

	        var id = attrs[idA];
	        var item = _this.get(definition.n, id);
	        var initialLastModified = item ? resource.modified[id] : 0;

	        if (!item) {
	          if (options.useClass) {
	            if (attrs instanceof definition[definition["class"]]) {
	              item = attrs;
	            } else {
	              item = new definition[definition["class"]]();
	            }
	          } else {
	            item = {};
	          }
	          DSUtils.deepMixIn(item, attrs);

	          resource.collection.push(item);
	          resource.changeHistories[id] = [];

	          if (DSUtils.w) {
	            resource.observers[id] = new _this.observe.ObjectObserver(item);
	            resource.observers[id].open(_react, item);
	          }

	          resource.index[id] = item;
	          _react.call(item, {}, {}, {}, null, true);
	          resource.previousAttributes[id] = DSUtils.copy(item, null, null, null, definition.relationFields);
	        } else {
	          DSUtils.deepMixIn(item, attrs);
	          if (definition.resetHistoryOnInject) {
	            resource.previousAttributes[id] = DSUtils.copy(item, null, null, null, definition.relationFields);
	            if (resource.changeHistories[id].length) {
	              DSUtils.forEach(resource.changeHistories[id], function (changeRecord) {
	                DSUtils.remove(resource.changeHistory, changeRecord);
	              });
	              resource.changeHistories[id].splice(0, resource.changeHistories[id].length);
	            }
	          }
	          if (DSUtils.w) {
	            resource.observers[id].deliver();
	          }
	        }
	        resource.modified[id] = initialLastModified && resource.modified[id] === initialLastModified ? DSUtils.updateTimestamp(resource.modified[id]) : resource.modified[id];
	        resource.expiresHeap.remove(item);
	        var timestamp = new Date().getTime();
	        resource.expiresHeap.push({
	          item: item,
	          timestamp: timestamp,
	          expires: definition.maxAge ? timestamp + definition.maxAge : Number.MAX_VALUE
	        });
	        injected = item;
	      } catch (err) {
	        options.errorFn(err, attrs);
	      }
	    }
	  }
	  return injected;
	}

	function _link(definition, injected, options) {
	  var _this = this;

	  DSUtils.forEach(definition.relationList, function (def) {
	    if (options.findBelongsTo && def.type === "belongsTo" && injected[definition.idAttribute]) {
	      _this.link(definition.n, injected[definition.idAttribute], [def.relation]);
	    } else if (options.findHasMany && def.type === "hasMany" || options.findHasOne && def.type === "hasOne") {
	      _this.link(definition.n, injected[definition.idAttribute], [def.relation]);
	    }
	  });
	}

	function inject(resourceName, attrs, options) {
	  var _this = this;
	  var definition = _this.defs[resourceName];
	  var resource = _this.s[resourceName];
	  var injected = undefined;

	  if (!definition) {
	    throw new DSErrors.NER(resourceName);
	  } else if (!DSUtils._o(attrs) && !DSUtils._a(attrs)) {
	    throw new DSErrors.IA("" + resourceName + ".inject: \"attrs\" must be an object or an array!");
	  }

	  var name = definition.n;
	  options = DSUtils._(definition, options);

	  if (options.notify) {
	    options.beforeInject(options, attrs);
	    definition.emit("DS.beforeInject", definition, attrs);
	  }

	  injected = _inject.call(_this, definition, resource, attrs, options);
	  resource.collectionModified = DSUtils.updateTimestamp(resource.collectionModified);

	  if (options.findInverseLinks) {
	    if (DSUtils._a(injected)) {
	      if (injected.length) {
	        _this.linkInverse(name, injected[0][definition.idAttribute]);
	      }
	    } else {
	      _this.linkInverse(name, injected[definition.idAttribute]);
	    }
	  }

	  if (DSUtils._a(injected)) {
	    DSUtils.forEach(injected, function (injectedI) {
	      _link.call(_this, definition, injectedI, options);
	    });
	  } else {
	    _link.call(_this, definition, injected, options);
	  }

	  if (options.notify) {
	    options.afterInject(options, injected);
	    definition.emit("DS.afterInject", definition, injected);
	  }

	  return injected;
	}

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = link;

	function link(resourceName, id, relations) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];

	  relations = relations || [];

	  id = DSUtils.resolveId(definition, id);
	  if (!definition) {
	    throw new _this.errors.NER(resourceName);
	  } else if (!DSUtils._sn(id)) {
	    throw DSUtils._snErr("id");
	  } else if (!DSUtils._a(relations)) {
	    throw DSUtils._aErr("relations");
	  }


	  var linked = _this.get(resourceName, id);

	  if (linked) {
	    DSUtils.forEach(definition.relationList, function (def) {
	      var relationName = def.relation;
	      if (relations.length && !DSUtils.contains(relations, relationName) || !def.localField) {
	        return;
	      }
	      var params = {};
	      if (def.type === "belongsTo") {
	        var _parent = linked[def.localKey] ? _this.get(relationName, linked[def.localKey]) : null;
	        if (_parent) {
	          linked[def.localField] = _parent;
	        }
	      } else if (def.type === "hasMany") {
	        params[def.foreignKey] = linked[definition.idAttribute];
	        linked[def.localField] = _this.defaults.constructor.prototype.defaultFilter.call(_this, _this.s[relationName].collection, relationName, params, { allowSimpleWhere: true });
	      } else if (def.type === "hasOne") {
	        params[def.foreignKey] = linked[definition.idAttribute];
	        var children = _this.defaults.constructor.prototype.defaultFilter.call(_this, _this.s[relationName].collection, relationName, params, { allowSimpleWhere: true });
	        if (children.length) {
	          linked[def.localField] = children[0];
	        }
	      }
	    });
	  }

	  return linked;
	}

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = linkAll;

	function linkAll(resourceName, params, relations) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];

	  relations = relations || [];

	  if (!definition) {
	    throw new _this.errors.NER(resourceName);
	  } else if (!DSUtils._a(relations)) {
	    throw DSUtils._aErr("relations");
	  }


	  var linked = _this.filter(resourceName, params);

	  if (linked) {
	    DSUtils.forEach(definition.relationList, function (def) {
	      var relationName = def.relation;
	      if (relations.length && !DSUtils.contains(relations, relationName) || !def.localField) {
	        return;
	      }
	      if (def.type === "belongsTo") {
	        DSUtils.forEach(linked, function (injectedItem) {
	          var parent = injectedItem[def.localKey] ? _this.get(relationName, injectedItem[def.localKey]) : null;
	          if (parent) {
	            injectedItem[def.localField] = parent;
	          }
	        });
	      } else if (def.type === "hasMany") {
	        DSUtils.forEach(linked, function (injectedItem) {
	          var params = {};
	          params[def.foreignKey] = injectedItem[definition.idAttribute];
	          injectedItem[def.localField] = _this.defaults.constructor.prototype.defaultFilter.call(_this, _this.s[relationName].collection, relationName, params, { allowSimpleWhere: true });
	        });
	      } else if (def.type === "hasOne") {
	        DSUtils.forEach(linked, function (injectedItem) {
	          var params = {};
	          params[def.foreignKey] = injectedItem[definition.idAttribute];
	          var children = _this.defaults.constructor.prototype.defaultFilter.call(_this, _this.s[relationName].collection, relationName, params, { allowSimpleWhere: true });
	          if (children.length) {
	            injectedItem[def.localField] = children[0];
	          }
	        });
	      }
	    });
	  }

	  return linked;
	}

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = linkInverse;

	function linkInverse(resourceName, id, relations) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];

	  relations = relations || [];

	  id = DSUtils.resolveId(definition, id);
	  if (!definition) {
	    throw new _this.errors.NER(resourceName);
	  } else if (!DSUtils._sn(id)) {
	    throw DSUtils._snErr("id");
	  } else if (!DSUtils._a(relations)) {
	    throw DSUtils._aErr("relations");
	  }


	  var linked = _this.get(resourceName, id);

	  if (linked) {
	    DSUtils.forOwn(_this.defs, function (d) {
	      DSUtils.forOwn(d.relations, function (relatedModels) {
	        DSUtils.forOwn(relatedModels, function (defs, relationName) {
	          if (relations.length && !DSUtils.contains(relations, d.n)) {
	            return;
	          }
	          if (definition.n === relationName) {
	            _this.linkAll(d.n, {}, [definition.n]);
	          }
	        });
	      });
	    });
	  }

	  return linked;
	}

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = unlinkInverse;

	function unlinkInverse(resourceName, id, relations) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];

	  relations = relations || [];

	  id = DSUtils.resolveId(definition, id);
	  if (!definition) {
	    throw new _this.errors.NER(resourceName);
	  } else if (!DSUtils._sn(id)) {
	    throw DSUtils._snErr("id");
	  } else if (!DSUtils._a(relations)) {
	    throw DSUtils._aErr("relations");
	  }


	  var linked = _this.get(resourceName, id);

	  if (linked) {
	    DSUtils.forOwn(_this.defs, function (d) {
	      DSUtils.forOwn(d.relations, function (relatedModels) {
	        DSUtils.forOwn(relatedModels, function (defs, relationName) {
	          if (definition.n === relationName) {
	            DSUtils.forEach(defs, function (def) {
	              DSUtils.forEach(_this.s[def.name].collection, function (item) {
	                if (def.type === "hasMany" && item[def.localField]) {
	                  (function () {
	                    var index = undefined;
	                    DSUtils.forEach(item[def.localField], function (subItem, i) {
	                      if (subItem === linked) {
	                        index = i;
	                      }
	                    });
	                    if (index !== undefined) {
	                      item[def.localField].splice(index, 1);
	                    }
	                  })();
	                } else if (item[def.localField] === linked) {
	                  delete item[def.localField];
	                }
	              });
	            });
	          }
	        });
	      });
	    });
	  }

	  return linked;
	}

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Array.indexOf
	     */
	    function indexOf(arr, item, fromIndex) {
	        fromIndex = fromIndex || 0;
	        if (arr == null) {
	            return -1;
	        }

	        var len = arr.length,
	            i = fromIndex < 0 ? len + fromIndex : fromIndex;
	        while (i < len) {
	            // we iterate over sparse items since there is no way to make it
	            // work properly on IE 7-8. see #64
	            if (arr[i] === item) {
	                return i;
	            }

	            i++;
	        }

	        return -1;
	    }

	    module.exports = indexOf;



/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Safer Object.hasOwnProperty
	     */
	     function hasOwn(obj, prop){
	         return Object.prototype.hasOwnProperty.call(obj, prop);
	     }

	     module.exports = hasOwn;




/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = __webpack_require__(33);

	    var _hasDontEnumBug,
	        _dontEnums;

	    function checkDontEnum(){
	        _dontEnums = [
	                'toString',
	                'toLocaleString',
	                'valueOf',
	                'hasOwnProperty',
	                'isPrototypeOf',
	                'propertyIsEnumerable',
	                'constructor'
	            ];

	        _hasDontEnumBug = true;

	        for (var key in {'toString': null}) {
	            _hasDontEnumBug = false;
	        }
	    }

	    /**
	     * Similar to Array/forEach but works over object properties and fixes Don't
	     * Enum bug on IE.
	     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
	     */
	    function forIn(obj, fn, thisObj){
	        var key, i = 0;
	        // no need to check if argument is a real object that way we can use
	        // it for arrays, functions, date, etc.

	        //post-pone check till needed
	        if (_hasDontEnumBug == null) checkDontEnum();

	        for (key in obj) {
	            if (exec(fn, obj, key, thisObj) === false) {
	                break;
	            }
	        }


	        if (_hasDontEnumBug) {
	            var ctor = obj.constructor,
	                isProto = !!ctor && obj === ctor.prototype;

	            while (key = _dontEnums[i++]) {
	                // For constructor, if it is a prototype object the constructor
	                // is always non-enumerable unless defined otherwise (and
	                // enumerated above).  For non-prototype objects, it will have
	                // to be defined on this object, since it cannot be defined on
	                // any prototype objects.
	                //
	                // For other [[DontEnum]] properties, check if the value is
	                // different than Object prototype value.
	                if (
	                    (key !== 'constructor' ||
	                        (!isProto && hasOwn(obj, key))) &&
	                    obj[key] !== Object.prototype[key]
	                ) {
	                    if (exec(fn, obj, key, thisObj) === false) {
	                        break;
	                    }
	                }
	            }
	        }
	    }

	    function exec(fn, obj, key, thisObj){
	        return fn.call(thisObj, obj[key], key, obj);
	    }

	    module.exports = forIn;




/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Checks if the object is a primitive
	     */
	    function isPrimitive(value) {
	        // Using switch fallthrough because it's simple to read and is
	        // generally fast: http://jsperf.com/testing-value-is-primitive/5
	        switch (typeof value) {
	            case "string":
	            case "number":
	            case "boolean":
	                return true;
	        }

	        return value == null;
	    }

	    module.exports = isPrimitive;




/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Checks if the value is created by the `Object` constructor.
	     */
	    function isPlainObject(value) {
	        return (!!value && typeof value === 'object' &&
	            value.constructor === Object);
	    }

	    module.exports = isPlainObject;




/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var forEach = __webpack_require__(9);

	    /**
	     * Create nested object if non-existent
	     */
	    function namespace(obj, path){
	        if (!path) return obj;
	        forEach(path.split('.'), function(key){
	            if (!obj[key]) {
	                obj[key] = {};
	            }
	            obj = obj[key];
	        });
	        return obj;
	    }

	    module.exports = namespace;




/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	

	    /**
	     * Typecast a value to a String, using an empty string value for null or
	     * undefined.
	     */
	    function toString(val){
	        return val == null ? '' : val.toString();
	    }

	    module.exports = toString;




/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(38);
	var replaceAccents = __webpack_require__(53);
	var removeNonWord = __webpack_require__(54);
	var upperCase = __webpack_require__(20);
	var lowerCase = __webpack_require__(55);
	    /**
	    * Convert string to camelCase text.
	    */
	    function camelCase(str){
	        str = toString(str);
	        str = replaceAccents(str);
	        str = removeNonWord(str)
	            .replace(/[\-_]/g, ' ') //convert all hyphens and underscores to spaces
	            .replace(/\s[a-z]/g, upperCase) //convert first char of each word to UPPERCASE
	            .replace(/\s+/g, '') //remove spaces
	            .replace(/^[A-Z]/g, lowerCase); //convert first char to lowercase
	        return str;
	    }
	    module.exports = camelCase;



/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = create;

	function create(resourceName, attrs, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];

	  options = options || {};
	  attrs = attrs || {};

	  var rejectionError = undefined;
	  if (!definition) {
	    rejectionError = new _this.errors.NER(resourceName);
	  } else if (!DSUtils._o(attrs)) {
	    rejectionError = DSUtils._oErr("attrs");
	  } else {
	    options = DSUtils._(definition, options);
	    if (options.upsert && DSUtils._sn(attrs[definition.idAttribute])) {
	      return _this.update(resourceName, attrs[definition.idAttribute], attrs, options);
	    }
	  }

	  return new DSUtils.Promise(function (resolve, reject) {
	    if (rejectionError) {
	      reject(rejectionError);
	    } else {
	      resolve(attrs);
	    }
	  }).then(function (attrs) {
	    return options.beforeValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.validate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.afterValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.beforeCreate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.beforeCreate", definition, attrs);
	    }
	    return _this.getAdapter(options).create(definition, attrs, options);
	  }).then(function (attrs) {
	    return options.afterCreate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.afterCreate", definition, attrs);
	    }
	    if (options.cacheResponse) {
	      var created = _this.inject(definition.n, attrs, options.orig());
	      var id = created[definition.idAttribute];
	      var resource = _this.s[resourceName];
	      resource.completedQueries[id] = new Date().getTime();
	      resource.saved[id] = DSUtils.updateTimestamp(resource.saved[id]);
	      return created;
	    } else {
	      return _this.createInstance(resourceName, attrs, options);
	    }
	  });
	}

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = destroy;

	function destroy(resourceName, id, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  var item = undefined;

	  return new DSUtils.Promise(function (resolve, reject) {
	    id = DSUtils.resolveId(definition, id);
	    if (!definition) {
	      reject(new _this.errors.NER(resourceName));
	    } else if (!DSUtils._sn(id)) {
	      reject(DSUtils._snErr("id"));
	    } else {
	      item = _this.get(resourceName, id) || { id: id };
	      options = DSUtils._(definition, options);
	      resolve(item);
	    }
	  }).then(function (attrs) {
	    return options.beforeDestroy.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.beforeDestroy", definition, attrs);
	    }
	    if (options.eagerEject) {
	      _this.eject(resourceName, id);
	    }
	    return _this.getAdapter(options).destroy(definition, id, options);
	  }).then(function () {
	    return options.afterDestroy.call(item, options, item);
	  }).then(function (item) {
	    if (options.notify) {
	      definition.emit("DS.afterDestroy", definition, item);
	    }
	    _this.eject(resourceName, id);
	    return id;
	  })["catch"](function (err) {
	    if (options && options.eagerEject && item) {
	      _this.inject(resourceName, item, { notify: false });
	    }
	    return DSUtils.Promise.reject(err);
	  });
	}

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = destroyAll;

	function destroyAll(resourceName, params, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  var ejected = undefined,
	      toEject = undefined;

	  params = params || {};

	  return new DSUtils.Promise(function (resolve, reject) {
	    if (!definition) {
	      reject(new _this.errors.NER(resourceName));
	    } else if (!DSUtils._o(params)) {
	      reject(DSUtils._oErr("attrs"));
	    } else {
	      options = DSUtils._(definition, options);
	      resolve();
	    }
	  }).then(function () {
	    toEject = _this.defaults.defaultFilter.call(_this, resourceName, params);
	    return options.beforeDestroy(options, toEject);
	  }).then(function () {
	    if (options.notify) {
	      definition.emit("DS.beforeDestroy", definition, toEject);
	    }
	    if (options.eagerEject) {
	      ejected = _this.ejectAll(resourceName, params);
	    }
	    return _this.getAdapter(options).destroyAll(definition, params, options);
	  }).then(function () {
	    return options.afterDestroy(options, toEject);
	  }).then(function () {
	    if (options.notify) {
	      definition.emit("DS.afterDestroy", definition, toEject);
	    }
	    return ejected || _this.ejectAll(resourceName, params);
	  })["catch"](function (err) {
	    if (options && options.eagerEject && ejected) {
	      _this.inject(resourceName, ejected, { notify: false });
	    }
	    return DSUtils.Promise.reject(err);
	  });
	}

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W082 */
	module.exports = find;

	function find(resourceName, id, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  var resource = _this.s[resourceName];

	  return new DSUtils.Promise(function (resolve, reject) {
	    if (!definition) {
	      reject(new _this.errors.NER(resourceName));
	    } else if (!DSUtils._sn(id)) {
	      reject(DSUtils._snErr("id"));
	    } else {
	      options = DSUtils._(definition, options);

	      if (options.params) {
	        options.params = DSUtils.copy(options.params);
	      }

	      if (options.bypassCache || !options.cacheResponse) {
	        delete resource.completedQueries[id];
	      }
	      if ((!options.findStrictCache || id in resource.completedQueries) && _this.get(resourceName, id)) {
	        resolve(_this.get(resourceName, id));
	      } else {
	        delete resource.completedQueries[id];
	        resolve();
	      }
	    }
	  }).then(function (item) {
	    if (!item) {
	      if (!(id in resource.pendingQueries)) {
	        var promise = undefined;
	        var strategy = options.findStrategy || options.strategy;
	        if (strategy === "fallback") {
	          (function () {
	            var makeFallbackCall = function (index) {
	              return _this.getAdapter((options.findFallbackAdapters || options.fallbackAdapters)[index]).find(definition, id, options)["catch"](function (err) {
	                index++;
	                if (index < options.fallbackAdapters.length) {
	                  return makeFallbackCall(index);
	                } else {
	                  return DSUtils.Promise.reject(err);
	                }
	              });
	            };

	            promise = makeFallbackCall(0);
	          })();
	        } else {
	          promise = _this.getAdapter(options).find(definition, id, options);
	        }

	        resource.pendingQueries[id] = promise.then(function (data) {
	          // Query is no longer pending
	          delete resource.pendingQueries[id];
	          if (options.cacheResponse) {
	            var injected = _this.inject(resourceName, data, options.orig());
	            resource.completedQueries[id] = new Date().getTime();
	            resource.saved[id] = DSUtils.updateTimestamp(resource.saved[id]);
	            return injected;
	          } else {
	            return _this.createInstance(resourceName, data, options.orig());
	          }
	        });
	      }
	      return resource.pendingQueries[id];
	    } else {
	      return item;
	    }
	  })["catch"](function (err) {
	    if (resource) {
	      delete resource.pendingQueries[id];
	    }
	    return DSUtils.Promise.reject(err);
	  });
	}

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = findAll;
	/* jshint -W082 */
	function processResults(data, resourceName, queryHash, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var resource = _this.s[resourceName];
	  var idAttribute = _this.defs[resourceName].idAttribute;
	  var date = new Date().getTime();

	  data = data || [];

	  // Query is no longer pending
	  delete resource.pendingQueries[queryHash];
	  resource.completedQueries[queryHash] = date;

	  // Update modified timestamp of collection
	  resource.collectionModified = DSUtils.updateTimestamp(resource.collectionModified);

	  // Merge the new values into the cache
	  var injected = _this.inject(resourceName, data, options.orig());

	  // Make sure each object is added to completedQueries
	  if (DSUtils._a(injected)) {
	    DSUtils.forEach(injected, function (item) {
	      if (item) {
	        var id = item[idAttribute];
	        if (id) {
	          resource.completedQueries[id] = date;
	          resource.saved[id] = DSUtils.updateTimestamp(resource.saved[id]);
	        }
	      }
	    });
	  } else {
	    options.errorFn("response is expected to be an array!");
	    resource.completedQueries[injected[idAttribute]] = date;
	  }

	  return injected;
	}

	function findAll(resourceName, params, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  var resource = _this.s[resourceName];
	  var queryHash = undefined;

	  return new DSUtils.Promise(function (resolve, reject) {
	    params = params || {};

	    if (!_this.defs[resourceName]) {
	      reject(new _this.errors.NER(resourceName));
	    } else if (!DSUtils._o(params)) {
	      reject(DSUtils._oErr("params"));
	    } else {
	      options = DSUtils._(definition, options);
	      queryHash = DSUtils.toJson(params);

	      if (options.params) {
	        options.params = DSUtils.copy(options.params);
	      }

	      if (options.bypassCache || !options.cacheResponse) {
	        delete resource.completedQueries[queryHash];
	        delete resource.queryData[queryHash];
	      }
	      if (queryHash in resource.completedQueries) {
	        if (options.useFilter) {
	          resolve(_this.filter(resourceName, params, options.orig()));
	        } else {
	          resolve(resource.queryData[queryHash]);
	        }
	      } else {
	        resolve();
	      }
	    }
	  }).then(function (items) {
	    if (!(queryHash in resource.completedQueries)) {
	      if (!(queryHash in resource.pendingQueries)) {
	        var promise = undefined;
	        var strategy = options.findAllStrategy || options.strategy;
	        if (strategy === "fallback") {
	          (function () {
	            var makeFallbackCall = function (index) {
	              return _this.getAdapter((options.findAllFallbackAdapters || options.fallbackAdapters)[index]).findAll(definition, params, options)["catch"](function (err) {
	                index++;
	                if (index < options.fallbackAdapters.length) {
	                  return makeFallbackCall(index);
	                } else {
	                  return Promise.reject(err);
	                }
	              });
	            };

	            promise = makeFallbackCall(0);
	          })();
	        } else {
	          promise = _this.getAdapter(options).findAll(definition, params, options);
	        }

	        resource.pendingQueries[queryHash] = promise.then(function (data) {
	          delete resource.pendingQueries[queryHash];
	          if (options.cacheResponse) {
	            resource.queryData[queryHash] = processResults.call(_this, data, resourceName, queryHash, options);
	            resource.queryData[queryHash].$$injected = true;
	            return resource.queryData[queryHash];
	          } else {
	            DSUtils.forEach(data, function (item, i) {
	              data[i] = _this.createInstance(resourceName, item, options.orig());
	            });
	            return data;
	          }
	        });
	      }

	      return resource.pendingQueries[queryHash];
	    } else {
	      return items;
	    }
	  })["catch"](function (err) {
	    if (resource) {
	      delete resource.pendingQueries[queryHash];
	    }
	    return DSUtils.Promise.reject(err);
	  });
	}

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = loadRelations;

	function loadRelations(resourceName, instance, relations, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var DSErrors = _this.errors;

	  var definition = _this.defs[resourceName];
	  var fields = [];

	  return new DSUtils.Promise(function (resolve, reject) {
	    if (DSUtils._sn(instance)) {
	      instance = _this.get(resourceName, instance);
	    }

	    if (DSUtils._s(relations)) {
	      relations = [relations];
	    }

	    if (!definition) {
	      reject(new DSErrors.NER(resourceName));
	    } else if (!DSUtils._o(instance)) {
	      reject(new DSErrors.IA("\"instance(id)\" must be a string, number or object!"));
	    } else if (!DSUtils._a(relations)) {
	      reject(new DSErrors.IA("\"relations\" must be a string or an array!"));
	    } else {
	      (function () {
	        var _options = DSUtils._(definition, options);
	        if (!_options.hasOwnProperty("findBelongsTo")) {
	          _options.findBelongsTo = true;
	        }
	        if (!_options.hasOwnProperty("findHasMany")) {
	          _options.findHasMany = true;
	        }

	        var tasks = [];

	        DSUtils.forEach(definition.relationList, function (def) {
	          var relationName = def.relation;
	          var relationDef = definition.getResource(relationName);
	          var __options = DSUtils._(relationDef, options);
	          if (DSUtils.contains(relations, relationName) || DSUtils.contains(relations, def.localField)) {
	            var task = undefined;
	            var params = {};
	            if (__options.allowSimpleWhere) {
	              params[def.foreignKey] = instance[definition.idAttribute];
	            } else {
	              params.where = {};
	              params.where[def.foreignKey] = {
	                "==": instance[definition.idAttribute]
	              };
	            }

	            if (def.type === "hasMany") {
	              task = _this.findAll(relationName, params, __options.orig());
	            } else if (def.type === "hasOne") {
	              if (def.localKey && instance[def.localKey]) {
	                task = _this.find(relationName, instance[def.localKey], __options.orig());
	              } else if (def.foreignKey) {
	                task = _this.findAll(relationName, params, __options.orig()).then(function (hasOnes) {
	                  return hasOnes.length ? hasOnes[0] : null;
	                });
	              }
	            } else if (instance[def.localKey]) {
	              task = _this.find(relationName, instance[def.localKey], options);
	            }

	            if (task) {
	              tasks.push(task);
	              fields.push(def.localField || false);
	            }
	          }
	        });

	        resolve(tasks);
	      })();
	    }
	  }).then(function (tasks) {
	    return DSUtils.Promise.all(tasks);
	  }).then(function (loadedRelations) {
	    DSUtils.forEach(fields, function (field, index) {
	      if (field) {
	        instance[field] = loadedRelations[index];
	      }
	    });
	    return instance;
	  });
	}

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = reap;

	function reap(resourceName, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var definition = _this.defs[resourceName];
	  var resource = _this.s[resourceName];

	  return new DSUtils.Promise(function (resolve, reject) {

	    if (!definition) {
	      reject(new _this.errors.NER(resourceName));
	    } else {
	      options = DSUtils._(definition, options);
	      if (!options.hasOwnProperty("notify")) {
	        options.notify = false;
	      }
	      var items = [];
	      var now = new Date().getTime();
	      var expiredItem = undefined;
	      while ((expiredItem = resource.expiresHeap.peek()) && expiredItem.expires < now) {
	        items.push(expiredItem.item);
	        delete expiredItem.item;
	        resource.expiresHeap.pop();
	      }
	      resolve(items);
	    }
	  }).then(function (items) {
	    if (options.isInterval || options.notify) {
	      definition.beforeReap(options, items);
	      definition.emit("DS.beforeReap", definition, items);
	    }
	    if (options.reapAction === "inject") {
	      (function () {
	        var timestamp = new Date().getTime();
	        DSUtils.forEach(items, function (item) {
	          resource.expiresHeap.push({
	            item: item,
	            timestamp: timestamp,
	            expires: definition.maxAge ? timestamp + definition.maxAge : Number.MAX_VALUE
	          });
	        });
	      })();
	    } else if (options.reapAction === "eject") {
	      DSUtils.forEach(items, function (item) {
	        _this.eject(resourceName, item[definition.idAttribute]);
	      });
	    } else if (options.reapAction === "refresh") {
	      var _ret2 = (function () {
	        var tasks = [];
	        DSUtils.forEach(items, function (item) {
	          tasks.push(_this.refresh(resourceName, item[definition.idAttribute]));
	        });
	        return {
	          v: DSUtils.Promise.all(tasks)
	        };
	      })();

	      if (typeof _ret2 === "object") return _ret2.v;
	    }
	    return items;
	  }).then(function (items) {
	    if (options.isInterval || options.notify) {
	      definition.afterReap(options, items);
	      definition.emit("DS.afterReap", definition, items);
	    }
	    return items;
	  });
	}

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = save;

	function save(resourceName, id, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var DSErrors = _this.errors;

	  var definition = _this.defs[resourceName];
	  var item = undefined;
	  var noChanges = undefined;

	  return new DSUtils.Promise(function (resolve, reject) {
	    id = DSUtils.resolveId(definition, id);
	    if (!definition) {
	      reject(new DSErrors.NER(resourceName));
	    } else if (!DSUtils._sn(id)) {
	      reject(DSUtils._snErr("id"));
	    } else if (!_this.get(resourceName, id)) {
	      reject(new DSErrors.R("id \"" + id + "\" not found in cache!"));
	    } else {
	      item = _this.get(resourceName, id);
	      options = DSUtils._(definition, options);
	      resolve(item);
	    }
	  }).then(function (attrs) {
	    return options.beforeValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.validate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.afterValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.beforeUpdate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.beforeUpdate", definition, attrs);
	    }
	    if (options.changesOnly) {
	      var resource = _this.s[resourceName];
	      if (DSUtils.w) {
	        resource.observers[id].deliver();
	      }
	      var toKeep = [];
	      var changes = _this.changes(resourceName, id);

	      for (var key in changes.added) {
	        toKeep.push(key);
	      }
	      for (key in changes.changed) {
	        toKeep.push(key);
	      }
	      changes = DSUtils.pick(attrs, toKeep);
	      if (DSUtils.isEmpty(changes)) {
	        // no changes, return
	        noChanges = true;
	        return attrs;
	      } else {
	        attrs = changes;
	      }
	    }
	    return _this.getAdapter(options).update(definition, id, attrs, options);
	  }).then(function (data) {
	    return options.afterUpdate.call(data, options, data);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.afterUpdate", definition, attrs);
	    }
	    if (noChanges) {
	      return attrs;
	    } else if (options.cacheResponse) {
	      var injected = _this.inject(definition.n, attrs, options.orig());
	      var resource = _this.s[resourceName];
	      var _id = injected[definition.idAttribute];
	      resource.saved[_id] = DSUtils.updateTimestamp(resource.saved[_id]);
	      if (!definition.resetHistoryOnInject) {
	        resource.previousAttributes[_id] = DSUtils.copy(injected, null, null, null, definition.relationFields);
	      }
	      return injected;
	    } else {
	      return _this.createInstance(resourceName, attrs, options.orig());
	    }
	  });
	}

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = update;

	function update(resourceName, id, attrs, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var DSErrors = _this.errors;

	  var definition = _this.defs[resourceName];

	  return new DSUtils.Promise(function (resolve, reject) {
	    id = DSUtils.resolveId(definition, id);
	    if (!definition) {
	      reject(new DSErrors.NER(resourceName));
	    } else if (!DSUtils._sn(id)) {
	      reject(DSUtils._snErr("id"));
	    } else {
	      options = DSUtils._(definition, options);
	      resolve(attrs);
	    }
	  }).then(function (attrs) {
	    return options.beforeValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.validate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.afterValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.beforeUpdate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.beforeUpdate", definition, attrs);
	    }
	    return _this.getAdapter(options).update(definition, id, attrs, options);
	  }).then(function (data) {
	    return options.afterUpdate.call(data, options, data);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.afterUpdate", definition, attrs);
	    }
	    if (options.cacheResponse) {
	      var injected = _this.inject(definition.n, attrs, options.orig());
	      var resource = _this.s[resourceName];
	      var _id = injected[definition.idAttribute];
	      resource.saved[_id] = DSUtils.updateTimestamp(resource.saved[_id]);
	      if (!definition.resetHistoryOnInject) {
	        resource.previousAttributes[_id] = DSUtils.copy(injected, null, null, null, definition.relationFields);
	      }
	      return injected;
	    } else {
	      return _this.createInstance(resourceName, attrs, options.orig());
	    }
	  });
	}

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = updateAll;

	function updateAll(resourceName, attrs, params, options) {
	  var _this = this;
	  var DSUtils = _this.utils;
	  var DSErrors = _this.errors;

	  var definition = _this.defs[resourceName];

	  return new DSUtils.Promise(function (resolve, reject) {
	    if (!definition) {
	      reject(new DSErrors.NER(resourceName));
	    } else {
	      options = DSUtils._(definition, options);
	      resolve(attrs);
	    }
	  }).then(function (attrs) {
	    return options.beforeValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.validate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.afterValidate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    return options.beforeUpdate.call(attrs, options, attrs);
	  }).then(function (attrs) {
	    if (options.notify) {
	      definition.emit("DS.beforeUpdate", definition, attrs);
	    }
	    return _this.getAdapter(options).updateAll(definition, attrs, params, options);
	  }).then(function (data) {
	    return options.afterUpdate.call(data, options, data);
	  }).then(function (data) {
	    if (options.notify) {
	      definition.emit("DS.afterUpdate", definition, attrs);
	    }
	    var origOptions = options.orig();
	    if (options.cacheResponse) {
	      var _ret = (function () {
	        var injected = _this.inject(definition.n, data, origOptions);
	        var resource = _this.s[resourceName];
	        DSUtils.forEach(injected, function (i) {
	          var id = i[definition.idAttribute];
	          resource.saved[id] = DSUtils.updateTimestamp(resource.saved[id]);
	          if (!definition.resetHistoryOnInject) {
	            resource.previousAttributes[id] = DSUtils.copy(i, null, null, null, definition.relationFields);
	          }
	        });
	        return {
	          v: injected
	        };
	      })();

	      if (typeof _ret === "object") return _ret.v;
	    } else {
	      var _ret2 = (function () {
	        var instances = [];
	        DSUtils.forEach(data, function (item) {
	          instances.push(_this.createInstance(resourceName, item, origOptions));
	        });
	        return {
	          v: instances
	        };
	      })();

	      if (typeof _ret2 === "object") return _ret2.v;
	    }
	  });
	}

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};

	process.nextTick = (function () {
	    var canSetImmediate = typeof window !== 'undefined'
	    && window.setImmediate;
	    var canMutationObserver = typeof window !== 'undefined'
	    && window.MutationObserver;
	    var canPost = typeof window !== 'undefined'
	    && window.postMessage && window.addEventListener
	    ;

	    if (canSetImmediate) {
	        return function (f) { return window.setImmediate(f) };
	    }

	    var queue = [];

	    if (canMutationObserver) {
	        var hiddenDiv = document.createElement("div");
	        var observer = new MutationObserver(function () {
	            var queueList = queue.slice();
	            queue.length = 0;
	            queueList.forEach(function (fn) {
	                fn();
	            });
	        });

	        observer.observe(hiddenDiv, { attributes: true });

	        return function nextTick(fn) {
	            if (!queue.length) {
	                hiddenDiv.setAttribute('yes', 'no');
	            }
	            queue.push(fn);
	        };
	    }

	    if (canPost) {
	        window.addEventListener('message', function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === 'process-tick') {
	                ev.stopPropagation();
	                if (queue.length > 0) {
	                    var fn = queue.shift();
	                    fn();
	                }
	            }
	        }, true);

	        return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage('process-tick', '*');
	        };
	    }

	    return function nextTick(fn) {
	        setTimeout(fn, 0);
	    };
	})();

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(38);
	    /**
	    * Replaces all accented chars with regular ones
	    */
	    function replaceAccents(str){
	        str = toString(str);

	        // verifies if the String has accents and replace them
	        if (str.search(/[\xC0-\xFF]/g) > -1) {
	            str = str
	                    .replace(/[\xC0-\xC5]/g, "A")
	                    .replace(/[\xC6]/g, "AE")
	                    .replace(/[\xC7]/g, "C")
	                    .replace(/[\xC8-\xCB]/g, "E")
	                    .replace(/[\xCC-\xCF]/g, "I")
	                    .replace(/[\xD0]/g, "D")
	                    .replace(/[\xD1]/g, "N")
	                    .replace(/[\xD2-\xD6\xD8]/g, "O")
	                    .replace(/[\xD9-\xDC]/g, "U")
	                    .replace(/[\xDD]/g, "Y")
	                    .replace(/[\xDE]/g, "P")
	                    .replace(/[\xE0-\xE5]/g, "a")
	                    .replace(/[\xE6]/g, "ae")
	                    .replace(/[\xE7]/g, "c")
	                    .replace(/[\xE8-\xEB]/g, "e")
	                    .replace(/[\xEC-\xEF]/g, "i")
	                    .replace(/[\xF1]/g, "n")
	                    .replace(/[\xF2-\xF6\xF8]/g, "o")
	                    .replace(/[\xF9-\xFC]/g, "u")
	                    .replace(/[\xFE]/g, "p")
	                    .replace(/[\xFD\xFF]/g, "y");
	        }
	        return str;
	    }
	    module.exports = replaceAccents;



/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(38);
	    // This pattern is generated by the _build/pattern-removeNonWord.js script
	    var PATTERN = /[^\x20\x2D0-9A-Z\x5Fa-z\xC0-\xD6\xD8-\xF6\xF8-\xFF]/g;

	    /**
	     * Remove non-word chars.
	     */
	    function removeNonWord(str){
	        str = toString(str);
	        return str.replace(PATTERN, '');
	    }

	    module.exports = removeNonWord;



/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(38);
	    /**
	     * "Safer" String.toLowerCase()
	     */
	    function lowerCase(str){
	        str = toString(str);
	        return str.toLowerCase();
	    }

	    module.exports = lowerCase;



/***/ }
/******/ ])
});


; browserify_shim__define__module__export__(typeof JSData != "undefined" ? JSData : window.JSData);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/bluebird/js/browser/bluebird.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/bluebird/js/browser/bluebird.js","/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-schema/dist/js-data-schema.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-schema/dist/js-data-schema.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/lodash/lodash.min.js":[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.9.3 (Custom Build) lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 * Build: `lodash modern -o ./lodash.js`
 */
;(function(){function n(n,t){if(n!==t){var r=null===n,e=n===m,u=n===n,i=null===t,o=t===m,f=t===t;if(n>t&&!i||!u||r&&!o&&f||e&&f)return 1;if(n<t&&!r||!f||i&&!e&&u||o&&u)return-1}return 0}function t(n,t,r){for(var e=n.length,u=r?e:-1;r?u--:++u<e;)if(t(n[u],u,n))return u;return-1}function r(n,t,r){if(t!==t)return s(n,r);r-=1;for(var e=n.length;++r<e;)if(n[r]===t)return r;return-1}function e(n){return typeof n=="function"||false}function u(n){return typeof n=="string"?n:null==n?"":n+""}function i(n,t){for(var r=-1,e=n.length;++r<e&&-1<t.indexOf(n.charAt(r)););
return r}function o(n,t){for(var r=n.length;r--&&-1<t.indexOf(n.charAt(r)););return r}function f(t,r){return n(t.a,r.a)||t.b-r.b}function l(n){return Nn[n]}function a(n){return Ln[n]}function c(n){return"\\"+Mn[n]}function s(n,t,r){var e=n.length;for(t+=r?0:-1;r?t--:++t<e;){var u=n[t];if(u!==u)return t}return-1}function p(n){return!!n&&typeof n=="object"}function h(n){return 160>=n&&9<=n&&13>=n||32==n||160==n||5760==n||6158==n||8192<=n&&(8202>=n||8232==n||8233==n||8239==n||8287==n||12288==n||65279==n);
}function _(n,t){for(var r=-1,e=n.length,u=-1,i=[];++r<e;)n[r]===t&&(n[r]=L,i[++u]=r);return i}function v(n){for(var t=-1,r=n.length;++t<r&&h(n.charCodeAt(t)););return t}function g(n){for(var t=n.length;t--&&h(n.charCodeAt(t)););return t}function y(n){return zn[n]}function d(h){function Nn(n){if(p(n)&&!(Ti(n)||n instanceof Bn)){if(n instanceof zn)return n;if(ru.call(n,"__chain__")&&ru.call(n,"__wrapped__"))return Mr(n)}return new zn(n)}function Ln(){}function zn(n,t,r){this.__wrapped__=n,this.__actions__=r||[],
this.__chain__=!!t}function Bn(n){this.__wrapped__=n,this.__actions__=null,this.__dir__=1,this.__filtered__=false,this.__iteratees__=null,this.__takeCount__=Su,this.__views__=null}function Mn(){this.__data__={}}function Pn(n){var t=n?n.length:0;for(this.data={hash:bu(null),set:new vu};t--;)this.push(n[t])}function qn(n,t){var r=n.data;return(typeof t=="string"||ve(t)?r.set.has(t):r.hash[t])?0:-1}function Dn(n,t){var r=-1,e=n.length;for(t||(t=Me(e));++r<e;)t[r]=n[r];return t}function Kn(n,t){for(var r=-1,e=n.length;++r<e&&false!==t(n[r],r,n););
return n}function Vn(n,t){for(var r=-1,e=n.length;++r<e;)if(!t(n[r],r,n))return false;return true}function Gn(n,t){for(var r=-1,e=n.length,u=-1,i=[];++r<e;){var o=n[r];t(o,r,n)&&(i[++u]=o)}return i}function Jn(n,t){for(var r=-1,e=n.length,u=Me(e);++r<e;)u[r]=t(n[r],r,n);return u}function Xn(n,t,r,e){var u=-1,i=n.length;for(e&&i&&(r=n[++u]);++u<i;)r=t(r,n[u],u,n);return r}function Hn(n,t){for(var r=-1,e=n.length;++r<e;)if(t(n[r],r,n))return true;return false}function Qn(n,t){return n===m?t:n}function nt(n,t,r,e){
return n!==m&&ru.call(e,r)?n:t}function tt(n,t,r){for(var e=-1,u=Ki(t),i=u.length;++e<i;){var o=u[e],f=n[o],l=r(f,t[o],o,n,t);(l===l?l===f:f!==f)&&(f!==m||o in n)||(n[o]=l)}return n}function rt(n,t){return null==t?n:ut(t,Ki(t),n)}function et(n,t){for(var r=-1,e=null==n,u=!e&&Ir(n),i=u?n.length:0,o=t.length,f=Me(o);++r<o;){var l=t[r];f[r]=u?Er(l,i)?n[l]:m:e?m:n[l]}return f}function ut(n,t,r){r||(r={});for(var e=-1,u=t.length;++e<u;){var i=t[e];r[i]=n[i]}return r}function it(n,t,r){var e=typeof n;return"function"==e?t===m?n:Mt(n,t,r):null==n?Fe:"object"==e?xt(n):t===m?Be(n):At(n,t);
}function ot(n,t,r,e,u,i,o){var f;if(r&&(f=u?r(n,e,u):r(n)),f!==m)return f;if(!ve(n))return n;if(e=Ti(n)){if(f=jr(n),!t)return Dn(n,f)}else{var l=uu.call(n),a=l==D;if(l!=V&&l!=z&&(!a||u))return $n[l]?Or(n,l,t):u?n:{};if(f=kr(a?{}:n),!t)return rt(f,n)}for(i||(i=[]),o||(o=[]),u=i.length;u--;)if(i[u]==n)return o[u];return i.push(n),o.push(f),(e?Kn:vt)(n,function(e,u){f[u]=ot(e,t,r,u,n,i,o)}),f}function ft(n,t,r){if(typeof n!="function")throw new Je(N);return gu(function(){n.apply(m,r)},t)}function lt(n,t){
var e=n?n.length:0,u=[];if(!e)return u;var i=-1,o=br(),f=o==r,l=f&&200<=t.length?Vu(t):null,a=t.length;l&&(o=qn,f=false,t=l);n:for(;++i<e;)if(l=n[i],f&&l===l){for(var c=a;c--;)if(t[c]===l)continue n;u.push(l)}else 0>o(t,l,0)&&u.push(l);return u}function at(n,t){var r=true;return Mu(n,function(n,e,u){return r=!!t(n,e,u)}),r}function ct(n,t,r,e){var u=e,i=u;return Mu(n,function(n,o,f){o=+t(n,o,f),(r(o,u)||o===e&&o===i)&&(u=o,i=n)}),i}function st(n,t){var r=[];return Mu(n,function(n,e,u){t(n,e,u)&&r.push(n);
}),r}function pt(n,t,r,e){var u;return r(n,function(n,r,i){return t(n,r,i)?(u=e?r:n,false):void 0}),u}function ht(n,t,r){for(var e=-1,u=n.length,i=-1,o=[];++e<u;){var f=n[e];if(p(f)&&Ir(f)&&(r||Ti(f)||se(f))){t&&(f=ht(f,t,r));for(var l=-1,a=f.length;++l<a;)o[++i]=f[l]}else r||(o[++i]=f)}return o}function _t(n,t){qu(n,t,ke)}function vt(n,t){return qu(n,t,Ki)}function gt(n,t){return Du(n,t,Ki)}function yt(n,t){for(var r=-1,e=t.length,u=-1,i=[];++r<e;){var o=t[r];$i(n[o])&&(i[++u]=o)}return i}function dt(n,t,r){
if(null!=n){r!==m&&r in zr(n)&&(t=[r]),r=0;for(var e=t.length;null!=n&&r<e;)n=n[t[r++]];return r&&r==e?n:m}}function mt(n,t,r,e,u,i){if(n===t)n=true;else if(null==n||null==t||!ve(n)&&!p(t))n=n!==n&&t!==t;else n:{var o=mt,f=Ti(n),l=Ti(t),a=B,c=B;f||(a=uu.call(n),a==z?a=V:a!=V&&(f=we(n))),l||(c=uu.call(t),c==z?c=V:c!=V&&we(t));var s=a==V,l=c==V,c=a==c;if(!c||f||s){if(!e&&(a=s&&ru.call(n,"__wrapped__"),l=l&&ru.call(t,"__wrapped__"),a||l)){n=o(a?n.value():n,l?t.value():t,r,e,u,i);break n}if(c){for(u||(u=[]),
i||(i=[]),a=u.length;a--;)if(u[a]==n){n=i[a]==t;break n}u.push(n),i.push(t),n=(f?gr:dr)(n,t,o,r,e,u,i),u.pop(),i.pop()}else n=false}else n=yr(n,t,a)}return n}function wt(n,t,r){var e=t.length,u=e,i=!r;if(null==n)return!u;for(n=zr(n);e--;){var o=t[e];if(i&&o[2]?o[1]!==n[o[0]]:!(o[0]in n))return false}for(;++e<u;){var o=t[e],f=o[0],l=n[f],a=o[1];if(i&&o[2]){if(l===m&&!(f in n))return false}else if(o=r?r(l,a,f):m,o===m?!mt(a,l,r,true):!o)return false}return true}function bt(n,t){var r=-1,e=Ir(n)?Me(n.length):[];return Mu(n,function(n,u,i){
e[++r]=t(n,u,i)}),e}function xt(n){var t=xr(n);if(1==t.length&&t[0][2]){var r=t[0][0],e=t[0][1];return function(n){return null==n?false:n[r]===e&&(e!==m||r in zr(n))}}return function(n){return wt(n,t)}}function At(n,t){var r=Ti(n),e=Wr(n)&&t===t&&!ve(t),u=n+"";return n=Br(n),function(i){if(null==i)return false;var o=u;if(i=zr(i),!(!r&&e||o in i)){if(i=1==n.length?i:dt(i,Ct(n,0,-1)),null==i)return false;o=Vr(n),i=zr(i)}return i[o]===t?t!==m||o in i:mt(t,i[o],m,true)}}function jt(n,t,r,e,u){if(!ve(n))return n;var i=Ir(t)&&(Ti(t)||we(t)),o=i?null:Ki(t);
return Kn(o||t,function(f,l){if(o&&(l=f,f=t[l]),p(f)){e||(e=[]),u||(u=[]);n:{for(var a=l,c=e,s=u,h=c.length,_=t[a];h--;)if(c[h]==_){n[a]=s[h];break n}var h=n[a],v=r?r(h,_,a,n,t):m,g=v===m;g&&(v=_,Ir(_)&&(Ti(_)||we(_))?v=Ti(h)?h:Ir(h)?Dn(h):[]:Fi(_)||se(_)?v=se(h)?Ae(h):Fi(h)?h:{}:g=false),c.push(_),s.push(v),g?n[a]=jt(v,_,r,c,s):(v===v?v!==h:h===h)&&(n[a]=v)}}else a=n[l],c=r?r(a,f,l,n,t):m,(s=c===m)&&(c=f),c===m&&(!i||l in n)||!s&&(c===c?c===a:a!==a)||(n[l]=c)}),n}function kt(n){return function(t){return null==t?m:t[n];
}}function Ot(n){var t=n+"";return n=Br(n),function(r){return dt(r,n,t)}}function Rt(n,t){for(var r=n?t.length:0;r--;){var e=t[r];if(e!=u&&Er(e)){var u=e;yu.call(n,e,1)}}}function It(n,t){return n+su(Cu()*(t-n+1))}function Et(n,t,r,e,u){return u(n,function(n,u,i){r=e?(e=false,n):t(r,n,u,i)}),r}function Ct(n,t,r){var e=-1,u=n.length;for(t=null==t?0:+t||0,0>t&&(t=-t>u?0:u+t),r=r===m||r>u?u:+r||0,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=Me(u);++e<u;)r[e]=n[e+t];return r}function Wt(n,t){var r;return Mu(n,function(n,e,u){
return r=t(n,e,u),!r}),!!r}function St(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;return n}function Tt(t,r,e){var u=mr(),i=-1;return r=Jn(r,function(n){return u(n)}),t=bt(t,function(n){return{a:Jn(r,function(t){return t(n)}),b:++i,c:n}}),St(t,function(t,r){var u;n:{u=-1;for(var i=t.a,o=r.a,f=i.length,l=e.length;++u<f;){var a=n(i[u],o[u]);if(a){u=u<l?a*(e[u]?1:-1):a;break n}}u=t.b-r.b}return u})}function Ut(n,t){var r=0;return Mu(n,function(n,e,u){r+=+t(n,e,u)||0}),r}function $t(n,t){var e=-1,u=br(),i=n.length,o=u==r,f=o&&200<=i,l=f?Vu():null,a=[];
l?(u=qn,o=false):(f=false,l=t?[]:a);n:for(;++e<i;){var c=n[e],s=t?t(c,e,n):c;if(o&&c===c){for(var p=l.length;p--;)if(l[p]===s)continue n;t&&l.push(s),a.push(c)}else 0>u(l,s,0)&&((t||f)&&l.push(s),a.push(c))}return a}function Ft(n,t){for(var r=-1,e=t.length,u=Me(e);++r<e;)u[r]=n[t[r]];return u}function Nt(n,t,r,e){for(var u=n.length,i=e?u:-1;(e?i--:++i<u)&&t(n[i],i,n););return r?Ct(n,e?0:i,e?i+1:u):Ct(n,e?i+1:0,e?u:i)}function Lt(n,t){var r=n;r instanceof Bn&&(r=r.value());for(var e=-1,u=t.length;++e<u;){
var r=[r],i=t[e];_u.apply(r,i.args),r=i.func.apply(i.thisArg,r)}return r}function zt(n,t,r){var e=0,u=n?n.length:e;if(typeof t=="number"&&t===t&&u<=Uu){for(;e<u;){var i=e+u>>>1,o=n[i];(r?o<=t:o<t)&&null!==o?e=i+1:u=i}return u}return Bt(n,t,Fe,r)}function Bt(n,t,r,e){t=r(t);for(var u=0,i=n?n.length:0,o=t!==t,f=null===t,l=t===m;u<i;){var a=su((u+i)/2),c=r(n[a]),s=c!==m,p=c===c;(o?p||e:f?p&&s&&(e||null!=c):l?p&&(e||s):null==c?0:e?c<=t:c<t)?u=a+1:i=a}return Ou(i,Tu)}function Mt(n,t,r){if(typeof n!="function")return Fe;
if(t===m)return n;switch(r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)};case 5:return function(r,e,u,i,o){return n.call(t,r,e,u,i,o)}}return function(){return n.apply(t,arguments)}}function Pt(n){return lu.call(n,0)}function qt(n,t,r){for(var e=r.length,u=-1,i=ku(n.length-e,0),o=-1,f=t.length,l=Me(i+f);++o<f;)l[o]=t[o];for(;++u<e;)l[r[u]]=n[u];for(;i--;)l[o++]=n[u++];return l}function Dt(n,t,r){
for(var e=-1,u=r.length,i=-1,o=ku(n.length-u,0),f=-1,l=t.length,a=Me(o+l);++i<o;)a[i]=n[i];for(o=i;++f<l;)a[o+f]=t[f];for(;++e<u;)a[o+r[e]]=n[i++];return a}function Kt(n,t){return function(r,e,u){var i=t?t():{};if(e=mr(e,u,3),Ti(r)){u=-1;for(var o=r.length;++u<o;){var f=r[u];n(i,f,e(f,u,r),r)}}else Mu(r,function(t,r,u){n(i,t,e(t,r,u),u)});return i}}function Vt(n){return ae(function(t,r){var e=-1,u=null==t?0:r.length,i=2<u?r[u-2]:m,o=2<u?r[2]:m,f=1<u?r[u-1]:m;for(typeof i=="function"?(i=Mt(i,f,5),
u-=2):(i=typeof f=="function"?f:m,u-=i?1:0),o&&Cr(r[0],r[1],o)&&(i=3>u?m:i,u=1);++e<u;)(o=r[e])&&n(t,o,i);return t})}function Yt(n,t){return function(r,e){var u=r?Zu(r):0;if(!Tr(u))return n(r,e);for(var i=t?u:-1,o=zr(r);(t?i--:++i<u)&&false!==e(o[i],i,o););return r}}function Zt(n){return function(t,r,e){var u=zr(t);e=e(t);for(var i=e.length,o=n?i:-1;n?o--:++o<i;){var f=e[o];if(false===r(u[f],f,u))break}return t}}function Gt(n,t){function r(){return(this&&this!==Yn&&this instanceof r?e:n).apply(t,arguments);
}var e=Xt(n);return r}function Jt(n){return function(t){var r=-1;t=Te(Ie(t));for(var e=t.length,u="";++r<e;)u=n(u,t[r],r);return u}}function Xt(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4])}var r=Bu(n.prototype),t=n.apply(r,t);return ve(t)?t:r}}function Ht(n){function t(r,e,u){return u&&Cr(r,e,u)&&(e=null),
r=vr(r,n,null,null,null,null,null,e),r.placeholder=t.placeholder,r}return t}function Qt(n,t){return function(r,e,u){if(u&&Cr(r,e,u)&&(e=null),e=mr(e,u,3),1==e.length){u=r=Lr(r);for(var i=e,o=-1,f=u.length,l=t,a=l;++o<f;){var c=u[o],s=+i(c);n(s,l)&&(l=s,a=c)}if(u=a,!r.length||u!==t)return u}return ct(r,e,n,t)}}function nr(n,r){return function(e,u,i){return u=mr(u,i,3),Ti(e)?(u=t(e,u,r),-1<u?e[u]:m):pt(e,u,n)}}function tr(n){return function(r,e,u){return r&&r.length?(e=mr(e,u,3),t(r,e,n)):-1}}function rr(n){
return function(t,r,e){return r=mr(r,e,3),pt(t,r,n,true)}}function er(n){return function(){for(var t,r=arguments.length,e=n?r:-1,u=0,i=Me(r);n?e--:++e<r;){var o=i[u++]=arguments[e];if(typeof o!="function")throw new Je(N);!t&&zn.prototype.thru&&"wrapper"==wr(o)&&(t=new zn([]))}for(e=t?-1:r;++e<r;){var o=i[e],u=wr(o),f="wrapper"==u?Yu(o):null;t=f&&Sr(f[0])&&f[1]==(I|j|O|E)&&!f[4].length&&1==f[9]?t[wr(f[0])].apply(t,f[3]):1==o.length&&Sr(o)?t[u]():t.thru(o)}return function(){var n=arguments;if(t&&1==n.length&&Ti(n[0]))return t.plant(n[0]).value();
for(var e=0,n=r?i[e].apply(this,n):n[0];++e<r;)n=i[e].call(this,n);return n}}}function ur(n,t){return function(r,e,u){return typeof e=="function"&&u===m&&Ti(r)?n(r,e):t(r,Mt(e,u,3))}}function ir(n){return function(t,r,e){return(typeof r!="function"||e!==m)&&(r=Mt(r,e,3)),n(t,r,ke)}}function or(n){return function(t,r,e){return(typeof r!="function"||e!==m)&&(r=Mt(r,e,3)),n(t,r)}}function fr(n){return function(t,r,e){var u={};return r=mr(r,e,3),vt(t,function(t,e,i){i=r(t,e,i),e=n?i:e,t=n?t:i,u[e]=t}),
u}}function lr(n){return function(t,r,e){return t=u(t),(n?t:"")+pr(t,r,e)+(n?"":t)}}function ar(n){var t=ae(function(r,e){var u=_(e,t.placeholder);return vr(r,n,null,e,u)});return t}function cr(n,t){return function(r,e,u,i){var o=3>arguments.length;return typeof e=="function"&&i===m&&Ti(r)?n(r,e,u,o):Et(r,mr(e,i,4),u,o,t)}}function sr(n,t,r,e,u,i,o,f,l,a){function c(){for(var w=arguments.length,A=w,j=Me(w);A--;)j[A]=arguments[A];if(e&&(j=qt(j,e,u)),i&&(j=Dt(j,i,o)),v||y){var A=c.placeholder,k=_(j,A),w=w-k.length;
if(w<a){var I=f?Dn(f):null,w=ku(a-w,0),E=v?k:null,k=v?null:k,C=v?j:null,j=v?null:j;return t|=v?O:R,t&=~(v?R:O),g||(t&=~(b|x)),j=[n,t,r,C,E,j,k,I,l,w],I=sr.apply(m,j),Sr(n)&&Gu(I,j),I.placeholder=A,I}}if(A=p?r:this,I=h?A[n]:n,f)for(w=j.length,E=Ou(f.length,w),k=Dn(j);E--;)C=f[E],j[E]=Er(C,w)?k[C]:m;return s&&l<j.length&&(j.length=l),this&&this!==Yn&&this instanceof c&&(I=d||Xt(n)),I.apply(A,j)}var s=t&I,p=t&b,h=t&x,v=t&j,g=t&A,y=t&k,d=h?null:Xt(n);return c}function pr(n,t,r){return n=n.length,t=+t,
n<t&&Au(t)?(t-=n,r=null==r?" ":r+"",We(r,au(t/r.length)).slice(0,t)):""}function hr(n,t,r,e){function u(){for(var t=-1,f=arguments.length,l=-1,a=e.length,c=Me(f+a);++l<a;)c[l]=e[l];for(;f--;)c[l++]=arguments[++t];return(this&&this!==Yn&&this instanceof u?o:n).apply(i?r:this,c)}var i=t&b,o=Xt(n);return u}function _r(n){return function(t,r,e,u){var i=mr(e);return null==e&&i===it?zt(t,r,n):Bt(t,r,i(e,u,1),n)}}function vr(n,t,r,e,u,i,o,f){var l=t&x;if(!l&&typeof n!="function")throw new Je(N);var a=e?e.length:0;
if(a||(t&=~(O|R),e=u=null),a-=u?u.length:0,t&R){var c=e,s=u;e=u=null}var p=l?null:Yu(n);return r=[n,t,r,e,u,c,s,i,o,f],p&&(e=r[1],t=p[1],f=e|t,u=t==I&&e==j||t==I&&e==E&&r[7].length<=p[8]||t==(I|E)&&e==j,(f<I||u)&&(t&b&&(r[2]=p[2],f|=e&b?0:A),(e=p[3])&&(u=r[3],r[3]=u?qt(u,e,p[4]):Dn(e),r[4]=u?_(r[3],L):Dn(p[4])),(e=p[5])&&(u=r[5],r[5]=u?Dt(u,e,p[6]):Dn(e),r[6]=u?_(r[5],L):Dn(p[6])),(e=p[7])&&(r[7]=Dn(e)),t&I&&(r[8]=null==r[8]?p[8]:Ou(r[8],p[8])),null==r[9]&&(r[9]=p[9]),r[0]=p[0],r[1]=f),t=r[1],f=r[9]),
r[9]=null==f?l?0:n.length:ku(f-a,0)||0,(p?Ku:Gu)(t==b?Gt(r[0],r[2]):t!=O&&t!=(b|O)||r[4].length?sr.apply(m,r):hr.apply(m,r),r)}function gr(n,t,r,e,u,i,o){var f=-1,l=n.length,a=t.length;if(l!=a&&(!u||a<=l))return false;for(;++f<l;){var c=n[f],a=t[f],s=e?e(u?a:c,u?c:a,f):m;if(s!==m){if(s)continue;return false}if(u){if(!Hn(t,function(n){return c===n||r(c,n,e,u,i,o)}))return false}else if(c!==a&&!r(c,a,e,u,i,o))return false}return true}function yr(n,t,r){switch(r){case M:case P:return+n==+t;case q:return n.name==t.name&&n.message==t.message;
case K:return n!=+n?t!=+t:n==+t;case Y:case Z:return n==t+""}return false}function dr(n,t,r,e,u,i,o){var f=Ki(n),l=f.length,a=Ki(t).length;if(l!=a&&!u)return false;for(a=l;a--;){var c=f[a];if(!(u?c in t:ru.call(t,c)))return false}for(var s=u;++a<l;){var c=f[a],p=n[c],h=t[c],_=e?e(u?h:p,u?p:h,c):m;if(_===m?!r(p,h,e,u,i,o):!_)return false;s||(s="constructor"==c)}return s||(r=n.constructor,e=t.constructor,!(r!=e&&"constructor"in n&&"constructor"in t)||typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)?true:false;
}function mr(n,t,r){var e=Nn.callback||Ue,e=e===Ue?it:e;return r?e(n,t,r):e}function wr(n){for(var t=n.name,r=Lu[t],e=r?r.length:0;e--;){var u=r[e],i=u.func;if(null==i||i==n)return u.name}return t}function br(n,t,e){var u=Nn.indexOf||Kr,u=u===Kr?r:u;return n?u(n,t,e):u}function xr(n){n=Oe(n);for(var t=n.length;t--;){var r=n[t][1];n[t][2]=r===r&&!ve(r)}return n}function Ar(n,t){var r=null==n?m:n[t];return ge(r)?r:m}function jr(n){var t=n.length,r=new n.constructor(t);return t&&"string"==typeof n[0]&&ru.call(n,"index")&&(r.index=n.index,
r.input=n.input),r}function kr(n){return n=n.constructor,typeof n=="function"&&n instanceof n||(n=Ye),new n}function Or(n,t,r){var e=n.constructor;switch(t){case G:return Pt(n);case M:case P:return new e(+n);case J:case X:case H:case Q:case nn:case tn:case rn:case en:case un:return t=n.buffer,new e(r?Pt(t):t,n.byteOffset,n.length);case K:case Z:return new e(n);case Y:var u=new e(n.source,jn.exec(n));u.lastIndex=n.lastIndex}return u}function Rr(n,t,r){return null==n||Wr(t,n)||(t=Br(t),n=1==t.length?n:dt(n,Ct(t,0,-1)),
t=Vr(t)),t=null==n?n:n[t],null==t?m:t.apply(n,r)}function Ir(n){return null!=n&&Tr(Zu(n))}function Er(n,t){return n=typeof n=="number"||Rn.test(n)?+n:-1,t=null==t?Fu:t,-1<n&&0==n%1&&n<t}function Cr(n,t,r){if(!ve(r))return false;var e=typeof t;return("number"==e?Ir(r)&&Er(t,r.length):"string"==e&&t in r)?(t=r[t],n===n?n===t:t!==t):false}function Wr(n,t){var r=typeof n;return"string"==r&&yn.test(n)||"number"==r?true:Ti(n)?false:!gn.test(n)||null!=t&&n in zr(t)}function Sr(n){var t=wr(n);return t in Bn.prototype?(t=Nn[t],
n===t?true:(t=Yu(t),!!t&&n===t[0])):false}function Tr(n){return typeof n=="number"&&-1<n&&0==n%1&&n<=Fu}function Ur(n,t){n=zr(n);for(var r=-1,e=t.length,u={};++r<e;){var i=t[r];i in n&&(u[i]=n[i])}return u}function $r(n,t){var r={};return _t(n,function(n,e,u){t(n,e,u)&&(r[e]=n)}),r}function Fr(n){var t;if(!p(n)||uu.call(n)!=V||!(ru.call(n,"constructor")||(t=n.constructor,typeof t!="function"||t instanceof t)))return false;var r;return _t(n,function(n,t){r=t}),r===m||ru.call(n,r)}function Nr(n){for(var t=ke(n),r=t.length,e=r&&n.length,u=!!e&&Tr(e)&&(Ti(n)||se(n)),i=-1,o=[];++i<r;){
var f=t[i];(u&&Er(f,e)||ru.call(n,f))&&o.push(f)}return o}function Lr(n){return null==n?[]:Ir(n)?ve(n)?n:Ye(n):Re(n)}function zr(n){return ve(n)?n:Ye(n)}function Br(n){if(Ti(n))return n;var t=[];return u(n).replace(dn,function(n,r,e,u){t.push(e?u.replace(xn,"$1"):r||n)}),t}function Mr(n){return n instanceof Bn?n.clone():new zn(n.__wrapped__,n.__chain__,Dn(n.__actions__))}function Pr(n,t,r){return n&&n.length?((r?Cr(n,t,r):null==t)&&(t=1),Ct(n,0>t?0:t)):[]}function qr(n,t,r){var e=n?n.length:0;return e?((r?Cr(n,t,r):null==t)&&(t=1),
t=e-(+t||0),Ct(n,0,0>t?0:t)):[]}function Dr(n){return n?n[0]:m}function Kr(n,t,e){var u=n?n.length:0;if(!u)return-1;if(typeof e=="number")e=0>e?ku(u+e,0):e;else if(e)return e=zt(n,t),n=n[e],(t===t?t===n:n!==n)?e:-1;return r(n,t,e||0)}function Vr(n){var t=n?n.length:0;return t?n[t-1]:m}function Yr(n){return Pr(n,1)}function Zr(n,t,e,u){if(!n||!n.length)return[];null!=t&&typeof t!="boolean"&&(u=e,e=Cr(n,t,u)?null:t,t=false);var i=mr();if((null!=e||i!==it)&&(e=i(e,u,3)),t&&br()==r){t=e;var o;e=-1,u=n.length;
for(var i=-1,f=[];++e<u;){var l=n[e],a=t?t(l,e,n):l;e&&o===a||(o=a,f[++i]=l)}n=f}else n=$t(n,e);return n}function Gr(n){if(!n||!n.length)return[];var t=-1,r=0;n=Gn(n,function(n){return Ir(n)?(r=ku(n.length,r),true):void 0});for(var e=Me(r);++t<r;)e[t]=Jn(n,kt(t));return e}function Jr(n,t,r){return n&&n.length?(n=Gr(n),null==t?n:(t=Mt(t,r,4),Jn(n,function(n){return Xn(n,t,m,true)}))):[]}function Xr(n,t){var r=-1,e=n?n.length:0,u={};for(!e||t||Ti(n[0])||(t=[]);++r<e;){var i=n[r];t?u[i]=t[r]:i&&(u[i[0]]=i[1]);
}return u}function Hr(n){return n=Nn(n),n.__chain__=true,n}function Qr(n,t,r){return t.call(r,n)}function ne(n,t,r){var e=Ti(n)?Vn:at;return r&&Cr(n,t,r)&&(t=null),(typeof t!="function"||r!==m)&&(t=mr(t,r,3)),e(n,t)}function te(n,t,r){var e=Ti(n)?Gn:st;return t=mr(t,r,3),e(n,t)}function re(n,t,r,e){var u=n?Zu(n):0;return Tr(u)||(n=Re(n),u=n.length),u?(r=typeof r!="number"||e&&Cr(t,r,e)?0:0>r?ku(u+r,0):r||0,typeof n=="string"||!Ti(n)&&me(n)?r<u&&-1<n.indexOf(t,r):-1<br(n,t,r)):false}function ee(n,t,r){
var e=Ti(n)?Jn:bt;return t=mr(t,r,3),e(n,t)}function ue(n,t,r){if(r?Cr(n,t,r):null==t){n=Lr(n);var e=n.length;return 0<e?n[It(0,e-1)]:m}r=-1,n=xe(n);var e=n.length,u=e-1;for(t=Ou(0>t?0:+t||0,e);++r<t;){var e=It(r,u),i=n[e];n[e]=n[r],n[r]=i}return n.length=t,n}function ie(n,t,r){var e=Ti(n)?Hn:Wt;return r&&Cr(n,t,r)&&(t=null),(typeof t!="function"||r!==m)&&(t=mr(t,r,3)),e(n,t)}function oe(n,t){var r;if(typeof t!="function"){if(typeof n!="function")throw new Je(N);var e=n;n=t,t=e}return function(){
return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}}function fe(n,t,r){function e(){var r=t-(wi()-a);0>=r||r>t?(f&&cu(f),r=p,f=s=p=m,r&&(h=wi(),l=n.apply(c,o),s||f||(o=c=null))):s=gu(e,r)}function u(){s&&cu(s),f=s=p=m,(v||_!==t)&&(h=wi(),l=n.apply(c,o),s||f||(o=c=null))}function i(){if(o=arguments,a=wi(),c=this,p=v&&(s||!g),false===_)var r=g&&!s;else{f||g||(h=a);var i=_-(a-h),y=0>=i||i>_;y?(f&&(f=cu(f)),h=a,l=n.apply(c,o)):f||(f=gu(u,i))}return y&&s?s=cu(s):s||t===_||(s=gu(e,t)),r&&(y=true,l=n.apply(c,o)),
!y||s||f||(o=c=null),l}var o,f,l,a,c,s,p,h=0,_=false,v=true;if(typeof n!="function")throw new Je(N);if(t=0>t?0:+t||0,true===r)var g=true,v=false;else ve(r)&&(g=r.leading,_="maxWait"in r&&ku(+r.maxWait||0,t),v="trailing"in r?r.trailing:v);return i.cancel=function(){s&&cu(s),f&&cu(f),f=s=p=m},i}function le(n,t){function r(){var e=arguments,u=t?t.apply(this,e):e[0],i=r.cache;return i.has(u)?i.get(u):(e=n.apply(this,e),r.cache=i.set(u,e),e)}if(typeof n!="function"||t&&typeof t!="function")throw new Je(N);return r.cache=new le.Cache,
r}function ae(n,t){if(typeof n!="function")throw new Je(N);return t=ku(t===m?n.length-1:+t||0,0),function(){for(var r=arguments,e=-1,u=ku(r.length-t,0),i=Me(u);++e<u;)i[e]=r[t+e];switch(t){case 0:return n.call(this,i);case 1:return n.call(this,r[0],i);case 2:return n.call(this,r[0],r[1],i)}for(u=Me(t+1),e=-1;++e<t;)u[e]=r[e];return u[t]=i,n.apply(this,u)}}function ce(n,t){return n>t}function se(n){return p(n)&&Ir(n)&&uu.call(n)==z}function pe(n){return!!n&&1===n.nodeType&&p(n)&&-1<uu.call(n).indexOf("Element");
}function he(n,t,r,e){return e=(r=typeof r=="function"?Mt(r,e,3):m)?r(n,t):m,e===m?mt(n,t,r):!!e}function _e(n){return p(n)&&typeof n.message=="string"&&uu.call(n)==q}function ve(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function ge(n){return null==n?false:uu.call(n)==D?ou.test(tu.call(n)):p(n)&&On.test(n)}function ye(n){return typeof n=="number"||p(n)&&uu.call(n)==K}function de(n){return p(n)&&uu.call(n)==Y}function me(n){return typeof n=="string"||p(n)&&uu.call(n)==Z}function we(n){return p(n)&&Tr(n.length)&&!!Un[uu.call(n)];
}function be(n,t){return n<t}function xe(n){var t=n?Zu(n):0;return Tr(t)?t?Dn(n):[]:Re(n)}function Ae(n){return ut(n,ke(n))}function je(n){return yt(n,ke(n))}function ke(n){if(null==n)return[];ve(n)||(n=Ye(n));for(var t=n.length,t=t&&Tr(t)&&(Ti(n)||se(n))&&t||0,r=n.constructor,e=-1,r=typeof r=="function"&&r.prototype===n,u=Me(t),i=0<t;++e<t;)u[e]=e+"";for(var o in n)i&&Er(o,t)||"constructor"==o&&(r||!ru.call(n,o))||u.push(o);return u}function Oe(n){n=zr(n);for(var t=-1,r=Ki(n),e=r.length,u=Me(e);++t<e;){
var i=r[t];u[t]=[i,n[i]]}return u}function Re(n){return Ft(n,Ki(n))}function Ie(n){return(n=u(n))&&n.replace(In,l).replace(bn,"")}function Ee(n){return(n=u(n))&&wn.test(n)?n.replace(mn,"\\$&"):n}function Ce(n,t,r){return r&&Cr(n,t,r)&&(t=0),Eu(n,t)}function We(n,t){var r="";if(n=u(n),t=+t,1>t||!n||!Au(t))return r;do t%2&&(r+=n),t=su(t/2),n+=n;while(t);return r}function Se(n,t,r){var e=n;return(n=u(n))?(r?Cr(e,t,r):null==t)?n.slice(v(n),g(n)+1):(t+="",n.slice(i(n,t),o(n,t)+1)):n}function Te(n,t,r){
return r&&Cr(n,t,r)&&(t=null),n=u(n),n.match(t||Wn)||[]}function Ue(n,t,r){return r&&Cr(n,t,r)&&(t=null),p(n)?Ne(n):it(n,t)}function $e(n){return function(){return n}}function Fe(n){return n}function Ne(n){return xt(ot(n,true))}function Le(n,t,r){if(null==r){var e=ve(t),u=e?Ki(t):null;((u=u&&u.length?yt(t,u):null)?u.length:e)||(u=false,r=t,t=n,n=this)}u||(u=yt(t,Ki(t)));var i=true,e=-1,o=$i(n),f=u.length;false===r?i=false:ve(r)&&"chain"in r&&(i=r.chain);for(;++e<f;){r=u[e];var l=t[r];n[r]=l,o&&(n.prototype[r]=function(t){
return function(){var r=this.__chain__;if(i||r){var e=n(this.__wrapped__);return(e.__actions__=Dn(this.__actions__)).push({func:t,args:arguments,thisArg:n}),e.__chain__=r,e}return r=[this.value()],_u.apply(r,arguments),t.apply(n,r)}}(l))}return n}function ze(){}function Be(n){return Wr(n)?kt(n):Ot(n)}h=h?Zn.defaults(Yn.Object(),h,Zn.pick(Yn,Tn)):Yn;var Me=h.Array,Pe=h.Date,qe=h.Error,De=h.Function,Ke=h.Math,Ve=h.Number,Ye=h.Object,Ze=h.RegExp,Ge=h.String,Je=h.TypeError,Xe=Me.prototype,He=Ye.prototype,Qe=Ge.prototype,nu=(nu=h.window)?nu.document:null,tu=De.prototype.toString,ru=He.hasOwnProperty,eu=0,uu=He.toString,iu=h._,ou=Ze("^"+Ee(tu.call(ru)).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),fu=Ar(h,"ArrayBuffer"),lu=Ar(fu&&new fu(0),"slice"),au=Ke.ceil,cu=h.clearTimeout,su=Ke.floor,pu=Ar(Ye,"getPrototypeOf"),hu=h.parseFloat,_u=Xe.push,vu=Ar(h,"Set"),gu=h.setTimeout,yu=Xe.splice,du=Ar(h,"Uint8Array"),mu=Ar(h,"WeakMap"),wu=function(){
try{var n=Ar(h,"Float64Array"),t=new n(new fu(10),0,1)&&n}catch(r){}return t||null}(),bu=Ar(Ye,"create"),xu=Ar(Me,"isArray"),Au=h.isFinite,ju=Ar(Ye,"keys"),ku=Ke.max,Ou=Ke.min,Ru=Ar(Pe,"now"),Iu=Ar(Ve,"isFinite"),Eu=h.parseInt,Cu=Ke.random,Wu=Ve.NEGATIVE_INFINITY,Su=Ve.POSITIVE_INFINITY,Tu=4294967294,Uu=2147483647,$u=wu?wu.BYTES_PER_ELEMENT:0,Fu=9007199254740991,Nu=mu&&new mu,Lu={},zu=Nn.support={};!function(n){function t(){this.x=n}var r=[];t.prototype={valueOf:n,y:n};for(var e in new t)r.push(e);
try{zu.dom=11===nu.createDocumentFragment().nodeType}catch(u){zu.dom=false}}(1,0),Nn.templateSettings={escape:hn,evaluate:_n,interpolate:vn,variable:"",imports:{_:Nn}};var Bu=function(){function n(){}return function(t){if(ve(t)){n.prototype=t;var r=new n;n.prototype=null}return r||{}}}(),Mu=Yt(vt),Pu=Yt(gt,true),qu=Zt(),Du=Zt(true),Ku=Nu?function(n,t){return Nu.set(n,t),n}:Fe;lu||(Pt=fu&&du?function(n){var t=n.byteLength,r=wu?su(t/$u):0,e=r*$u,u=new fu(t);if(r){var i=new wu(u,0,r);i.set(new wu(n,0,r))}return t!=e&&(i=new du(u,e),
i.set(new du(n,e))),u}:$e(null));var Vu=bu&&vu?function(n){return new Pn(n)}:$e(null),Yu=Nu?function(n){return Nu.get(n)}:ze,Zu=kt("length"),Gu=function(){var n=0,t=0;return function(r,e){var u=wi(),i=T-(u-t);if(t=u,0<i){if(++n>=S)return r}else n=0;return Ku(r,e)}}(),Ju=ae(function(n,t){return Ir(n)?lt(n,ht(t,false,true)):[]}),Xu=tr(),Hu=tr(true),Qu=ae(function(n){for(var t=n.length,e=t,u=Me(c),i=br(),o=i==r,f=[];e--;){var l=n[e]=Ir(l=n[e])?l:[];u[e]=o&&120<=l.length?Vu(e&&l):null}var o=n[0],a=-1,c=o?o.length:0,s=u[0];
n:for(;++a<c;)if(l=o[a],0>(s?qn(s,l):i(f,l,0))){for(e=t;--e;){var p=u[e];if(0>(p?qn(p,l):i(n[e],l,0)))continue n}s&&s.push(l),f.push(l)}return f}),ni=ae(function(t,r){r=ht(r);var e=et(t,r);return Rt(t,r.sort(n)),e}),ti=_r(),ri=_r(true),ei=ae(function(n){return $t(ht(n,false,true))}),ui=ae(function(n,t){return Ir(n)?lt(n,t):[]}),ii=ae(Gr),oi=ae(function(n){var t=n.length,r=2<t?n[t-2]:m,e=1<t?n[t-1]:m;return 2<t&&typeof r=="function"?t-=2:(r=1<t&&typeof e=="function"?(--t,e):m,e=m),n.length=t,Jr(n,r,e)}),fi=ae(function(n,t){
return et(n,ht(t))}),li=Kt(function(n,t,r){ru.call(n,r)?++n[r]:n[r]=1}),ai=nr(Mu),ci=nr(Pu,true),si=ur(Kn,Mu),pi=ur(function(n,t){for(var r=n.length;r--&&false!==t(n[r],r,n););return n},Pu),hi=Kt(function(n,t,r){ru.call(n,r)?n[r].push(t):n[r]=[t]}),_i=Kt(function(n,t,r){n[r]=t}),vi=ae(function(n,t,r){var e=-1,u=typeof t=="function",i=Wr(t),o=Ir(n)?Me(n.length):[];return Mu(n,function(n){var f=u?t:i&&null!=n?n[t]:null;o[++e]=f?f.apply(n,r):Rr(n,t,r)}),o}),gi=Kt(function(n,t,r){n[r?0:1].push(t)},function(){
return[[],[]]}),yi=cr(Xn,Mu),di=cr(function(n,t,r,e){var u=n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r},Pu),mi=ae(function(n,t){if(null==n)return[];var r=t[2];return r&&Cr(t[0],t[1],r)&&(t.length=1),Tt(n,ht(t),[])}),wi=Ru||function(){return(new Pe).getTime()},bi=ae(function(n,t,r){var e=b;if(r.length)var u=_(r,bi.placeholder),e=e|O;return vr(n,e,t,r,u)}),xi=ae(function(n,t){t=t.length?ht(t):je(n);for(var r=-1,e=t.length;++r<e;){var u=t[r];n[u]=vr(n[u],b,n)}return n}),Ai=ae(function(n,t,r){
var e=b|x;if(r.length)var u=_(r,Ai.placeholder),e=e|O;return vr(t,e,n,r,u)}),ji=Ht(j),ki=Ht(k),Oi=ae(function(n,t){return ft(n,1,t)}),Ri=ae(function(n,t,r){return ft(n,t,r)}),Ii=er(),Ei=er(true),Ci=ar(O),Wi=ar(R),Si=ae(function(n,t){return vr(n,E,null,null,null,ht(t))}),Ti=xu||function(n){return p(n)&&Tr(n.length)&&uu.call(n)==B};zu.dom||(pe=function(n){return!!n&&1===n.nodeType&&p(n)&&!Fi(n)});var Ui=Iu||function(n){return typeof n=="number"&&Au(n)},$i=e(/x/)||du&&!e(du)?function(n){return uu.call(n)==D;
}:e,Fi=pu?function(n){if(!n||uu.call(n)!=V)return false;var t=Ar(n,"valueOf"),r=t&&(r=pu(t))&&pu(r);return r?n==r||pu(n)==r:Fr(n)}:Fr,Ni=Vt(function(n,t,r){return r?tt(n,t,r):rt(n,t)}),Li=ae(function(n){var t=n[0];return null==t?t:(n.push(Qn),Ni.apply(m,n))}),zi=rr(vt),Bi=rr(gt),Mi=ir(qu),Pi=ir(Du),qi=or(vt),Di=or(gt),Ki=ju?function(n){var t=null==n?null:n.constructor;return typeof t=="function"&&t.prototype===n||typeof n!="function"&&Ir(n)?Nr(n):ve(n)?ju(n):[]}:Nr,Vi=fr(true),Yi=fr(),Zi=Vt(jt),Gi=ae(function(n,t){
if(null==n)return{};if("function"!=typeof t[0])return t=Jn(ht(t),Ge),Ur(n,lt(ke(n),t));var r=Mt(t[0],t[1],3);return $r(n,function(n,t,e){return!r(n,t,e)})}),Ji=ae(function(n,t){return null==n?{}:"function"==typeof t[0]?$r(n,Mt(t[0],t[1],3)):Ur(n,ht(t))}),Xi=Jt(function(n,t,r){return t=t.toLowerCase(),n+(r?t.charAt(0).toUpperCase()+t.slice(1):t)}),Hi=Jt(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),Qi=lr(),no=lr(true);8!=Eu(Sn+"08")&&(Ce=function(n,t,r){return(r?Cr(n,t,r):null==t)?t=0:t&&(t=+t),
n=Se(n),Eu(n,t||(kn.test(n)?16:10))});var to=Jt(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),ro=Jt(function(n,t,r){return n+(r?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),eo=ae(function(n,t){try{return n.apply(m,t)}catch(r){return _e(r)?r:new qe(r)}}),uo=ae(function(n,t){return function(r){return Rr(r,n,t)}}),io=ae(function(n,t){return function(r){return Rr(n,r,t)}}),oo=Qt(ce,Wu),fo=Qt(be,Su);return Nn.prototype=Ln.prototype,zn.prototype=Bu(Ln.prototype),zn.prototype.constructor=zn,
Bn.prototype=Bu(Ln.prototype),Bn.prototype.constructor=Bn,Mn.prototype["delete"]=function(n){return this.has(n)&&delete this.__data__[n]},Mn.prototype.get=function(n){return"__proto__"==n?m:this.__data__[n]},Mn.prototype.has=function(n){return"__proto__"!=n&&ru.call(this.__data__,n)},Mn.prototype.set=function(n,t){return"__proto__"!=n&&(this.__data__[n]=t),this},Pn.prototype.push=function(n){var t=this.data;typeof n=="string"||ve(n)?t.set.add(n):t.hash[n]=true},le.Cache=Mn,Nn.after=function(n,t){if(typeof t!="function"){
if(typeof n!="function")throw new Je(N);var r=n;n=t,t=r}return n=Au(n=+n)?n:0,function(){return 1>--n?t.apply(this,arguments):void 0}},Nn.ary=function(n,t,r){return r&&Cr(n,t,r)&&(t=null),t=n&&null==t?n.length:ku(+t||0,0),vr(n,I,null,null,null,null,t)},Nn.assign=Ni,Nn.at=fi,Nn.before=oe,Nn.bind=bi,Nn.bindAll=xi,Nn.bindKey=Ai,Nn.callback=Ue,Nn.chain=Hr,Nn.chunk=function(n,t,r){t=(r?Cr(n,t,r):null==t)?1:ku(+t||1,1),r=0;for(var e=n?n.length:0,u=-1,i=Me(au(e/t));r<e;)i[++u]=Ct(n,r,r+=t);return i},Nn.compact=function(n){
for(var t=-1,r=n?n.length:0,e=-1,u=[];++t<r;){var i=n[t];i&&(u[++e]=i)}return u},Nn.constant=$e,Nn.countBy=li,Nn.create=function(n,t,r){var e=Bu(n);return r&&Cr(n,t,r)&&(t=null),t?rt(e,t):e},Nn.curry=ji,Nn.curryRight=ki,Nn.debounce=fe,Nn.defaults=Li,Nn.defer=Oi,Nn.delay=Ri,Nn.difference=Ju,Nn.drop=Pr,Nn.dropRight=qr,Nn.dropRightWhile=function(n,t,r){return n&&n.length?Nt(n,mr(t,r,3),true,true):[]},Nn.dropWhile=function(n,t,r){return n&&n.length?Nt(n,mr(t,r,3),true):[]},Nn.fill=function(n,t,r,e){var u=n?n.length:0;
if(!u)return[];for(r&&typeof r!="number"&&Cr(n,t,r)&&(r=0,e=u),u=n.length,r=null==r?0:+r||0,0>r&&(r=-r>u?0:u+r),e=e===m||e>u?u:+e||0,0>e&&(e+=u),u=r>e?0:e>>>0,r>>>=0;r<u;)n[r++]=t;return n},Nn.filter=te,Nn.flatten=function(n,t,r){var e=n?n.length:0;return r&&Cr(n,t,r)&&(t=false),e?ht(n,t):[]},Nn.flattenDeep=function(n){return n&&n.length?ht(n,true):[]},Nn.flow=Ii,Nn.flowRight=Ei,Nn.forEach=si,Nn.forEachRight=pi,Nn.forIn=Mi,Nn.forInRight=Pi,Nn.forOwn=qi,Nn.forOwnRight=Di,Nn.functions=je,Nn.groupBy=hi,Nn.indexBy=_i,
Nn.initial=function(n){return qr(n,1)},Nn.intersection=Qu,Nn.invert=function(n,t,r){r&&Cr(n,t,r)&&(t=null),r=-1;for(var e=Ki(n),u=e.length,i={};++r<u;){var o=e[r],f=n[o];t?ru.call(i,f)?i[f].push(o):i[f]=[o]:i[f]=o}return i},Nn.invoke=vi,Nn.keys=Ki,Nn.keysIn=ke,Nn.map=ee,Nn.mapKeys=Vi,Nn.mapValues=Yi,Nn.matches=Ne,Nn.matchesProperty=function(n,t){return At(n,ot(t,true))},Nn.memoize=le,Nn.merge=Zi,Nn.method=uo,Nn.methodOf=io,Nn.mixin=Le,Nn.negate=function(n){if(typeof n!="function")throw new Je(N);return function(){
return!n.apply(this,arguments)}},Nn.omit=Gi,Nn.once=function(n){return oe(2,n)},Nn.pairs=Oe,Nn.partial=Ci,Nn.partialRight=Wi,Nn.partition=gi,Nn.pick=Ji,Nn.pluck=function(n,t){return ee(n,Be(t))},Nn.property=Be,Nn.propertyOf=function(n){return function(t){return dt(n,Br(t),t+"")}},Nn.pull=function(){var n=arguments,t=n[0];if(!t||!t.length)return t;for(var r=0,e=br(),u=n.length;++r<u;)for(var i=0,o=n[r];-1<(i=e(t,o,i));)yu.call(t,i,1);return t},Nn.pullAt=ni,Nn.range=function(n,t,r){r&&Cr(n,t,r)&&(t=r=null),
n=+n||0,r=null==r?1:+r||0,null==t?(t=n,n=0):t=+t||0;var e=-1;t=ku(au((t-n)/(r||1)),0);for(var u=Me(t);++e<t;)u[e]=n,n+=r;return u},Nn.rearg=Si,Nn.reject=function(n,t,r){var e=Ti(n)?Gn:st;return t=mr(t,r,3),e(n,function(n,r,e){return!t(n,r,e)})},Nn.remove=function(n,t,r){var e=[];if(!n||!n.length)return e;var u=-1,i=[],o=n.length;for(t=mr(t,r,3);++u<o;)r=n[u],t(r,u,n)&&(e.push(r),i.push(u));return Rt(n,i),e},Nn.rest=Yr,Nn.restParam=ae,Nn.set=function(n,t,r){if(null==n)return n;var e=t+"";t=null!=n[e]||Wr(t,n)?[e]:Br(t);
for(var e=-1,u=t.length,i=u-1,o=n;null!=o&&++e<u;){var f=t[e];ve(o)&&(e==i?o[f]=r:null==o[f]&&(o[f]=Er(t[e+1])?[]:{})),o=o[f]}return n},Nn.shuffle=function(n){return ue(n,Su)},Nn.slice=function(n,t,r){var e=n?n.length:0;return e?(r&&typeof r!="number"&&Cr(n,t,r)&&(t=0,r=e),Ct(n,t,r)):[]},Nn.sortBy=function(n,t,r){if(null==n)return[];r&&Cr(n,t,r)&&(t=null);var e=-1;return t=mr(t,r,3),n=bt(n,function(n,r,u){return{a:t(n,r,u),b:++e,c:n}}),St(n,f)},Nn.sortByAll=mi,Nn.sortByOrder=function(n,t,r,e){return null==n?[]:(e&&Cr(t,r,e)&&(r=null),
Ti(t)||(t=null==t?[]:[t]),Ti(r)||(r=null==r?[]:[r]),Tt(n,t,r))},Nn.spread=function(n){if(typeof n!="function")throw new Je(N);return function(t){return n.apply(this,t)}},Nn.take=function(n,t,r){return n&&n.length?((r?Cr(n,t,r):null==t)&&(t=1),Ct(n,0,0>t?0:t)):[]},Nn.takeRight=function(n,t,r){var e=n?n.length:0;return e?((r?Cr(n,t,r):null==t)&&(t=1),t=e-(+t||0),Ct(n,0>t?0:t)):[]},Nn.takeRightWhile=function(n,t,r){return n&&n.length?Nt(n,mr(t,r,3),false,true):[]},Nn.takeWhile=function(n,t,r){return n&&n.length?Nt(n,mr(t,r,3)):[];
},Nn.tap=function(n,t,r){return t.call(r,n),n},Nn.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new Je(N);return false===r?e=false:ve(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),Fn.leading=e,Fn.maxWait=+t,Fn.trailing=u,fe(n,t,Fn)},Nn.thru=Qr,Nn.times=function(n,t,r){if(n=su(n),1>n||!Au(n))return[];var e=-1,u=Me(Ou(n,4294967295));for(t=Mt(t,r,1);++e<n;)4294967295>e?u[e]=t(e):t(e);return u},Nn.toArray=xe,Nn.toPlainObject=Ae,Nn.transform=function(n,t,r,e){var u=Ti(n)||we(n);
return t=mr(t,e,4),null==r&&(u||ve(n)?(e=n.constructor,r=u?Ti(n)?new e:[]:Bu($i(e)?e.prototype:null)):r={}),(u?Kn:vt)(n,function(n,e,u){return t(r,n,e,u)}),r},Nn.union=ei,Nn.uniq=Zr,Nn.unzip=Gr,Nn.unzipWith=Jr,Nn.values=Re,Nn.valuesIn=function(n){return Ft(n,ke(n))},Nn.where=function(n,t){return te(n,xt(t))},Nn.without=ui,Nn.wrap=function(n,t){return t=null==t?Fe:t,vr(t,O,null,[n],[])},Nn.xor=function(){for(var n=-1,t=arguments.length;++n<t;){var r=arguments[n];if(Ir(r))var e=e?lt(e,r).concat(lt(r,e)):r;
}return e?$t(e):[]},Nn.zip=ii,Nn.zipObject=Xr,Nn.zipWith=oi,Nn.backflow=Ei,Nn.collect=ee,Nn.compose=Ei,Nn.each=si,Nn.eachRight=pi,Nn.extend=Ni,Nn.iteratee=Ue,Nn.methods=je,Nn.object=Xr,Nn.select=te,Nn.tail=Yr,Nn.unique=Zr,Le(Nn,Nn),Nn.add=function(n,t){return(+n||0)+(+t||0)},Nn.attempt=eo,Nn.camelCase=Xi,Nn.capitalize=function(n){return(n=u(n))&&n.charAt(0).toUpperCase()+n.slice(1)},Nn.clone=function(n,t,r,e){return t&&typeof t!="boolean"&&Cr(n,t,r)?t=false:typeof t=="function"&&(e=r,r=t,t=false),typeof r=="function"?ot(n,t,Mt(r,e,1)):ot(n,t);
},Nn.cloneDeep=function(n,t,r){return typeof t=="function"?ot(n,true,Mt(t,r,1)):ot(n,true)},Nn.deburr=Ie,Nn.endsWith=function(n,t,r){n=u(n),t+="";var e=n.length;return r=r===m?e:Ou(0>r?0:+r||0,e),r-=t.length,0<=r&&n.indexOf(t,r)==r},Nn.escape=function(n){return(n=u(n))&&pn.test(n)?n.replace(cn,a):n},Nn.escapeRegExp=Ee,Nn.every=ne,Nn.find=ai,Nn.findIndex=Xu,Nn.findKey=zi,Nn.findLast=ci,Nn.findLastIndex=Hu,Nn.findLastKey=Bi,Nn.findWhere=function(n,t){return ai(n,xt(t))},Nn.first=Dr,Nn.get=function(n,t,r){
return n=null==n?m:dt(n,Br(t),t+""),n===m?r:n},Nn.gt=ce,Nn.gte=function(n,t){return n>=t},Nn.has=function(n,t){if(null==n)return false;var r=ru.call(n,t);if(!r&&!Wr(t)){if(t=Br(t),n=1==t.length?n:dt(n,Ct(t,0,-1)),null==n)return false;t=Vr(t),r=ru.call(n,t)}return r||Tr(n.length)&&Er(t,n.length)&&(Ti(n)||se(n))},Nn.identity=Fe,Nn.includes=re,Nn.indexOf=Kr,Nn.inRange=function(n,t,r){return t=+t||0,"undefined"===typeof r?(r=t,t=0):r=+r||0,n>=Ou(t,r)&&n<ku(t,r)},Nn.isArguments=se,Nn.isArray=Ti,Nn.isBoolean=function(n){
return true===n||false===n||p(n)&&uu.call(n)==M},Nn.isDate=function(n){return p(n)&&uu.call(n)==P},Nn.isElement=pe,Nn.isEmpty=function(n){return null==n?true:Ir(n)&&(Ti(n)||me(n)||se(n)||p(n)&&$i(n.splice))?!n.length:!Ki(n).length},Nn.isEqual=he,Nn.isError=_e,Nn.isFinite=Ui,Nn.isFunction=$i,Nn.isMatch=function(n,t,r,e){return r=typeof r=="function"?Mt(r,e,3):m,wt(n,xr(t),r)},Nn.isNaN=function(n){return ye(n)&&n!=+n},Nn.isNative=ge,Nn.isNull=function(n){return null===n},Nn.isNumber=ye,Nn.isObject=ve,Nn.isPlainObject=Fi,
Nn.isRegExp=de,Nn.isString=me,Nn.isTypedArray=we,Nn.isUndefined=function(n){return n===m},Nn.kebabCase=Hi,Nn.last=Vr,Nn.lastIndexOf=function(n,t,r){var e=n?n.length:0;if(!e)return-1;var u=e;if(typeof r=="number")u=(0>r?ku(e+r,0):Ou(r||0,e-1))+1;else if(r)return u=zt(n,t,true)-1,n=n[u],(t===t?t===n:n!==n)?u:-1;if(t!==t)return s(n,u,true);for(;u--;)if(n[u]===t)return u;return-1},Nn.lt=be,Nn.lte=function(n,t){return n<=t},Nn.max=oo,Nn.min=fo,Nn.noConflict=function(){return h._=iu,this},Nn.noop=ze,Nn.now=wi,
Nn.pad=function(n,t,r){n=u(n),t=+t;var e=n.length;return e<t&&Au(t)?(e=(t-e)/2,t=su(e),e=au(e),r=pr("",e,r),r.slice(0,t)+n+r):n},Nn.padLeft=Qi,Nn.padRight=no,Nn.parseInt=Ce,Nn.random=function(n,t,r){r&&Cr(n,t,r)&&(t=r=null);var e=null==n,u=null==t;return null==r&&(u&&typeof n=="boolean"?(r=n,n=1):typeof t=="boolean"&&(r=t,u=true)),e&&u&&(t=1,u=false),n=+n||0,u?(t=n,n=0):t=+t||0,r||n%1||t%1?(r=Cu(),Ou(n+r*(t-n+hu("1e-"+((r+"").length-1))),t)):It(n,t)},Nn.reduce=yi,Nn.reduceRight=di,Nn.repeat=We,Nn.result=function(n,t,r){
var e=null==n?m:n[t];return e===m&&(null==n||Wr(t,n)||(t=Br(t),n=1==t.length?n:dt(n,Ct(t,0,-1)),e=null==n?m:n[Vr(t)]),e=e===m?r:e),$i(e)?e.call(n):e},Nn.runInContext=d,Nn.size=function(n){var t=n?Zu(n):0;return Tr(t)?t:Ki(n).length},Nn.snakeCase=to,Nn.some=ie,Nn.sortedIndex=ti,Nn.sortedLastIndex=ri,Nn.startCase=ro,Nn.startsWith=function(n,t,r){return n=u(n),r=null==r?0:Ou(0>r?0:+r||0,n.length),n.lastIndexOf(t,r)==r},Nn.sum=function(n,t,r){r&&Cr(n,t,r)&&(t=null);var e=mr(),u=null==t;if(u&&e===it||(u=false,
t=e(t,r,3)),u){for(n=Ti(n)?n:Lr(n),t=n.length,r=0;t--;)r+=+n[t]||0;n=r}else n=Ut(n,t);return n},Nn.template=function(n,t,r){var e=Nn.templateSettings;r&&Cr(n,t,r)&&(t=r=null),n=u(n),t=tt(rt({},r||t),e,nt),r=tt(rt({},t.imports),e.imports,nt);var i,o,f=Ki(r),l=Ft(r,f),a=0;r=t.interpolate||En;var s="__p+='";r=Ze((t.escape||En).source+"|"+r.source+"|"+(r===vn?An:En).source+"|"+(t.evaluate||En).source+"|$","g");var p="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";if(n.replace(r,function(t,r,e,u,f,l){
return e||(e=u),s+=n.slice(a,l).replace(Cn,c),r&&(i=true,s+="'+__e("+r+")+'"),f&&(o=true,s+="';"+f+";\n__p+='"),e&&(s+="'+((__t=("+e+"))==null?'':__t)+'"),a=l+t.length,t}),s+="';",(t=t.variable)||(s="with(obj){"+s+"}"),s=(o?s.replace(on,""):s).replace(fn,"$1").replace(ln,"$1;"),s="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(i?",__e=_.escape":"")+(o?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+s+"return __p}",t=eo(function(){return De(f,p+"return "+s).apply(m,l);
}),t.source=s,_e(t))throw t;return t},Nn.trim=Se,Nn.trimLeft=function(n,t,r){var e=n;return(n=u(n))?n.slice((r?Cr(e,t,r):null==t)?v(n):i(n,t+"")):n},Nn.trimRight=function(n,t,r){var e=n;return(n=u(n))?(r?Cr(e,t,r):null==t)?n.slice(0,g(n)+1):n.slice(0,o(n,t+"")+1):n},Nn.trunc=function(n,t,r){r&&Cr(n,t,r)&&(t=null);var e=C;if(r=W,null!=t)if(ve(t)){var i="separator"in t?t.separator:i,e="length"in t?+t.length||0:e;r="omission"in t?u(t.omission):r}else e=+t||0;if(n=u(n),e>=n.length)return n;if(e-=r.length,
1>e)return r;if(t=n.slice(0,e),null==i)return t+r;if(de(i)){if(n.slice(e).search(i)){var o,f=n.slice(0,e);for(i.global||(i=Ze(i.source,(jn.exec(i)||"")+"g")),i.lastIndex=0;n=i.exec(f);)o=n.index;t=t.slice(0,null==o?e:o)}}else n.indexOf(i,e)!=e&&(i=t.lastIndexOf(i),-1<i&&(t=t.slice(0,i)));return t+r},Nn.unescape=function(n){return(n=u(n))&&sn.test(n)?n.replace(an,y):n},Nn.uniqueId=function(n){var t=++eu;return u(n)+t},Nn.words=Te,Nn.all=ne,Nn.any=ie,Nn.contains=re,Nn.eq=he,Nn.detect=ai,Nn.foldl=yi,
Nn.foldr=di,Nn.head=Dr,Nn.include=re,Nn.inject=yi,Le(Nn,function(){var n={};return vt(Nn,function(t,r){Nn.prototype[r]||(n[r]=t)}),n}(),false),Nn.sample=ue,Nn.prototype.sample=function(n){return this.__chain__||null!=n?this.thru(function(t){return ue(t,n)}):ue(this.value())},Nn.VERSION=w,Kn("bind bindKey curry curryRight partial partialRight".split(" "),function(n){Nn[n].placeholder=Nn}),Kn(["dropWhile","filter","map","takeWhile"],function(n,t){var r=t!=F,e=t==U;Bn.prototype[n]=function(n,u){var i=this.__filtered__,o=i&&e?new Bn(this):this.clone();
return(o.__iteratees__||(o.__iteratees__=[])).push({done:false,count:0,index:0,iteratee:mr(n,u,1),limit:-1,type:t}),o.__filtered__=i||r,o}}),Kn(["drop","take"],function(n,t){var r=n+"While";Bn.prototype[n]=function(r){var e=this.__filtered__,u=e&&!t?this.dropWhile():this.clone();return r=null==r?1:ku(su(r)||0,0),e?t?u.__takeCount__=Ou(u.__takeCount__,r):Vr(u.__iteratees__).limit=r:(u.__views__||(u.__views__=[])).push({size:r,type:n+(0>u.__dir__?"Right":"")}),u},Bn.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse();
},Bn.prototype[n+"RightWhile"]=function(n,t){return this.reverse()[r](n,t).reverse()}}),Kn(["first","last"],function(n,t){var r="take"+(t?"Right":"");Bn.prototype[n]=function(){return this[r](1).value()[0]}}),Kn(["initial","rest"],function(n,t){var r="drop"+(t?"":"Right");Bn.prototype[n]=function(){return this[r](1)}}),Kn(["pluck","where"],function(n,t){var r=t?"filter":"map",e=t?xt:Be;Bn.prototype[n]=function(n){return this[r](e(n))}}),Bn.prototype.compact=function(){return this.filter(Fe)},Bn.prototype.reject=function(n,t){
return n=mr(n,t,1),this.filter(function(t){return!n(t)})},Bn.prototype.slice=function(n,t){n=null==n?0:+n||0;var r=this;return 0>n?r=this.takeRight(-n):n&&(r=this.drop(n)),t!==m&&(t=+t||0,r=0>t?r.dropRight(-t):r.take(t-n)),r},Bn.prototype.toArray=function(){return this.drop(0)},vt(Bn.prototype,function(n,t){var r=Nn[t];if(r){var e=/^(?:filter|map|reject)|While$/.test(t),u=/^(?:first|last)$/.test(t);Nn.prototype[t]=function(){function t(n){return n=[n],_u.apply(n,i),r.apply(Nn,n)}var i=arguments,o=this.__chain__,f=this.__wrapped__,l=!!this.__actions__.length,a=f instanceof Bn,c=i[0],s=a||Ti(f);
return s&&e&&typeof c=="function"&&1!=c.length&&(a=s=false),a=a&&!l,u&&!o?a?n.call(f):r.call(Nn,this.value()):s?(f=n.apply(a?f:new Bn(this),i),u||!l&&!f.__actions__||(f.__actions__||(f.__actions__=[])).push({func:Qr,args:[t],thisArg:Nn}),new zn(f,o)):this.thru(t)}}}),Kn("concat join pop push replace shift sort splice split unshift".split(" "),function(n){var t=(/^(?:replace|split)$/.test(n)?Qe:Xe)[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:join|pop|replace|shift)$/.test(n);Nn.prototype[n]=function(){
var n=arguments;return e&&!this.__chain__?t.apply(this.value(),n):this[r](function(r){return t.apply(r,n)})}}),vt(Bn.prototype,function(n,t){var r=Nn[t];if(r){var e=r.name;(Lu[e]||(Lu[e]=[])).push({name:t,func:r})}}),Lu[sr(null,x).name]=[{name:"wrapper",func:null}],Bn.prototype.clone=function(){var n=this.__actions__,t=this.__iteratees__,r=this.__views__,e=new Bn(this.__wrapped__);return e.__actions__=n?Dn(n):null,e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=t?Dn(t):null,
e.__takeCount__=this.__takeCount__,e.__views__=r?Dn(r):null,e},Bn.prototype.reverse=function(){if(this.__filtered__){var n=new Bn(this);n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},Bn.prototype.value=function(){var n=this.__wrapped__.value();if(!Ti(n))return Lt(n,this.__actions__);var t,r=this.__dir__,e=0>r;t=n.length;for(var u=this.__views__,i=0,o=-1,f=u?u.length:0;++o<f;){var l=u[o],a=l.size;switch(l.type){case"drop":i+=a;break;case"dropRight":t-=a;break;case"take":
t=Ou(t,i+a);break;case"takeRight":i=ku(i,t-a)}}t={start:i,end:t},u=t.start,i=t.end,t=i-u,u=e?i:u-1,i=Ou(t,this.__takeCount__),f=(o=this.__iteratees__)?o.length:0,l=0,a=[];n:for(;t--&&l<i;){for(var u=u+r,c=-1,s=n[u];++c<f;){var p=o[c],h=p.iteratee,_=p.type;if(_==U){if(p.done&&(e?u>p.index:u<p.index)&&(p.count=0,p.done=false),p.index=u,!(p.done||(_=p.limit,p.done=-1<_?p.count++>=_:!h(s))))continue n}else if(p=h(s),_==F)s=p;else if(!p){if(_==$)continue n;break n}}a[l++]=s}return a},Nn.prototype.chain=function(){
return Hr(this)},Nn.prototype.commit=function(){return new zn(this.value(),this.__chain__)},Nn.prototype.plant=function(n){for(var t,r=this;r instanceof Ln;){var e=Mr(r);t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},Nn.prototype.reverse=function(){var n=this.__wrapped__;return n instanceof Bn?(this.__actions__.length&&(n=new Bn(this)),new zn(n.reverse(),this.__chain__)):this.thru(function(n){return n.reverse()})},Nn.prototype.toString=function(){return this.value()+""},Nn.prototype.run=Nn.prototype.toJSON=Nn.prototype.valueOf=Nn.prototype.value=function(){
return Lt(this.__wrapped__,this.__actions__)},Nn.prototype.collect=Nn.prototype.map,Nn.prototype.head=Nn.prototype.first,Nn.prototype.select=Nn.prototype.filter,Nn.prototype.tail=Nn.prototype.rest,Nn}var m,w="3.9.3",b=1,x=2,A=4,j=8,k=16,O=32,R=64,I=128,E=256,C=30,W="...",S=150,T=16,U=0,$=1,F=2,N="Expected a function",L="__lodash_placeholder__",z="[object Arguments]",B="[object Array]",M="[object Boolean]",P="[object Date]",q="[object Error]",D="[object Function]",K="[object Number]",V="[object Object]",Y="[object RegExp]",Z="[object String]",G="[object ArrayBuffer]",J="[object Float32Array]",X="[object Float64Array]",H="[object Int8Array]",Q="[object Int16Array]",nn="[object Int32Array]",tn="[object Uint8Array]",rn="[object Uint8ClampedArray]",en="[object Uint16Array]",un="[object Uint32Array]",on=/\b__p\+='';/g,fn=/\b(__p\+=)''\+/g,ln=/(__e\(.*?\)|\b__t\))\+'';/g,an=/&(?:amp|lt|gt|quot|#39|#96);/g,cn=/[&<>"'`]/g,sn=RegExp(an.source),pn=RegExp(cn.source),hn=/<%-([\s\S]+?)%>/g,_n=/<%([\s\S]+?)%>/g,vn=/<%=([\s\S]+?)%>/g,gn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,yn=/^\w*$/,dn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,mn=/[.*+?^${}()|[\]\/\\]/g,wn=RegExp(mn.source),bn=/[\u0300-\u036f\ufe20-\ufe23]/g,xn=/\\(\\)?/g,An=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,jn=/\w*$/,kn=/^0[xX]/,On=/^\[object .+?Constructor\]$/,Rn=/^\d+$/,In=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,En=/($^)/,Cn=/['\n\r\u2028\u2029\\]/g,Wn=RegExp("[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?=[A-Z\\xc0-\\xd6\\xd8-\\xde][a-z\\xdf-\\xf6\\xf8-\\xff]+)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+|[A-Z\\xc0-\\xd6\\xd8-\\xde]+|[0-9]+","g"),Sn=" \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000",Tn="Array ArrayBuffer Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Math Number Object RegExp Set String _ clearTimeout document isFinite parseFloat parseInt setTimeout TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap window".split(" "),Un={};
Un[J]=Un[X]=Un[H]=Un[Q]=Un[nn]=Un[tn]=Un[rn]=Un[en]=Un[un]=true,Un[z]=Un[B]=Un[G]=Un[M]=Un[P]=Un[q]=Un[D]=Un["[object Map]"]=Un[K]=Un[V]=Un[Y]=Un["[object Set]"]=Un[Z]=Un["[object WeakMap]"]=false;var $n={};$n[z]=$n[B]=$n[G]=$n[M]=$n[P]=$n[J]=$n[X]=$n[H]=$n[Q]=$n[nn]=$n[K]=$n[V]=$n[Y]=$n[Z]=$n[tn]=$n[rn]=$n[en]=$n[un]=true,$n[q]=$n[D]=$n["[object Map]"]=$n["[object Set]"]=$n["[object WeakMap]"]=false;var Fn={leading:false,maxWait:0,trailing:false},Nn={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A",
"\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u",
"\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss"},Ln={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},zn={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Bn={"function":true,object:true},Mn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pn=Bn[typeof exports]&&exports&&!exports.nodeType&&exports,qn=Bn[typeof module]&&module&&!module.nodeType&&module,Dn=Bn[typeof self]&&self&&self.Object&&self,Kn=Bn[typeof window]&&window&&window.Object&&window,Vn=qn&&qn.exports===Pn&&Pn,Yn=Pn&&qn&&typeof global=="object"&&global&&global.Object&&global||Kn!==(this&&this.window)&&Kn||Dn||this,Zn=d();
typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Yn._=Zn, define(function(){return Zn})):Pn&&qn?Vn?(qn.exports=Zn)._=Zn:Pn._=Zn:Yn._=Zn}).call(this);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/moment/min/moment.min.js":[function(require,module,exports){
//! moment.js
//! version : 2.10.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return Dc.apply(null,arguments)}function b(a){Dc=a}function c(a){return"[object Array]"===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&&(a[c]=b[c]);return f(b,"toString")&&(a.toString=b.toString),f(b,"valueOf")&&(a.valueOf=b.valueOf),a}function h(a,b,c,d){return za(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&&(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!isNaN(a._d.getTime())&&b.overflow<0&&!b.empty&&!b.invalidMonth&&!b.nullInput&&!b.invalidFormat&&!b.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour)}return a._isValid}function l(a){var b=h(0/0);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=j(b)),"undefined"!=typeof b._locale&&(a._locale=b._locale),Fc.length>0)for(c in Fc)d=Fc[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(+b._d),Gc===!1&&(Gc=!0,a.updateOffset(this),Gc=!1)}function o(a){return a instanceof n||null!=a&&null!=a._isAMomentObject}function p(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function q(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&p(a[d])!==p(b[d]))&&g++;return g+f}function r(){}function s(a){return a?a.toLowerCase().replace("_","-"):a}function t(a){for(var b,c,d,e,f=0;f<a.length;){for(e=s(a[f]).split("-"),b=e.length,c=s(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=u(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&q(e,c,!0)>=b-1)break;b--}f++}return null}function u(a){var b=null;if(!Hc[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=Ec._abbr,require("./locale/"+a),v(b)}catch(c){}return Hc[a]}function v(a,b){var c;return a&&(c="undefined"==typeof b?x(a):w(a,b),c&&(Ec=c)),Ec._abbr}function w(a,b){return null!==b?(b.abbr=a,Hc[a]||(Hc[a]=new r),Hc[a].set(b),v(a),Hc[a]):(delete Hc[a],null)}function x(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return Ec;if(!c(a)){if(b=u(a))return b;a=[a]}return t(a)}function y(a,b){var c=a.toLowerCase();Ic[c]=Ic[c+"s"]=Ic[b]=a}function z(a){return"string"==typeof a?Ic[a]||Ic[a.toLowerCase()]:void 0}function A(a){var b,c,d={};for(c in a)f(a,c)&&(b=z(c),b&&(d[b]=a[c]));return d}function B(b,c){return function(d){return null!=d?(D(this,b,d),a.updateOffset(this,c),this):C(this,b)}}function C(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function D(a,b,c){return a._d["set"+(a._isUTC?"UTC":"")+b](c)}function E(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else if(a=z(a),"function"==typeof this[a])return this[a](b);return this}function F(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function G(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(Mc[a]=e),b&&(Mc[b[0]]=function(){return F(e.apply(this,arguments),b[1],b[2])}),c&&(Mc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function H(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function I(a){var b,c,d=a.match(Jc);for(b=0,c=d.length;c>b;b++)Mc[d[b]]?d[b]=Mc[d[b]]:d[b]=H(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function J(a,b){return a.isValid()?(b=K(b,a.localeData()),Lc[b]||(Lc[b]=I(b)),Lc[b](a)):a.localeData().invalidDate()}function K(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Kc.lastIndex=0;d>=0&&Kc.test(a);)a=a.replace(Kc,c),Kc.lastIndex=0,d-=1;return a}function L(a,b,c){_c[a]="function"==typeof b?b:function(a){return a&&c?c:b}}function M(a,b){return f(_c,a)?_c[a](b._strict,b._locale):new RegExp(N(a))}function N(a){return a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function O(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=p(a)}),c=0;c<a.length;c++)ad[a[c]]=d}function P(a,b){O(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function Q(a,b,c){null!=b&&f(ad,a)&&ad[a](b,c._a,c,a)}function R(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function S(a){return this._months[a.month()]}function T(a){return this._monthsShort[a.month()]}function U(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=h([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function V(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),R(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function W(b){return null!=b?(V(this,b),a.updateOffset(this,!0),this):C(this,"Month")}function X(){return R(this.year(),this.month())}function Y(a){var b,c=a._a;return c&&-2===j(a).overflow&&(b=c[cd]<0||c[cd]>11?cd:c[dd]<1||c[dd]>R(c[bd],c[cd])?dd:c[ed]<0||c[ed]>24||24===c[ed]&&(0!==c[fd]||0!==c[gd]||0!==c[hd])?ed:c[fd]<0||c[fd]>59?fd:c[gd]<0||c[gd]>59?gd:c[hd]<0||c[hd]>999?hd:-1,j(a)._overflowDayOfYear&&(bd>b||b>dd)&&(b=dd),j(a).overflow=b),a}function Z(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function $(a,b){var c=!0,d=a+"\n"+(new Error).stack;return g(function(){return c&&(Z(d),c=!1),b.apply(this,arguments)},b)}function _(a,b){kd[a]||(Z(b),kd[a]=!0)}function aa(a){var b,c,d=a._i,e=ld.exec(d);if(e){for(j(a).iso=!0,b=0,c=md.length;c>b;b++)if(md[b][1].exec(d)){a._f=md[b][0]+(e[6]||" ");break}for(b=0,c=nd.length;c>b;b++)if(nd[b][1].exec(d)){a._f+=nd[b][0];break}d.match(Yc)&&(a._f+="Z"),ta(a)}else a._isValid=!1}function ba(b){var c=od.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(aa(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}function ca(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function da(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function ea(a){return fa(a)?366:365}function fa(a){return a%4===0&&a%100!==0||a%400===0}function ga(){return fa(this.year())}function ha(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=Aa(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ia(a){return ha(a,this._week.dow,this._week.doy).week}function ja(){return this._week.dow}function ka(){return this._week.doy}function la(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function ma(a){var b=ha(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function na(a,b,c,d,e){var f,g,h=da(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:ea(a-1)+g}}function oa(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function pa(a,b,c){return null!=a?a:null!=b?b:c}function qa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ra(a){var b,c,d,e,f=[];if(!a._d){for(d=qa(a),a._w&&null==a._a[dd]&&null==a._a[cd]&&sa(a),a._dayOfYear&&(e=pa(a._a[bd],d[bd]),a._dayOfYear>ea(e)&&(j(a)._overflowDayOfYear=!0),c=da(e,0,a._dayOfYear),a._a[cd]=c.getUTCMonth(),a._a[dd]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[ed]&&0===a._a[fd]&&0===a._a[gd]&&0===a._a[hd]&&(a._nextDay=!0,a._a[ed]=0),a._d=(a._useUTC?da:ca).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[ed]=24)}}function sa(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=pa(b.GG,a._a[bd],ha(Aa(),1,4).year),d=pa(b.W,1),e=pa(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=pa(b.gg,a._a[bd],ha(Aa(),f,g).year),d=pa(b.w,1),null!=b.d?(e=b.d,f>e&&++d):e=null!=b.e?b.e+f:f),h=na(c,d,e,g,f),a._a[bd]=h.year,a._dayOfYear=h.dayOfYear}function ta(b){if(b._f===a.ISO_8601)return void aa(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,k=0;for(e=K(b._f,b._locale).match(Jc)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(M(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Mc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),Q(f,d,b)):b._strict&&!d&&j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length>0&&j(b).unusedInput.push(h),j(b).bigHour===!0&&b._a[ed]<=12&&b._a[ed]>0&&(j(b).bigHour=void 0),b._a[ed]=ua(b._locale,b._a[ed],b._meridiem),ra(b),Y(b)}function ua(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function va(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(0/0));for(e=0;e<a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],ta(b),k(b)&&(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d>f)&&(d=f,c=b));g(a,c||b)}function wa(a){if(!a._d){var b=A(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ra(a)}}function xa(a){var b,e=a._i,f=a._f;return a._locale=a._locale||x(a._l),null===e||void 0===f&&""===e?l({nullInput:!0}):("string"==typeof e&&(a._i=e=a._locale.preparse(e)),o(e)?new n(Y(e)):(c(f)?va(a):f?ta(a):d(e)?a._d=e:ya(a),b=new n(Y(a)),b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b))}function ya(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):"string"==typeof f?ba(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ra(b)):"object"==typeof f?wa(b):"number"==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function za(a,b,c,d,e){var f={};return"boolean"==typeof c&&(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,xa(f)}function Aa(a,b,c,d){return za(a,b,c,d,!1)}function Ba(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return Aa();for(d=b[0],e=1;e<b.length;++e)b[e][a](d)&&(d=b[e]);return d}function Ca(){var a=[].slice.call(arguments,0);return Ba("isBefore",a)}function Da(){var a=[].slice.call(arguments,0);return Ba("isAfter",a)}function Ea(a){var b=A(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=x(),this._bubble()}function Fa(a){return a instanceof Ea}function Ga(a,b){G(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+F(~~(a/60),2)+b+F(~~a%60,2)})}function Ha(a){var b=(a||"").match(Yc)||[],c=b[b.length-1]||[],d=(c+"").match(td)||["-",0,0],e=+(60*d[1])+p(d[2]);return"+"===d[0]?e:-e}function Ia(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Aa(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Aa(b).local();return c._isUTC?Aa(b).zone(c._offset||0):Aa(b).local()}function Ja(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Ka(b,c){var d,e=this._offset||0;return null!=b?("string"==typeof b&&(b=Ha(b)),Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Ja(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?$a(this,Va(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ja(this)}function La(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Ma(a){return this.utcOffset(0,a)}function Na(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Ja(this),"m")),this}function Oa(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ha(this._i)),this}function Pa(a){return a=a?Aa(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Qa(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ra(){if(this._a){var a=this._isUTC?h(this._a):Aa(this._a);return this.isValid()&&q(this._a,a.toArray())>0}return!1}function Sa(){return!this._isUTC}function Ta(){return this._isUTC}function Ua(){return this._isUTC&&0===this._offset}function Va(a,b){var c,d,e,g=a,h=null;return Fa(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=ud.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:p(h[dd])*c,h:p(h[ed])*c,m:p(h[fd])*c,s:p(h[gd])*c,ms:p(h[hd])*c}):(h=vd.exec(a))?(c="-"===h[1]?-1:1,g={y:Wa(h[2],c),M:Wa(h[3],c),d:Wa(h[4],c),h:Wa(h[5],c),m:Wa(h[6],c),s:Wa(h[7],c),w:Wa(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=Ya(Aa(g.from),Aa(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ea(g),Fa(a)&&f(a,"_locale")&&(d._locale=a._locale),d}function Wa(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function Xa(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function Ya(a,b){var c;return b=Ia(b,a),a.isBefore(b)?c=Xa(a,b):(c=Xa(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function Za(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(_(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=Va(c,d),$a(this,e,a),this}}function $a(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&&b._d.setTime(+b._d+f*d),g&&D(b,"Date",C(b,"Date")+g*d),h&&V(b,C(b,"Month")+h*d),e&&a.updateOffset(b,g||h)}function _a(a){var b=a||Aa(),c=Ia(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this,Aa(b)))}function ab(){return new n(this)}function bb(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+this>+a):(c=o(a)?+a:+Aa(a),c<+this.clone().startOf(b))}function cb(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+a>+this):(c=o(a)?+a:+Aa(a),+this.clone().endOf(b)<c)}function db(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)}function eb(a,b){var c;return b=z(b||"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+this===+a):(c=+Aa(a),+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))}function fb(a){return 0>a?Math.ceil(a):Math.floor(a)}function gb(a,b,c){var d,e,f=Ia(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=z(b),"year"===b||"month"===b||"quarter"===b?(e=hb(this,f),"quarter"===b?e/=3:"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:fb(e)}function hb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function ib(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function jb(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():J(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):J(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function kb(b){var c=J(this,b||a.defaultFormat);return this.localeData().postformat(c)}function lb(a,b){return this.isValid()?Va({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function mb(a){return this.from(Aa(),a)}function nb(a,b){return this.isValid()?Va({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.to(Aa(),a)}function pb(a){var b;return void 0===a?this._locale._abbr:(b=x(a),null!=b&&(this._locale=b),this)}function qb(){return this._locale}function rb(a){switch(a=z(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function sb(a){return a=z(a),void 0===a||"millisecond"===a?this:this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")}function tb(){return+this._d-6e4*(this._offset||0)}function ub(){return Math.floor(+this/1e3)}function vb(){return this._offset?new Date(+this):this._d}function wb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function xb(){return k(this)}function yb(){return g({},j(this))}function zb(){return j(this).overflow}function Ab(a,b){G(0,[a,a.length],0,b)}function Bb(a,b,c){return ha(Aa([a,11,31+b-c]),b,c).week}function Cb(a){var b=ha(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")}function Db(a){var b=ha(this,1,4).year;return null==a?b:this.add(a-b,"y")}function Eb(){return Bb(this.year(),1,4)}function Fb(){var a=this.localeData()._week;return Bb(this.year(),a.dow,a.doy)}function Gb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Hb(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function Ib(a){return this._weekdays[a.day()]}function Jb(a){return this._weekdaysShort[a.day()]}function Kb(a){return this._weekdaysMin[a.day()]}function Lb(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=Aa([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b}function Mb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Hb(a,this.localeData()),this.add(a-b,"d")):b}function Nb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function Ob(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Pb(a,b){G(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Qb(a,b){return b._meridiemParse}function Rb(a){return"p"===(a+"").toLowerCase().charAt(0)}function Sb(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function Tb(a){G(0,[a,3],0,"millisecond")}function Ub(){return this._isUTC?"UTC":""}function Vb(){return this._isUTC?"Coordinated Universal Time":""}function Wb(a){return Aa(1e3*a)}function Xb(){return Aa.apply(null,arguments).parseZone()}function Yb(a,b,c){var d=this._calendar[a];return"function"==typeof d?d.call(b,c):d}function Zb(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b}function $b(){return this._invalidDate}function _b(a){return this._ordinal.replace("%d",a)}function ac(a){return a}function bc(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function cc(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)}function dc(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function ec(a,b,c,d){var e=x(),f=h().set(d,b);return e[c](f,a)}function fc(a,b,c,d,e){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return ec(a,b,c,e);var f,g=[];for(f=0;d>f;f++)g[f]=ec(a,f,c,e);return g}function gc(a,b){return fc(a,b,"months",12,"month")}function hc(a,b){return fc(a,b,"monthsShort",12,"month")}function ic(a,b){return fc(a,b,"weekdays",7,"day")}function jc(a,b){return fc(a,b,"weekdaysShort",7,"day")}function kc(a,b){return fc(a,b,"weekdaysMin",7,"day")}function lc(){var a=this._data;return this._milliseconds=Rd(this._milliseconds),this._days=Rd(this._days),this._months=Rd(this._months),a.milliseconds=Rd(a.milliseconds),a.seconds=Rd(a.seconds),a.minutes=Rd(a.minutes),a.hours=Rd(a.hours),a.months=Rd(a.months),a.years=Rd(a.years),this}function mc(a,b,c,d){var e=Va(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function nc(a,b){return mc(this,a,b,1)}function oc(a,b){return mc(this,a,b,-1)}function pc(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;return g.milliseconds=d%1e3,a=fb(d/1e3),g.seconds=a%60,b=fb(a/60),g.minutes=b%60,c=fb(b/60),g.hours=c%24,e+=fb(c/24),h=fb(qc(e)),e-=fb(rc(h)),f+=fb(e/30),e%=30,h+=fb(f/12),f%=12,g.days=e,g.months=f,g.years=h,this}function qc(a){return 400*a/146097}function rc(a){return 146097*a/400}function sc(a){var b,c,d=this._milliseconds;if(a=z(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+12*qc(b),"month"===a?c:c/12;switch(b=this._days+Math.round(rc(this._months/12)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function tc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*p(this._months/12)}function uc(a){return function(){return this.as(a)}}function vc(a){return a=z(a),this[a+"s"]()}function wc(a){return function(){return this._data[a]}}function xc(){return fb(this.days()/7)}function yc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function zc(a,b,c){var d=Va(a).abs(),e=fe(d.as("s")),f=fe(d.as("m")),g=fe(d.as("h")),h=fe(d.as("d")),i=fe(d.as("M")),j=fe(d.as("y")),k=e<ge.s&&["s",e]||1===f&&["m"]||f<ge.m&&["mm",f]||1===g&&["h"]||g<ge.h&&["hh",g]||1===h&&["d"]||h<ge.d&&["dd",h]||1===i&&["M"]||i<ge.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,yc.apply(null,k)}function Ac(a,b){return void 0===ge[a]?!1:void 0===b?ge[a]:(ge[a]=b,!0)}function Bc(a){var b=this.localeData(),c=zc(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function Cc(){var a=he(this.years()),b=he(this.months()),c=he(this.days()),d=he(this.hours()),e=he(this.minutes()),f=he(this.seconds()+this.milliseconds()/1e3),g=this.asSeconds();return g?(0>g?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"}var Dc,Ec,Fc=a.momentProperties=[],Gc=!1,Hc={},Ic={},Jc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,Kc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Lc={},Mc={},Nc=/\d/,Oc=/\d\d/,Pc=/\d{3}/,Qc=/\d{4}/,Rc=/[+-]?\d{6}/,Sc=/\d\d?/,Tc=/\d{1,3}/,Uc=/\d{1,4}/,Vc=/[+-]?\d{1,6}/,Wc=/\d+/,Xc=/[+-]?\d+/,Yc=/Z|[+-]\d\d:?\d\d/gi,Zc=/[+-]?\d+(\.\d{1,3})?/,$c=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,_c={},ad={},bd=0,cd=1,dd=2,ed=3,fd=4,gd=5,hd=6;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),G("MMMM",0,0,function(a){return this.localeData().months(this,a)}),y("month","M"),L("M",Sc),L("MM",Sc,Oc),L("MMM",$c),L("MMMM",$c),O(["M","MM"],function(a,b){b[cd]=p(a)-1}),O(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[cd]=e:j(c).invalidMonth=a});var id="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),jd="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),kd={};a.suppressDeprecationWarnings=!1;var ld=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,md=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],nd=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],od=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=$("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),y("year","y"),L("Y",Xc),L("YY",Sc,Oc),L("YYYY",Uc,Qc),L("YYYYY",Vc,Rc),L("YYYYYY",Vc,Rc),O(["YYYY","YYYYY","YYYYYY"],bd),O("YY",function(b,c){c[bd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return p(a)+(p(a)>68?1900:2e3)};var pd=B("FullYear",!1);G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),y("week","w"),y("isoWeek","W"),L("w",Sc),L("ww",Sc,Oc),L("W",Sc),L("WW",Sc,Oc),P(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=p(a)});var qd={dow:0,doy:6};G("DDD",["DDDD",3],"DDDo","dayOfYear"),y("dayOfYear","DDD"),L("DDD",Tc),L("DDDD",Pc),O(["DDD","DDDD"],function(a,b,c){c._dayOfYear=p(a)}),a.ISO_8601=function(){};var rd=$("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var a=Aa.apply(null,arguments);return this>a?this:a}),sd=$("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var a=Aa.apply(null,arguments);return a>this?this:a});Ga("Z",":"),Ga("ZZ",""),L("Z",Yc),L("ZZ",Yc),O(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Ha(a)});var td=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var ud=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,vd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Va.fn=Ea.prototype;var wd=Za(1,"add"),xd=Za(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var yd=$("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ab("gggg","weekYear"),Ab("ggggg","weekYear"),Ab("GGGG","isoWeekYear"),Ab("GGGGG","isoWeekYear"),y("weekYear","gg"),y("isoWeekYear","GG"),L("G",Xc),L("g",Xc),L("GG",Sc,Oc),L("gg",Sc,Oc),L("GGGG",Uc,Qc),L("gggg",Uc,Qc),L("GGGGG",Vc,Rc),L("ggggg",Vc,Rc),P(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=p(a)}),P(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),G("Q",0,0,"quarter"),y("quarter","Q"),L("Q",Nc),O("Q",function(a,b){b[cd]=3*(p(a)-1)}),G("D",["DD",2],"Do","date"),y("date","D"),L("D",Sc),L("DD",Sc,Oc),L("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),O(["D","DD"],dd),O("Do",function(a,b){b[dd]=p(a.match(Sc)[0],10)});var zd=B("Date",!0);G("d",0,"do","day"),G("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),G("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),G("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),y("day","d"),y("weekday","e"),y("isoWeekday","E"),L("d",Sc),L("e",Sc),L("E",Sc),L("dd",$c),L("ddd",$c),L("dddd",$c),P(["dd","ddd","dddd"],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),P(["d","e","E"],function(a,b,c,d){b[d]=p(a)});var Ad="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Bd="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Cd="Su_Mo_Tu_We_Th_Fr_Sa".split("_");G("H",["HH",2],0,"hour"),G("h",["hh",2],0,function(){return this.hours()%12||12}),Pb("a",!0),Pb("A",!1),y("hour","h"),L("a",Qb),L("A",Qb),L("H",Sc),L("h",Sc),L("HH",Sc,Oc),L("hh",Sc,Oc),O(["H","HH"],ed),O(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),O(["h","hh"],function(a,b,c){b[ed]=p(a),j(c).bigHour=!0});var Dd=/[ap]\.?m?\.?/i,Ed=B("Hours",!0);G("m",["mm",2],0,"minute"),y("minute","m"),L("m",Sc),L("mm",Sc,Oc),O(["m","mm"],fd);var Fd=B("Minutes",!1);G("s",["ss",2],0,"second"),y("second","s"),L("s",Sc),L("ss",Sc,Oc),O(["s","ss"],gd);var Gd=B("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),Tb("SSS"),Tb("SSSS"),y("millisecond","ms"),L("S",Tc,Nc),L("SS",Tc,Oc),L("SSS",Tc,Pc),L("SSSS",Wc),O(["S","SS","SSS","SSSS"],function(a,b){b[hd]=p(1e3*("0."+a))});var Hd=B("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var Id=n.prototype;Id.add=wd,Id.calendar=_a,Id.clone=ab,Id.diff=gb,Id.endOf=sb,Id.format=kb,Id.from=lb,Id.fromNow=mb,Id.to=nb,Id.toNow=ob,Id.get=E,Id.invalidAt=zb,Id.isAfter=bb,Id.isBefore=cb,Id.isBetween=db,Id.isSame=eb,Id.isValid=xb,Id.lang=yd,Id.locale=pb,Id.localeData=qb,Id.max=sd,Id.min=rd,Id.parsingFlags=yb,Id.set=E,Id.startOf=rb,Id.subtract=xd,Id.toArray=wb,Id.toDate=vb,Id.toISOString=jb,Id.toJSON=jb,Id.toString=ib,Id.unix=ub,Id.valueOf=tb,Id.year=pd,Id.isLeapYear=ga,Id.weekYear=Cb,Id.isoWeekYear=Db,Id.quarter=Id.quarters=Gb,Id.month=W,Id.daysInMonth=X,Id.week=Id.weeks=la,Id.isoWeek=Id.isoWeeks=ma,Id.weeksInYear=Fb,Id.isoWeeksInYear=Eb,Id.date=zd,Id.day=Id.days=Mb,Id.weekday=Nb,Id.isoWeekday=Ob,Id.dayOfYear=oa,Id.hour=Id.hours=Ed,Id.minute=Id.minutes=Fd,Id.second=Id.seconds=Gd,Id.millisecond=Id.milliseconds=Hd,Id.utcOffset=Ka,Id.utc=Ma,Id.local=Na,Id.parseZone=Oa,Id.hasAlignedHourOffset=Pa,Id.isDST=Qa,Id.isDSTShifted=Ra,Id.isLocal=Sa,Id.isUtcOffset=Ta,Id.isUtc=Ua,Id.isUTC=Ua,Id.zoneAbbr=Ub,Id.zoneName=Vb,Id.dates=$("dates accessor is deprecated. Use date instead.",zd),Id.months=$("months accessor is deprecated. Use month instead",W),Id.years=$("years accessor is deprecated. Use year instead",pd),Id.zone=$("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",La);var Jd=Id,Kd={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Ld={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},Md="Invalid date",Nd="%d",Od=/\d{1,2}/,Pd={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",
hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Qd=r.prototype;Qd._calendar=Kd,Qd.calendar=Yb,Qd._longDateFormat=Ld,Qd.longDateFormat=Zb,Qd._invalidDate=Md,Qd.invalidDate=$b,Qd._ordinal=Nd,Qd.ordinal=_b,Qd._ordinalParse=Od,Qd.preparse=ac,Qd.postformat=ac,Qd._relativeTime=Pd,Qd.relativeTime=bc,Qd.pastFuture=cc,Qd.set=dc,Qd.months=S,Qd._months=id,Qd.monthsShort=T,Qd._monthsShort=jd,Qd.monthsParse=U,Qd.week=ia,Qd._week=qd,Qd.firstDayOfYear=ka,Qd.firstDayOfWeek=ja,Qd.weekdays=Ib,Qd._weekdays=Ad,Qd.weekdaysMin=Kb,Qd._weekdaysMin=Cd,Qd.weekdaysShort=Jb,Qd._weekdaysShort=Bd,Qd.weekdaysParse=Lb,Qd.isPM=Rb,Qd._meridiemParse=Dd,Qd.meridiem=Sb,v("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===p(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=$("moment.lang is deprecated. Use moment.locale instead.",v),a.langData=$("moment.langData is deprecated. Use moment.localeData instead.",x);var Rd=Math.abs,Sd=uc("ms"),Td=uc("s"),Ud=uc("m"),Vd=uc("h"),Wd=uc("d"),Xd=uc("w"),Yd=uc("M"),Zd=uc("y"),$d=wc("milliseconds"),_d=wc("seconds"),ae=wc("minutes"),be=wc("hours"),ce=wc("days"),de=wc("months"),ee=wc("years"),fe=Math.round,ge={s:45,m:45,h:22,d:26,M:11},he=Math.abs,ie=Ea.prototype;ie.abs=lc,ie.add=nc,ie.subtract=oc,ie.as=sc,ie.asMilliseconds=Sd,ie.asSeconds=Td,ie.asMinutes=Ud,ie.asHours=Vd,ie.asDays=Wd,ie.asWeeks=Xd,ie.asMonths=Yd,ie.asYears=Zd,ie.valueOf=tc,ie._bubble=pc,ie.get=vc,ie.milliseconds=$d,ie.seconds=_d,ie.minutes=ae,ie.hours=be,ie.days=ce,ie.weeks=xc,ie.months=de,ie.years=ee,ie.humanize=Bc,ie.toISOString=Cc,ie.toString=Cc,ie.toJSON=Cc,ie.locale=pb,ie.localeData=qb,ie.toIsoString=$("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Cc),ie.lang=yd,G("X",0,0,"unix"),G("x",0,0,"valueOf"),L("x",Xc),L("X",Zc),O("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),O("x",function(a,b,c){c._d=new Date(p(a))}),a.version="2.10.3",b(Aa),a.fn=Jd,a.min=Ca,a.max=Da,a.utc=h,a.unix=Wb,a.months=gc,a.isDate=d,a.locale=v,a.invalid=l,a.duration=Va,a.isMoment=o,a.weekdays=ic,a.parseZone=Xb,a.localeData=x,a.isDuration=Fa,a.monthsShort=hc,a.weekdaysMin=kc,a.defineLocale=w,a.weekdaysShort=jc,a.normalizeUnits=z,a.relativeTimeThreshold=Ac;var je=a;return je});
},{}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/ngMagicStream/dist/ngMagicStream.js":[function(require,module,exports){
(function (global){

; angular = global.angular = require("/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js");
;__browserify_shim_require__=require;(function browserifyShim(module, define, require) {
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("angular"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["angular"], factory);
	else if(typeof exports === 'object')
		exports["ngMagicStream"] = factory((function webpackLoadOptionalExternalModule() { try { return __browserify_shim_require__("angular"); } catch(e) {} }()));
	else
		root["ngMagicStream"] = factory(root["angular"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = (function(){
	    var angular = (function(){
	        var result;

	        if(window.angular){
	            result = window.angular;
	        } else {
	            try {
	                result = __webpack_require__(1);
	            } catch(e){

	            }
	        }

	        if(result){
	            return result;
	        } else {
	            throw new Error('missing angular');
	        }
	    })();


	    var app = angular.module('mmg.MagicStreams', ['rx']);

	    __webpack_require__(2)(app);

	    return 'mmg.MagicStreams';
	})();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	if(typeof __WEBPACK_EXTERNAL_MODULE_1__ === 'undefined') {var e = new Error("Cannot find module \"angular\""); e.code = 'MODULE_NOT_FOUND'; throw e;}
	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var serviceName = 'MagicStream';


	module.exports = function(app){
	    function service (rx, $log, $q){
	        var msConfig = {
	            log: true
	        };

	        var LOG = {};
	        var logTypes = ['log','info','warn','error','debug'];

	        if(msConfig.log){
	            logTypes.forEach(function(element, index){
	                LOG[element] = function(input){
	                    return $log[element]('MagicStream: ' + input);
	                };
	            });
	        } else {
	            logTypes.forEach(function(element, index){
	                LOG[element] = function(){
	                    // noop
	                    return;
	                };
	            });
	        }

	        function MagicStream (configuration){
	            var self = this;

	            // basic configuration
	            this.name = configuration.name || '(anonymous)';

	            // outputStream
	            this.output = new rx.BehaviorSubject([]);

	            if(!!configuration){
	                if (configuration.source) {
	                    var sourceFn = configuration.source;
	                } else {
	                    throw new Error('MagicStream: missing source function');
	                }
	            } else {
	                throw new Error('MagicStream: missing configuration object');
	            }


	            // source stream
	            var sourceHasStarted = false;

	            this.source = {
	                stream: undefined
	            };

	            this.source.execute = function executeSource(params){
	                LOG.debug(self.name + 'source execute');

	                if(sourceFn){
	                    self.source.stream = sourceFn(params);
	                } else {
	                    throw new Error('could not execute source (nothing designated)');
	                }
	            };

	            // initializes the source stream using the designated source function. Does not repeat.
	            this.source.start = function startSource(params){
	                if (!sourceHasStarted) {
	                    LOG.debug(self.name + ' source start');
	                    self.source.execute(params);
	                    sourceHasStarted = true;
	                } else {
	                    LOG.debug('source already started');
	                }
	            };

	            // like start, but forces a repeat.
	            this.source.refresh = function refreshSource(params){
	                LOG.debug(self.name + ' source refresh');
	                sourceHasStarted = false;
	                self.source.start(params);
	            };

	            // update stream
	            this.updateStream = new rx.BehaviorSubject([]);
	            this.updates = {
	                add: function(input){
	                    LOG.debug(self.name + ' adding update');
	                    self.updateStream.onNext(input);
	                },
	                stream: self.updateStream
	            };
	        }

	        MagicStream.prototype.bootstrap = function(params){
	            var self = this;

	            LOG.debug(this.name + ' bootstrap!');

	            this.sourceStream = this.source.start(params);

	            this.source.stream.subscribe(function(update){
	                self.output.onNext(update);
	            }, function(err){
	                self.output.onError(err);
	            }, function(){
	                LOG.debug(self.name + ' source completed');
	            });

	            this.updateStream.subscribe(function(update){
	                self.output.onNext(update);
	            }, function(err){
	                self.output.onError(err);
	            }, function(){
	                LOG.debug(self.name + ' update completed');
	            });

	        };

	        return MagicStream;
	    }

	    service.$inject = ['rx', '$log', '$q'];

	    return app.service(serviceName, service);
	};


/***/ }
/******/ ])
});
;
}).call(global, module, undefined, undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/rxjs/dist/rx.all.js":[function(require,module,exports){
(function (process,global){
// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

;(function (undefined) {

  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  var root = (objectTypes[typeof window] && window) || this,
    freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
    freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
    moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
    freeGlobal = objectTypes[typeof global] && global;

  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  var Rx = {
      internals: {},
      config: {
        Promise: root.Promise
      },
      helpers: { }
  };

  // Defaults
  var noop = Rx.helpers.noop = function () { },
    notDefined = Rx.helpers.notDefined = function (x) { return typeof x === 'undefined'; },
    identity = Rx.helpers.identity = function (x) { return x; },
    pluck = Rx.helpers.pluck = function (property) { return function (x) { return x[property]; }; },
    just = Rx.helpers.just = function (value) { return function () { return value; }; },
    defaultNow = Rx.helpers.defaultNow = Date.now,
    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.then === 'function'; },
    asArray = Rx.helpers.asArray = function () { return Array.prototype.slice.call(arguments); },
    not = Rx.helpers.not = function (a) { return !a; },
    isFunction = Rx.helpers.isFunction = (function () {

      var isFn = function (value) {
        return typeof value == 'function' || false;
      }

      // fallback for older versions of Chrome and Safari
      if (isFn(/x/)) {
        isFn = function(value) {
          return typeof value == 'function' && toString.call(value) == '[object Function]';
        };
      }

      return isFn;
    }());

  function cloneArray(arr) { for(var a = [], i = 0, len = arr.length; i < len; i++) { a.push(arr[i]); } return a;}

  Rx.config.longStackSupport = false;
  var hasStacks = false;
  try {
    throw new Error();
  } catch (e) {
    hasStacks = !!e.stack;
  }

  // All code after this point will be filtered from stack traces reported by RxJS
  var rStartingLine = captureLine(), rFileName;

  var STACK_JUMP_SEPARATOR = "From previous event:";

  function makeStackTraceLong(error, observable) {
      // If possible, transform the error stack trace by removing Node and RxJS
      // cruft, then concatenating with the stack trace of `observable`.
      if (hasStacks &&
          observable.stack &&
          typeof error === "object" &&
          error !== null &&
          error.stack &&
          error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
      ) {
        var stacks = [];
        for (var o = observable; !!o; o = o.source) {
          if (o.stack) {
            stacks.unshift(o.stack);
          }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
  }

  function filterStackString(stackString) {
    var lines = stackString.split("\n"),
        desiredLines = [];
    for (var i = 0, len = lines.length; i < len; i++) {
      var line = lines[i];

      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
        desiredLines.push(line);
      }
    }
    return desiredLines.join("\n");
  }

  function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
    if (!fileNameAndLineNumber) {
      return false;
    }
    var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];

    return fileName === rFileName &&
      lineNumber >= rStartingLine &&
      lineNumber <= rEndingLine;
  }

  function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
      stackLine.indexOf("(node.js:") !== -1;
  }

  function captureLine() {
    if (!hasStacks) { return; }

    try {
      throw new Error();
    } catch (e) {
      var lines = e.stack.split("\n");
      var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
      if (!fileNameAndLineNumber) { return; }

      rFileName = fileNameAndLineNumber[0];
      return fileNameAndLineNumber[1];
    }
  }

  function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) { return [attempt1[1], Number(attempt1[2])]; }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) { return [attempt2[1], Number(attempt2[2])]; }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) { return [attempt3[1], Number(attempt3[2])]; }
  }

  var EmptyError = Rx.EmptyError = function() {
    this.message = 'Sequence contains no elements.';
    Error.call(this);
  };
  EmptyError.prototype = Error.prototype;

  var ObjectDisposedError = Rx.ObjectDisposedError = function() {
    this.message = 'Object has been disposed';
    Error.call(this);
  };
  ObjectDisposedError.prototype = Error.prototype;

  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
    this.message = 'Argument out of range';
    Error.call(this);
  };
  ArgumentOutOfRangeError.prototype = Error.prototype;

  var NotSupportedError = Rx.NotSupportedError = function (message) {
    this.message = message || 'This operation is not supported';
    Error.call(this);
  };
  NotSupportedError.prototype = Error.prototype;

  var NotImplementedError = Rx.NotImplementedError = function (message) {
    this.message = message || 'This operation is not implemented';
    Error.call(this);
  };
  NotImplementedError.prototype = Error.prototype;

  var notImplemented = Rx.helpers.notImplemented = function () {
    throw new NotImplementedError();
  };

  var notSupported = Rx.helpers.notSupported = function () {
    throw new NotSupportedError();
  };

  // Shim in iterator support
  var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) ||
    '_es6shim_iterator_';
  // Bug for mozilla version
  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
    $iterator$ = '@@iterator';
  }

  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };

  var isIterable = Rx.helpers.isIterable = function (o) {
    return o[$iterator$] !== undefined;
  }

  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
    return o && o.length !== undefined;
  }

  Rx.helpers.iterator = $iterator$;

  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
    if (typeof thisArg === 'undefined') { return func; }
    switch(argCount) {
      case 0:
        return function() {
          return func.call(thisArg)
        };
      case 1:
        return function(arg) {
          return func.call(thisArg, arg);
        }
      case 2:
        return function(value, index) {
          return func.call(thisArg, value, index);
        };
      case 3:
        return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
    }

    return function() {
      return func.apply(thisArg, arguments);
    };
  };

  /** Used to determine if values are of the language type Object */
  var dontEnums = ['toString',
    'toLocaleString',
    'valueOf',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'constructor'],
  dontEnumsLength = dontEnums.length;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
    arrayClass = '[object Array]',
    boolClass = '[object Boolean]',
    dateClass = '[object Date]',
    errorClass = '[object Error]',
    funcClass = '[object Function]',
    numberClass = '[object Number]',
    objectClass = '[object Object]',
    regexpClass = '[object RegExp]',
    stringClass = '[object String]';

  var toString = Object.prototype.toString,
    hasOwnProperty = Object.prototype.hasOwnProperty,
    supportsArgsClass = toString.call(arguments) == argsClass, // For less <IE9 && FF<4
    supportNodeClass,
    errorProto = Error.prototype,
    objectProto = Object.prototype,
    stringProto = String.prototype,
    propertyIsEnumerable = objectProto.propertyIsEnumerable;

  try {
    supportNodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
  } catch (e) {
    supportNodeClass = true;
  }

  var nonEnumProps = {};
  nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
  nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
  nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
  nonEnumProps[objectClass] = { 'constructor': true };

  var support = {};
  (function () {
    var ctor = function() { this.x = 1; },
      props = [];

    ctor.prototype = { 'valueOf': 1, 'y': 1 };
    for (var key in new ctor) { props.push(key); }
    for (key in arguments) { }

    // Detect if `name` or `message` properties of `Error.prototype` are enumerable by default.
    support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

    // Detect if `prototype` properties are enumerable by default.
    support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

    // Detect if `arguments` object indexes are non-enumerable
    support.nonEnumArgs = key != 0;

    // Detect if properties shadowing those on `Object.prototype` are non-enumerable.
    support.nonEnumShadows = !/valueOf/.test(props);
  }(1));

  var isObject = Rx.internals.isObject = function(value) {
    var type = typeof value;
    return value && (type == 'function' || type == 'object') || false;
  };

  function keysIn(object) {
    var result = [];
    if (!isObject(object)) {
      return result;
    }
    if (support.nonEnumArgs && object.length && isArguments(object)) {
      object = slice.call(object);
    }
    var skipProto = support.enumPrototypes && typeof object == 'function',
        skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);

    for (var key in object) {
      if (!(skipProto && key == 'prototype') &&
          !(skipErrorProps && (key == 'message' || key == 'name'))) {
        result.push(key);
      }
    }

    if (support.nonEnumShadows && object !== objectProto) {
      var ctor = object.constructor,
          index = -1,
          length = dontEnumsLength;

      if (object === (ctor && ctor.prototype)) {
        var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
            nonEnum = nonEnumProps[className];
      }
      while (++index < length) {
        key = dontEnums[index];
        if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
    }
    return result;
  }

  function internalFor(object, callback, keysFunc) {
    var index = -1,
      props = keysFunc(object),
      length = props.length;

    while (++index < length) {
      var key = props[index];
      if (callback(object[key], key, object) === false) {
        break;
      }
    }
    return object;
  }

  function internalForIn(object, callback) {
    return internalFor(object, callback, keysIn);
  }

  function isNode(value) {
    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
    // methods that are `typeof` "string" and still can coerce nodes to strings
    return typeof value.toString != 'function' && typeof (value + '') == 'string';
  }

  var isArguments = function(value) {
    return (value && typeof value == 'object') ? toString.call(value) == argsClass : false;
  }

  // fallback for browsers that can't detect `arguments` objects by [[Class]]
  if (!supportsArgsClass) {
    isArguments = function(value) {
      return (value && typeof value == 'object') ? hasOwnProperty.call(value, 'callee') : false;
    };
  }

  var isEqual = Rx.internals.isEqual = function (x, y) {
    return deepEquals(x, y, [], []);
  };

  /** @private
   * Used for deep comparison
   **/
  function deepEquals(a, b, stackA, stackB) {
    // exit early for identical values
    if (a === b) {
      // treat `+0` vs. `-0` as not equal
      return a !== 0 || (1 / a == 1 / b);
    }

    var type = typeof a,
        otherType = typeof b;

    // exit early for unlike primitive values
    if (a === a && (a == null || b == null ||
        (type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object'))) {
      return false;
    }

    // compare [[Class]] names
    var className = toString.call(a),
        otherClass = toString.call(b);

    if (className == argsClass) {
      className = objectClass;
    }
    if (otherClass == argsClass) {
      otherClass = objectClass;
    }
    if (className != otherClass) {
      return false;
    }
    switch (className) {
      case boolClass:
      case dateClass:
        // coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
        return +a == +b;

      case numberClass:
        // treat `NaN` vs. `NaN` as equal
        return (a != +a) ?
          b != +b :
          // but treat `-0` vs. `+0` as not equal
          (a == 0 ? (1 / a == 1 / b) : a == +b);

      case regexpClass:
      case stringClass:
        // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
        // treat string primitives and their corresponding object instances as equal
        return a == String(b);
    }
    var isArr = className == arrayClass;
    if (!isArr) {

      // exit for functions and DOM nodes
      if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
        return false;
      }
      // in older versions of Opera, `arguments` objects have `Array` constructors
      var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
          ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

      // non `Object` object instances with different constructors are not equal
      if (ctorA != ctorB &&
            !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) &&
            !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
            ('constructor' in a && 'constructor' in b)
          ) {
        return false;
      }
    }
    // assume cyclic structures are equal
    // the algorithm for detecting cyclic structures is adapted from ES 5.1
    // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
    var initedStack = !stackA;
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == a) {
        return stackB[length] == b;
      }
    }
    var size = 0;
    var result = true;

    // add `a` and `b` to the stack of traversed objects
    stackA.push(a);
    stackB.push(b);

    // recursively compare objects and arrays (susceptible to call stack limits)
    if (isArr) {
      // compare lengths to determine if a deep comparison is necessary
      length = a.length;
      size = b.length;
      result = size == length;

      if (result) {
        // deep compare the contents, ignoring non-numeric properties
        while (size--) {
          var index = length,
              value = b[size];

          if (!(result = deepEquals(a[size], value, stackA, stackB))) {
            break;
          }
        }
      }
    }
    else {
      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
      // which, in this case, is more costly
      internalForIn(b, function(value, key, b) {
        if (hasOwnProperty.call(b, key)) {
          // count the number of properties.
          size++;
          // deep compare each property value.
          return (result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB));
        }
      });

      if (result) {
        // ensure both objects have the same number of properties
        internalForIn(a, function(value, key, a) {
          if (hasOwnProperty.call(a, key)) {
            // `size` will be `-1` if `a` has more properties than `b`
            return (result = --size > -1);
          }
        });
      }
    }
    stackA.pop();
    stackB.pop();

    return result;
  }

  var hasProp = {}.hasOwnProperty,
      slice = Array.prototype.slice;

  var inherits = this.inherits = Rx.internals.inherits = function (child, parent) {
    function __() { this.constructor = child; }
    __.prototype = parent.prototype;
    child.prototype = new __();
  };

  var addProperties = Rx.internals.addProperties = function (obj) {
    for(var sources = [], i = 1, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
      var source = sources[idx];
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    }
  };

  // Rx Utils
  var addRef = Rx.internals.addRef = function (xs, r) {
    return new AnonymousObservable(function (observer) {
      return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
    });
  };

  function arrayInitialize(count, factory) {
    var a = new Array(count);
    for (var i = 0; i < count; i++) {
      a[i] = factory();
    }
    return a;
  }

  var errorObj = {e: {}};
  var tryCatchTarget;
  function tryCatcher() {
    try {
      return tryCatchTarget.apply(this, arguments);
    } catch (e) {
      errorObj.e = e;
      return errorObj;
    }
  }
  function tryCatch(fn) {
    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
    tryCatchTarget = fn;
    return tryCatcher;
  }
  function thrower(e) {
    throw e;
  }

  // Collections
  function IndexedItem(id, value) {
    this.id = id;
    this.value = value;
  }

  IndexedItem.prototype.compareTo = function (other) {
    var c = this.value.compareTo(other.value);
    c === 0 && (c = this.id - other.id);
    return c;
  };

  // Priority Queue for Scheduling
  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
    this.items = new Array(capacity);
    this.length = 0;
  };

  var priorityProto = PriorityQueue.prototype;
  priorityProto.isHigherPriority = function (left, right) {
    return this.items[left].compareTo(this.items[right]) < 0;
  };

  priorityProto.percolate = function (index) {
    if (index >= this.length || index < 0) { return; }
    var parent = index - 1 >> 1;
    if (parent < 0 || parent === index) { return; }
    if (this.isHigherPriority(index, parent)) {
      var temp = this.items[index];
      this.items[index] = this.items[parent];
      this.items[parent] = temp;
      this.percolate(parent);
    }
  };

  priorityProto.heapify = function (index) {
    +index || (index = 0);
    if (index >= this.length || index < 0) { return; }
    var left = 2 * index + 1,
        right = 2 * index + 2,
        first = index;
    if (left < this.length && this.isHigherPriority(left, first)) {
      first = left;
    }
    if (right < this.length && this.isHigherPriority(right, first)) {
      first = right;
    }
    if (first !== index) {
      var temp = this.items[index];
      this.items[index] = this.items[first];
      this.items[first] = temp;
      this.heapify(first);
    }
  };

  priorityProto.peek = function () { return this.items[0].value; };

  priorityProto.removeAt = function (index) {
    this.items[index] = this.items[--this.length];
    this.items[this.length] = undefined;
    this.heapify();
  };

  priorityProto.dequeue = function () {
    var result = this.peek();
    this.removeAt(0);
    return result;
  };

  priorityProto.enqueue = function (item) {
    var index = this.length++;
    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
    this.percolate(index);
  };

  priorityProto.remove = function (item) {
    for (var i = 0; i < this.length; i++) {
      if (this.items[i].value === item) {
        this.removeAt(i);
        return true;
      }
    }
    return false;
  };
  PriorityQueue.count = 0;

  /**
   * Represents a group of disposable resources that are disposed together.
   * @constructor
   */
  var CompositeDisposable = Rx.CompositeDisposable = function () {
    var args = [], i, len;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
      len = args.length;
    } else {
      len = arguments.length;
      args = new Array(len);
      for(i = 0; i < len; i++) { args[i] = arguments[i]; }
    }
    for(i = 0; i < len; i++) {
      if (!isDisposable(args[i])) { throw new TypeError('Not a disposable'); }
    }
    this.disposables = args;
    this.isDisposed = false;
    this.length = args.length;
  };

  var CompositeDisposablePrototype = CompositeDisposable.prototype;

  /**
   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
   * @param {Mixed} item Disposable to add.
   */
  CompositeDisposablePrototype.add = function (item) {
    if (this.isDisposed) {
      item.dispose();
    } else {
      this.disposables.push(item);
      this.length++;
    }
  };

  /**
   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
   * @param {Mixed} item Disposable to remove.
   * @returns {Boolean} true if found; false otherwise.
   */
  CompositeDisposablePrototype.remove = function (item) {
    var shouldDispose = false;
    if (!this.isDisposed) {
      var idx = this.disposables.indexOf(item);
      if (idx !== -1) {
        shouldDispose = true;
        this.disposables.splice(idx, 1);
        this.length--;
        item.dispose();
      }
    }
    return shouldDispose;
  };

  /**
   *  Disposes all disposables in the group and removes them from the group.
   */
  CompositeDisposablePrototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var len = this.disposables.length, currentDisposables = new Array(len);
      for(var i = 0; i < len; i++) { currentDisposables[i] = this.disposables[i]; }
      this.disposables = [];
      this.length = 0;

      for (i = 0; i < len; i++) {
        currentDisposables[i].dispose();
      }
    }
  };

  /**
   * Provides a set of static methods for creating Disposables.
   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
   */
  var Disposable = Rx.Disposable = function (action) {
    this.isDisposed = false;
    this.action = action || noop;
  };

  /** Performs the task of cleaning up resources. */
  Disposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.action();
      this.isDisposed = true;
    }
  };

  /**
   * Creates a disposable object that invokes the specified action when disposed.
   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
   * @return {Disposable} The disposable object that runs the given action upon disposal.
   */
  var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };

  /**
   * Gets the disposable that does nothing when disposed.
   */
  var disposableEmpty = Disposable.empty = { dispose: noop };

  /**
   * Validates whether the given object is a disposable
   * @param {Object} Object to test whether it has a dispose method
   * @returns {Boolean} true if a disposable object, else false.
   */
  var isDisposable = Disposable.isDisposable = function (d) {
    return d && isFunction(d.dispose);
  };

  var checkDisposed = Disposable.checkDisposed = function (disposable) {
    if (disposable.isDisposed) { throw new ObjectDisposedError(); }
  };

  // Single assignment
  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = function () {
    this.isDisposed = false;
    this.current = null;
  };
  SingleAssignmentDisposable.prototype.getDisposable = function () {
    return this.current;
  };
  SingleAssignmentDisposable.prototype.setDisposable = function (value) {
    if (this.current) { throw new Error('Disposable has already been assigned'); }
    var shouldDispose = this.isDisposed;
    !shouldDispose && (this.current = value);
    shouldDispose && value && value.dispose();
  };
  SingleAssignmentDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old = this.current;
      this.current = null;
    }
    old && old.dispose();
  };

  // Multiple assignment disposable
  var SerialDisposable = Rx.SerialDisposable = function () {
    this.isDisposed = false;
    this.current = null;
  };
  SerialDisposable.prototype.getDisposable = function () {
    return this.current;
  };
  SerialDisposable.prototype.setDisposable = function (value) {
    var shouldDispose = this.isDisposed;
    if (!shouldDispose) {
      var old = this.current;
      this.current = value;
    }
    old && old.dispose();
    shouldDispose && value && value.dispose();
  };
  SerialDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old = this.current;
      this.current = null;
    }
    old && old.dispose();
  };

  /**
   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
   */
  var RefCountDisposable = Rx.RefCountDisposable = (function () {

    function InnerDisposable(disposable) {
      this.disposable = disposable;
      this.disposable.count++;
      this.isInnerDisposed = false;
    }

    InnerDisposable.prototype.dispose = function () {
      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
        this.isInnerDisposed = true;
        this.disposable.count--;
        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
          this.disposable.isDisposed = true;
          this.disposable.underlyingDisposable.dispose();
        }
      }
    };

    /**
     * Initializes a new instance of the RefCountDisposable with the specified disposable.
     * @constructor
     * @param {Disposable} disposable Underlying disposable.
      */
    function RefCountDisposable(disposable) {
      this.underlyingDisposable = disposable;
      this.isDisposed = false;
      this.isPrimaryDisposed = false;
      this.count = 0;
    }

    /**
     * Disposes the underlying disposable only when all dependent disposables have been disposed
     */
    RefCountDisposable.prototype.dispose = function () {
      if (!this.isDisposed && !this.isPrimaryDisposed) {
        this.isPrimaryDisposed = true;
        if (this.count === 0) {
          this.isDisposed = true;
          this.underlyingDisposable.dispose();
        }
      }
    };

    /**
     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
     */
    RefCountDisposable.prototype.getDisposable = function () {
      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
    };

    return RefCountDisposable;
  })();

  function ScheduledDisposable(scheduler, disposable) {
    this.scheduler = scheduler;
    this.disposable = disposable;
    this.isDisposed = false;
  }

  function scheduleItem(s, self) {
    if (!self.isDisposed) {
      self.isDisposed = true;
      self.disposable.dispose();
    }
  }

  ScheduledDisposable.prototype.dispose = function () {
    this.scheduler.scheduleWithState(this, scheduleItem);
  };

  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
    this.scheduler = scheduler;
    this.state = state;
    this.action = action;
    this.dueTime = dueTime;
    this.comparer = comparer || defaultSubComparer;
    this.disposable = new SingleAssignmentDisposable();
  }

  ScheduledItem.prototype.invoke = function () {
    this.disposable.setDisposable(this.invokeCore());
  };

  ScheduledItem.prototype.compareTo = function (other) {
    return this.comparer(this.dueTime, other.dueTime);
  };

  ScheduledItem.prototype.isCancelled = function () {
    return this.disposable.isDisposed;
  };

  ScheduledItem.prototype.invokeCore = function () {
    return this.action(this.scheduler, this.state);
  };

  /** Provides a set of static properties to access commonly used schedulers. */
  var Scheduler = Rx.Scheduler = (function () {

    function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
      this.now = now;
      this._schedule = schedule;
      this._scheduleRelative = scheduleRelative;
      this._scheduleAbsolute = scheduleAbsolute;
    }

    /** Determines whether the given object is a scheduler */
    Scheduler.isScheduler = function (s) {
      return s instanceof Scheduler;
    }

    function invokeAction(scheduler, action) {
      action();
      return disposableEmpty;
    }

    var schedulerProto = Scheduler.prototype;

    /**
     * Schedules an action to be executed.
     * @param {Function} action Action to execute.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.schedule = function (action) {
      return this._schedule(action, invokeAction);
    };

    /**
     * Schedules an action to be executed.
     * @param state State passed to the action to be executed.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleWithState = function (state, action) {
      return this._schedule(state, action);
    };

    /**
     * Schedules an action to be executed after the specified relative due time.
     * @param {Function} action Action to execute.
     * @param {Number} dueTime Relative time after which to execute the action.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleWithRelative = function (dueTime, action) {
      return this._scheduleRelative(action, dueTime, invokeAction);
    };

    /**
     * Schedules an action to be executed after dueTime.
     * @param state State passed to the action to be executed.
     * @param {Function} action Action to be executed.
     * @param {Number} dueTime Relative time after which to execute the action.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleWithRelativeAndState = function (state, dueTime, action) {
      return this._scheduleRelative(state, dueTime, action);
    };

    /**
     * Schedules an action to be executed at the specified absolute due time.
     * @param {Function} action Action to execute.
     * @param {Number} dueTime Absolute time at which to execute the action.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
      */
    schedulerProto.scheduleWithAbsolute = function (dueTime, action) {
      return this._scheduleAbsolute(action, dueTime, invokeAction);
    };

    /**
     * Schedules an action to be executed at dueTime.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to be executed.
     * @param {Number}dueTime Absolute time at which to execute the action.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleWithAbsoluteAndState = function (state, dueTime, action) {
      return this._scheduleAbsolute(state, dueTime, action);
    };

    /** Gets the current time according to the local machine's system clock. */
    Scheduler.now = defaultNow;

    /**
     * Normalizes the specified TimeSpan value to a positive value.
     * @param {Number} timeSpan The time span value to normalize.
     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
     */
    Scheduler.normalize = function (timeSpan) {
      timeSpan < 0 && (timeSpan = 0);
      return timeSpan;
    };

    return Scheduler;
  }());

  var normalizeTime = Scheduler.normalize, isScheduler = Scheduler.isScheduler;

  (function (schedulerProto) {

    function invokeRecImmediate(scheduler, pair) {
      var state = pair[0], action = pair[1], group = new CompositeDisposable();

      function recursiveAction(state1) {
        action(state1, function (state2) {
          var isAdded = false, isDone = false,
          d = scheduler.scheduleWithState(state2, function (scheduler1, state3) {
            if (isAdded) {
              group.remove(d);
            } else {
              isDone = true;
            }
            recursiveAction(state3);
            return disposableEmpty;
          });
          if (!isDone) {
            group.add(d);
            isAdded = true;
          }
        });
      }

      recursiveAction(state);
      return group;
    }

    function invokeRecDate(scheduler, pair, method) {
      var state = pair[0], action = pair[1], group = new CompositeDisposable();
      function recursiveAction(state1) {
        action(state1, function (state2, dueTime1) {
          var isAdded = false, isDone = false,
          d = scheduler[method](state2, dueTime1, function (scheduler1, state3) {
            if (isAdded) {
              group.remove(d);
            } else {
              isDone = true;
            }
            recursiveAction(state3);
            return disposableEmpty;
          });
          if (!isDone) {
            group.add(d);
            isAdded = true;
          }
        });
      };
      recursiveAction(state);
      return group;
    }

    function scheduleInnerRecursive(action, self) {
      action(function(dt) { self(action, dt); });
    }

    /**
     * Schedules an action to be executed recursively.
     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursive = function (action) {
      return this.scheduleRecursiveWithState(action, function (_action, self) {
        _action(function () { self(_action); }); });
    };

    /**
     * Schedules an action to be executed recursively.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithState = function (state, action) {
      return this.scheduleWithState([state, action], invokeRecImmediate);
    };

    /**
     * Schedules an action to be executed recursively after a specified relative due time.
     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
     * @param {Number}dueTime Relative time after which to execute the action for the first time.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithRelative = function (dueTime, action) {
      return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
    };

    /**
     * Schedules an action to be executed recursively after a specified relative due time.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
     * @param {Number}dueTime Relative time after which to execute the action for the first time.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithRelativeAndState = function (state, dueTime, action) {
      return this._scheduleRelative([state, action], dueTime, function (s, p) {
        return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
      });
    };

    /**
     * Schedules an action to be executed recursively at a specified absolute due time.
     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithAbsolute = function (dueTime, action) {
      return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
    };

    /**
     * Schedules an action to be executed recursively at a specified absolute due time.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithAbsoluteAndState = function (state, dueTime, action) {
      return this._scheduleAbsolute([state, action], dueTime, function (s, p) {
        return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
      });
    };
  }(Scheduler.prototype));

  (function (schedulerProto) {

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
     * @param {Number} period Period for running the work periodically.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
     */
    Scheduler.prototype.schedulePeriodic = function (period, action) {
      return this.schedulePeriodicWithState(null, period, action);
    };

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
     * @param {Mixed} state Initial state passed to the action upon the first iteration.
     * @param {Number} period Period for running the work periodically.
     * @param {Function} action Action to be executed, potentially updating the state.
     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
     */
    Scheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
      if (typeof root.setInterval === 'undefined') { throw new NotSupportedError(); }
      period = normalizeTime(period);
      var s = state, id = root.setInterval(function () { s = action(s); }, period);
      return disposableCreate(function () { root.clearInterval(id); });
    };

  }(Scheduler.prototype));

  (function (schedulerProto) {
    /**
     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
     */
    schedulerProto.catchError = schedulerProto['catch'] = function (handler) {
      return new CatchScheduler(this, handler);
    };
  }(Scheduler.prototype));

  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
    function tick(command, recurse) {
      recurse(0, this._period);
      try {
        this._state = this._action(this._state);
      } catch (e) {
        this._cancel.dispose();
        throw e;
      }
    }

    function SchedulePeriodicRecursive(scheduler, state, period, action) {
      this._scheduler = scheduler;
      this._state = state;
      this._period = period;
      this._action = action;
    }

    SchedulePeriodicRecursive.prototype.start = function () {
      var d = new SingleAssignmentDisposable();
      this._cancel = d;
      d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));

      return d;
    };

    return SchedulePeriodicRecursive;
  }());

  /** Gets a scheduler that schedules work immediately on the current thread. */
  var immediateScheduler = Scheduler.immediate = (function () {
    function scheduleNow(state, action) { return action(this, state); }
    return new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
  }());

  /**
   * Gets a scheduler that schedules work as soon as possible on the current thread.
   */
  var currentThreadScheduler = Scheduler.currentThread = (function () {
    var queue;

    function runTrampoline () {
      while (queue.length > 0) {
        var item = queue.dequeue();
        !item.isCancelled() && item.invoke();
      }
    }

    function scheduleNow(state, action) {
      var si = new ScheduledItem(this, state, action, this.now());

      if (!queue) {
        queue = new PriorityQueue(4);
        queue.enqueue(si);

        var result = tryCatch(runTrampoline)();
        queue = null;
        if (result === errorObj) { return thrower(result.e); }
      } else {
        queue.enqueue(si);
      }
      return si.disposable;
    }

    var currentScheduler = new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
    currentScheduler.scheduleRequired = function () { return !queue; };

    return currentScheduler;
  }());

  var scheduleMethod, clearMethod;

  var localTimer = (function () {
    var localSetTimeout, localClearTimeout = noop;
    if (!!root.setTimeout) {
      localSetTimeout = root.setTimeout;
      localClearTimeout = root.clearTimeout;
    } else if (!!root.WScript) {
      localSetTimeout = function (fn, time) {
        root.WScript.Sleep(time);
        fn();
      };
    } else {
      throw new NotSupportedError();
    }

    return {
      setTimeout: localSetTimeout,
      clearTimeout: localClearTimeout
    };
  }());
  var localSetTimeout = localTimer.setTimeout,
    localClearTimeout = localTimer.clearTimeout;

  (function () {

    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;

    clearMethod = function (handle) {
      delete tasksByHandle[handle];
    };

    function runTask(handle) {
      if (currentlyRunning) {
        localSetTimeout(function () { runTask(handle) }, 0);
      } else {
        var task = tasksByHandle[handle];
        if (task) {
          currentlyRunning = true;
          var result = tryCatch(task)();
          clearMethod(handle);
          currentlyRunning = false;
          if (result === errorObj) { return thrower(result.e); }
        }
      }
    }

    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
      !reNative.test(setImmediate) && setImmediate;

    function postMessageSupported () {
      // Ensure not in a worker
      if (!root.postMessage || root.importScripts) { return false; }
      var isAsync = false, oldHandler = root.onmessage;
      // Test for async
      root.onmessage = function () { isAsync = true; };
      root.postMessage('', '*');
      root.onmessage = oldHandler;

      return isAsync;
    }

    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
    if (isFunction(setImmediate)) {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        setImmediate(function () { runTask(id); });

        return id;
      };
    } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        process.nextTick(function () { runTask(id); });

        return id;
      };
    } else if (postMessageSupported()) {
      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();

      function onGlobalPostMessage(event) {
        // Only if we're a match to avoid any other global events
        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
          runTask(event.data.substring(MSG_PREFIX.length));
        }
      }

      if (root.addEventListener) {
        root.addEventListener('message', onGlobalPostMessage, false);
      } else if (root.attachEvent) {
        root.attachEvent('onmessage', onGlobalPostMessage);
      } else {
        root.onmessage = onGlobalPostMessage;
      }

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        root.postMessage(MSG_PREFIX + currentId, '*');
        return id;
      };
    } else if (!!root.MessageChannel) {
      var channel = new root.MessageChannel();

      channel.port1.onmessage = function (e) { runTask(e.data); };

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        channel.port2.postMessage(id);
        return id;
      };
    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {

      scheduleMethod = function (action) {
        var scriptElement = root.document.createElement('script');
        var id = nextHandle++;
        tasksByHandle[id] = action;

        scriptElement.onreadystatechange = function () {
          runTask(id);
          scriptElement.onreadystatechange = null;
          scriptElement.parentNode.removeChild(scriptElement);
          scriptElement = null;
        };
        root.document.documentElement.appendChild(scriptElement);
        return id;
      };

    } else {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        localSetTimeout(function () {
          runTask(id);
        }, 0);

        return id;
      };
    }
  }());

  /**
   * Gets a scheduler that schedules work via a timed callback based upon platform.
   */
  var timeoutScheduler = Scheduler.timeout = Scheduler['default'] = (function () {

    function scheduleNow(state, action) {
      var scheduler = this, disposable = new SingleAssignmentDisposable();
      var id = scheduleMethod(function () {
        !disposable.isDisposed && disposable.setDisposable(action(scheduler, state));
      });
      return new CompositeDisposable(disposable, disposableCreate(function () {
        clearMethod(id);
      }));
    }

    function scheduleRelative(state, dueTime, action) {
      var scheduler = this, dt = Scheduler.normalize(dueTime), disposable = new SingleAssignmentDisposable();
      if (dt === 0) { return scheduler.scheduleWithState(state, action); }
      var id = localSetTimeout(function () {
        !disposable.isDisposed && disposable.setDisposable(action(scheduler, state));
      }, dt);
      return new CompositeDisposable(disposable, disposableCreate(function () {
        localClearTimeout(id);
      }));
    }

    function scheduleAbsolute(state, dueTime, action) {
      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
    }

    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
  })();

  var CatchScheduler = (function (__super__) {

    function scheduleNow(state, action) {
      return this._scheduler.scheduleWithState(state, this._wrap(action));
    }

    function scheduleRelative(state, dueTime, action) {
      return this._scheduler.scheduleWithRelativeAndState(state, dueTime, this._wrap(action));
    }

    function scheduleAbsolute(state, dueTime, action) {
      return this._scheduler.scheduleWithAbsoluteAndState(state, dueTime, this._wrap(action));
    }

    inherits(CatchScheduler, __super__);

    function CatchScheduler(scheduler, handler) {
      this._scheduler = scheduler;
      this._handler = handler;
      this._recursiveOriginal = null;
      this._recursiveWrapper = null;
      __super__.call(this, this._scheduler.now.bind(this._scheduler), scheduleNow, scheduleRelative, scheduleAbsolute);
    }

    CatchScheduler.prototype._clone = function (scheduler) {
        return new CatchScheduler(scheduler, this._handler);
    };

    CatchScheduler.prototype._wrap = function (action) {
      var parent = this;
      return function (self, state) {
        try {
          return action(parent._getRecursiveWrapper(self), state);
        } catch (e) {
          if (!parent._handler(e)) { throw e; }
          return disposableEmpty;
        }
      };
    };

    CatchScheduler.prototype._getRecursiveWrapper = function (scheduler) {
      if (this._recursiveOriginal !== scheduler) {
        this._recursiveOriginal = scheduler;
        var wrapper = this._clone(scheduler);
        wrapper._recursiveOriginal = scheduler;
        wrapper._recursiveWrapper = wrapper;
        this._recursiveWrapper = wrapper;
      }
      return this._recursiveWrapper;
    };

    CatchScheduler.prototype.schedulePeriodicWithState = function (state, period, action) {
      var self = this, failed = false, d = new SingleAssignmentDisposable();

      d.setDisposable(this._scheduler.schedulePeriodicWithState(state, period, function (state1) {
        if (failed) { return null; }
        try {
          return action(state1);
        } catch (e) {
          failed = true;
          if (!self._handler(e)) { throw e; }
          d.dispose();
          return null;
        }
      }));

      return d;
    };

    return CatchScheduler;
  }(Scheduler));

  /**
   *  Represents a notification to an observer.
   */
  var Notification = Rx.Notification = (function () {
    function Notification(kind, value, exception, accept, acceptObservable, toString) {
      this.kind = kind;
      this.value = value;
      this.exception = exception;
      this._accept = accept;
      this._acceptObservable = acceptObservable;
      this.toString = toString;
    }

    /**
     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
     *
     * @memberOf Notification
     * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..
     * @param {Function} onError Delegate to invoke for an OnError notification.
     * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.
     * @returns {Any} Result produced by the observation.
     */
    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
      return observerOrOnNext && typeof observerOrOnNext === 'object' ?
        this._acceptObservable(observerOrOnNext) :
        this._accept(observerOrOnNext, onError, onCompleted);
    };

    /**
     * Returns an observable sequence with a single notification.
     *
     * @memberOf Notifications
     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
     */
    Notification.prototype.toObservable = function (scheduler) {
      var self = this;
      isScheduler(scheduler) || (scheduler = immediateScheduler);
      return new AnonymousObservable(function (observer) {
        return scheduler.scheduleWithState(self, function (_, notification) {
          notification._acceptObservable(observer);
          notification.kind === 'N' && observer.onCompleted();
        });
      });
    };

    return Notification;
  })();

  /**
   * Creates an object that represents an OnNext notification to an observer.
   * @param {Any} value The value contained in the notification.
   * @returns {Notification} The OnNext notification containing the value.
   */
  var notificationCreateOnNext = Notification.createOnNext = (function () {
      function _accept(onNext) { return onNext(this.value); }
      function _acceptObservable(observer) { return observer.onNext(this.value); }
      function toString() { return 'OnNext(' + this.value + ')'; }

      return function (value) {
        return new Notification('N', value, null, _accept, _acceptObservable, toString);
      };
  }());

  /**
   * Creates an object that represents an OnError notification to an observer.
   * @param {Any} error The exception contained in the notification.
   * @returns {Notification} The OnError notification containing the exception.
   */
  var notificationCreateOnError = Notification.createOnError = (function () {
    function _accept (onNext, onError) { return onError(this.exception); }
    function _acceptObservable(observer) { return observer.onError(this.exception); }
    function toString () { return 'OnError(' + this.exception + ')'; }

    return function (e) {
      return new Notification('E', null, e, _accept, _acceptObservable, toString);
    };
  }());

  /**
   * Creates an object that represents an OnCompleted notification to an observer.
   * @returns {Notification} The OnCompleted notification.
   */
  var notificationCreateOnCompleted = Notification.createOnCompleted = (function () {
    function _accept (onNext, onError, onCompleted) { return onCompleted(); }
    function _acceptObservable(observer) { return observer.onCompleted(); }
    function toString () { return 'OnCompleted()'; }

    return function () {
      return new Notification('C', null, null, _accept, _acceptObservable, toString);
    };
  }());

  var Enumerator = Rx.internals.Enumerator = function (next) {
    this._next = next;
  };

  Enumerator.prototype.next = function () {
    return this._next();
  };

  Enumerator.prototype[$iterator$] = function () { return this; }

  var Enumerable = Rx.internals.Enumerable = function (iterator) {
    this._iterator = iterator;
  };

  Enumerable.prototype[$iterator$] = function () {
    return this._iterator();
  };

  Enumerable.prototype.concat = function () {
    var sources = this;
    return new AnonymousObservable(function (o) {
      var e = sources[$iterator$]();

      var isDisposed, subscription = new SerialDisposable();
      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
        if (isDisposed) { return; }
        try {
          var currentItem = e.next();
        } catch (ex) {
          return o.onError(ex);
        }

        if (currentItem.done) {
          return o.onCompleted();
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var d = new SingleAssignmentDisposable();
        subscription.setDisposable(d);
        d.setDisposable(currentValue.subscribe(
          function(x) { o.onNext(x); },
          function(err) { o.onError(err); },
          self)
        );
      });

      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
        isDisposed = true;
      }));
    });
  };

  Enumerable.prototype.catchError = function () {
    var sources = this;
    return new AnonymousObservable(function (o) {
      var e = sources[$iterator$]();

      var isDisposed, subscription = new SerialDisposable();
      var cancelable = immediateScheduler.scheduleRecursiveWithState(null, function (lastException, self) {
        if (isDisposed) { return; }

        try {
          var currentItem = e.next();
        } catch (ex) {
          return observer.onError(ex);
        }

        if (currentItem.done) {
          if (lastException !== null) {
            o.onError(lastException);
          } else {
            o.onCompleted();
          }
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var d = new SingleAssignmentDisposable();
        subscription.setDisposable(d);
        d.setDisposable(currentValue.subscribe(
          function(x) { o.onNext(x); },
          self,
          function() { o.onCompleted(); }));
      });
      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
        isDisposed = true;
      }));
    });
  };


  Enumerable.prototype.catchErrorWhen = function (notificationHandler) {
    var sources = this;
    return new AnonymousObservable(function (o) {
      var exceptions = new Subject(),
        notifier = new Subject(),
        handled = notificationHandler(exceptions),
        notificationDisposable = handled.subscribe(notifier);

      var e = sources[$iterator$]();

      var isDisposed,
        lastException,
        subscription = new SerialDisposable();
      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
        if (isDisposed) { return; }

        try {
          var currentItem = e.next();
        } catch (ex) {
          return o.onError(ex);
        }

        if (currentItem.done) {
          if (lastException) {
            o.onError(lastException);
          } else {
            o.onCompleted();
          }
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var outer = new SingleAssignmentDisposable();
        var inner = new SingleAssignmentDisposable();
        subscription.setDisposable(new CompositeDisposable(inner, outer));
        outer.setDisposable(currentValue.subscribe(
          function(x) { o.onNext(x); },
          function (exn) {
            inner.setDisposable(notifier.subscribe(self, function(ex) {
              o.onError(ex);
            }, function() {
              o.onCompleted();
            }));

            exceptions.onNext(exn);
          },
          function() { o.onCompleted(); }));
      });

      return new CompositeDisposable(notificationDisposable, subscription, cancelable, disposableCreate(function () {
        isDisposed = true;
      }));
    });
  };

  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
    if (repeatCount == null) { repeatCount = -1; }
    return new Enumerable(function () {
      var left = repeatCount;
      return new Enumerator(function () {
        if (left === 0) { return doneEnumerator; }
        if (left > 0) { left--; }
        return { done: false, value: value };
      });
    });
  };

  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
    if (selector) {
      var selectorFn = bindCallback(selector, thisArg, 3);
    }
    return new Enumerable(function () {
      var index = -1;
      return new Enumerator(
        function () {
          return ++index < source.length ?
            { done: false, value: !selector ? source[index] : selectorFn(source[index], index, source) } :
            doneEnumerator;
        });
    });
  };

  /**
   * Supports push-style iteration over an observable sequence.
   */
  var Observer = Rx.Observer = function () { };

  /**
   *  Creates a notification callback from an observer.
   * @returns The action that forwards its input notification to the underlying observer.
   */
  Observer.prototype.toNotifier = function () {
    var observer = this;
    return function (n) { return n.accept(observer); };
  };

  /**
   *  Hides the identity of an observer.
   * @returns An observer that hides the identity of the specified observer.
   */
  Observer.prototype.asObserver = function () {
    return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
  };

  /**
   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
   *  If a violation is detected, an Error is thrown from the offending observer method call.
   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
   */
  Observer.prototype.checked = function () { return new CheckedObserver(this); };

  /**
   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
   * @param {Function} [onNext] Observer's OnNext action implementation.
   * @param {Function} [onError] Observer's OnError action implementation.
   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
   * @returns {Observer} The observer object implemented using the given actions.
   */
  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
    onNext || (onNext = noop);
    onError || (onError = defaultError);
    onCompleted || (onCompleted = noop);
    return new AnonymousObserver(onNext, onError, onCompleted);
  };

  /**
   *  Creates an observer from a notification callback.
   *
   * @static
   * @memberOf Observer
   * @param {Function} handler Action that handles a notification.
   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
   */
  Observer.fromNotifier = function (handler, thisArg) {
    return new AnonymousObserver(function (x) {
      return handler.call(thisArg, notificationCreateOnNext(x));
    }, function (e) {
      return handler.call(thisArg, notificationCreateOnError(e));
    }, function () {
      return handler.call(thisArg, notificationCreateOnCompleted());
    });
  };

  /**
   * Schedules the invocation of observer methods on the given scheduler.
   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
   */
  Observer.prototype.notifyOn = function (scheduler) {
    return new ObserveOnObserver(scheduler, this);
  };

  Observer.prototype.makeSafe = function(disposable) {
    return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
  };

  /**
   * Abstract base class for implementations of the Observer class.
   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
   */
  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
    inherits(AbstractObserver, __super__);

    /**
     * Creates a new observer in a non-stopped state.
     */
    function AbstractObserver() {
      this.isStopped = false;
      __super__.call(this);
    }

    // Must be implemented by other observers
    AbstractObserver.prototype.next = notImplemented;
    AbstractObserver.prototype.error = notImplemented;
    AbstractObserver.prototype.completed = notImplemented;

    /**
     * Notifies the observer of a new element in the sequence.
     * @param {Any} value Next element in the sequence.
     */
    AbstractObserver.prototype.onNext = function (value) {
      if (!this.isStopped) { this.next(value); }
    };

    /**
     * Notifies the observer that an exception has occurred.
     * @param {Any} error The error that has occurred.
     */
    AbstractObserver.prototype.onError = function (error) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.error(error);
      }
    };

    /**
     * Notifies the observer of the end of the sequence.
     */
    AbstractObserver.prototype.onCompleted = function () {
      if (!this.isStopped) {
        this.isStopped = true;
        this.completed();
      }
    };

    /**
     * Disposes the observer, causing it to transition to the stopped state.
     */
    AbstractObserver.prototype.dispose = function () {
      this.isStopped = true;
    };

    AbstractObserver.prototype.fail = function (e) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.error(e);
        return true;
      }

      return false;
    };

    return AbstractObserver;
  }(Observer));

  /**
   * Class to create an Observer instance from delegate-based implementations of the on* methods.
   */
  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
    inherits(AnonymousObserver, __super__);

    /**
     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
     * @param {Any} onNext Observer's OnNext action implementation.
     * @param {Any} onError Observer's OnError action implementation.
     * @param {Any} onCompleted Observer's OnCompleted action implementation.
     */
    function AnonymousObserver(onNext, onError, onCompleted) {
      __super__.call(this);
      this._onNext = onNext;
      this._onError = onError;
      this._onCompleted = onCompleted;
    }

    /**
     * Calls the onNext action.
     * @param {Any} value Next element in the sequence.
     */
    AnonymousObserver.prototype.next = function (value) {
      this._onNext(value);
    };

    /**
     * Calls the onError action.
     * @param {Any} error The error that has occurred.
     */
    AnonymousObserver.prototype.error = function (error) {
      this._onError(error);
    };

    /**
     *  Calls the onCompleted action.
     */
    AnonymousObserver.prototype.completed = function () {
      this._onCompleted();
    };

    return AnonymousObserver;
  }(AbstractObserver));

  var CheckedObserver = (function (__super__) {
    inherits(CheckedObserver, __super__);

    function CheckedObserver(observer) {
      __super__.call(this);
      this._observer = observer;
      this._state = 0; // 0 - idle, 1 - busy, 2 - done
    }

    var CheckedObserverPrototype = CheckedObserver.prototype;

    CheckedObserverPrototype.onNext = function (value) {
      this.checkAccess();
      var res = tryCatch(this._observer.onNext).call(this._observer, value);
      this._state = 0;
      res === errorObj && thrower(res.e);
    };

    CheckedObserverPrototype.onError = function (err) {
      this.checkAccess();
      var res = tryCatch(this._observer.onError).call(this._observer, err);
      this._state = 2;
      res === errorObj && thrower(res.e);
    };

    CheckedObserverPrototype.onCompleted = function () {
      this.checkAccess();
      var res = tryCatch(this._observer.onCompleted).call(this._observer);
      this._state = 2;
      res === errorObj && thrower(res.e);
    };

    CheckedObserverPrototype.checkAccess = function () {
      if (this._state === 1) { throw new Error('Re-entrancy detected'); }
      if (this._state === 2) { throw new Error('Observer completed'); }
      if (this._state === 0) { this._state = 1; }
    };

    return CheckedObserver;
  }(Observer));

  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
    inherits(ScheduledObserver, __super__);

    function ScheduledObserver(scheduler, observer) {
      __super__.call(this);
      this.scheduler = scheduler;
      this.observer = observer;
      this.isAcquired = false;
      this.hasFaulted = false;
      this.queue = [];
      this.disposable = new SerialDisposable();
    }

    ScheduledObserver.prototype.next = function (value) {
      var self = this;
      this.queue.push(function () { self.observer.onNext(value); });
    };

    ScheduledObserver.prototype.error = function (e) {
      var self = this;
      this.queue.push(function () { self.observer.onError(e); });
    };

    ScheduledObserver.prototype.completed = function () {
      var self = this;
      this.queue.push(function () { self.observer.onCompleted(); });
    };

    ScheduledObserver.prototype.ensureActive = function () {
      var isOwner = false, parent = this;
      if (!this.hasFaulted && this.queue.length > 0) {
        isOwner = !this.isAcquired;
        this.isAcquired = true;
      }
      if (isOwner) {
        this.disposable.setDisposable(this.scheduler.scheduleRecursive(function (self) {
          var work;
          if (parent.queue.length > 0) {
            work = parent.queue.shift();
          } else {
            parent.isAcquired = false;
            return;
          }
          try {
            work();
          } catch (ex) {
            parent.queue = [];
            parent.hasFaulted = true;
            throw ex;
          }
          self();
        }));
      }
    };

    ScheduledObserver.prototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this.disposable.dispose();
    };

    return ScheduledObserver;
  }(AbstractObserver));

  var ObserveOnObserver = (function (__super__) {
    inherits(ObserveOnObserver, __super__);

    function ObserveOnObserver(scheduler, observer, cancel) {
      __super__.call(this, scheduler, observer);
      this._cancel = cancel;
    }

    ObserveOnObserver.prototype.next = function (value) {
      __super__.prototype.next.call(this, value);
      this.ensureActive();
    };

    ObserveOnObserver.prototype.error = function (e) {
      __super__.prototype.error.call(this, e);
      this.ensureActive();
    };

    ObserveOnObserver.prototype.completed = function () {
      __super__.prototype.completed.call(this);
      this.ensureActive();
    };

    ObserveOnObserver.prototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this._cancel && this._cancel.dispose();
      this._cancel = null;
    };

    return ObserveOnObserver;
  })(ScheduledObserver);

  var observableProto;

  /**
   * Represents a push-style collection.
   */
  var Observable = Rx.Observable = (function () {

    function Observable(subscribe) {
      if (Rx.config.longStackSupport && hasStacks) {
        try {
          throw new Error();
        } catch (e) {
          this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }

        var self = this;
        this._subscribe = function (observer) {
          var oldOnError = observer.onError.bind(observer);

          observer.onError = function (err) {
            makeStackTraceLong(err, self);
            oldOnError(err);
          };

          return subscribe.call(self, observer);
        };
      } else {
        this._subscribe = subscribe;
      }
    }

    observableProto = Observable.prototype;

    /**
     *  Subscribes an observer to the observable sequence.
     *  @param {Mixed} [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribe = observableProto.forEach = function (observerOrOnNext, onError, onCompleted) {
      return this._subscribe(typeof observerOrOnNext === 'object' ?
        observerOrOnNext :
        observerCreate(observerOrOnNext, onError, onCompleted));
    };

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param {Function} onNext The function to invoke on each element in the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnNext = function (onNext, thisArg) {
      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) { onNext.call(thisArg, x); } : onNext));
    };

    /**
     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnError = function (onError, thisArg) {
      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) { onError.call(thisArg, e); } : onError));
    };

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() { onCompleted.call(thisArg); } : onCompleted));
    };

    return Observable;
  })();

  var ObservableBase = Rx.ObservableBase = (function (__super__) {
    inherits(ObservableBase, __super__);

    function fixSubscriber(subscriber) {
      return subscriber && isFunction(subscriber.dispose) ? subscriber :
        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
    }

    function setDisposable(s, state) {
      var ado = state[0], self = state[1];
      var sub = tryCatch(self.subscribeCore).call(self, ado);

      if (sub === errorObj) {
        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
      }
      ado.setDisposable(fixSubscriber(sub));
    }

    function subscribe(observer) {
      var ado = new AutoDetachObserver(observer), state = [ado, this];

      if (currentThreadScheduler.scheduleRequired()) {
        currentThreadScheduler.scheduleWithState(state, setDisposable);
      } else {
        setDisposable(null, state);
      }
      return ado;
    }

    function ObservableBase() {
      __super__.call(this, subscribe);
    }

    ObservableBase.prototype.subscribeCore = notImplemented;

    return ObservableBase;
  }(Observable));

   /**
   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
   *
   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
   *  that require to be run on a scheduler, use subscribeOn.
   *
   *  @param {Scheduler} scheduler Scheduler to notify observers on.
   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
   */
  observableProto.observeOn = function (scheduler) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      return source.subscribe(new ObserveOnObserver(scheduler, observer));
    }, source);
  };

   /**
   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.

   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
   *  callbacks on a scheduler, use observeOn.

   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
   */
  observableProto.subscribeOn = function (scheduler) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var m = new SingleAssignmentDisposable(), d = new SerialDisposable();
      d.setDisposable(m);
      m.setDisposable(scheduler.schedule(function () {
        d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
      }));
      return d;
    }, source);
  };

  /**
   * Converts a Promise to an Observable sequence
   * @param {Promise} An ES6 Compliant promise.
   * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
   */
  var observableFromPromise = Observable.fromPromise = function (promise) {
    return observableDefer(function () {
      var subject = new Rx.AsyncSubject();

      promise.then(
        function (value) {
          subject.onNext(value);
          subject.onCompleted();
        },
        subject.onError.bind(subject));

      return subject;
    });
  };

  /*
   * Converts an existing observable sequence to an ES6 Compatible Promise
   * @example
   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
   *
   * // With config
   * Rx.config.Promise = RSVP.Promise;
   * var promise = Rx.Observable.return(42).toPromise();
   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
   */
  observableProto.toPromise = function (promiseCtor) {
    promiseCtor || (promiseCtor = Rx.config.Promise);
    if (!promiseCtor) { throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise'); }
    var source = this;
    return new promiseCtor(function (resolve, reject) {
      // No cancellation can be done
      var value, hasValue = false;
      source.subscribe(function (v) {
        value = v;
        hasValue = true;
      }, reject, function () {
        hasValue && resolve(value);
      });
    });
  };

  var ToArrayObservable = (function(__super__) {
    inherits(ToArrayObservable, __super__);
    function ToArrayObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    ToArrayObservable.prototype.subscribeCore = function(observer) {
      return this.source.subscribe(new ToArrayObserver(observer));
    };

    return ToArrayObservable;
  }(ObservableBase));

  function ToArrayObserver(observer) {
    this.observer = observer;
    this.a = [];
    this.isStopped = false;
  }
  ToArrayObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.a.push(x); } };
  ToArrayObserver.prototype.onError = function (e) {
    if (!this.isStopped) {
      this.isStopped = true;
      this.observer.onError(e);
    }
  };
  ToArrayObserver.prototype.onCompleted = function () {
    if (!this.isStopped) {
      this.isStopped = true;
      this.observer.onNext(this.a);
      this.observer.onCompleted();
    }
  };
  ToArrayObserver.prototype.dispose = function () { this.isStopped = true; }
  ToArrayObserver.prototype.fail = function (e) {
    if (!this.isStopped) {
      this.isStopped = true;
      this.observer.onError(e);
      return true;
    }

    return false;
  };

  /**
  * Creates an array from an observable sequence.
  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
  */
  observableProto.toArray = function () {
    return new ToArrayObservable(this);
  };

  /**
   *  Creates an observable sequence from a specified subscribe method implementation.
   * @example
   *  var res = Rx.Observable.create(function (observer) { return function () { } );
   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
   *  var res = Rx.Observable.create(function (observer) { } );
   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
   */
  Observable.create = Observable.createWithDisposable = function (subscribe, parent) {
    return new AnonymousObservable(subscribe, parent);
  };

  /**
   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
   *
   * @example
   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
   */
  var observableDefer = Observable.defer = function (observableFactory) {
    return new AnonymousObservable(function (observer) {
      var result;
      try {
        result = observableFactory();
      } catch (e) {
        return observableThrow(e).subscribe(observer);
      }
      isPromise(result) && (result = observableFromPromise(result));
      return result.subscribe(observer);
    });
  };

  var EmptyObservable = (function(__super__) {
    inherits(EmptyObservable, __super__);
    function EmptyObservable(scheduler) {
      this.scheduler = scheduler;
      __super__.call(this);
    }

    EmptyObservable.prototype.subscribeCore = function (observer) {
      var sink = new EmptySink(observer, this);
      return sink.run();
    };

    function EmptySink(observer, parent) {
      this.observer = observer;
      this.parent = parent;
    }

    function scheduleItem(s, state) {
      state.onCompleted();
    }

    EmptySink.prototype.run = function () {
      return this.parent.scheduler.scheduleWithState(this.observer, scheduleItem);
    };

    return EmptyObservable;
  }(ObservableBase));

  /**
   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
   *
   * @example
   *  var res = Rx.Observable.empty();
   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
   * @returns {Observable} An observable sequence with no elements.
   */
  var observableEmpty = Observable.empty = function (scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return new EmptyObservable(scheduler);
  };

  var FromObservable = (function(__super__) {
    inherits(FromObservable, __super__);
    function FromObservable(iterable, mapper, scheduler) {
      this.iterable = iterable;
      this.mapper = mapper;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    FromObservable.prototype.subscribeCore = function (observer) {
      var sink = new FromSink(observer, this);
      return sink.run();
    };

    return FromObservable;
  }(ObservableBase));

  var FromSink = (function () {
    function FromSink(observer, parent) {
      this.observer = observer;
      this.parent = parent;
    }

    FromSink.prototype.run = function () {
      var list = Object(this.parent.iterable),
          it = getIterable(list),
          observer = this.observer,
          mapper = this.parent.mapper;

      function loopRecursive(i, recurse) {
        try {
          var next = it.next();
        } catch (e) {
          return observer.onError(e);
        }
        if (next.done) {
          return observer.onCompleted();
        }

        var result = next.value;

        if (mapper) {
          try {
            result = mapper(result, i);
          } catch (e) {
            return observer.onError(e);
          }
        }

        observer.onNext(result);
        recurse(i + 1);
      }

      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
    };

    return FromSink;
  }());

  var maxSafeInteger = Math.pow(2, 53) - 1;

  function StringIterable(str) {
    this._s = s;
  }

  StringIterable.prototype[$iterator$] = function () {
    return new StringIterator(this._s);
  };

  function StringIterator(str) {
    this._s = s;
    this._l = s.length;
    this._i = 0;
  }

  StringIterator.prototype[$iterator$] = function () {
    return this;
  };

  StringIterator.prototype.next = function () {
    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
  };

  function ArrayIterable(a) {
    this._a = a;
  }

  ArrayIterable.prototype[$iterator$] = function () {
    return new ArrayIterator(this._a);
  };

  function ArrayIterator(a) {
    this._a = a;
    this._l = toLength(a);
    this._i = 0;
  }

  ArrayIterator.prototype[$iterator$] = function () {
    return this;
  };

  ArrayIterator.prototype.next = function () {
    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
  };

  function numberIsFinite(value) {
    return typeof value === 'number' && root.isFinite(value);
  }

  function isNan(n) {
    return n !== n;
  }

  function getIterable(o) {
    var i = o[$iterator$], it;
    if (!i && typeof o === 'string') {
      it = new StringIterable(o);
      return it[$iterator$]();
    }
    if (!i && o.length !== undefined) {
      it = new ArrayIterable(o);
      return it[$iterator$]();
    }
    if (!i) { throw new TypeError('Object is not iterable'); }
    return o[$iterator$]();
  }

  function sign(value) {
    var number = +value;
    if (number === 0) { return number; }
    if (isNaN(number)) { return number; }
    return number < 0 ? -1 : 1;
  }

  function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) { return 0; }
    if (len === 0 || !numberIsFinite(len)) { return len; }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) { return 0; }
    if (len > maxSafeInteger) { return maxSafeInteger; }
    return len;
  }

  /**
  * This method creates a new Observable sequence from an array-like or iterable object.
  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
  * @param {Function} [mapFn] Map function to call on every element of the array.
  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
  */
  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
    if (iterable == null) {
      throw new Error('iterable cannot be null.')
    }
    if (mapFn && !isFunction(mapFn)) {
      throw new Error('mapFn when provided must be a function');
    }
    if (mapFn) {
      var mapper = bindCallback(mapFn, thisArg, 2);
    }
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromObservable(iterable, mapper, scheduler);
  }

  var FromArrayObservable = (function(__super__) {
    inherits(FromArrayObservable, __super__);
    function FromArrayObservable(args, scheduler) {
      this.args = args;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    FromArrayObservable.prototype.subscribeCore = function (observer) {
      var sink = new FromArraySink(observer, this);
      return sink.run();
    };

    return FromArrayObservable;
  }(ObservableBase));

  function FromArraySink(observer, parent) {
    this.observer = observer;
    this.parent = parent;
  }

  FromArraySink.prototype.run = function () {
    var observer = this.observer, args = this.parent.args, len = args.length;
    function loopRecursive(i, recurse) {
      if (i < len) {
        observer.onNext(args[i]);
        recurse(i + 1);
      } else {
        observer.onCompleted();
      }
    }

    return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
  };

  /**
  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
  * @deprecated use Observable.from or Observable.of
  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
  */
  var observableFromArray = Observable.fromArray = function (array, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromArrayObservable(array, scheduler)
  };

  /**
   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
   *
   * @example
   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
   * @param {Mixed} initialState Initial state.
   * @param {Function} condition Condition to terminate generation (upon returning false).
   * @param {Function} iterate Iteration step function.
   * @param {Function} resultSelector Selector function for results produced in the sequence.
   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
   * @returns {Observable} The generated sequence.
   */
  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new AnonymousObservable(function (o) {
      var first = true;
      return scheduler.scheduleRecursiveWithState(initialState, function (state, self) {
        var hasResult, result;
        try {
          if (first) {
            first = false;
          } else {
            state = iterate(state);
          }
          hasResult = condition(state);
          hasResult && (result = resultSelector(state));
        } catch (e) {
          return o.onError(e);
        }
        if (hasResult) {
          o.onNext(result);
          self(state);
        } else {
          o.onCompleted();
        }
      });
    });
  };

  function observableOf (scheduler, array) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromArrayObservable(array, scheduler);
  }

  /**
  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
  */
  Observable.of = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return new FromArrayObservable(args, currentThreadScheduler);
  };

  /**
  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
  */
  Observable.ofWithScheduler = function (scheduler) {
    var len = arguments.length, args = new Array(len - 1);
    for(var i = 1; i < len; i++) { args[i - 1] = arguments[i]; }
    return new FromArrayObservable(args, scheduler);
  };

  /**
   * Creates an Observable sequence from changes to an array using Array.observe.
   * @param {Array} array An array to observe changes.
   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
   */
  Observable.ofArrayChanges = function(array) {
    if (!Array.isArray(array)) { throw new TypeError('Array.observe only accepts arrays.'); }
    if (typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
    return new AnonymousObservable(function(observer) {
      function observerFn(changes) {
        for(var i = 0, len = changes.length; i < len; i++) {
          observer.onNext(changes[i]);
        }
      }
      
      Array.observe(array, observerFn);

      return function () {
        Array.unobserve(array, observerFn);
      };
    });
  };

  /**
   * Creates an Observable sequence from changes to an object using Object.observe.
   * @param {Object} obj An object to observe changes.
   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
   */
  Observable.ofObjectChanges = function(obj) {
    if (obj == null) { throw new TypeError('object must not be null or undefined.'); }
    if (typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
    return new AnonymousObservable(function(observer) {
      function observerFn(changes) {
        for(var i = 0, len = changes.length; i < len; i++) {
          observer.onNext(changes[i]);
        }
      }

      Object.observe(obj, observerFn);

      return function () {
        Object.unobserve(obj, observerFn);
      };
    });
  };

  var NeverObservable = (function(__super__) {
    inherits(NeverObservable, __super__);
    function NeverObservable() {
      __super__.call(this);
    }

    NeverObservable.prototype.subscribeCore = function (observer) {
      return disposableEmpty;
    };

    return NeverObservable;
  }(ObservableBase));

  /**
   * Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
   * @returns {Observable} An observable sequence whose observers will never get called.
   */
  var observableNever = Observable.never = function () {
    return new NeverObservable();
  };

  var PairsObservable = (function(__super__) {
    inherits(PairsObservable, __super__);
    function PairsObservable(obj, scheduler) {
      this.obj = obj;
      this.keys = Object.keys(obj);
      this.scheduler = scheduler;
      __super__.call(this);
    }

    PairsObservable.prototype.subscribeCore = function (observer) {
      var sink = new PairsSink(observer, this);
      return sink.run();
    };

    return PairsObservable;
  }(ObservableBase));

  function PairsSink(observer, parent) {
    this.observer = observer;
    this.parent = parent;
  }

  PairsSink.prototype.run = function () {
    var observer = this.observer, obj = this.parent.obj, keys = this.parent.keys, len = keys.length;
    function loopRecursive(i, recurse) {
      if (i < len) {
        var key = keys[i];
        observer.onNext([key, obj[key]]);
        recurse(i + 1);
      } else {
        observer.onCompleted();
      }
    }

    return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
  };

  /**
   * Convert an object into an observable sequence of [key, value] pairs.
   * @param {Object} obj The object to inspect.
   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
   */
  Observable.pairs = function (obj, scheduler) {
    scheduler || (scheduler = currentThreadScheduler);
    return new PairsObservable(obj, scheduler);
  };

    var RangeObservable = (function(__super__) {
    inherits(RangeObservable, __super__);
    function RangeObservable(start, count, scheduler) {
      this.start = start;
      this.count = count;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    RangeObservable.prototype.subscribeCore = function (observer) {
      var sink = new RangeSink(observer, this);
      return sink.run();
    };

    return RangeObservable;
  }(ObservableBase));

  var RangeSink = (function () {
    function RangeSink(observer, parent) {
      this.observer = observer;
      this.parent = parent;
    }

    RangeSink.prototype.run = function () {
      var start = this.parent.start, count = this.parent.count, observer = this.observer;
      function loopRecursive(i, recurse) {
        if (i < count) {
          observer.onNext(start + i);
          recurse(i + 1);
        } else {
          observer.onCompleted();
        }
      }

      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
    };

    return RangeSink;
  }());

  /**
  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
  * @param {Number} start The value of the first integer in the sequence.
  * @param {Number} count The number of sequential integers to generate.
  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
  */
  Observable.range = function (start, count, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new RangeObservable(start, count, scheduler);
  };

  var RepeatObservable = (function(__super__) {
    inherits(RepeatObservable, __super__);
    function RepeatObservable(value, repeatCount, scheduler) {
      this.value = value;
      this.repeatCount = repeatCount == null ? -1 : repeatCount;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    RepeatObservable.prototype.subscribeCore = function (observer) {
      var sink = new RepeatSink(observer, this);
      return sink.run();
    };

    return RepeatObservable;
  }(ObservableBase));

  function RepeatSink(observer, parent) {
    this.observer = observer;
    this.parent = parent;
  }

  RepeatSink.prototype.run = function () {
    var observer = this.observer, value = this.parent.value;
    function loopRecursive(i, recurse) {
      if (i === -1 || i > 0) {
        observer.onNext(value);
        i > 0 && i--;
      }
      if (i === 0) { return observer.onCompleted(); }
      recurse(i);
    }

    return this.parent.scheduler.scheduleRecursiveWithState(this.parent.repeatCount, loopRecursive);
  };

  /**
   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
   * @param {Mixed} value Element to repeat.
   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
   */
  Observable.repeat = function (value, repeatCount, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new RepeatObservable(value, repeatCount, scheduler);
  };

  var JustObservable = (function(__super__) {
    inherits(JustObservable, __super__);
    function JustObservable(value, scheduler) {
      this.value = value;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    JustObservable.prototype.subscribeCore = function (observer) {
      var sink = new JustSink(observer, this);
      return sink.run();
    };

    function JustSink(observer, parent) {
      this.observer = observer;
      this.parent = parent;
    }

    function scheduleItem(s, state) {
      var value = state[0], observer = state[1];
      observer.onNext(value);
      observer.onCompleted();
    }

    JustSink.prototype.run = function () {
      return this.parent.scheduler.scheduleWithState([this.parent.value, this.observer], scheduleItem);
    };

    return JustObservable;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
   *  There is an alias called 'just' or browsers <IE9.
   * @param {Mixed} value Single element in the resulting observable sequence.
   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} An observable sequence containing the single specified element.
   */
  var observableReturn = Observable['return'] = Observable.just = Observable.returnValue = function (value, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return new JustObservable(value, scheduler);
  };

  var ThrowObservable = (function(__super__) {
    inherits(ThrowObservable, __super__);
    function ThrowObservable(error, scheduler) {
      this.error = error;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    ThrowObservable.prototype.subscribeCore = function (observer) {
      var sink = new ThrowSink(observer, this);
      return sink.run();
    };

    function ThrowSink(observer, parent) {
      this.observer = observer;
      this.parent = parent;
    }

    function scheduleItem(s, state) {
      var error = state[0], observer = state[1];
      observer.onError(error);
    }

    ThrowSink.prototype.run = function () {
      return this.parent.scheduler.scheduleWithState([this.parent.error, this.observer], scheduleItem);
    };

    return ThrowObservable;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
   *  There is an alias to this method called 'throwError' for browsers <IE9.
   * @param {Mixed} error An object used for the sequence's termination.
   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
   */
  var observableThrow = Observable['throw'] = Observable.throwError = Observable.throwException = function (error, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return new ThrowObservable(error, scheduler);
  };

  /**
   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
   * @param {Function} resourceFactory Factory function to obtain a resource object.
   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
   */
  Observable.using = function (resourceFactory, observableFactory) {
    return new AnonymousObservable(function (observer) {
      var disposable = disposableEmpty, resource, source;
      try {
        resource = resourceFactory();
        resource && (disposable = resource);
        source = observableFactory(resource);
      } catch (exception) {
        return new CompositeDisposable(observableThrow(exception).subscribe(observer), disposable);
      }
      return new CompositeDisposable(source.subscribe(observer), disposable);
    });
  };

  /**
   * Propagates the observable sequence or Promise that reacts first.
   * @param {Observable} rightSource Second observable sequence or Promise.
   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
   */
  observableProto.amb = function (rightSource) {
    var leftSource = this;
    return new AnonymousObservable(function (observer) {
      var choice,
        leftChoice = 'L', rightChoice = 'R',
        leftSubscription = new SingleAssignmentDisposable(),
        rightSubscription = new SingleAssignmentDisposable();

      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));

      function choiceL() {
        if (!choice) {
          choice = leftChoice;
          rightSubscription.dispose();
        }
      }

      function choiceR() {
        if (!choice) {
          choice = rightChoice;
          leftSubscription.dispose();
        }
      }

      leftSubscription.setDisposable(leftSource.subscribe(function (left) {
        choiceL();
        if (choice === leftChoice) {
          observer.onNext(left);
        }
      }, function (err) {
        choiceL();
        if (choice === leftChoice) {
          observer.onError(err);
        }
      }, function () {
        choiceL();
        if (choice === leftChoice) {
          observer.onCompleted();
        }
      }));

      rightSubscription.setDisposable(rightSource.subscribe(function (right) {
        choiceR();
        if (choice === rightChoice) {
          observer.onNext(right);
        }
      }, function (err) {
        choiceR();
        if (choice === rightChoice) {
          observer.onError(err);
        }
      }, function () {
        choiceR();
        if (choice === rightChoice) {
          observer.onCompleted();
        }
      }));

      return new CompositeDisposable(leftSubscription, rightSubscription);
    });
  };

  /**
   * Propagates the observable sequence or Promise that reacts first.
   *
   * @example
   * var = Rx.Observable.amb(xs, ys, zs);
   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
   */
  Observable.amb = function () {
    var acc = observableNever(), items = [];
    if (Array.isArray(arguments[0])) {
      items = arguments[0];
    } else {
      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
    }

    function func(previous, current) {
      return previous.amb(current);
    }
    for (var i = 0, len = items.length; i < len; i++) {
      acc = func(acc, items[i]);
    }
    return acc;
  };

  function observableCatchHandler(source, handler) {
    return new AnonymousObservable(function (o) {
      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
      subscription.setDisposable(d1);
      d1.setDisposable(source.subscribe(function (x) { o.onNext(x); }, function (e) {
        try {
          var result = handler(e);
        } catch (ex) {
          return o.onError(ex);
        }
        isPromise(result) && (result = observableFromPromise(result));

        var d = new SingleAssignmentDisposable();
        subscription.setDisposable(d);
        d.setDisposable(result.subscribe(o));
      }, function (x) { o.onCompleted(x); }));

      return subscription;
    }, source);
  }

  /**
   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
   * @example
   * 1 - xs.catchException(ys)
   * 2 - xs.catchException(function (ex) { return ys(ex); })
   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
   */
  observableProto['catch'] = observableProto.catchError = observableProto.catchException = function (handlerOrSecond) {
    return typeof handlerOrSecond === 'function' ?
      observableCatchHandler(this, handlerOrSecond) :
      observableCatch([this, handlerOrSecond]);
  };

  /**
   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
   */
  var observableCatch = Observable.catchError = Observable['catch'] = Observable.catchException = function () {
    var items = [];
    if (Array.isArray(arguments[0])) {
      items = arguments[0];
    } else {
      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
    }
    return enumerableOf(items).catchError();
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
   * This can be in the form of an argument list of observables or an array.
   *
   * @example
   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  observableProto.combineLatest = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    if (Array.isArray(args[0])) {
      args[0].unshift(this);
    } else {
      args.unshift(this);
    }
    return combineLatest.apply(this, args);
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
   *
   * @example
   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  var combineLatest = Observable.combineLatest = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = args.pop();
    Array.isArray(args[0]) && (args = args[0]);

    return new AnonymousObservable(function (o) {
      var n = args.length,
        falseFactory = function () { return false; },
        hasValue = arrayInitialize(n, falseFactory),
        hasValueAll = false,
        isDone = arrayInitialize(n, falseFactory),
        values = new Array(n);

      function next(i) {
        hasValue[i] = true;
        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
          try {
            var res = resultSelector.apply(null, values);
          } catch (e) {
            return o.onError(e);
          }
          o.onNext(res);
        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
          o.onCompleted();
        }
      }

      function done (i) {
        isDone[i] = true;
        isDone.every(identity) && o.onCompleted();
      }

      var subscriptions = new Array(n);
      for (var idx = 0; idx < n; idx++) {
        (function (i) {
          var source = args[i], sad = new SingleAssignmentDisposable();
          isPromise(source) && (source = observableFromPromise(source));
          sad.setDisposable(source.subscribe(function (x) {
              values[i] = x;
              next(i);
            },
            function(e) { o.onError(e); },
            function () { done(i); }
          ));
          subscriptions[i] = sad;
        }(idx));
      }

      return new CompositeDisposable(subscriptions);
    }, this);
  };

  /**
   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
   */
  observableProto.concat = function () {
    for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
    args.unshift(this);
    return observableConcat.apply(null, args);
  };

  /**
   * Concatenates all the observable sequences.
   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
   */
  var observableConcat = Observable.concat = function () {
    var args;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      args = new Array(arguments.length);
      for(var i = 0, len = arguments.length; i < len; i++) { args[i] = arguments[i]; }
    }
    return enumerableOf(args).concat();
  };

  /**
   * Concatenates an observable sequence of observable sequences.
   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
   */
  observableProto.concatAll = observableProto.concatObservable = function () {
    return this.merge(1);
  };

  var MergeObservable = (function (__super__) {
    inherits(MergeObservable, __super__);

    function MergeObservable(source, maxConcurrent) {
      this.source = source;
      this.maxConcurrent = maxConcurrent;
      __super__.call(this);
    }

    MergeObservable.prototype.subscribeCore = function(observer) {
      var g = new CompositeDisposable();
      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
      return g;
    };

    return MergeObservable;

  }(ObservableBase));

  var MergeObserver = (function () {
    function MergeObserver(o, max, g) {
      this.o = o;
      this.max = max;
      this.g = g;
      this.done = false;
      this.q = [];
      this.activeCount = 0;
      this.isStopped = false;
    }
    MergeObserver.prototype.handleSubscribe = function (xs) {
      var sad = new SingleAssignmentDisposable();
      this.g.add(sad);
      isPromise(xs) && (xs = observableFromPromise(xs));
      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
    };
    MergeObserver.prototype.onNext = function (innerSource) {
      if (this.isStopped) { return; }
        if(this.activeCount < this.max) {
          this.activeCount++;
          this.handleSubscribe(innerSource);
        } else {
          this.q.push(innerSource);
        }
      };
      MergeObserver.prototype.onError = function (e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.o.onError(e);
        }
      };
      MergeObserver.prototype.onCompleted = function () {
        if (!this.isStopped) {
          this.isStopped = true;
          this.done = true;
          this.activeCount === 0 && this.o.onCompleted();
        }
      };
      MergeObserver.prototype.dispose = function() { this.isStopped = true; };
      MergeObserver.prototype.fail = function (e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.o.onError(e);
          return true;
        }

        return false;
      };

      function InnerObserver(parent, sad) {
        this.parent = parent;
        this.sad = sad;
        this.isStopped = false;
      }
      InnerObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.parent.o.onNext(x); } };
      InnerObserver.prototype.onError = function (e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.parent.o.onError(e);
        }
      };
      InnerObserver.prototype.onCompleted = function () {
        if(!this.isStopped) {
          this.isStopped = true;
          var parent = this.parent;
          parent.g.remove(this.sad);
          if (parent.q.length > 0) {
            parent.handleSubscribe(parent.q.shift());
          } else {
            parent.activeCount--;
            parent.done && parent.activeCount === 0 && parent.o.onCompleted();
          }
        }
      };
      InnerObserver.prototype.dispose = function() { this.isStopped = true; };
      InnerObserver.prototype.fail = function (e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.parent.o.onError(e);
          return true;
        }

        return false;
      };

      return MergeObserver;
  }());





  /**
  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
  * Or merges two observable sequences into a single observable sequence.
  *
  * @example
  * 1 - merged = sources.merge(1);
  * 2 - merged = source.merge(otherSource);
  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
  */
  observableProto.merge = function (maxConcurrentOrOther) {
    return typeof maxConcurrentOrOther !== 'number' ?
      observableMerge(this, maxConcurrentOrOther) :
      new MergeObservable(this, maxConcurrentOrOther);
  };

  /**
   * Merges all the observable sequences into a single observable sequence.
   * The scheduler is optional and if not specified, the immediate scheduler is used.
   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
   */
  var observableMerge = Observable.merge = function () {
    var scheduler, sources = [], i, len = arguments.length;
    if (!arguments[0]) {
      scheduler = immediateScheduler;
      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
    } else if (isScheduler(arguments[0])) {
      scheduler = arguments[0];
      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
    } else {
      scheduler = immediateScheduler;
      for(i = 0; i < len; i++) { sources.push(arguments[i]); }
    }
    if (Array.isArray(sources[0])) {
      sources = sources[0];
    }
    return observableOf(scheduler, sources).mergeAll();
  };

  var MergeAllObservable = (function (__super__) {
    inherits(MergeAllObservable, __super__);

    function MergeAllObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    MergeAllObservable.prototype.subscribeCore = function (observer) {
      var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();
      g.add(m);
      m.setDisposable(this.source.subscribe(new MergeAllObserver(observer, g)));
      return g;
    };

    return MergeAllObservable;
  }(ObservableBase));

  var MergeAllObserver = (function() {

    function MergeAllObserver(o, g) {
      this.o = o;
      this.g = g;
      this.isStopped = false;
      this.done = false;
    }
    MergeAllObserver.prototype.onNext = function(innerSource) {
      if(this.isStopped) { return; }
      var sad = new SingleAssignmentDisposable();
      this.g.add(sad);

      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, this.g, sad)));
    };
    MergeAllObserver.prototype.onError = function (e) {
      if(!this.isStopped) {
        this.isStopped = true;
        this.o.onError(e);
      }
    };
    MergeAllObserver.prototype.onCompleted = function () {
      if(!this.isStopped) {
        this.isStopped = true;
        this.done = true;
        this.g.length === 1 && this.o.onCompleted();
      }
    };
    MergeAllObserver.prototype.dispose = function() { this.isStopped = true; };
    MergeAllObserver.prototype.fail = function (e) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.o.onError(e);
        return true;
      }

      return false;
    };

    function InnerObserver(parent, g, sad) {
      this.parent = parent;
      this.g = g;
      this.sad = sad;
      this.isStopped = false;
    }
    InnerObserver.prototype.onNext = function (x) { if (!this.isStopped) { this.parent.o.onNext(x); } };
    InnerObserver.prototype.onError = function (e) {
      if(!this.isStopped) {
        this.isStopped = true;
        this.parent.o.onError(e);
      }
    };
    InnerObserver.prototype.onCompleted = function () {
      if(!this.isStopped) {
        var parent = this.parent;
        this.isStopped = true;
        parent.g.remove(this.sad);
        parent.done && parent.g.length === 1 && parent.o.onCompleted();
      }
    };
    InnerObserver.prototype.dispose = function() { this.isStopped = true; };
    InnerObserver.prototype.fail = function (e) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.parent.o.onError(e);
        return true;
      }

      return false;
    };

    return MergeAllObserver;

  }());

  /**
  * Merges an observable sequence of observable sequences into an observable sequence.
  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
  */
  observableProto.mergeAll = observableProto.mergeObservable = function () {
    return new MergeAllObservable(this);
  };

  var CompositeError = Rx.CompositeError = function(errors) {
    this.name = "NotImplementedError";
    this.innerErrors = errors;
    this.message = 'This contains multiple errors. Check the innerErrors';
    Error.call(this);
  }
  CompositeError.prototype = Error.prototype;

  /**
  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
  * receive all successfully emitted items from all of the source Observables without being interrupted by
  * an error notification from one of them.
  *
  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
  * error via the Observer's onError, mergeDelayError will refrain from propagating that
  * error notification until all of the merged Observables have finished emitting items.
  * @param {Array | Arguments} args Arguments or an array to merge.
  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
  */
  Observable.mergeDelayError = function() {
    var args;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      var len = arguments.length;
      args = new Array(len);
      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    }
    var source = observableOf(null, args);

    return new AnonymousObservable(function (o) {
      var group = new CompositeDisposable(),
        m = new SingleAssignmentDisposable(),
        isStopped = false,
        errors = [];

      function setCompletion() {
        if (errors.length === 0) {
          o.onCompleted();
        } else if (errors.length === 1) {
          o.onError(errors[0]);
        } else {
          o.onError(new CompositeError(errors));
        }
      }

      group.add(m);

      m.setDisposable(source.subscribe(
        function (innerSource) {
          var innerSubscription = new SingleAssignmentDisposable();
          group.add(innerSubscription);

          // Check for promises support
          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

          innerSubscription.setDisposable(innerSource.subscribe(
            function (x) { o.onNext(x); },
            function (e) {
              errors.push(e);
              group.remove(innerSubscription);
              isStopped && group.length === 1 && setCompletion();
            },
            function () {
              group.remove(innerSubscription);
              isStopped && group.length === 1 && setCompletion();
          }));
        },
        function (e) {
          errors.push(e);
          isStopped = true;
          group.length === 1 && setCompletion();
        },
        function () {
          isStopped = true;
          group.length === 1 && setCompletion();
        }));
      return group;
    });
  };

  /**
   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
   */
  observableProto.onErrorResumeNext = function (second) {
    if (!second) { throw new Error('Second observable is required'); }
    return onErrorResumeNext([this, second]);
  };

  /**
   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
   *
   * @example
   * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);
   * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);
   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
   */
  var onErrorResumeNext = Observable.onErrorResumeNext = function () {
    var sources = [];
    if (Array.isArray(arguments[0])) {
      sources = arguments[0];
    } else {
      for(var i = 0, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
    }
    return new AnonymousObservable(function (observer) {
      var pos = 0, subscription = new SerialDisposable(),
      cancelable = immediateScheduler.scheduleRecursive(function (self) {
        var current, d;
        if (pos < sources.length) {
          current = sources[pos++];
          isPromise(current) && (current = observableFromPromise(current));
          d = new SingleAssignmentDisposable();
          subscription.setDisposable(d);
          d.setDisposable(current.subscribe(observer.onNext.bind(observer), self, self));
        } else {
          observer.onCompleted();
        }
      });
      return new CompositeDisposable(subscription, cancelable);
    });
  };

  /**
   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
   */
  observableProto.skipUntil = function (other) {
    var source = this;
    return new AnonymousObservable(function (o) {
      var isOpen = false;
      var disposables = new CompositeDisposable(source.subscribe(function (left) {
        isOpen && o.onNext(left);
      }, function (e) { o.onError(e); }, function () {
        isOpen && o.onCompleted();
      }));

      isPromise(other) && (other = observableFromPromise(other));

      var rightSubscription = new SingleAssignmentDisposable();
      disposables.add(rightSubscription);
      rightSubscription.setDisposable(other.subscribe(function () {
        isOpen = true;
        rightSubscription.dispose();
      }, function (e) { o.onError(e); }, function () {
        rightSubscription.dispose();
      }));

      return disposables;
    }, source);
  };

  /**
   * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
   * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
   */
  observableProto['switch'] = observableProto.switchLatest = function () {
    var sources = this;
    return new AnonymousObservable(function (observer) {
      var hasLatest = false,
        innerSubscription = new SerialDisposable(),
        isStopped = false,
        latest = 0,
        subscription = sources.subscribe(
          function (innerSource) {
            var d = new SingleAssignmentDisposable(), id = ++latest;
            hasLatest = true;
            innerSubscription.setDisposable(d);

            // Check if Promise or Observable
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

            d.setDisposable(innerSource.subscribe(
              function (x) { latest === id && observer.onNext(x); },
              function (e) { latest === id && observer.onError(e); },
              function () {
                if (latest === id) {
                  hasLatest = false;
                  isStopped && observer.onCompleted();
                }
              }));
          },
          function (e) { observer.onError(e); },
          function () {
            isStopped = true;
            !hasLatest && observer.onCompleted();
          });
      return new CompositeDisposable(subscription, innerSubscription);
    }, sources);
  };

  /**
   * Returns the values from the source observable sequence until the other observable sequence produces a value.
   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
   */
  observableProto.takeUntil = function (other) {
    var source = this;
    return new AnonymousObservable(function (o) {
      isPromise(other) && (other = observableFromPromise(other));
      return new CompositeDisposable(
        source.subscribe(o),
        other.subscribe(function () { o.onCompleted(); }, function (e) { o.onError(e); }, noop)
      );
    }, source);
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
   *
   * @example
   * 1 - obs = obs1.withLatestFrom(obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
   * 2 - obs = obs1.withLatestFrom([obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  observableProto.withLatestFrom = function () {
    var len = arguments.length, args = new Array(len)
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = args.pop(), source = this;

    if (typeof source === 'undefined') {
      throw new Error('Source observable not found for withLatestFrom().');
    }
    if (typeof resultSelector !== 'function') {
      throw new Error('withLatestFrom() expects a resultSelector function.');
    }
    if (Array.isArray(args[0])) {
      args = args[0];
    }

    return new AnonymousObservable(function (observer) {
      var falseFactory = function () { return false; },
        n = args.length,
        hasValue = arrayInitialize(n, falseFactory),
        hasValueAll = false,
        values = new Array(n);

      var subscriptions = new Array(n + 1);
      for (var idx = 0; idx < n; idx++) {
        (function (i) {
          var other = args[i], sad = new SingleAssignmentDisposable();
          isPromise(other) && (other = observableFromPromise(other));
          sad.setDisposable(other.subscribe(function (x) {
            values[i] = x;
            hasValue[i] = true;
            hasValueAll = hasValue.every(identity);
          }, observer.onError.bind(observer), function () {}));
          subscriptions[i] = sad;
        }(idx));
      }

      var sad = new SingleAssignmentDisposable();
      sad.setDisposable(source.subscribe(function (x) {
        var res;
        var allValues = [x].concat(values);
        if (!hasValueAll) return;
        try {
          res = resultSelector.apply(null, allValues);
        } catch (ex) {
          observer.onError(ex);
          return;
        }
        observer.onNext(res);
      }, observer.onError.bind(observer), function () {
        observer.onCompleted();
      }));
      subscriptions[n] = sad;

      return new CompositeDisposable(subscriptions);
    }, this);
  };

  function zipArray(second, resultSelector) {
    var first = this;
    return new AnonymousObservable(function (observer) {
      var index = 0, len = second.length;
      return first.subscribe(function (left) {
        if (index < len) {
          var right = second[index++], result;
          try {
            result = resultSelector(left, right);
          } catch (e) {
            return observer.onError(e);
          }
          observer.onNext(result);
        } else {
          observer.onCompleted();
        }
      }, function (e) { observer.onError(e); }, function () { observer.onCompleted(); });
    }, first);
  }

  function falseFactory() { return false; }
  function emptyArrayFactory() { return []; }

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
   *
   * @example
   * 1 - res = obs1.zip(obs2, fn);
   * 1 - res = x1.zip([1,2,3], fn);
   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
   */
  observableProto.zip = function () {
    if (Array.isArray(arguments[0])) { return zipArray.apply(this, arguments); }
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }

    var parent = this, resultSelector = args.pop();
    args.unshift(parent);
    return new AnonymousObservable(function (observer) {
      var n = args.length,
        queues = arrayInitialize(n, emptyArrayFactory),
        isDone = arrayInitialize(n, falseFactory);

      function next(i) {
        var res, queuedValues;
        if (queues.every(function (x) { return x.length > 0; })) {
          try {
            queuedValues = queues.map(function (x) { return x.shift(); });
            res = resultSelector.apply(parent, queuedValues);
          } catch (ex) {
            observer.onError(ex);
            return;
          }
          observer.onNext(res);
        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
          observer.onCompleted();
        }
      };

      function done(i) {
        isDone[i] = true;
        if (isDone.every(function (x) { return x; })) {
          observer.onCompleted();
        }
      }

      var subscriptions = new Array(n);
      for (var idx = 0; idx < n; idx++) {
        (function (i) {
          var source = args[i], sad = new SingleAssignmentDisposable();
          isPromise(source) && (source = observableFromPromise(source));
          sad.setDisposable(source.subscribe(function (x) {
            queues[i].push(x);
            next(i);
          }, function (e) { observer.onError(e); }, function () {
            done(i);
          }));
          subscriptions[i] = sad;
        })(idx);
      }

      return new CompositeDisposable(subscriptions);
    }, parent);
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
   * @param arguments Observable sources.
   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  Observable.zip = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var first = args.shift();
    return first.zip.apply(first, args);
  };

  /**
   * Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
   * @param arguments Observable sources.
   * @returns {Observable} An observable sequence containing lists of elements at corresponding indexes.
   */
  Observable.zipArray = function () {
    var sources;
    if (Array.isArray(arguments[0])) {
      sources = arguments[0];
    } else {
      var len = arguments.length;
      sources = new Array(len);
      for(var i = 0; i < len; i++) { sources[i] = arguments[i]; }
    }
    return new AnonymousObservable(function (observer) {
      var n = sources.length,
        queues = arrayInitialize(n, function () { return []; }),
        isDone = arrayInitialize(n, function () { return false; });

      function next(i) {
        if (queues.every(function (x) { return x.length > 0; })) {
          var res = queues.map(function (x) { return x.shift(); });
          observer.onNext(res);
        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
          observer.onCompleted();
          return;
        }
      };

      function done(i) {
        isDone[i] = true;
        if (isDone.every(identity)) {
          observer.onCompleted();
          return;
        }
      }

      var subscriptions = new Array(n);
      for (var idx = 0; idx < n; idx++) {
        (function (i) {
          subscriptions[i] = new SingleAssignmentDisposable();
          subscriptions[i].setDisposable(sources[i].subscribe(function (x) {
            queues[i].push(x);
            next(i);
          }, function (e) { observer.onError(e); }, function () {
            done(i);
          }));
        })(idx);
      }

      return new CompositeDisposable(subscriptions);
    });
  };

  /**
   *  Hides the identity of an observable sequence.
   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
   */
  observableProto.asObservable = function () {
    var source = this;
    return new AnonymousObservable(function (o) { return source.subscribe(o); }, this);
  };

  /**
   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
   *
   * @example
   *  var res = xs.bufferWithCount(10);
   *  var res = xs.bufferWithCount(10, 1);
   * @param {Number} count Length of each buffer.
   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
   * @returns {Observable} An observable sequence of buffers.
   */
  observableProto.bufferWithCount = function (count, skip) {
    if (typeof skip !== 'number') {
      skip = count;
    }
    return this.windowWithCount(count, skip).selectMany(function (x) {
      return x.toArray();
    }).where(function (x) {
      return x.length > 0;
    });
  };

  /**
   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
   */
  observableProto.dematerialize = function () {
    var source = this;
    return new AnonymousObservable(function (o) {
      return source.subscribe(function (x) { return x.accept(o); }, function(e) { o.onError(e); }, function () { o.onCompleted(); });
    }, this);
  };

  /**
   *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
   *
   *  var obs = observable.distinctUntilChanged();
   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });
   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });
   *
   * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
   * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
   * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
   */
  observableProto.distinctUntilChanged = function (keySelector, comparer) {
    var source = this;
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function (o) {
      var hasCurrentKey = false, currentKey;
      return source.subscribe(function (value) {
        var key = value;
        if (keySelector) {
          try {
            key = keySelector(value);
          } catch (e) {
            o.onError(e);
            return;
          }
        }
        if (hasCurrentKey) {
          try {
            var comparerEquals = comparer(currentKey, key);
          } catch (e) {
            o.onError(e);
            return;
          }
        }
        if (!hasCurrentKey || !comparerEquals) {
          hasCurrentKey = true;
          currentKey = key;
          o.onNext(value);
        }
      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, this);
  };

  /**
   *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
   * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
   * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
   * @returns {Observable} The source sequence with the side-effecting behavior applied.
   */
  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var tapObserver = !observerOrOnNext || isFunction(observerOrOnNext) ?
        observerCreate(observerOrOnNext || noop, onError || noop, onCompleted || noop) :
        observerOrOnNext;

      return source.subscribe(function (x) {
        try {
          tapObserver.onNext(x);
        } catch (e) {
          observer.onError(e);
        }
        observer.onNext(x);
      }, function (err) {
          try {
            tapObserver.onError(err);
          } catch (e) {
            observer.onError(e);
          }
        observer.onError(err);
      }, function () {
        try {
          tapObserver.onCompleted();
        } catch (e) {
          observer.onError(e);
        }
        observer.onCompleted();
      });
    }, this);
  };

  /**
   *  Invokes an action for each element in the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param {Function} onNext Action to invoke for each element in the observable sequence.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} The source sequence with the side-effecting behavior applied.
   */
  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
    return this.tap(typeof thisArg !== 'undefined' ? function (x) { onNext.call(thisArg, x); } : onNext);
  };

  /**
   *  Invokes an action upon exceptional termination of the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} The source sequence with the side-effecting behavior applied.
   */
  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) { onError.call(thisArg, e); } : onError);
  };

  /**
   *  Invokes an action upon graceful termination of the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} The source sequence with the side-effecting behavior applied.
   */
  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () { onCompleted.call(thisArg); } : onCompleted);
  };

  /**
   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
   */
  observableProto['finally'] = observableProto.ensure = function (action) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var subscription;
      try {
        subscription = source.subscribe(observer);
      } catch (e) {
        action();
        throw e;
      }
      return disposableCreate(function () {
        try {
          subscription.dispose();
        } catch (e) {
          throw e;
        } finally {
          action();
        }
      });
    }, this);
  };

  /**
   * @deprecated use #finally or #ensure instead.
   */
  observableProto.finallyAction = function (action) {
    //deprecate('finallyAction', 'finally or ensure');
    return this.ensure(action);
  };

  /**
   *  Ignores all elements in an observable sequence leaving only the termination messages.
   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
   */
  observableProto.ignoreElements = function () {
    var source = this;
    return new AnonymousObservable(function (o) {
      return source.subscribe(noop, function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, source);
  };

  /**
   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
   */
  observableProto.materialize = function () {
    var source = this;
    return new AnonymousObservable(function (observer) {
      return source.subscribe(function (value) {
        observer.onNext(notificationCreateOnNext(value));
      }, function (e) {
        observer.onNext(notificationCreateOnError(e));
        observer.onCompleted();
      }, function () {
        observer.onNext(notificationCreateOnCompleted());
        observer.onCompleted();
      });
    }, source);
  };

  /**
   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
   */
  observableProto.repeat = function (repeatCount) {
    return enumerableRepeat(this, repeatCount).concat();
  };

  /**
   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
   *
   * @example
   *  var res = retried = retry.repeat();
   *  var res = retried = retry.repeat(2);
   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
   */
  observableProto.retry = function (retryCount) {
    return enumerableRepeat(this, retryCount).catchError();
  };

  /**
   *  Repeats the source observable sequence upon error each time the notifier emits or until it successfully terminates. 
   *  if the notifier completes, the observable sequence completes.
   *
   * @example
   *  var timer = Observable.timer(500);
   *  var source = observable.retryWhen(timer);
   * @param {Observable} [notifier] An observable that triggers the retries or completes the observable with onNext or onCompleted respectively.
   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
   */
  observableProto.retryWhen = function (notifier) {
    return enumerableRepeat(this).catchErrorWhen(notifier);
  };
  /**
   *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
   *  For aggregation behavior with no intermediate results, see Observable.aggregate.
   * @example
   *  var res = source.scan(function (acc, x) { return acc + x; });
   *  var res = source.scan(0, function (acc, x) { return acc + x; });
   * @param {Mixed} [seed] The initial accumulator value.
   * @param {Function} accumulator An accumulator function to be invoked on each element.
   * @returns {Observable} An observable sequence containing the accumulated values.
   */
  observableProto.scan = function () {
    var hasSeed = false, seed, accumulator, source = this;
    if (arguments.length === 2) {
      hasSeed = true;
      seed = arguments[0];
      accumulator = arguments[1];
    } else {
      accumulator = arguments[0];
    }
    return new AnonymousObservable(function (o) {
      var hasAccumulation, accumulation, hasValue;
      return source.subscribe (
        function (x) {
          !hasValue && (hasValue = true);
          try {
            if (hasAccumulation) {
              accumulation = accumulator(accumulation, x);
            } else {
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            }
          } catch (e) {
            o.onError(e);
            return;
          }

          o.onNext(accumulation);
        },
        function (e) { o.onError(e); },
        function () {
          !hasValue && hasSeed && o.onNext(seed);
          o.onCompleted();
        }
      );
    }, source);
  };

  /**
   *  Bypasses a specified number of elements at the end of an observable sequence.
   * @description
   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
   * @param count Number of elements to bypass at the end of the source sequence.
   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
   */
  observableProto.skipLast = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var q = [];
      return source.subscribe(function (x) {
        q.push(x);
        q.length > count && o.onNext(q.shift());
      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, source);
  };

  /**
   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
   *  @example
   *  var res = source.startWith(1, 2, 3);
   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
   * @param {Arguments} args The specified values to prepend to the observable sequence
   * @returns {Observable} The source sequence prepended with the specified values.
   */
  observableProto.startWith = function () {
    var values, scheduler, start = 0;
    if (!!arguments.length && isScheduler(arguments[0])) {
      scheduler = arguments[0];
      start = 1;
    } else {
      scheduler = immediateScheduler;
    }
    for(var args = [], i = start, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
    return enumerableOf([observableFromArray(args, scheduler), this]).concat();
  };

  /**
   *  Returns a specified number of contiguous elements from the end of an observable sequence.
   * @description
   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
   * @param {Number} count Number of elements to take from the end of the source sequence.
   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
   */
  observableProto.takeLast = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var q = [];
      return source.subscribe(function (x) {
        q.push(x);
        q.length > count && q.shift();
      }, function (e) { o.onError(e); }, function () {
        while (q.length > 0) { o.onNext(q.shift()); }
        o.onCompleted();
      });
    }, source);
  };

  /**
   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
   *
   * @description
   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
   *  source sequence, this buffer is produced on the result sequence.
   * @param {Number} count Number of elements to take from the end of the source sequence.
   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
   */
  observableProto.takeLastBuffer = function (count) {
    var source = this;
    return new AnonymousObservable(function (o) {
      var q = [];
      return source.subscribe(function (x) {
        q.push(x);
        q.length > count && q.shift();
      }, function (e) { o.onError(e); }, function () {
        o.onNext(q);
        o.onCompleted();
      });
    }, source);
  };

  /**
   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
   *
   *  var res = xs.windowWithCount(10);
   *  var res = xs.windowWithCount(10, 1);
   * @param {Number} count Length of each window.
   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
   * @returns {Observable} An observable sequence of windows.
   */
  observableProto.windowWithCount = function (count, skip) {
    var source = this;
    +count || (count = 0);
    Math.abs(count) === Infinity && (count = 0);
    if (count <= 0) { throw new ArgumentOutOfRangeError(); }
    skip == null && (skip = count);
    +skip || (skip = 0);
    Math.abs(skip) === Infinity && (skip = 0);

    if (skip <= 0) { throw new ArgumentOutOfRangeError(); }
    return new AnonymousObservable(function (observer) {
      var m = new SingleAssignmentDisposable(),
        refCountDisposable = new RefCountDisposable(m),
        n = 0,
        q = [];

      function createWindow () {
        var s = new Subject();
        q.push(s);
        observer.onNext(addRef(s, refCountDisposable));
      }

      createWindow();

      m.setDisposable(source.subscribe(
        function (x) {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
          var c = n - count + 1;
          c >= 0 && c % skip === 0 && q.shift().onCompleted();
          ++n % skip === 0 && createWindow();
        },
        function (e) {
          while (q.length > 0) { q.shift().onError(e); }
          observer.onError(e);
        },
        function () {
          while (q.length > 0) { q.shift().onCompleted(); }
          observer.onCompleted();
        }
      ));
      return refCountDisposable;
    }, source);
  };

  function concatMap(source, selector, thisArg) {
    var selectorFunc = bindCallback(selector, thisArg, 3);
    return source.map(function (x, i) {
      var result = selectorFunc(x, i, source);
      isPromise(result) && (result = observableFromPromise(result));
      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
      return result;
    }).concatAll();
  }

  /**
   *  One of the Following:
   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
   *
   * @example
   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
   *  Or:
   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
   *
   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
   *  Or:
   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
   *
   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
   * source sequence onto which could be either an observable or Promise.
   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
   */
  observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector, thisArg) {
    if (isFunction(selector) && isFunction(resultSelector)) {
      return this.concatMap(function (x, i) {
        var selectorResult = selector(x, i);
        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));

        return selectorResult.map(function (y, i2) {
          return resultSelector(x, y, i, i2);
        });
      });
    }
    return isFunction(selector) ?
      concatMap(this, selector, thisArg) :
      concatMap(this, function () { return selector; });
  };

  /**
   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
   */
  observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
    var source = this,
        onNextFunc = bindCallback(onNext, thisArg, 2),
        onErrorFunc = bindCallback(onError, thisArg, 1),
        onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
    return new AnonymousObservable(function (observer) {
      var index = 0;
      return source.subscribe(
        function (x) {
          var result;
          try {
            result = onNextFunc(x, index++);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
        },
        function (err) {
          var result;
          try {
            result = onErrorFunc(err);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        },
        function () {
          var result;
          try {
            result = onCompletedFunc();
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        });
    }, this).concatAll();
  };

    /**
     *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
     *
     *  var res = obs = xs.defaultIfEmpty();
     *  2 - obs = xs.defaultIfEmpty(false);
     *
     * @memberOf Observable#
     * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
     * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
     */
    observableProto.defaultIfEmpty = function (defaultValue) {
      var source = this;
      defaultValue === undefined && (defaultValue = null);
      return new AnonymousObservable(function (observer) {
        var found = false;
        return source.subscribe(function (x) {
          found = true;
          observer.onNext(x);
        },
        function (e) { observer.onError(e); }, 
        function () {
          !found && observer.onNext(defaultValue);
          observer.onCompleted();
        });
      }, source);
    };

  // Swap out for Array.findIndex
  function arrayIndexOfComparer(array, item, comparer) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (comparer(array[i], item)) { return i; }
    }
    return -1;
  }

  function HashSet(comparer) {
    this.comparer = comparer;
    this.set = [];
  }
  HashSet.prototype.push = function(value) {
    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
    retValue && this.set.push(value);
    return retValue;
  };

  /**
   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
   *
   * @example
   *  var res = obs = xs.distinct();
   *  2 - obs = xs.distinct(function (x) { return x.id; });
   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
   * @param {Function} [comparer]  Used to compare items in the collection.
   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
   */
  observableProto.distinct = function (keySelector, comparer) {
    var source = this;
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function (o) {
      var hashSet = new HashSet(comparer);
      return source.subscribe(function (x) {
        var key = x;

        if (keySelector) {
          try {
            key = keySelector(x);
          } catch (e) {
            o.onError(e);
            return;
          }
        }
        hashSet.push(key) && o.onNext(x);
      },
      function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, this);
  };

  /**
   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
   *
   * @example
   *  var res = observable.groupBy(function (x) { return x.id; });
   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
   * @param {Function} keySelector A function to extract the key for each element.
   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
   * @param {Function} [comparer] Used to determine whether the objects are equal.
   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
   */
  observableProto.groupBy = function (keySelector, elementSelector, comparer) {
    return this.groupByUntil(keySelector, elementSelector, observableNever, comparer);
  };

    /**
     *  Groups the elements of an observable sequence according to a specified key selector function.
     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
     *
     * @example
     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
     * @param {Function} keySelector A function to extract the key for each element.
     * @param {Function} durationSelector A function to signal the expiration of a group.
     * @param {Function} [comparer] Used to compare objects. When not specified, the default comparer is used.
     * @returns {Observable}
     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
     *
     */
    observableProto.groupByUntil = function (keySelector, elementSelector, durationSelector, comparer) {
      var source = this;
      elementSelector || (elementSelector = identity);
      comparer || (comparer = defaultComparer);
      return new AnonymousObservable(function (observer) {
        function handleError(e) { return function (item) { item.onError(e); }; }
        var map = new Dictionary(0, comparer),
          groupDisposable = new CompositeDisposable(),
          refCountDisposable = new RefCountDisposable(groupDisposable);

        groupDisposable.add(source.subscribe(function (x) {
          var key;
          try {
            key = keySelector(x);
          } catch (e) {
            map.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }

          var fireNewMapEntry = false,
            writer = map.tryGetValue(key);
          if (!writer) {
            writer = new Subject();
            map.set(key, writer);
            fireNewMapEntry = true;
          }

          if (fireNewMapEntry) {
            var group = new GroupedObservable(key, writer, refCountDisposable),
              durationGroup = new GroupedObservable(key, writer);
            try {
              duration = durationSelector(durationGroup);
            } catch (e) {
              map.getValues().forEach(handleError(e));
              observer.onError(e);
              return;
            }

            observer.onNext(group);

            var md = new SingleAssignmentDisposable();
            groupDisposable.add(md);

            var expire = function () {
              map.remove(key) && writer.onCompleted();
              groupDisposable.remove(md);
            };

            md.setDisposable(duration.take(1).subscribe(
              noop,
              function (exn) {
                map.getValues().forEach(handleError(exn));
                observer.onError(exn);
              },
              expire)
            );
          }

          var element;
          try {
            element = elementSelector(x);
          } catch (e) {
            map.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }

          writer.onNext(element);
      }, function (ex) {
        map.getValues().forEach(handleError(ex));
        observer.onError(ex);
      }, function () {
        map.getValues().forEach(function (item) { item.onCompleted(); });
        observer.onCompleted();
      }));

      return refCountDisposable;
    }, source);
  };

  var MapObservable = (function (__super__) {
    inherits(MapObservable, __super__);

    function MapObservable(source, selector, thisArg) {
      this.source = source;
      this.selector = bindCallback(selector, thisArg, 3);
      __super__.call(this);
    }

    MapObservable.prototype.internalMap = function (selector, thisArg) {
      var self = this;
      return new MapObservable(this.source, function (x, i, o) { return selector.call(this, self.selector(x, i, o), i, o); }, thisArg)
    };

    MapObservable.prototype.subscribeCore = function (observer) {
      return this.source.subscribe(new MapObserver(observer, this.selector, this));
    };

    return MapObservable;

  }(ObservableBase));

  function MapObserver(observer, selector, source) {
    this.observer = observer;
    this.selector = selector;
    this.source = source;
    this.i = 0;
    this.isStopped = false;
  }

  MapObserver.prototype.onNext = function(x) {
    if (this.isStopped) { return; }
    var result = tryCatch(this.selector).call(this, x, this.i++, this.source);
    if (result === errorObj) {
      return this.observer.onError(result.e);
    }
    this.observer.onNext(result);
  };
  MapObserver.prototype.onError = function (e) {
    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
  };
  MapObserver.prototype.onCompleted = function () {
    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
  };
  MapObserver.prototype.dispose = function() { this.isStopped = true; };
  MapObserver.prototype.fail = function (e) {
    if (!this.isStopped) {
      this.isStopped = true;
      this.observer.onError(e);
      return true;
    }

    return false;
  };

  /**
  * Projects each element of an observable sequence into a new form by incorporating the element's index.
  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
  */
  observableProto.map = observableProto.select = function (selector, thisArg) {
    var selectorFn = typeof selector === 'function' ? selector : function () { return selector; };
    return this instanceof MapObservable ?
      this.internalMap(selectorFn, thisArg) :
      new MapObservable(this, selectorFn, thisArg);
  };

  /**
   * Retrieves the value of a specified nested property from all elements in
   * the Observable sequence.
   * @param {Arguments} arguments The nested properties to pluck.
   * @returns {Observable} Returns a new Observable sequence of property values.
   */
  observableProto.pluck = function () {
    var args = arguments, len = arguments.length;
    if (len === 0) { throw new Error('List of properties cannot be empty.'); }
    return this.map(function (x) {
      var currentProp = x;
      for (var i = 0; i < len; i++) {
        var p = currentProp[args[i]];
        if (typeof p !== 'undefined') {
          currentProp = p;
        } else {
          return undefined;
        }
      }
      return currentProp;
    });
  };

  function flatMap(source, selector, thisArg) {
    var selectorFunc = bindCallback(selector, thisArg, 3);
    return source.map(function (x, i) {
      var result = selectorFunc(x, i, source);
      isPromise(result) && (result = observableFromPromise(result));
      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
      return result;
    }).mergeAll();
  }

  /**
   *  One of the Following:
   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
   *
   * @example
   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
   *  Or:
   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
   *
   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
   *  Or:
   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
   *
   *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the source sequence onto which could be either an observable or Promise.
   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
   */
  observableProto.selectMany = observableProto.flatMap = function (selector, resultSelector, thisArg) {
    if (isFunction(selector) && isFunction(resultSelector)) {
      return this.flatMap(function (x, i) {
        var selectorResult = selector(x, i);
        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));

        return selectorResult.map(function (y, i2) {
          return resultSelector(x, y, i, i2);
        });
      }, thisArg);
    }
    return isFunction(selector) ?
      flatMap(this, selector, thisArg) :
      flatMap(this, function () { return selector; });
  };

  /**
   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
   */
  observableProto.flatMapObserver = observableProto.selectManyObserver = function (onNext, onError, onCompleted, thisArg) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var index = 0;

      return source.subscribe(
        function (x) {
          var result;
          try {
            result = onNext.call(thisArg, x, index++);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
        },
        function (err) {
          var result;
          try {
            result = onError.call(thisArg, err);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        },
        function () {
          var result;
          try {
            result = onCompleted.call(thisArg);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        });
    }, source).mergeAll();
  };

  /**
   *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then
   *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
   * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences
   *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.
   */
  observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function (selector, thisArg) {
    return this.select(selector, thisArg).switchLatest();
  };

  /**
   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
   * @param {Number} count The number of elements to skip before returning the remaining elements.
   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
   */
  observableProto.skip = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var remaining = count;
      return source.subscribe(function (x) {
        if (remaining <= 0) {
          o.onNext(x);
        } else {
          remaining--;
        }
      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, source);
  };

  /**
   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
   *  The element's index is used in the logic of the predicate function.
   *
   *  var res = source.skipWhile(function (value) { return value < 10; });
   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
   */
  observableProto.skipWhile = function (predicate, thisArg) {
    var source = this,
        callback = bindCallback(predicate, thisArg, 3);
    return new AnonymousObservable(function (o) {
      var i = 0, running = false;
      return source.subscribe(function (x) {
        if (!running) {
          try {
            running = !callback(x, i++, source);
          } catch (e) {
            o.onError(e);
            return;
          }
        }
        running && o.onNext(x);
      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, source);
  };

  /**
   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
   *
   *  var res = source.take(5);
   *  var res = source.take(0, Rx.Scheduler.timeout);
   * @param {Number} count The number of elements to return.
   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
   */
  observableProto.take = function (count, scheduler) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    if (count === 0) { return observableEmpty(scheduler); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var remaining = count;
      return source.subscribe(function (x) {
        if (remaining-- > 0) {
          o.onNext(x);
          remaining === 0 && o.onCompleted();
        }
      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, source);
  };

  /**
   *  Returns elements from an observable sequence as long as a specified condition is true.
   *  The element's index is used in the logic of the predicate function.
   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
   */
  observableProto.takeWhile = function (predicate, thisArg) {
    var source = this,
        callback = bindCallback(predicate, thisArg, 3);
    return new AnonymousObservable(function (o) {
      var i = 0, running = true;
      return source.subscribe(function (x) {
        if (running) {
          try {
            running = callback(x, i++, source);
          } catch (e) {
            o.onError(e);
            return;
          }
          if (running) {
            o.onNext(x);
          } else {
            o.onCompleted();
          }
        }
      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
    }, source);
  };

  var FilterObservable = (function (__super__) {
    inherits(FilterObservable, __super__);

    function FilterObservable(source, predicate, thisArg) {
      this.source = source;
      this.predicate = bindCallback(predicate, thisArg, 3);
      __super__.call(this);
    }

    FilterObservable.prototype.subscribeCore = function (observer) {
      return this.source.subscribe(new FilterObserver(observer, this.predicate, this));
    };

    FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
      var self = this;
      return new FilterObservable(this.source, function(x, i, o) { return self.predicate(x, i, o) && predicate.call(this, x, i, o); }, thisArg);
    };

    return FilterObservable;

  }(ObservableBase));

  function FilterObserver(observer, predicate, source) {
    this.observer = observer;
    this.predicate = predicate;
    this.source = source;
    this.i = 0;
    this.isStopped = false;
  }

  FilterObserver.prototype.onNext = function(x) {
    if (this.isStopped) { return; }
    var shouldYield = tryCatch(this.predicate).call(this, x, this.i++, this.source);
    if (shouldYield === errorObj) {
      return this.observer.onError(shouldYield.e);
    }
    shouldYield && this.observer.onNext(x);
  };
  FilterObserver.prototype.onError = function (e) {
    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
  };
  FilterObserver.prototype.onCompleted = function () {
    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
  };
  FilterObserver.prototype.dispose = function() { this.isStopped = true; };
  FilterObserver.prototype.fail = function (e) {
    if (!this.isStopped) {
      this.isStopped = true;
      this.observer.onError(e);
      return true;
    }
    return false;
  };

  /**
  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
  */
  observableProto.filter = observableProto.where = function (predicate, thisArg) {
    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) :
      new FilterObservable(this, predicate, thisArg);
  };

  function extremaBy(source, keySelector, comparer) {
    return new AnonymousObservable(function (o) {
      var hasValue = false, lastKey = null, list = [];
      return source.subscribe(function (x) {
        var comparison, key;
        try {
          key = keySelector(x);
        } catch (ex) {
          o.onError(ex);
          return;
        }
        comparison = 0;
        if (!hasValue) {
          hasValue = true;
          lastKey = key;
        } else {
          try {
            comparison = comparer(key, lastKey);
          } catch (ex1) {
            o.onError(ex1);
            return;
          }
        }
        if (comparison > 0) {
          lastKey = key;
          list = [];
        }
        if (comparison >= 0) { list.push(x); }
      }, function (e) { o.onError(e); }, function () {
        o.onNext(list);
        o.onCompleted();
      });
    }, source);
  }

  function firstOnly(x) {
    if (x.length === 0) { throw new EmptyError(); }
    return x[0];
  }

  /**
   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
   * For aggregation behavior with incremental intermediate results, see Observable.scan.
   * @deprecated Use #reduce instead
   * @param {Mixed} [seed] The initial accumulator value.
   * @param {Function} accumulator An accumulator function to be invoked on each element.
   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
   */
  observableProto.aggregate = function () {
    var hasSeed = false, accumulator, seed, source = this;
    if (arguments.length === 2) {
      hasSeed = true;
      seed = arguments[0];
      accumulator = arguments[1];
    } else {
      accumulator = arguments[0];
    }
    return new AnonymousObservable(function (o) {
      var hasAccumulation, accumulation, hasValue;
      return source.subscribe (
        function (x) {
          !hasValue && (hasValue = true);
          try {
            if (hasAccumulation) {
              accumulation = accumulator(accumulation, x);
            } else {
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            }
          } catch (e) {
            return o.onError(e);
          }
        },
        function (e) { o.onError(e); },
        function () {
          hasValue && o.onNext(accumulation);
          !hasValue && hasSeed && o.onNext(seed);
          !hasValue && !hasSeed && o.onError(new EmptyError());
          o.onCompleted();
        }
      );
    }, source);
  };

  /**
   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
   * For aggregation behavior with incremental intermediate results, see Observable.scan.
   * @param {Function} accumulator An accumulator function to be invoked on each element.
   * @param {Any} [seed] The initial accumulator value.
   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
   */
  observableProto.reduce = function (accumulator) {
    var hasSeed = false, seed, source = this;
    if (arguments.length === 2) {
      hasSeed = true;
      seed = arguments[1];
    }
    return new AnonymousObservable(function (o) {
      var hasAccumulation, accumulation, hasValue;
      return source.subscribe (
        function (x) {
          !hasValue && (hasValue = true);
          try {
            if (hasAccumulation) {
              accumulation = accumulator(accumulation, x);
            } else {
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            }
          } catch (e) {
            return o.onError(e);
          }
        },
        function (e) { o.onError(e); },
        function () {
          hasValue && o.onNext(accumulation);
          !hasValue && hasSeed && o.onNext(seed);
          !hasValue && !hasSeed && o.onError(new EmptyError());
          o.onCompleted();
        }
      );
    }, source);
  };

  /**
   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
   * @param {Function} [predicate] A function to test each element for a condition.
   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
   */
  observableProto.some = function (predicate, thisArg) {
    var source = this;
    return predicate ?
      source.filter(predicate, thisArg).some() :
      new AnonymousObservable(function (observer) {
        return source.subscribe(function () {
          observer.onNext(true);
          observer.onCompleted();
        }, function (e) { observer.onError(e); }, function () {
          observer.onNext(false);
          observer.onCompleted();
        });
      }, source);
  };

  /** @deprecated use #some instead */
  observableProto.any = function () {
    //deprecate('any', 'some');
    return this.some.apply(this, arguments);
  };

  /**
   * Determines whether an observable sequence is empty.
   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
   */
  observableProto.isEmpty = function () {
    return this.any().map(not);
  };

  /**
   * Determines whether all elements of an observable sequence satisfy a condition.
   * @param {Function} [predicate] A function to test each element for a condition.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
   */
  observableProto.every = function (predicate, thisArg) {
    return this.filter(function (v) { return !predicate(v); }, thisArg).some().map(not);
  };

  /** @deprecated use #every instead */
  observableProto.all = function () {
    //deprecate('all', 'every');
    return this.every.apply(this, arguments);
  };

  /**
   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
   * @param searchElement The value to locate in the source sequence.
   * @param {Number} [fromIndex] An equality comparer to compare elements.
   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
   */
  observableProto.includes = function (searchElement, fromIndex) {
    var source = this;
    function comparer(a, b) {
      return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
    }
    return new AnonymousObservable(function (o) {
      var i = 0, n = +fromIndex || 0;
      Math.abs(n) === Infinity && (n = 0);
      if (n < 0) {
        o.onNext(false);
        o.onCompleted();
        return disposableEmpty;
      }
      return source.subscribe(
        function (x) {
          if (i++ >= n && comparer(x, searchElement)) {
            o.onNext(true);
            o.onCompleted();
          }
        },
        function (e) { o.onError(e); },
        function () {
          o.onNext(false);
          o.onCompleted();
        });
    }, this);
  };

  /**
   * @deprecated use #includes instead.
   */
  observableProto.contains = function (searchElement, fromIndex) {
    //deprecate('contains', 'includes');
    observableProto.includes(searchElement, fromIndex);
  };

  /**
   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
   * @example
   * res = source.count();
   * res = source.count(function (x) { return x > 3; });
   * @param {Function} [predicate]A function to test each element for a condition.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
   */
  observableProto.count = function (predicate, thisArg) {
    return predicate ?
      this.filter(predicate, thisArg).count() :
      this.reduce(function (count) { return count + 1; }, 0);
  };

  /**
   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
   * @param {Any} searchElement Element to locate in the array.
   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
   */
  observableProto.indexOf = function(searchElement, fromIndex) {
    var source = this;
    return new AnonymousObservable(function (o) {
      var i = 0, n = +fromIndex || 0;
      Math.abs(n) === Infinity && (n = 0);
      if (n < 0) {
        o.onNext(-1);
        o.onCompleted();
        return disposableEmpty;
      }
      return source.subscribe(
        function (x) {
          if (i >= n && x === searchElement) {
            o.onNext(i);
            o.onCompleted();
          }
          i++;
        },
        function (e) { o.onError(e); },
        function () {
          o.onNext(-1);
          o.onCompleted();
        });
    }, source);
  };

  /**
   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
   * @param {Function} [selector] A transform function to apply to each element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
   */
  observableProto.sum = function (keySelector, thisArg) {
    return keySelector && isFunction(keySelector) ?
      this.map(keySelector, thisArg).sum() :
      this.reduce(function (prev, curr) { return prev + curr; }, 0);
  };

  /**
   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
   * @example
   * var res = source.minBy(function (x) { return x.value; });
   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
   * @param {Function} keySelector Key selector function.
   * @param {Function} [comparer] Comparer used to compare key values.
   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
   */
  observableProto.minBy = function (keySelector, comparer) {
    comparer || (comparer = defaultSubComparer);
    return extremaBy(this, keySelector, function (x, y) { return comparer(x, y) * -1; });
  };

  /**
   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
   * @example
   * var res = source.min();
   * var res = source.min(function (x, y) { return x.value - y.value; });
   * @param {Function} [comparer] Comparer used to compare elements.
   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
   */
  observableProto.min = function (comparer) {
    return this.minBy(identity, comparer).map(function (x) { return firstOnly(x); });
  };

  /**
   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
   * @example
   * var res = source.maxBy(function (x) { return x.value; });
   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
   * @param {Function} keySelector Key selector function.
   * @param {Function} [comparer]  Comparer used to compare key values.
   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
   */
  observableProto.maxBy = function (keySelector, comparer) {
    comparer || (comparer = defaultSubComparer);
    return extremaBy(this, keySelector, comparer);
  };

  /**
   * Returns the maximum value in an observable sequence according to the specified comparer.
   * @example
   * var res = source.max();
   * var res = source.max(function (x, y) { return x.value - y.value; });
   * @param {Function} [comparer] Comparer used to compare elements.
   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
   */
  observableProto.max = function (comparer) {
    return this.maxBy(identity, comparer).map(function (x) { return firstOnly(x); });
  };

  /**
   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
   * @param {Function} [selector] A transform function to apply to each element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
   */
  observableProto.average = function (keySelector, thisArg) {
    return keySelector && isFunction(keySelector) ?
      this.map(keySelector, thisArg).average() :
      this.reduce(function (prev, cur) {
        return {
          sum: prev.sum + cur,
          count: prev.count + 1
        };
      }, {sum: 0, count: 0 }).map(function (s) {
        if (s.count === 0) { throw new EmptyError(); }
        return s.sum / s.count;
      });
  };

  /**
   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
   *
   * @example
   * var res = res = source.sequenceEqual([1,2,3]);
   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
   * @param {Observable} second Second observable sequence or array to compare.
   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
   */
  observableProto.sequenceEqual = function (second, comparer) {
    var first = this;
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function (o) {
      var donel = false, doner = false, ql = [], qr = [];
      var subscription1 = first.subscribe(function (x) {
        var equal, v;
        if (qr.length > 0) {
          v = qr.shift();
          try {
            equal = comparer(v, x);
          } catch (e) {
            o.onError(e);
            return;
          }
          if (!equal) {
            o.onNext(false);
            o.onCompleted();
          }
        } else if (doner) {
          o.onNext(false);
          o.onCompleted();
        } else {
          ql.push(x);
        }
      }, function(e) { o.onError(e); }, function () {
        donel = true;
        if (ql.length === 0) {
          if (qr.length > 0) {
            o.onNext(false);
            o.onCompleted();
          } else if (doner) {
            o.onNext(true);
            o.onCompleted();
          }
        }
      });

      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
      isPromise(second) && (second = observableFromPromise(second));
      var subscription2 = second.subscribe(function (x) {
        var equal;
        if (ql.length > 0) {
          var v = ql.shift();
          try {
            equal = comparer(v, x);
          } catch (exception) {
            o.onError(exception);
            return;
          }
          if (!equal) {
            o.onNext(false);
            o.onCompleted();
          }
        } else if (donel) {
          o.onNext(false);
          o.onCompleted();
        } else {
          qr.push(x);
        }
      }, function(e) { o.onError(e); }, function () {
        doner = true;
        if (qr.length === 0) {
          if (ql.length > 0) {
            o.onNext(false);
            o.onCompleted();
          } else if (donel) {
            o.onNext(true);
            o.onCompleted();
          }
        }
      });
      return new CompositeDisposable(subscription1, subscription2);
    }, first);
  };

  function elementAtOrDefault(source, index, hasDefault, defaultValue) {
    if (index < 0) { throw new ArgumentOutOfRangeError(); }
    return new AnonymousObservable(function (o) {
      var i = index;
      return source.subscribe(function (x) {
        if (i-- === 0) {
          o.onNext(x);
          o.onCompleted();
        }
      }, function (e) { o.onError(e); }, function () {
        if (!hasDefault) {
          o.onError(new ArgumentOutOfRangeError());
        } else {
          o.onNext(defaultValue);
          o.onCompleted();
        }
      });
    }, source);
  }

  /**
   * Returns the element at a specified index in a sequence.
   * @example
   * var res = source.elementAt(5);
   * @param {Number} index The zero-based index of the element to retrieve.
   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
   */
  observableProto.elementAt =  function (index) {
    return elementAtOrDefault(this, index, false);
  };

  /**
   * Returns the element at a specified index in a sequence or a default value if the index is out of range.
   * @example
   * var res = source.elementAtOrDefault(5);
   * var res = source.elementAtOrDefault(5, 0);
   * @param {Number} index The zero-based index of the element to retrieve.
   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.
   */
  observableProto.elementAtOrDefault = function (index, defaultValue) {
    return elementAtOrDefault(this, index, true, defaultValue);
  };

  function singleOrDefaultAsync(source, hasDefault, defaultValue) {
    return new AnonymousObservable(function (o) {
      var value = defaultValue, seenValue = false;
      return source.subscribe(function (x) {
        if (seenValue) {
          o.onError(new Error('Sequence contains more than one element'));
        } else {
          value = x;
          seenValue = true;
        }
      }, function (e) { o.onError(e); }, function () {
        if (!seenValue && !hasDefault) {
          o.onError(new EmptyError());
        } else {
          o.onNext(value);
          o.onCompleted();
        }
      });
    }, source);
  }

  /**
   * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
   */
  observableProto.single = function (predicate, thisArg) {
    return predicate && isFunction(predicate) ?
      this.where(predicate, thisArg).single() :
      singleOrDefaultAsync(this, false);
  };

  /**
   * Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
   * @example
   * var res = res = source.singleOrDefault();
   * var res = res = source.singleOrDefault(function (x) { return x === 42; });
   * res = source.singleOrDefault(function (x) { return x === 42; }, 0);
   * res = source.singleOrDefault(null, 0);
   * @memberOf Observable#
   * @param {Function} predicate A predicate function to evaluate for elements in the source sequence.
   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
   */
  observableProto.singleOrDefault = function (predicate, defaultValue, thisArg) {
    return predicate && isFunction(predicate) ?
      this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) :
      singleOrDefaultAsync(this, true, defaultValue);
  };

  function firstOrDefaultAsync(source, hasDefault, defaultValue) {
    return new AnonymousObservable(function (o) {
      return source.subscribe(function (x) {
        o.onNext(x);
        o.onCompleted();
      }, function (e) { o.onError(e); }, function () {
        if (!hasDefault) {
          o.onError(new EmptyError());
        } else {
          o.onNext(defaultValue);
          o.onCompleted();
        }
      });
    }, source);
  }

  /**
   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
   * @example
   * var res = res = source.first();
   * var res = res = source.first(function (x) { return x > 3; });
   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
   */
  observableProto.first = function (predicate, thisArg) {
    return predicate ?
      this.where(predicate, thisArg).first() :
      firstOrDefaultAsync(this, false);
  };

  /**
   * Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
   * @param {Any} [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
   */
  observableProto.firstOrDefault = function (predicate, defaultValue, thisArg) {
    return predicate ?
      this.where(predicate).firstOrDefault(null, defaultValue) :
      firstOrDefaultAsync(this, true, defaultValue);
  };

  function lastOrDefaultAsync(source, hasDefault, defaultValue) {
    return new AnonymousObservable(function (o) {
      var value = defaultValue, seenValue = false;
      return source.subscribe(function (x) {
        value = x;
        seenValue = true;
      }, function (e) { o.onError(e); }, function () {
        if (!seenValue && !hasDefault) {
          o.onError(new EmptyError());
        } else {
          o.onNext(value);
          o.onCompleted();
        }
      });
    }, source);
  }

  /**
   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
   */
  observableProto.last = function (predicate, thisArg) {
    return predicate ?
      this.where(predicate, thisArg).last() :
      lastOrDefaultAsync(this, false);
  };

  /**
   * Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
   * @param [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
   */
  observableProto.lastOrDefault = function (predicate, defaultValue, thisArg) {
    return predicate ?
      this.where(predicate, thisArg).lastOrDefault(null, defaultValue) :
      lastOrDefaultAsync(this, true, defaultValue);
  };

  function findValue (source, predicate, thisArg, yieldIndex) {
    var callback = bindCallback(predicate, thisArg, 3);
    return new AnonymousObservable(function (o) {
      var i = 0;
      return source.subscribe(function (x) {
        var shouldRun;
        try {
          shouldRun = callback(x, i, source);
        } catch (e) {
          o.onError(e);
          return;
        }
        if (shouldRun) {
          o.onNext(yieldIndex ? i : x);
          o.onCompleted();
        } else {
          i++;
        }
      }, function (e) { o.onError(e); }, function () {
        o.onNext(yieldIndex ? -1 : undefined);
        o.onCompleted();
      });
    }, source);
  }

  /**
   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
   */
  observableProto.find = function (predicate, thisArg) {
    return findValue(this, predicate, thisArg, false);
  };

  /**
   * Searches for an element that matches the conditions defined by the specified predicate, and returns
   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
  */
  observableProto.findIndex = function (predicate, thisArg) {
    return findValue(this, predicate, thisArg, true);
  };

  /**
   * Converts the observable sequence to a Set if it exists.
   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
   */
  observableProto.toSet = function () {
    if (typeof root.Set === 'undefined') { throw new TypeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var s = new root.Set();
      return source.subscribe(
        function (x) { s.add(x); },
        function (e) { o.onError(e); },
        function () {
          o.onNext(s);
          o.onCompleted();
        });
    }, source);
  };

  /**
  * Converts the observable sequence to a Map if it exists.
  * @param {Function} keySelector A function which produces the key for the Map.
  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
  */
  observableProto.toMap = function (keySelector, elementSelector) {
    if (typeof root.Map === 'undefined') { throw new TypeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var m = new root.Map();
      return source.subscribe(
        function (x) {
          var key;
          try {
            key = keySelector(x);
          } catch (e) {
            o.onError(e);
            return;
          }

          var element = x;
          if (elementSelector) {
            try {
              element = elementSelector(x);
            } catch (e) {
              o.onError(e);
              return;
            }
          }

          m.set(key, element);
        },
        function (e) { o.onError(e); },
        function () {
          o.onNext(m);
          o.onCompleted();
        });
    }, source);
  };

  var fnString = 'function',
      throwString = 'throw',
      isObject = Rx.internals.isObject;

  function toThunk(obj, ctx) {
    if (Array.isArray(obj)) {  return objectToThunk.call(ctx, obj); }
    if (isGeneratorFunction(obj)) { return observableSpawn(obj.call(ctx)); }
    if (isGenerator(obj)) {  return observableSpawn(obj); }
    if (isObservable(obj)) { return observableToThunk(obj); }
    if (isPromise(obj)) { return promiseToThunk(obj); }
    if (typeof obj === fnString) { return obj; }
    if (isObject(obj) || Array.isArray(obj)) { return objectToThunk.call(ctx, obj); }

    return obj;
  }

  function objectToThunk(obj) {
    var ctx = this;

    return function (done) {
      var keys = Object.keys(obj),
          pending = keys.length,
          results = new obj.constructor(),
          finished;

      if (!pending) {
        timeoutScheduler.schedule(function () { done(null, results); });
        return;
      }

      for (var i = 0, len = keys.length; i < len; i++) {
        run(obj[keys[i]], keys[i]);
      }

      function run(fn, key) {
        if (finished) { return; }
        try {
          fn = toThunk(fn, ctx);

          if (typeof fn !== fnString) {
            results[key] = fn;
            return --pending || done(null, results);
          }

          fn.call(ctx, function(err, res) {
            if (finished) { return; }

            if (err) {
              finished = true;
              return done(err);
            }

            results[key] = res;
            --pending || done(null, results);
          });
        } catch (e) {
          finished = true;
          done(e);
        }
      }
    }
  }

  function observableToThunk(observable) {
    return function (fn) {
      var value, hasValue = false;
      observable.subscribe(
        function (v) {
          value = v;
          hasValue = true;
        },
        fn,
        function () {
          hasValue && fn(null, value);
        });
    }
  }

  function promiseToThunk(promise) {
    return function(fn) {
      promise.then(function(res) {
        fn(null, res);
      }, fn);
    }
  }

  function isObservable(obj) {
    return obj && typeof obj.subscribe === fnString;
  }

  function isGeneratorFunction(obj) {
    return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';
  }

  function isGenerator(obj) {
    return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;
  }

  /*
   * Spawns a generator function which allows for Promises, Observable sequences, Arrays, Objects, Generators and functions.
   * @param {Function} The spawning function.
   * @returns {Function} a function which has a done continuation.
   */
  var observableSpawn = Rx.spawn = function (fn) {
    var isGenFun = isGeneratorFunction(fn);

    return function (done) {
      var ctx = this,
        gen = fn;

      if (isGenFun) {
        for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
        var len = args.length,
          hasCallback = len && typeof args[len - 1] === fnString;

        done = hasCallback ? args.pop() : handleError;
        gen = fn.apply(this, args);
      } else {
        done = done || handleError;
      }

      next();

      function exit(err, res) {
        timeoutScheduler.schedule(done.bind(ctx, err, res));
      }

      function next(err, res) {
        var ret;

        // multiple args
        if (arguments.length > 2) {
          for(var res = [], i = 1, len = arguments.length; i < len; i++) { res.push(arguments[i]); }
        }

        if (err) {
          try {
            ret = gen[throwString](err);
          } catch (e) {
            return exit(e);
          }
        }

        if (!err) {
          try {
            ret = gen.next(res);
          } catch (e) {
            return exit(e);
          }
        }

        if (ret.done)  {
          return exit(null, ret.value);
        }

        ret.value = toThunk(ret.value, ctx);

        if (typeof ret.value === fnString) {
          var called = false;
          try {
            ret.value.call(ctx, function() {
              if (called) {
                return;
              }

              called = true;
              next.apply(ctx, arguments);
            });
          } catch (e) {
            timeoutScheduler.schedule(function () {
              if (called) {
                return;
              }

              called = true;
              next.call(ctx, e);
            });
          }
          return;
        }

        // Not supported
        next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));
      }
    }
  };

  function handleError(err) {
    if (!err) { return; }
    timeoutScheduler.schedule(function() {
      throw err;
    });
  }

  /**
   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
   *
   * @example
   * var res = Rx.Observable.start(function () { console.log('hello'); });
   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
   *
   * @param {Function} func Function to run asynchronously.
   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
   *
   * Remarks
   * * The function is called immediately, not during the subscription of the resulting sequence.
   * * Multiple subscriptions to the resulting sequence can observe the function's result.
   */
  Observable.start = function (func, context, scheduler) {
    return observableToAsync(func, context, scheduler)();
  };

  /**
   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
   * @param {Function} function Function to convert to an asynchronous function.
   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @returns {Function} Asynchronous function.
   */
  var observableToAsync = Observable.toAsync = function (func, context, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return function () {
      var args = arguments,
        subject = new AsyncSubject();

      scheduler.schedule(function () {
        var result;
        try {
          result = func.apply(context, args);
        } catch (e) {
          subject.onError(e);
          return;
        }
        subject.onNext(result);
        subject.onCompleted();
      });
      return subject.asObservable();
    };
  };

  /**
   * Converts a callback function to an observable sequence.
   *
   * @param {Function} function Function with a callback as the last parameter to convert to an Observable sequence.
   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
   * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
   */
  Observable.fromCallback = function (func, context, selector) {
    return function () {
      var len = arguments.length, args = new Array(len)
      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }

      return new AnonymousObservable(function (observer) {
        function handler() {
          var len = arguments.length, results = new Array(len);
          for(var i = 0; i < len; i++) { results[i] = arguments[i]; }

          if (selector) {
            try {
              results = selector.apply(context, results);
            } catch (e) {
              return observer.onError(e);
            }

            observer.onNext(results);
          } else {
            if (results.length <= 1) {
              observer.onNext.apply(observer, results);
            } else {
              observer.onNext(results);
            }
          }

          observer.onCompleted();
        }

        args.push(handler);
        func.apply(context, args);
      }).publishLast().refCount();
    };
  };

  /**
   * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
   * @param {Function} func The function to call
   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
   * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
   */
  Observable.fromNodeCallback = function (func, context, selector) {
    return function () {
      var len = arguments.length, args = new Array(len);
      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }

      return new AnonymousObservable(function (observer) {
        function handler(err) {
          if (err) {
            observer.onError(err);
            return;
          }

          var len = arguments.length, results = [];
          for(var i = 1; i < len; i++) { results[i - 1] = arguments[i]; }

          if (selector) {
            try {
              results = selector.apply(context, results);
            } catch (e) {
              return observer.onError(e);
            }
            observer.onNext(results);
          } else {
            if (results.length <= 1) {
              observer.onNext.apply(observer, results);
            } else {
              observer.onNext(results);
            }
          }

          observer.onCompleted();
        }

        args.push(handler);
        func.apply(context, args);
      }).publishLast().refCount();
    };
  };

  function createListener (element, name, handler) {
    if (element.addEventListener) {
      element.addEventListener(name, handler, false);
      return disposableCreate(function () {
        element.removeEventListener(name, handler, false);
      });
    }
    throw new Error('No listener found');
  }

  function createEventListener (el, eventName, handler) {
    var disposables = new CompositeDisposable();

    // Asume NodeList
    if (Object.prototype.toString.call(el) === '[object NodeList]') {
      for (var i = 0, len = el.length; i < len; i++) {
        disposables.add(createEventListener(el.item(i), eventName, handler));
      }
    } else if (el) {
      disposables.add(createListener(el, eventName, handler));
    }

    return disposables;
  }

  /**
   * Configuration option to determine whether to use native events only
   */
  Rx.config.useNativeEvents = false;

  /**
   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
   *
   * @example
   *   var source = Rx.Observable.fromEvent(element, 'mouseup');
   *
   * @param {Object} element The DOMElement or NodeList to attach a listener.
   * @param {String} eventName The event name to attach the observable sequence.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
   */
  Observable.fromEvent = function (element, eventName, selector) {
    // Node.js specific
    if (element.addListener) {
      return fromEventPattern(
        function (h) { element.addListener(eventName, h); },
        function (h) { element.removeListener(eventName, h); },
        selector);
    }

    // Use only if non-native events are allowed
    if (!Rx.config.useNativeEvents) {
      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
      if (typeof element.on === 'function' && typeof element.off === 'function') {
        return fromEventPattern(
          function (h) { element.on(eventName, h); },
          function (h) { element.off(eventName, h); },
          selector);
      }
    }
    return new AnonymousObservable(function (observer) {
      return createEventListener(
        element,
        eventName,
        function handler (e) {
          var results = e;

          if (selector) {
            try {
              results = selector(arguments);
            } catch (err) {
              return observer.onError(err);
            }
          }

          observer.onNext(results);
        });
    }).publish().refCount();
  };

  /**
   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
   * @param {Function} addHandler The function to add a handler to the emitter.
   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns {Observable} An observable sequence which wraps an event from an event emitter
   */
  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
    return new AnonymousObservable(function (observer) {
      function innerHandler (e) {
        var result = e;
        if (selector) {
          try {
            result = selector(arguments);
          } catch (err) {
            return observer.onError(err);
          }
        }
        observer.onNext(result);
      }

      var returnValue = addHandler(innerHandler);
      return disposableCreate(function () {
        if (removeHandler) {
          removeHandler(innerHandler, returnValue);
        }
      });
    }).publish().refCount();
  };

  /**
   * Invokes the asynchronous function, surfacing the result through an observable sequence.
   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
   */
  Observable.startAsync = function (functionAsync) {
    var promise;
    try {
      promise = functionAsync();
    } catch (e) {
      return observableThrow(e);
    }
    return observableFromPromise(promise);
  }

  var PausableObservable = (function (__super__) {

    inherits(PausableObservable, __super__);

    function subscribe(observer) {
      var conn = this.source.publish(),
        subscription = conn.subscribe(observer),
        connection = disposableEmpty;

      var pausable = this.pauser.distinctUntilChanged().subscribe(function (b) {
        if (b) {
          connection = conn.connect();
        } else {
          connection.dispose();
          connection = disposableEmpty;
        }
      });

      return new CompositeDisposable(subscription, connection, pausable);
    }

    function PausableObservable(source, pauser) {
      this.source = source;
      this.controller = new Subject();

      if (pauser && pauser.subscribe) {
        this.pauser = this.controller.merge(pauser);
      } else {
        this.pauser = this.controller;
      }

      __super__.call(this, subscribe, source);
    }

    PausableObservable.prototype.pause = function () {
      this.controller.onNext(false);
    };

    PausableObservable.prototype.resume = function () {
      this.controller.onNext(true);
    };

    return PausableObservable;

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausable(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.pausable = function (pauser) {
    return new PausableObservable(this, pauser);
  };

  function combineLatestSource(source, subject, resultSelector) {
    return new AnonymousObservable(function (o) {
      var hasValue = [false, false],
        hasValueAll = false,
        isDone = false,
        values = new Array(2),
        err;

      function next(x, i) {
        values[i] = x
        var res;
        hasValue[i] = true;
        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
          if (err) {
            o.onError(err);
            return;
          }

          try {
            res = resultSelector.apply(null, values);
          } catch (ex) {
            o.onError(ex);
            return;
          }
          o.onNext(res);
        }
        if (isDone && values[1]) {
          o.onCompleted();
        }
      }

      return new CompositeDisposable(
        source.subscribe(
          function (x) {
            next(x, 0);
          },
          function (e) {
            if (values[1]) {
              o.onError(e);
            } else {
              err = e;
            }
          },
          function () {
            isDone = true;
            values[1] && o.onCompleted();
          }),
        subject.subscribe(
          function (x) {
            next(x, 1);
          },
          function (e) { o.onError(e); },
          function () {
            isDone = true;
            next(true, 1);
          })
        );
    }, source);
  }

  var PausableBufferedObservable = (function (__super__) {

    inherits(PausableBufferedObservable, __super__);

    function subscribe(o) {
      var q = [], previousShouldFire;

      var subscription =
        combineLatestSource(
          this.source,
          this.pauser.distinctUntilChanged().startWith(false),
          function (data, shouldFire) {
            return { data: data, shouldFire: shouldFire };
          })
          .subscribe(
            function (results) {
              if (previousShouldFire !== undefined && results.shouldFire != previousShouldFire) {
                previousShouldFire = results.shouldFire;
                // change in shouldFire
                if (results.shouldFire) {
                  while (q.length > 0) {
                    o.onNext(q.shift());
                  }
                }
              } else {
                previousShouldFire = results.shouldFire;
                // new data
                if (results.shouldFire) {
                  o.onNext(results.data);
                } else {
                  q.push(results.data);
                }
              }
            },
            function (err) {
              // Empty buffer before sending error
              while (q.length > 0) {
                o.onNext(q.shift());
              }
              o.onError(err);
            },
            function () {
              // Empty buffer before sending completion
              while (q.length > 0) {
                o.onNext(q.shift());
              }
              o.onCompleted();
            }
          );
      return subscription;
    }

    function PausableBufferedObservable(source, pauser) {
      this.source = source;
      this.controller = new Subject();

      if (pauser && pauser.subscribe) {
        this.pauser = this.controller.merge(pauser);
      } else {
        this.pauser = this.controller;
      }

      __super__.call(this, subscribe, source);
    }

    PausableBufferedObservable.prototype.pause = function () {
      this.controller.onNext(false);
    };

    PausableBufferedObservable.prototype.resume = function () {
      this.controller.onNext(true);
    };

    return PausableBufferedObservable;

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
   * and yields the values that were buffered while paused.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.pausableBuffered = function (subject) {
    return new PausableBufferedObservable(this, subject);
  };

  var ControlledObservable = (function (__super__) {

    inherits(ControlledObservable, __super__);

    function subscribe (observer) {
      return this.source.subscribe(observer);
    }

    function ControlledObservable (source, enableQueue, scheduler) {
      __super__.call(this, subscribe, source);
      this.subject = new ControlledSubject(enableQueue, scheduler);
      this.source = source.multicast(this.subject).refCount();
    }

    ControlledObservable.prototype.request = function (numberOfItems) {
      return this.subject.request(numberOfItems == null ? -1 : numberOfItems);
    };

    return ControlledObservable;

  }(Observable));

  var ControlledSubject = (function (__super__) {

    function subscribe (observer) {
      return this.subject.subscribe(observer);
    }

    inherits(ControlledSubject, __super__);

    function ControlledSubject(enableQueue, scheduler) {
      enableQueue == null && (enableQueue = true);

      __super__.call(this, subscribe);
      this.subject = new Subject();
      this.enableQueue = enableQueue;
      this.queue = enableQueue ? [] : null;
      this.requestedCount = 0;
      this.requestedDisposable = disposableEmpty;
      this.error = null;
      this.hasFailed = false;
      this.hasCompleted = false;
      this.scheduler = scheduler || currentThreadScheduler;
    }

    addProperties(ControlledSubject.prototype, Observer, {
      onCompleted: function () {
        this.hasCompleted = true;
        if (!this.enableQueue || this.queue.length === 0) {
          this.subject.onCompleted();
        } else {
          this.queue.push(Notification.createOnCompleted());
        }
      },
      onError: function (error) {
        this.hasFailed = true;
        this.error = error;
        if (!this.enableQueue || this.queue.length === 0) {
          this.subject.onError(error);
        } else {
          this.queue.push(Notification.createOnError(error));
        }
      },
      onNext: function (value) {
        var hasRequested = false;

        if (this.requestedCount === 0) {
          this.enableQueue && this.queue.push(Notification.createOnNext(value));
        } else {
          (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
          hasRequested = true;
        }
        hasRequested && this.subject.onNext(value);
      },
      _processRequest: function (numberOfItems) {
        if (this.enableQueue) {
          while ((this.queue.length >= numberOfItems && numberOfItems > 0) ||
          (this.queue.length > 0 && this.queue[0].kind !== 'N')) {
            var first = this.queue.shift();
            first.accept(this.subject);
            if (first.kind === 'N') {
              numberOfItems--;
            } else {
              this.disposeCurrentRequest();
              this.queue = [];
            }
          }

          return { numberOfItems : numberOfItems, returnValue: this.queue.length !== 0};
        }

        return { numberOfItems: numberOfItems, returnValue: false };
      },
      request: function (number) {
        this.disposeCurrentRequest();
        var self = this;

        this.requestedDisposable = this.scheduler.scheduleWithState(number,
        function(s, i) {
          var r = self._processRequest(i), remaining = r.numberOfItems;
          if (!r.returnValue) {
            self.requestedCount = remaining;
            self.requestedDisposable = disposableCreate(function () {
              self.requestedCount = 0;
            });
          }
        });

        return this.requestedDisposable;
      },
      disposeCurrentRequest: function () {
        this.requestedDisposable.dispose();
        this.requestedDisposable = disposableEmpty;
      }
    });

    return ControlledSubject;
  }(Observable));

  /**
   * Attaches a controller to the observable sequence with the ability to queue.
   * @example
   * var source = Rx.Observable.interval(100).controlled();
   * source.request(3); // Reads 3 values
   * @param {bool} enableQueue truthy value to determine if values should be queued pending the next request
   * @param {Scheduler} scheduler determines how the requests will be scheduled
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.controlled = function (enableQueue, scheduler) {

    if (enableQueue && isScheduler(enableQueue)) {
        scheduler = enableQueue;
        enableQueue = true;
    }

    if (enableQueue == null) {  enableQueue = true; }
    return new ControlledObservable(this, enableQueue, scheduler);
  };

  var StopAndWaitObservable = (function (__super__) {

    function subscribe (observer) {
      this.subscription = this.source.subscribe(new StopAndWaitObserver(observer, this, this.subscription));

      var self = this;
      timeoutScheduler.schedule(function () { self.source.request(1); });

      return this.subscription;
    }

    inherits(StopAndWaitObservable, __super__);

    function StopAndWaitObservable (source) {
      __super__.call(this, subscribe, source);
      this.source = source;
    }

    var StopAndWaitObserver = (function (__sub__) {

      inherits(StopAndWaitObserver, __sub__);

      function StopAndWaitObserver (observer, observable, cancel) {
        __sub__.call(this);
        this.observer = observer;
        this.observable = observable;
        this.cancel = cancel;
      }

      var stopAndWaitObserverProto = StopAndWaitObserver.prototype;

      stopAndWaitObserverProto.completed = function () {
        this.observer.onCompleted();
        this.dispose();
      };

      stopAndWaitObserverProto.error = function (error) {
        this.observer.onError(error);
        this.dispose();
      }

      stopAndWaitObserverProto.next = function (value) {
        this.observer.onNext(value);

        var self = this;
        timeoutScheduler.schedule(function () {
          self.observable.source.request(1);
        });
      };

      stopAndWaitObserverProto.dispose = function () {
        this.observer = null;
        if (this.cancel) {
          this.cancel.dispose();
          this.cancel = null;
        }
        __sub__.prototype.dispose.call(this);
      };

      return StopAndWaitObserver;
    }(AbstractObserver));

    return StopAndWaitObservable;
  }(Observable));


  /**
   * Attaches a stop and wait observable to the current observable.
   * @returns {Observable} A stop and wait observable.
   */
  ControlledObservable.prototype.stopAndWait = function () {
    return new StopAndWaitObservable(this);
  };

  var WindowedObservable = (function (__super__) {

    function subscribe (observer) {
      this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));

      var self = this;
      timeoutScheduler.schedule(function () {
        self.source.request(self.windowSize);
      });

      return this.subscription;
    }

    inherits(WindowedObservable, __super__);

    function WindowedObservable(source, windowSize) {
      __super__.call(this, subscribe, source);
      this.source = source;
      this.windowSize = windowSize;
    }

    var WindowedObserver = (function (__sub__) {

      inherits(WindowedObserver, __sub__);

      function WindowedObserver(observer, observable, cancel) {
        this.observer = observer;
        this.observable = observable;
        this.cancel = cancel;
        this.received = 0;
      }

      var windowedObserverPrototype = WindowedObserver.prototype;

      windowedObserverPrototype.completed = function () {
        this.observer.onCompleted();
        this.dispose();
      };

      windowedObserverPrototype.error = function (error) {
        this.observer.onError(error);
        this.dispose();
      };

      windowedObserverPrototype.next = function (value) {
        this.observer.onNext(value);

        this.received = ++this.received % this.observable.windowSize;
        if (this.received === 0) {
          var self = this;
          timeoutScheduler.schedule(function () {
            self.observable.source.request(self.observable.windowSize);
          });
        }
      };

      windowedObserverPrototype.dispose = function () {
        this.observer = null;
        if (this.cancel) {
          this.cancel.dispose();
          this.cancel = null;
        }
        __sub__.prototype.dispose.call(this);
      };

      return WindowedObserver;
    }(AbstractObserver));

    return WindowedObservable;
  }(Observable));

  /**
   * Creates a sliding windowed observable based upon the window size.
   * @param {Number} windowSize The number of items in the window
   * @returns {Observable} A windowed observable based upon the window size.
   */
  ControlledObservable.prototype.windowed = function (windowSize) {
    return new WindowedObservable(this, windowSize);
  };

  /**
   * Pipes the existing Observable sequence into a Node.js Stream.
   * @param {Stream} dest The destination Node.js stream.
   * @returns {Stream} The destination stream.
   */
  observableProto.pipe = function (dest) {
    var source = this.pausableBuffered();

    function onDrain() {
      source.resume();
    }

    dest.addListener('drain', onDrain);

    source.subscribe(
      function (x) {
        !dest.write(String(x)) && source.pause();
      },
      function (err) {
        dest.emit('error', err);
      },
      function () {
        // Hack check because STDIO is not closable
        !dest._isStdio && dest.end();
        dest.removeListener('drain', onDrain);
      });

    source.resume();

    return dest;
  };

  /**
   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
   *
   * @example
   * 1 - res = source.multicast(observable);
   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
   *
   * @param {Function|Subject} subjectOrSubjectSelector
   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
   * Or:
   * Subject to push source elements into.
   *
   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
    var source = this;
    return typeof subjectOrSubjectSelector === 'function' ?
      new AnonymousObservable(function (observer) {
        var connectable = source.multicast(subjectOrSubjectSelector());
        return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
      }, source) :
      new ConnectableObservable(source, subjectOrSubjectSelector);
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
   * This operator is a specialization of Multicast using a regular Subject.
   *
   * @example
   * var resres = source.publish();
   * var res = source.publish(function (x) { return x; });
   *
   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publish = function (selector) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new Subject(); }, selector) :
      this.multicast(new Subject());
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence.
   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.share = function () {
    return this.publish().refCount();
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
   * This operator is a specialization of Multicast using a AsyncSubject.
   *
   * @example
   * var res = source.publishLast();
   * var res = source.publishLast(function (x) { return x; });
   *
   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publishLast = function (selector) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new AsyncSubject(); }, selector) :
      this.multicast(new AsyncSubject());
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
   * This operator is a specialization of Multicast using a BehaviorSubject.
   *
   * @example
   * var res = source.publishValue(42);
   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
   *
   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
   * @param {Mixed} initialValue Initial value received by observers upon subscription.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
    return arguments.length === 2 ?
      this.multicast(function () {
        return new BehaviorSubject(initialValue);
      }, initialValueOrSelector) :
      this.multicast(new BehaviorSubject(initialValueOrSelector));
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   * @param {Mixed} initialValue Initial value received by observers upon subscription.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.shareValue = function (initialValue) {
    return this.publishValue(initialValue).refCount();
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
   * This operator is a specialization of Multicast using a ReplaySubject.
   *
   * @example
   * var res = source.replay(null, 3);
   * var res = source.replay(null, 3, 500);
   * var res = source.replay(null, 3, 500, scheduler);
   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
   *
   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
   * @param bufferSize [Optional] Maximum element count of the replay buffer.
   * @param windowSize [Optional] Maximum time length of the replay buffer.
   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new ReplaySubject(bufferSize, windowSize, scheduler); }, selector) :
      this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   *
   * @example
   * var res = source.shareReplay(3);
   * var res = source.shareReplay(3, 500);
   * var res = source.shareReplay(3, 500, scheduler);
   *

   * @param bufferSize [Optional] Maximum element count of the replay buffer.
   * @param window [Optional] Maximum time length of the replay buffer.
   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
  };

  var InnerSubscription = function (subject, observer) {
    this.subject = subject;
    this.observer = observer;
  };

  InnerSubscription.prototype.dispose = function () {
    if (!this.subject.isDisposed && this.observer !== null) {
      var idx = this.subject.observers.indexOf(this.observer);
      this.subject.observers.splice(idx, 1);
      this.observer = null;
    }
  };

  /**
   *  Represents a value that changes over time.
   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
   */
  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
    function subscribe(observer) {
      checkDisposed(this);
      if (!this.isStopped) {
        this.observers.push(observer);
        observer.onNext(this.value);
        return new InnerSubscription(this, observer);
      }
      if (this.hasError) {
        observer.onError(this.error);
      } else {
        observer.onCompleted();
      }
      return disposableEmpty;
    }

    inherits(BehaviorSubject, __super__);

    /**
     *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.
     *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.
     */
    function BehaviorSubject(value) {
      __super__.call(this, subscribe);
      this.value = value,
      this.observers = [],
      this.isDisposed = false,
      this.isStopped = false,
      this.hasError = false;
    }

    addProperties(BehaviorSubject.prototype, Observer, {
      /**
       * Gets the current value or throws an exception.
       * Value is frozen after onCompleted is called.
       * After onError is called always throws the specified exception.
       * An exception is always thrown after dispose is called.
       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
       */
      getValue: function () {
          checkDisposed(this);
          if (this.hasError) {
              throw this.error;
          }
          return this.value;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onCompleted();
        }

        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        this.hasError = true;
        this.error = error;

        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onError(error);
        }

        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.value = value;
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onNext(value);
        }
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
        this.value = null;
        this.exception = null;
      }
    });

    return BehaviorSubject;
  }(Observable));

  /**
   * Represents an object that is both an observable sequence as well as an observer.
   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
   */
  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {

    var maxSafeInteger = Math.pow(2, 53) - 1;

    function createRemovableDisposable(subject, observer) {
      return disposableCreate(function () {
        observer.dispose();
        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
      });
    }

    function subscribe(observer) {
      var so = new ScheduledObserver(this.scheduler, observer),
        subscription = createRemovableDisposable(this, so);
      checkDisposed(this);
      this._trim(this.scheduler.now());
      this.observers.push(so);

      for (var i = 0, len = this.q.length; i < len; i++) {
        so.onNext(this.q[i].value);
      }

      if (this.hasError) {
        so.onError(this.error);
      } else if (this.isStopped) {
        so.onCompleted();
      }

      so.ensureActive();
      return subscription;
    }

    inherits(ReplaySubject, __super__);

    /**
     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
     */
    function ReplaySubject(bufferSize, windowSize, scheduler) {
      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
      this.scheduler = scheduler || currentThreadScheduler;
      this.q = [];
      this.observers = [];
      this.isStopped = false;
      this.isDisposed = false;
      this.hasError = false;
      this.error = null;
      __super__.call(this, subscribe);
    }

    addProperties(ReplaySubject.prototype, Observer.prototype, {
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () {
        return this.observers.length > 0;
      },
      _trim: function (now) {
        while (this.q.length > this.bufferSize) {
          this.q.shift();
        }
        while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
          this.q.shift();
        }
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        var now = this.scheduler.now();
        this.q.push({ interval: now, value: value });
        this._trim(now);

        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onNext(value);
          observer.ensureActive();
        }
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        this.error = error;
        this.hasError = true;
        var now = this.scheduler.now();
        this._trim(now);
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onError(error);
          observer.ensureActive();
        }
        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        var now = this.scheduler.now();
        this._trim(now);
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onCompleted();
          observer.ensureActive();
        }
        this.observers.length = 0;
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
      }
    });

    return ReplaySubject;
  }(Observable));

  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
    inherits(ConnectableObservable, __super__);

    function ConnectableObservable(source, subject) {
      var hasSubscription = false,
        subscription,
        sourceObservable = source.asObservable();

      this.connect = function () {
        if (!hasSubscription) {
          hasSubscription = true;
          subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function () {
            hasSubscription = false;
          }));
        }
        return subscription;
      };

      __super__.call(this, function (o) { return subject.subscribe(o); });
    }

    ConnectableObservable.prototype.refCount = function () {
      var connectableSubscription, count = 0, source = this;
      return new AnonymousObservable(function (observer) {
          var shouldConnect = ++count === 1,
            subscription = source.subscribe(observer);
          shouldConnect && (connectableSubscription = source.connect());
          return function () {
            subscription.dispose();
            --count === 0 && connectableSubscription.dispose();
          };
      });
    };

    return ConnectableObservable;
  }(Observable));

  var Dictionary = (function () {

    var primes = [1, 3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554393, 67108859, 134217689, 268435399, 536870909, 1073741789, 2147483647],
      noSuchkey = "no such key",
      duplicatekey = "duplicate key";

    function isPrime(candidate) {
      if ((candidate & 1) === 0) { return candidate === 2; }
      var num1 = Math.sqrt(candidate),
        num2 = 3;
      while (num2 <= num1) {
        if (candidate % num2 === 0) { return false; }
        num2 += 2;
      }
      return true;
    }

    function getPrime(min) {
      var index, num, candidate;
      for (index = 0; index < primes.length; ++index) {
        num = primes[index];
        if (num >= min) { return num; }
      }
      candidate = min | 1;
      while (candidate < primes[primes.length - 1]) {
        if (isPrime(candidate)) { return candidate; }
        candidate += 2;
      }
      return min;
    }

    function stringHashFn(str) {
      var hash = 757602046;
      if (!str.length) { return hash; }
      for (var i = 0, len = str.length; i < len; i++) {
        var character = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + character;
        hash = hash & hash;
      }
      return hash;
    }

    function numberHashFn(key) {
      var c2 = 0x27d4eb2d;
      key = (key ^ 61) ^ (key >>> 16);
      key = key + (key << 3);
      key = key ^ (key >>> 4);
      key = key * c2;
      key = key ^ (key >>> 15);
      return key;
    }

    var getHashCode = (function () {
      var uniqueIdCounter = 0;

      return function (obj) {
        if (obj == null) { throw new Error(noSuchkey); }

        // Check for built-ins before tacking on our own for any object
        if (typeof obj === 'string') { return stringHashFn(obj); }
        if (typeof obj === 'number') { return numberHashFn(obj); }
        if (typeof obj === 'boolean') { return obj === true ? 1 : 0; }
        if (obj instanceof Date) { return numberHashFn(obj.valueOf()); }
        if (obj instanceof RegExp) { return stringHashFn(obj.toString()); }
        if (typeof obj.valueOf === 'function') {
          // Hack check for valueOf
          var valueOf = obj.valueOf();
          if (typeof valueOf === 'number') { return numberHashFn(valueOf); }
          if (typeof valueOf === 'string') { return stringHashFn(valueOf); }
        }
        if (obj.hashCode) { return obj.hashCode(); }

        var id = 17 * uniqueIdCounter++;
        obj.hashCode = function () { return id; };
        return id;
      };
    }());

    function newEntry() {
      return { key: null, value: null, next: 0, hashCode: 0 };
    }

    function Dictionary(capacity, comparer) {
      if (capacity < 0) { throw new ArgumentOutOfRangeError(); }
      if (capacity > 0) { this._initialize(capacity); }

      this.comparer = comparer || defaultComparer;
      this.freeCount = 0;
      this.size = 0;
      this.freeList = -1;
    }

    var dictionaryProto = Dictionary.prototype;

    dictionaryProto._initialize = function (capacity) {
      var prime = getPrime(capacity), i;
      this.buckets = new Array(prime);
      this.entries = new Array(prime);
      for (i = 0; i < prime; i++) {
        this.buckets[i] = -1;
        this.entries[i] = newEntry();
      }
      this.freeList = -1;
    };

    dictionaryProto.add = function (key, value) {
      this._insert(key, value, true);
    };

    dictionaryProto._insert = function (key, value, add) {
      if (!this.buckets) { this._initialize(0); }
      var index3,
        num = getHashCode(key) & 2147483647,
        index1 = num % this.buckets.length;
      for (var index2 = this.buckets[index1]; index2 >= 0; index2 = this.entries[index2].next) {
        if (this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key, key)) {
          if (add) { throw new Error(duplicatekey); }
          this.entries[index2].value = value;
          return;
        }
      }
      if (this.freeCount > 0) {
        index3 = this.freeList;
        this.freeList = this.entries[index3].next;
        --this.freeCount;
      } else {
        if (this.size === this.entries.length) {
          this._resize();
          index1 = num % this.buckets.length;
        }
        index3 = this.size;
        ++this.size;
      }
      this.entries[index3].hashCode = num;
      this.entries[index3].next = this.buckets[index1];
      this.entries[index3].key = key;
      this.entries[index3].value = value;
      this.buckets[index1] = index3;
    };

    dictionaryProto._resize = function () {
      var prime = getPrime(this.size * 2),
        numArray = new Array(prime);
      for (index = 0; index < numArray.length; ++index) {  numArray[index] = -1; }
      var entryArray = new Array(prime);
      for (index = 0; index < this.size; ++index) { entryArray[index] = this.entries[index]; }
      for (var index = this.size; index < prime; ++index) { entryArray[index] = newEntry(); }
      for (var index1 = 0; index1 < this.size; ++index1) {
        var index2 = entryArray[index1].hashCode % prime;
        entryArray[index1].next = numArray[index2];
        numArray[index2] = index1;
      }
      this.buckets = numArray;
      this.entries = entryArray;
    };

    dictionaryProto.remove = function (key) {
      if (this.buckets) {
        var num = getHashCode(key) & 2147483647,
          index1 = num % this.buckets.length,
          index2 = -1;
        for (var index3 = this.buckets[index1]; index3 >= 0; index3 = this.entries[index3].next) {
          if (this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key, key)) {
            if (index2 < 0) {
              this.buckets[index1] = this.entries[index3].next;
            } else {
              this.entries[index2].next = this.entries[index3].next;
            }
            this.entries[index3].hashCode = -1;
            this.entries[index3].next = this.freeList;
            this.entries[index3].key = null;
            this.entries[index3].value = null;
            this.freeList = index3;
            ++this.freeCount;
            return true;
          } else {
            index2 = index3;
          }
        }
      }
      return false;
    };

    dictionaryProto.clear = function () {
      var index, len;
      if (this.size <= 0) { return; }
      for (index = 0, len = this.buckets.length; index < len; ++index) {
        this.buckets[index] = -1;
      }
      for (index = 0; index < this.size; ++index) {
        this.entries[index] = newEntry();
      }
      this.freeList = -1;
      this.size = 0;
    };

    dictionaryProto._findEntry = function (key) {
      if (this.buckets) {
        var num = getHashCode(key) & 2147483647;
        for (var index = this.buckets[num % this.buckets.length]; index >= 0; index = this.entries[index].next) {
          if (this.entries[index].hashCode === num && this.comparer(this.entries[index].key, key)) {
            return index;
          }
        }
      }
      return -1;
    };

    dictionaryProto.count = function () {
      return this.size - this.freeCount;
    };

    dictionaryProto.tryGetValue = function (key) {
      var entry = this._findEntry(key);
      return entry >= 0 ?
        this.entries[entry].value :
        undefined;
    };

    dictionaryProto.getValues = function () {
      var index = 0, results = [];
      if (this.entries) {
        for (var index1 = 0; index1 < this.size; index1++) {
          if (this.entries[index1].hashCode >= 0) {
            results[index++] = this.entries[index1].value;
          }
        }
      }
      return results;
    };

    dictionaryProto.get = function (key) {
      var entry = this._findEntry(key);
      if (entry >= 0) { return this.entries[entry].value; }
      throw new Error(noSuchkey);
    };

    dictionaryProto.set = function (key, value) {
      this._insert(key, value, false);
    };

    dictionaryProto.containskey = function (key) {
      return this._findEntry(key) >= 0;
    };

    return Dictionary;
  }());

  /**
   *  Correlates the elements of two sequences based on overlapping durations.
   *
   *  @param {Observable} right The right observable sequence to join elements for.
   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
   */
  observableProto.join = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
    var left = this;
    return new AnonymousObservable(function (observer) {
      var group = new CompositeDisposable();
      var leftDone = false, rightDone = false;
      var leftId = 0, rightId = 0;
      var leftMap = new Dictionary(), rightMap = new Dictionary();

      group.add(left.subscribe(
        function (value) {
          var id = leftId++;
          var md = new SingleAssignmentDisposable();

          leftMap.add(id, value);
          group.add(md);

          var expire = function () {
            leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
            group.remove(md);
          };

          var duration;
          try {
            duration = leftDurationSelector(value);
          } catch (e) {
            observer.onError(e);
            return;
          }

          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));

          rightMap.getValues().forEach(function (v) {
            var result;
            try {
              result = resultSelector(value, v);
            } catch (exn) {
              observer.onError(exn);
              return;
            }

            observer.onNext(result);
          });
        },
        observer.onError.bind(observer),
        function () {
          leftDone = true;
          (rightDone || leftMap.count() === 0) && observer.onCompleted();
        })
      );

      group.add(right.subscribe(
        function (value) {
          var id = rightId++;
          var md = new SingleAssignmentDisposable();

          rightMap.add(id, value);
          group.add(md);

          var expire = function () {
            rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
            group.remove(md);
          };

          var duration;
          try {
            duration = rightDurationSelector(value);
          } catch (e) {
            observer.onError(e);
            return;
          }

          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));

          leftMap.getValues().forEach(function (v) {
            var result;
            try {
              result = resultSelector(v, value);
            } catch (exn) {
              observer.onError(exn);
              return;
            }

            observer.onNext(result);
          });
        },
        observer.onError.bind(observer),
        function () {
          rightDone = true;
          (leftDone || rightMap.count() === 0) && observer.onCompleted();
        })
      );
      return group;
    }, left);
  };

  /**
   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
   *
   *  @param {Observable} right The right observable sequence to join elements for.
   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
   */
  observableProto.groupJoin = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
    var left = this;
    return new AnonymousObservable(function (observer) {
      var group = new CompositeDisposable();
      var r = new RefCountDisposable(group);
      var leftMap = new Dictionary(), rightMap = new Dictionary();
      var leftId = 0, rightId = 0;

      function handleError(e) { return function (v) { v.onError(e); }; };

      group.add(left.subscribe(
        function (value) {
          var s = new Subject();
          var id = leftId++;
          leftMap.add(id, s);

          var result;
          try {
            result = resultSelector(value, addRef(s, r));
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          observer.onNext(result);

          rightMap.getValues().forEach(function (v) { s.onNext(v); });

          var md = new SingleAssignmentDisposable();
          group.add(md);

          var expire = function () {
            leftMap.remove(id) && s.onCompleted();
            group.remove(md);
          };

          var duration;
          try {
            duration = leftDurationSelector(value);
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }

          md.setDisposable(duration.take(1).subscribe(
            noop,
            function (e) {
              leftMap.getValues().forEach(handleError(e));
              observer.onError(e);
            },
            expire)
          );
        },
        function (e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        },
        observer.onCompleted.bind(observer))
      );

      group.add(right.subscribe(
        function (value) {
          var id = rightId++;
          rightMap.add(id, value);

          var md = new SingleAssignmentDisposable();
          group.add(md);

          var expire = function () {
            rightMap.remove(id);
            group.remove(md);
          };

          var duration;
          try {
            duration = rightDurationSelector(value);
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          md.setDisposable(duration.take(1).subscribe(
            noop,
            function (e) {
              leftMap.getValues().forEach(handleError(e));
              observer.onError(e);
            },
            expire)
          );

          leftMap.getValues().forEach(function (v) { v.onNext(value); });
        },
        function (e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        })
      );

      return r;
    }, left);
  };

    /**
     *  Projects each element of an observable sequence into zero or more buffers.
     *
     *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
     *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
     *  @returns {Observable} An observable sequence of windows.
     */
    observableProto.buffer = function (bufferOpeningsOrClosingSelector, bufferClosingSelector) {
        return this.window.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
    };

  /**
   *  Projects each element of an observable sequence into zero or more windows.
   *
   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
   *  @returns {Observable} An observable sequence of windows.
   */
  observableProto.window = function (windowOpeningsOrClosingSelector, windowClosingSelector) {
    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
      return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
    }
    return typeof windowOpeningsOrClosingSelector === 'function' ?
      observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) :
      observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
  };

  function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
    return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function (_, win) {
      return win;
    });
  }

  function observableWindowWithBoundaries(windowBoundaries) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var win = new Subject(),
        d = new CompositeDisposable(),
        r = new RefCountDisposable(d);

      observer.onNext(addRef(win, r));

      d.add(source.subscribe(function (x) {
        win.onNext(x);
      }, function (err) {
        win.onError(err);
        observer.onError(err);
      }, function () {
        win.onCompleted();
        observer.onCompleted();
      }));

      isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));

      d.add(windowBoundaries.subscribe(function (w) {
        win.onCompleted();
        win = new Subject();
        observer.onNext(addRef(win, r));
      }, function (err) {
        win.onError(err);
        observer.onError(err);
      }, function () {
        win.onCompleted();
        observer.onCompleted();
      }));

      return r;
    }, source);
  }

  function observableWindowWithClosingSelector(windowClosingSelector) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var m = new SerialDisposable(),
        d = new CompositeDisposable(m),
        r = new RefCountDisposable(d),
        win = new Subject();
      observer.onNext(addRef(win, r));
      d.add(source.subscribe(function (x) {
          win.onNext(x);
      }, function (err) {
          win.onError(err);
          observer.onError(err);
      }, function () {
          win.onCompleted();
          observer.onCompleted();
      }));

      function createWindowClose () {
        var windowClose;
        try {
          windowClose = windowClosingSelector();
        } catch (e) {
          observer.onError(e);
          return;
        }

        isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));

        var m1 = new SingleAssignmentDisposable();
        m.setDisposable(m1);
        m1.setDisposable(windowClose.take(1).subscribe(noop, function (err) {
          win.onError(err);
          observer.onError(err);
        }, function () {
          win.onCompleted();
          win = new Subject();
          observer.onNext(addRef(win, r));
          createWindowClose();
        }));
      }

      createWindowClose();
      return r;
    }, source);
  }

  /**
   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
   */
  observableProto.pairwise = function () {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var previous, hasPrevious = false;
      return source.subscribe(
        function (x) {
          if (hasPrevious) {
            observer.onNext([previous, x]);
          } else {
            hasPrevious = true;
          }
          previous = x;
        },
        observer.onError.bind(observer),
        observer.onCompleted.bind(observer));
    }, source);
  };

  /**
   * Returns two observables which partition the observations of the source by the given function.
   * The first will trigger observations for those values for which the predicate returns true.
   * The second will trigger observations for those values where the predicate returns false.
   * The predicate is executed once for each subscribed observer.
   * Both also propagate all error observations arising from the source and each completes
   * when the source completes.
   * @param {Function} predicate
   *    The function to determine which output Observable will trigger a particular observation.
   * @returns {Array}
   *    An array of observables. The first triggers when the predicate returns true,
   *    and the second triggers when the predicate returns false.
  */
  observableProto.partition = function(predicate, thisArg) {
    return [
      this.filter(predicate, thisArg),
      this.filter(function (x, i, o) { return !predicate.call(thisArg, x, i, o); })
    ];
  };

  function enumerableWhile(condition, source) {
    return new Enumerable(function () {
      return new Enumerator(function () {
        return condition() ?
          { done: false, value: source } :
          { done: true, value: undefined };
      });
    });
  }

   /**
   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
   *
   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.letBind = observableProto['let'] = function (func) {
    return func(this);
  };

   /**
   *  Determines whether an observable collection contains values. There is an alias for this method called 'ifThen' for browsers <IE9
   *
   * @example
   *  1 - res = Rx.Observable.if(condition, obs1);
   *  2 - res = Rx.Observable.if(condition, obs1, obs2);
   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
   */
  Observable['if'] = Observable.ifThen = function (condition, thenSource, elseSourceOrScheduler) {
    return observableDefer(function () {
      elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());

      isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
      isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));

      // Assume a scheduler for empty only
      typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
      return condition() ? thenSource : elseSourceOrScheduler;
    });
  };

   /**
   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
   * There is an alias for this method called 'forIn' for browsers <IE9
   * @param {Array} sources An array of values to turn into an observable sequence.
   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
   * @returns {Observable} An observable sequence from the concatenated observable sequences.
   */
  Observable['for'] = Observable.forIn = function (sources, resultSelector, thisArg) {
    return enumerableOf(sources, resultSelector, thisArg).concat();
  };

   /**
   *  Repeats source as long as condition holds emulating a while loop.
   * There is an alias for this method called 'whileDo' for browsers <IE9
   *
   * @param {Function} condition The condition which determines if the source will be repeated.
   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
   */
  var observableWhileDo = Observable['while'] = Observable.whileDo = function (condition, source) {
    isPromise(source) && (source = observableFromPromise(source));
    return enumerableWhile(condition, source).concat();
  };

   /**
   *  Repeats source as long as condition holds emulating a do while loop.
   *
   * @param {Function} condition The condition which determines if the source will be repeated.
   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
   */
  observableProto.doWhile = function (condition) {
    return observableConcat([this, observableWhileDo(condition, this)]);
  };

   /**
   *  Uses selector to determine which source in sources to use.
   *  There is an alias 'switchCase' for browsers <IE9.
   *
   * @example
   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 });
   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, obs0);
   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, scheduler);
   *
   * @param {Function} selector The function which extracts the value for to test in a case statement.
   * @param {Array} sources A object which has keys which correspond to the case statement labels.
   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
   *
   * @returns {Observable} An observable sequence which is determined by a case statement.
   */
  Observable['case'] = Observable.switchCase = function (selector, sources, defaultSourceOrScheduler) {
    return observableDefer(function () {
      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());

      typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));

      var result = sources[selector()];
      isPromise(result) && (result = observableFromPromise(result));

      return result || defaultSourceOrScheduler;
    });
  };

   /**
   *  Expands an observable sequence by recursively invoking selector.
   *
   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
   */
  observableProto.expand = function (selector, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    var source = this;
    return new AnonymousObservable(function (observer) {
      var q = [],
        m = new SerialDisposable(),
        d = new CompositeDisposable(m),
        activeCount = 0,
        isAcquired = false;

      var ensureActive = function () {
        var isOwner = false;
        if (q.length > 0) {
          isOwner = !isAcquired;
          isAcquired = true;
        }
        if (isOwner) {
          m.setDisposable(scheduler.scheduleRecursive(function (self) {
            var work;
            if (q.length > 0) {
              work = q.shift();
            } else {
              isAcquired = false;
              return;
            }
            var m1 = new SingleAssignmentDisposable();
            d.add(m1);
            m1.setDisposable(work.subscribe(function (x) {
              observer.onNext(x);
              var result = null;
              try {
                result = selector(x);
              } catch (e) {
                observer.onError(e);
              }
              q.push(result);
              activeCount++;
              ensureActive();
            }, observer.onError.bind(observer), function () {
              d.remove(m1);
              activeCount--;
              if (activeCount === 0) {
                observer.onCompleted();
              }
            }));
            self();
          }));
        }
      };

      q.push(source);
      activeCount++;
      ensureActive();
      return d;
    }, this);
  };

   /**
   *  Runs all observable sequences in parallel and collect their last elements.
   *
   * @example
   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
   */
  Observable.forkJoin = function () {
    var allSources = [];
    if (Array.isArray(arguments[0])) {
      allSources = arguments[0];
    } else {
      for(var i = 0, len = arguments.length; i < len; i++) { allSources.push(arguments[i]); }
    }
    return new AnonymousObservable(function (subscriber) {
      var count = allSources.length;
      if (count === 0) {
        subscriber.onCompleted();
        return disposableEmpty;
      }
      var group = new CompositeDisposable(),
        finished = false,
        hasResults = new Array(count),
        hasCompleted = new Array(count),
        results = new Array(count);

      for (var idx = 0; idx < count; idx++) {
        (function (i) {
          var source = allSources[i];
          isPromise(source) && (source = observableFromPromise(source));
          group.add(
            source.subscribe(
              function (value) {
              if (!finished) {
                hasResults[i] = true;
                results[i] = value;
              }
            },
            function (e) {
              finished = true;
              subscriber.onError(e);
              group.dispose();
            },
            function () {
              if (!finished) {
                if (!hasResults[i]) {
                    subscriber.onCompleted();
                    return;
                }
                hasCompleted[i] = true;
                for (var ix = 0; ix < count; ix++) {
                  if (!hasCompleted[ix]) { return; }
                }
                finished = true;
                subscriber.onNext(results);
                subscriber.onCompleted();
              }
            }));
        })(idx);
      }

      return group;
    });
  };

   /**
   *  Runs two observable sequences in parallel and combines their last elemenets.
   *
   * @param {Observable} second Second observable sequence.
   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
   */
  observableProto.forkJoin = function (second, resultSelector) {
    var first = this;
    return new AnonymousObservable(function (observer) {
      var leftStopped = false, rightStopped = false,
        hasLeft = false, hasRight = false,
        lastLeft, lastRight,
        leftSubscription = new SingleAssignmentDisposable(), rightSubscription = new SingleAssignmentDisposable();

      isPromise(second) && (second = observableFromPromise(second));

      leftSubscription.setDisposable(
          first.subscribe(function (left) {
            hasLeft = true;
            lastLeft = left;
          }, function (err) {
            rightSubscription.dispose();
            observer.onError(err);
          }, function () {
            leftStopped = true;
            if (rightStopped) {
              if (!hasLeft) {
                  observer.onCompleted();
              } else if (!hasRight) {
                  observer.onCompleted();
              } else {
                var result;
                try {
                  result = resultSelector(lastLeft, lastRight);
                } catch (e) {
                  observer.onError(e);
                  return;
                }
                observer.onNext(result);
                observer.onCompleted();
              }
            }
          })
      );

      rightSubscription.setDisposable(
        second.subscribe(function (right) {
          hasRight = true;
          lastRight = right;
        }, function (err) {
          leftSubscription.dispose();
          observer.onError(err);
        }, function () {
          rightStopped = true;
          if (leftStopped) {
            if (!hasLeft) {
              observer.onCompleted();
            } else if (!hasRight) {
              observer.onCompleted();
            } else {
              var result;
              try {
                result = resultSelector(lastLeft, lastRight);
              } catch (e) {
                observer.onError(e);
                return;
              }
              observer.onNext(result);
              observer.onCompleted();
            }
          }
        })
      );

      return new CompositeDisposable(leftSubscription, rightSubscription);
    }, first);
  };

  /**
   * Comonadic bind operator.
   * @param {Function} selector A transform function to apply to each element.
   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
   */
  observableProto.manySelect = function (selector, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    var source = this;
    return observableDefer(function () {
      var chain;

      return source
        .map(function (x) {
          var curr = new ChainObservable(x);

          chain && chain.onNext(x);
          chain = curr;

          return curr;
        })
        .tap(
          noop,
          function (e) { chain && chain.onError(e); },
          function () { chain && chain.onCompleted(); }
        )
        .observeOn(scheduler)
        .map(selector);
    }, source);
  };

  var ChainObservable = (function (__super__) {

    function subscribe (observer) {
      var self = this, g = new CompositeDisposable();
      g.add(currentThreadScheduler.schedule(function () {
        observer.onNext(self.head);
        g.add(self.tail.mergeAll().subscribe(observer));
      }));

      return g;
    }

    inherits(ChainObservable, __super__);

    function ChainObservable(head) {
      __super__.call(this, subscribe);
      this.head = head;
      this.tail = new AsyncSubject();
    }

    addProperties(ChainObservable.prototype, Observer, {
      onCompleted: function () {
        this.onNext(Observable.empty());
      },
      onError: function (e) {
        this.onNext(Observable.throwError(e));
      },
      onNext: function (v) {
        this.tail.onNext(v);
        this.tail.onCompleted();
      }
    });

    return ChainObservable;

  }(Observable));

  /** @private */
  var Map = root.Map || (function () {

    function Map() {
      this._keys = [];
      this._values = [];
    }

    Map.prototype.get = function (key) {
      var i = this._keys.indexOf(key);
      return i !== -1 ? this._values[i] : undefined;
    };

    Map.prototype.set = function (key, value) {
      var i = this._keys.indexOf(key);
      i !== -1 && (this._values[i] = value);
      this._values[this._keys.push(key) - 1] = value;
    };

    Map.prototype.forEach = function (callback, thisArg) {
      for (var i = 0, len = this._keys.length; i < len; i++) {
        callback.call(thisArg, this._values[i], this._keys[i]);
      }
    };

    return Map;
  }());

  /**
   * @constructor
   * Represents a join pattern over observable sequences.
   */
  function Pattern(patterns) {
    this.patterns = patterns;
  }

  /**
   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
   *  @param other Observable sequence to match in addition to the current pattern.
   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
   */
  Pattern.prototype.and = function (other) {
    return new Pattern(this.patterns.concat(other));
  };

  /**
   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
   */
  Pattern.prototype.thenDo = function (selector) {
    return new Plan(this, selector);
  };

  function Plan(expression, selector) {
      this.expression = expression;
      this.selector = selector;
  }

  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) {
    var self = this;
    var joinObservers = [];
    for (var i = 0, len = this.expression.patterns.length; i < len; i++) {
      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
    }
    var activePlan = new ActivePlan(joinObservers, function () {
      var result;
      try {
        result = self.selector.apply(self, arguments);
      } catch (e) {
        observer.onError(e);
        return;
      }
      observer.onNext(result);
    }, function () {
      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) {
        joinObservers[j].removeActivePlan(activePlan);
      }
      deactivate(activePlan);
    });
    for (i = 0, len = joinObservers.length; i < len; i++) {
      joinObservers[i].addActivePlan(activePlan);
    }
    return activePlan;
  };

  function planCreateObserver(externalSubscriptions, observable, onError) {
    var entry = externalSubscriptions.get(observable);
    if (!entry) {
      var observer = new JoinObserver(observable, onError);
      externalSubscriptions.set(observable, observer);
      return observer;
    }
    return entry;
  }

  function ActivePlan(joinObserverArray, onNext, onCompleted) {
    this.joinObserverArray = joinObserverArray;
    this.onNext = onNext;
    this.onCompleted = onCompleted;
    this.joinObservers = new Map();
    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) {
      var joinObserver = this.joinObserverArray[i];
      this.joinObservers.set(joinObserver, joinObserver);
    }
  }

  ActivePlan.prototype.dequeue = function () {
    this.joinObservers.forEach(function (v) { v.queue.shift(); });
  };

  ActivePlan.prototype.match = function () {
    var i, len, hasValues = true;
    for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
      if (this.joinObserverArray[i].queue.length === 0) {
        hasValues = false;
        break;
      }
    }
    if (hasValues) {
      var firstValues = [],
          isCompleted = false;
      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
        firstValues.push(this.joinObserverArray[i].queue[0]);
        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
      }
      if (isCompleted) {
        this.onCompleted();
      } else {
        this.dequeue();
        var values = [];
        for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
          values.push(firstValues[i].value);
        }
        this.onNext.apply(this, values);
      }
    }
  };

  var JoinObserver = (function (__super__) {
    inherits(JoinObserver, __super__);

    function JoinObserver(source, onError) {
      __super__.call(this);
      this.source = source;
      this.onError = onError;
      this.queue = [];
      this.activePlans = [];
      this.subscription = new SingleAssignmentDisposable();
      this.isDisposed = false;
    }

    var JoinObserverPrototype = JoinObserver.prototype;

    JoinObserverPrototype.next = function (notification) {
      if (!this.isDisposed) {
        if (notification.kind === 'E') {
          return this.onError(notification.exception);
        }
        this.queue.push(notification);
        var activePlans = this.activePlans.slice(0);
        for (var i = 0, len = activePlans.length; i < len; i++) {
          activePlans[i].match();
        }
      }
    };

    JoinObserverPrototype.error = noop;
    JoinObserverPrototype.completed = noop;

    JoinObserverPrototype.addActivePlan = function (activePlan) {
      this.activePlans.push(activePlan);
    };

    JoinObserverPrototype.subscribe = function () {
      this.subscription.setDisposable(this.source.materialize().subscribe(this));
    };

    JoinObserverPrototype.removeActivePlan = function (activePlan) {
      this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
      this.activePlans.length === 0 && this.dispose();
    };

    JoinObserverPrototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      if (!this.isDisposed) {
        this.isDisposed = true;
        this.subscription.dispose();
      }
    };

    return JoinObserver;
  } (AbstractObserver));

  /**
   *  Creates a pattern that matches when both observable sequences have an available value.
   *
   *  @param right Observable sequence to match with the current sequence.
   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
   */
  observableProto.and = function (right) {
    return new Pattern([this, right]);
  };

  /**
   *  Matches when the observable sequence has an available value and projects the value.
   *
   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
   */
  observableProto.thenDo = function (selector) {
    return new Pattern([this]).thenDo(selector);
  };

  /**
   *  Joins together the results from several patterns.
   *
   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
   *  @returns {Observable} Observable sequence with the results form matching several patterns.
   */
  Observable.when = function () {
    var len = arguments.length, plans;
    if (Array.isArray(arguments[0])) {
      plans = arguments[0];
    } else {
      plans = new Array(len);
      for(var i = 0; i < len; i++) { plans[i] = arguments[i]; }
    }
    return new AnonymousObservable(function (o) {
      var activePlans = [],
          externalSubscriptions = new Map();
      var outObserver = observerCreate(
        function (x) { o.onNext(x); },
        function (err) {
          externalSubscriptions.forEach(function (v) { v.onError(err); });
          o.onError(err);
        },
        function (x) { o.onCompleted(); }
      );
      try {
        for (var i = 0, len = plans.length; i < len; i++) {
          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) {
            var idx = activePlans.indexOf(activePlan);
            activePlans.splice(idx, 1);
            activePlans.length === 0 && o.onCompleted();
          }));
        }
      } catch (e) {
        observableThrow(e).subscribe(o);
      }
      var group = new CompositeDisposable();
      externalSubscriptions.forEach(function (joinObserver) {
        joinObserver.subscribe();
        group.add(joinObserver);
      });

      return group;
    });
  };

  function observableTimerDate(dueTime, scheduler) {
    return new AnonymousObservable(function (observer) {
      return scheduler.scheduleWithAbsolute(dueTime, function () {
        observer.onNext(0);
        observer.onCompleted();
      });
    });
  }

  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
    return new AnonymousObservable(function (observer) {
      var d = dueTime, p = normalizeTime(period);
      return scheduler.scheduleRecursiveWithAbsoluteAndState(0, d, function (count, self) {
        if (p > 0) {
          var now = scheduler.now();
          d = d + p;
          d <= now && (d = now + p);
        }
        observer.onNext(count);
        self(count + 1, d);
      });
    });
  }

  function observableTimerTimeSpan(dueTime, scheduler) {
    return new AnonymousObservable(function (observer) {
      return scheduler.scheduleWithRelative(normalizeTime(dueTime), function () {
        observer.onNext(0);
        observer.onCompleted();
      });
    });
  }

  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
    return dueTime === period ?
      new AnonymousObservable(function (observer) {
        return scheduler.schedulePeriodicWithState(0, period, function (count) {
          observer.onNext(count);
          return count + 1;
        });
      }) :
      observableDefer(function () {
        return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
      });
  }

  /**
   *  Returns an observable sequence that produces a value after each period.
   *
   * @example
   *  1 - res = Rx.Observable.interval(1000);
   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
   *
   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
   * @returns {Observable} An observable sequence that produces a value after each period.
   */
  var observableinterval = Observable.interval = function (period, scheduler) {
    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : timeoutScheduler);
  };

  /**
   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
   */
  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
    var period;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    if (periodOrScheduler !== undefined && typeof periodOrScheduler === 'number') {
      period = periodOrScheduler;
    } else if (isScheduler(periodOrScheduler)) {
      scheduler = periodOrScheduler;
    }
    if (dueTime instanceof Date && period === undefined) {
      return observableTimerDate(dueTime.getTime(), scheduler);
    }
    if (dueTime instanceof Date && period !== undefined) {
      period = periodOrScheduler;
      return observableTimerDateAndPeriod(dueTime.getTime(), period, scheduler);
    }
    return period === undefined ?
      observableTimerTimeSpan(dueTime, scheduler) :
      observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
  };

  function observableDelayTimeSpan(source, dueTime, scheduler) {
    return new AnonymousObservable(function (observer) {
      var active = false,
        cancelable = new SerialDisposable(),
        exception = null,
        q = [],
        running = false,
        subscription;
      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
        var d, shouldRun;
        if (notification.value.kind === 'E') {
          q = [];
          q.push(notification);
          exception = notification.value.exception;
          shouldRun = !running;
        } else {
          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
          shouldRun = !active;
          active = true;
        }
        if (shouldRun) {
          if (exception !== null) {
            observer.onError(exception);
          } else {
            d = new SingleAssignmentDisposable();
            cancelable.setDisposable(d);
            d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function (self) {
              var e, recurseDueTime, result, shouldRecurse;
              if (exception !== null) {
                return;
              }
              running = true;
              do {
                result = null;
                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
                  result = q.shift().value;
                }
                if (result !== null) {
                  result.accept(observer);
                }
              } while (result !== null);
              shouldRecurse = false;
              recurseDueTime = 0;
              if (q.length > 0) {
                shouldRecurse = true;
                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
              } else {
                active = false;
              }
              e = exception;
              running = false;
              if (e !== null) {
                observer.onError(e);
              } else if (shouldRecurse) {
                self(recurseDueTime);
              }
            }));
          }
        }
      });
      return new CompositeDisposable(subscription, cancelable);
    }, source);
  }

  function observableDelayDate(source, dueTime, scheduler) {
    return observableDefer(function () {
      return observableDelayTimeSpan(source, dueTime - scheduler.now(), scheduler);
    });
  }

  /**
   *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
   *
   * @example
   *  1 - res = Rx.Observable.delay(new Date());
   *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);
   *
   *  3 - res = Rx.Observable.delay(5000);
   *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);
   * @memberOf Observable#
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Time-shifted sequence.
   */
  observableProto.delay = function (dueTime, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return dueTime instanceof Date ?
      observableDelayDate(this, dueTime.getTime(), scheduler) :
      observableDelayTimeSpan(this, dueTime, scheduler);
  };

  /**
   *  Ignores values from an observable sequence which are followed by another value before dueTime.
   * @param {Number} dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).
   * @param {Scheduler} [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} The debounced sequence.
   */
  observableProto.debounce = observableProto.throttleWithTimeout = function (dueTime, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var source = this;
    return new AnonymousObservable(function (observer) {
      var cancelable = new SerialDisposable(), hasvalue = false, value, id = 0;
      var subscription = source.subscribe(
        function (x) {
          hasvalue = true;
          value = x;
          id++;
          var currentId = id,
            d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(scheduler.scheduleWithRelative(dueTime, function () {
            hasvalue && id === currentId && observer.onNext(value);
            hasvalue = false;
          }));
        },
        function (e) {
          cancelable.dispose();
          observer.onError(e);
          hasvalue = false;
          id++;
        },
        function () {
          cancelable.dispose();
          hasvalue && observer.onNext(value);
          observer.onCompleted();
          hasvalue = false;
          id++;
        });
      return new CompositeDisposable(subscription, cancelable);
    }, this);
  };

  /**
   * @deprecated use #debounce or #throttleWithTimeout instead.
   */
  observableProto.throttle = function(dueTime, scheduler) {
    //deprecate('throttle', 'debounce or throttleWithTimeout');
    return this.debounce(dueTime, scheduler);
  };

  /**
   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence of windows.
   */
  observableProto.windowWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
    var source = this, timeShift;
    timeShiftOrScheduler == null && (timeShift = timeSpan);
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    if (typeof timeShiftOrScheduler === 'number') {
      timeShift = timeShiftOrScheduler;
    } else if (isScheduler(timeShiftOrScheduler)) {
      timeShift = timeSpan;
      scheduler = timeShiftOrScheduler;
    }
    return new AnonymousObservable(function (observer) {
      var groupDisposable,
        nextShift = timeShift,
        nextSpan = timeSpan,
        q = [],
        refCountDisposable,
        timerD = new SerialDisposable(),
        totalTime = 0;
        groupDisposable = new CompositeDisposable(timerD),
        refCountDisposable = new RefCountDisposable(groupDisposable);

       function createTimer () {
        var m = new SingleAssignmentDisposable(),
          isSpan = false,
          isShift = false;
        timerD.setDisposable(m);
        if (nextSpan === nextShift) {
          isSpan = true;
          isShift = true;
        } else if (nextSpan < nextShift) {
            isSpan = true;
        } else {
          isShift = true;
        }
        var newTotalTime = isSpan ? nextSpan : nextShift,
          ts = newTotalTime - totalTime;
        totalTime = newTotalTime;
        if (isSpan) {
          nextSpan += timeShift;
        }
        if (isShift) {
          nextShift += timeShift;
        }
        m.setDisposable(scheduler.scheduleWithRelative(ts, function () {
          if (isShift) {
            var s = new Subject();
            q.push(s);
            observer.onNext(addRef(s, refCountDisposable));
          }
          isSpan && q.shift().onCompleted();
          createTimer();
        }));
      };
      q.push(new Subject());
      observer.onNext(addRef(q[0], refCountDisposable));
      createTimer();
      groupDisposable.add(source.subscribe(
        function (x) {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
        },
        function (e) {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onError(e); }
          observer.onError(e);
        },
        function () {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onCompleted(); }
          observer.onCompleted();
        }
      ));
      return refCountDisposable;
    }, source);
  };

  /**
   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
   * @param {Number} timeSpan Maximum time length of a window.
   * @param {Number} count Maximum element count of a window.
   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence of windows.
   */
  observableProto.windowWithTimeOrCount = function (timeSpan, count, scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (observer) {
      var timerD = new SerialDisposable(),
          groupDisposable = new CompositeDisposable(timerD),
          refCountDisposable = new RefCountDisposable(groupDisposable),
          n = 0,
          windowId = 0,
          s = new Subject();

      function createTimer(id) {
        var m = new SingleAssignmentDisposable();
        timerD.setDisposable(m);
        m.setDisposable(scheduler.scheduleWithRelative(timeSpan, function () {
          if (id !== windowId) { return; }
          n = 0;
          var newId = ++windowId;
          s.onCompleted();
          s = new Subject();
          observer.onNext(addRef(s, refCountDisposable));
          createTimer(newId);
        }));
      }

      observer.onNext(addRef(s, refCountDisposable));
      createTimer(0);

      groupDisposable.add(source.subscribe(
        function (x) {
          var newId = 0, newWindow = false;
          s.onNext(x);
          if (++n === count) {
            newWindow = true;
            n = 0;
            newId = ++windowId;
            s.onCompleted();
            s = new Subject();
            observer.onNext(addRef(s, refCountDisposable));
          }
          newWindow && createTimer(newId);
        },
        function (e) {
          s.onError(e);
          observer.onError(e);
        }, function () {
          s.onCompleted();
          observer.onCompleted();
        }
      ));
      return refCountDisposable;
    }, source);
  };

    /**
     *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
     *
     * @example
     *  1 - res = xs.bufferWithTime(1000, scheduler); // non-overlapping segments of 1 second
     *  2 - res = xs.bufferWithTime(1000, 500, scheduler; // segments of 1 second with time shift 0.5 seconds
     *
     * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
     * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
     * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
     * @returns {Observable} An observable sequence of buffers.
     */
    observableProto.bufferWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
        return this.windowWithTime.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
    };

    /**
     *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
     *
     * @example
     *  1 - res = source.bufferWithTimeOrCount(5000, 50); // 5s or 50 items in an array
     *  2 - res = source.bufferWithTimeOrCount(5000, 50, scheduler); // 5s or 50 items in an array
     *
     * @param {Number} timeSpan Maximum time length of a buffer.
     * @param {Number} count Maximum element count of a buffer.
     * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
     * @returns {Observable} An observable sequence of buffers.
     */
    observableProto.bufferWithTimeOrCount = function (timeSpan, count, scheduler) {
        return this.windowWithTimeOrCount(timeSpan, count, scheduler).selectMany(function (x) {
            return x.toArray();
        });
    };

  /**
   *  Records the time interval between consecutive values in an observable sequence.
   *
   * @example
   *  1 - res = source.timeInterval();
   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
   *
   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence with time interval information on values.
   */
  observableProto.timeInterval = function (scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return observableDefer(function () {
      var last = scheduler.now();
      return source.map(function (x) {
        var now = scheduler.now(), span = now - last;
        last = now;
        return { value: x, interval: span };
      });
    });
  };

  /**
   *  Records the timestamp for each value in an observable sequence.
   *
   * @example
   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
   *  2 - res = source.timestamp(Rx.Scheduler.default);
   *
   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the default scheduler is used.
   * @returns {Observable} An observable sequence with timestamp information on values.
   */
  observableProto.timestamp = function (scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return this.map(function (x) {
      return { value: x, timestamp: scheduler.now() };
    });
  };

  function sampleObservable(source, sampler) {
    return new AnonymousObservable(function (observer) {
      var atEnd, value, hasValue;

      function sampleSubscribe() {
        if (hasValue) {
          hasValue = false;
          observer.onNext(value);
        }
        atEnd && observer.onCompleted();
      }

      return new CompositeDisposable(
        source.subscribe(function (newValue) {
          hasValue = true;
          value = newValue;
        }, observer.onError.bind(observer), function () {
          atEnd = true;
        }),
        sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe)
      );
    }, source);
  }

  /**
   *  Samples the observable sequence at each interval.
   *
   * @example
   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
   *  2 - res = source.sample(5000); // 5 seconds
   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
   *
   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Sampled observable sequence.
   */
  observableProto.sample = observableProto.throttleLatest = function (intervalOrSampler, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return typeof intervalOrSampler === 'number' ?
      sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
      sampleObservable(this, intervalOrSampler);
  };

  /**
   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
   * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
   * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
   */
  observableProto.timeout = function (dueTime, other, scheduler) {
    (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
    isScheduler(scheduler) || (scheduler = timeoutScheduler);

    var source = this, schedulerMethod = dueTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';

    return new AnonymousObservable(function (observer) {
      var id = 0,
        original = new SingleAssignmentDisposable(),
        subscription = new SerialDisposable(),
        switched = false,
        timer = new SerialDisposable();

      subscription.setDisposable(original);

      function createTimer() {
        var myId = id;
        timer.setDisposable(scheduler[schedulerMethod](dueTime, function () {
          if (id === myId) {
            isPromise(other) && (other = observableFromPromise(other));
            subscription.setDisposable(other.subscribe(observer));
          }
        }));
      }

      createTimer();

      original.setDisposable(source.subscribe(function (x) {
        if (!switched) {
          id++;
          observer.onNext(x);
          createTimer();
        }
      }, function (e) {
        if (!switched) {
          id++;
          observer.onError(e);
        }
      }, function () {
        if (!switched) {
          id++;
          observer.onCompleted();
        }
      }));
      return new CompositeDisposable(subscription, timer);
    }, source);
  };

  /**
   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
   *
   * @example
   *  res = source.generateWithAbsoluteTime(0,
   *      function (x) { return return true; },
   *      function (x) { return x + 1; },
   *      function (x) { return x; },
   *      function (x) { return new Date(); }
   *  });
   *
   * @param {Mixed} initialState Initial state.
   * @param {Function} condition Condition to terminate generation (upon returning false).
   * @param {Function} iterate Iteration step function.
   * @param {Function} resultSelector Selector function for results produced in the sequence.
   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
   * @returns {Observable} The generated sequence.
   */
  Observable.generateWithAbsoluteTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (observer) {
      var first = true,
        hasResult = false,
        result,
        state = initialState,
        time;
      return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(), function (self) {
        hasResult && observer.onNext(result);

        try {
          if (first) {
            first = false;
          } else {
            state = iterate(state);
          }
          hasResult = condition(state);
          if (hasResult) {
            result = resultSelector(state);
            time = timeSelector(state);
          }
        } catch (e) {
          observer.onError(e);
          return;
        }
        if (hasResult) {
          self(time);
        } else {
          observer.onCompleted();
        }
      });
    });
  };

  /**
   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
   *
   * @example
   *  res = source.generateWithRelativeTime(0,
   *      function (x) { return return true; },
   *      function (x) { return x + 1; },
   *      function (x) { return x; },
   *      function (x) { return 500; }
   *  );
   *
   * @param {Mixed} initialState Initial state.
   * @param {Function} condition Condition to terminate generation (upon returning false).
   * @param {Function} iterate Iteration step function.
   * @param {Function} resultSelector Selector function for results produced in the sequence.
   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
   * @returns {Observable} The generated sequence.
   */
  Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (observer) {
      var first = true,
        hasResult = false,
        result,
        state = initialState,
        time;
      return scheduler.scheduleRecursiveWithRelative(0, function (self) {
        hasResult && observer.onNext(result);

        try {
          if (first) {
            first = false;
          } else {
            state = iterate(state);
          }
          hasResult = condition(state);
          if (hasResult) {
            result = resultSelector(state);
            time = timeSelector(state);
          }
        } catch (e) {
          observer.onError(e);
          return;
        }
        if (hasResult) {
          self(time);
        } else {
          observer.onCompleted();
        }
      });
    });
  };

  /**
   *  Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.
   *
   * @example
   *  1 - res = source.delaySubscription(5000); // 5s
   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.default); // 5 seconds
   *
   * @param {Number} dueTime Relative or absolute time shift of the subscription.
   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Time-shifted sequence.
   */
  observableProto.delaySubscription = function (dueTime, scheduler) {
    var scheduleMethod = dueTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
    var source = this;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (o) {
      var d = new SerialDisposable();

      d.setDisposable(scheduler[scheduleMethod](dueTime, function() {
        d.setDisposable(source.subscribe(o));
      }));

      return d;
    }, this);
  };

  /**
   *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
   *
   * @example
   *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only
   *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector
   *
   * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.
   * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
   * @returns {Observable} Time-shifted sequence.
   */
  observableProto.delayWithSelector = function (subscriptionDelay, delayDurationSelector) {
    var source = this, subDelay, selector;
    if (isFunction(subscriptionDelay)) {
      selector = subscriptionDelay;
    } else {
      subDelay = subscriptionDelay;
      selector = delayDurationSelector;
    }
    return new AnonymousObservable(function (observer) {
      var delays = new CompositeDisposable(), atEnd = false, subscription = new SerialDisposable();

      function start() {
        subscription.setDisposable(source.subscribe(
          function (x) {
            var delay = tryCatch(selector)(x);
            if (delay === errorObj) { return observer.onError(delay.e); }
            var d = new SingleAssignmentDisposable();
            delays.add(d);
            d.setDisposable(delay.subscribe(
              function () {
                observer.onNext(x);
                delays.remove(d);
                done();
              },
              function (e) { observer.onError(e); },
              function () {
                observer.onNext(x);
                delays.remove(d);
                done();
              }
            ))
          },
          function (e) { observer.onError(e); },
          function () {
            atEnd = true;
            subscription.dispose();
            done();
          }
        ))
      }

      function done () {
        atEnd && delays.length === 0 && observer.onCompleted();
      }

      if (!subDelay) {
        start();
      } else {
        subscription.setDisposable(subDelay.subscribe(start, function (e) { observer.onError(e); }, start));
      }

      return new CompositeDisposable(subscription, delays);
    }, this);
  };

    /**
     *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
     * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().
     * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.
     * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().
     * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
     */
    observableProto.timeoutWithSelector = function (firstTimeout, timeoutdurationSelector, other) {
      if (arguments.length === 1) {
          timeoutdurationSelector = firstTimeout;
          firstTimeout = observableNever();
      }
      other || (other = observableThrow(new Error('Timeout')));
      var source = this;
      return new AnonymousObservable(function (observer) {
        var subscription = new SerialDisposable(), timer = new SerialDisposable(), original = new SingleAssignmentDisposable();

        subscription.setDisposable(original);

        var id = 0, switched = false;

        function setTimer(timeout) {
          var myId = id;

          function timerWins () {
            return id === myId;
          }

          var d = new SingleAssignmentDisposable();
          timer.setDisposable(d);
          d.setDisposable(timeout.subscribe(function () {
            timerWins() && subscription.setDisposable(other.subscribe(observer));
            d.dispose();
          }, function (e) {
            timerWins() && observer.onError(e);
          }, function () {
            timerWins() && subscription.setDisposable(other.subscribe(observer));
          }));
        };

        setTimer(firstTimeout);

        function observerWins() {
          var res = !switched;
          if (res) { id++; }
          return res;
        }

        original.setDisposable(source.subscribe(function (x) {
          if (observerWins()) {
            observer.onNext(x);
            var timeout;
            try {
              timeout = timeoutdurationSelector(x);
            } catch (e) {
              observer.onError(e);
              return;
            }
            setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
          }
        }, function (e) {
          observerWins() && observer.onError(e);
        }, function () {
          observerWins() && observer.onCompleted();
        }));
        return new CompositeDisposable(subscription, timer);
      }, source);
    };

  /**
   * Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
   * @param {Function} durationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.
   * @returns {Observable} The debounced sequence.
   */
  observableProto.debounceWithSelector = function (durationSelector) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;
      var subscription = source.subscribe(function (x) {
        var throttle;
        try {
          throttle = durationSelector(x);
        } catch (e) {
          observer.onError(e);
          return;
        }

        isPromise(throttle) && (throttle = observableFromPromise(throttle));

        hasValue = true;
        value = x;
        id++;
        var currentid = id, d = new SingleAssignmentDisposable();
        cancelable.setDisposable(d);
        d.setDisposable(throttle.subscribe(function () {
          hasValue && id === currentid && observer.onNext(value);
          hasValue = false;
          d.dispose();
        }, observer.onError.bind(observer), function () {
          hasValue && id === currentid && observer.onNext(value);
          hasValue = false;
          d.dispose();
        }));
      }, function (e) {
        cancelable.dispose();
        observer.onError(e);
        hasValue = false;
        id++;
      }, function () {
        cancelable.dispose();
        hasValue && observer.onNext(value);
        observer.onCompleted();
        hasValue = false;
        id++;
      });
      return new CompositeDisposable(subscription, cancelable);
    }, source);
  };

  /**
   * @deprecated use #debounceWithSelector instead.
   */
  observableProto.throttleWithSelector = function (durationSelector) {
    //deprecate('throttleWithSelector', 'debounceWithSelector');
    return this.debounceWithSelector(durationSelector);
  };

  /**
   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
   *
   *  1 - res = source.skipLastWithTime(5000);
   *  2 - res = source.skipLastWithTime(5000, scheduler);
   *
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for skipping elements from the end of the sequence.
   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
   */
  observableProto.skipLastWithTime = function (duration, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var source = this;
    return new AnonymousObservable(function (o) {
      var q = [];
      return source.subscribe(function (x) {
        var now = scheduler.now();
        q.push({ interval: now, value: x });
        while (q.length > 0 && now - q[0].interval >= duration) {
          o.onNext(q.shift().value);
        }
      }, function (e) { o.onError(e); }, function () {
        var now = scheduler.now();
        while (q.length > 0 && now - q[0].interval >= duration) {
          o.onNext(q.shift().value);
        }
        o.onCompleted();
      });
    }, source);
  };

  /**
   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for taking elements from the end of the sequence.
   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
   */
  observableProto.takeLastWithTime = function (duration, scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (o) {
      var q = [];
      return source.subscribe(function (x) {
        var now = scheduler.now();
        q.push({ interval: now, value: x });
        while (q.length > 0 && now - q[0].interval >= duration) {
          q.shift();
        }
      }, function (e) { o.onError(e); }, function () {
        var now = scheduler.now();
        while (q.length > 0) {
          var next = q.shift();
          if (now - next.interval <= duration) { o.onNext(next.value); }
        }
        o.onCompleted();
      });
    }, source);
  };

  /**
   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for taking elements from the end of the sequence.
   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
   */
  observableProto.takeLastBufferWithTime = function (duration, scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (o) {
      var q = [];
      return source.subscribe(function (x) {
        var now = scheduler.now();
        q.push({ interval: now, value: x });
        while (q.length > 0 && now - q[0].interval >= duration) {
          q.shift();
        }
      }, function (e) { o.onError(e); }, function () {
        var now = scheduler.now(), res = [];
        while (q.length > 0) {
          var next = q.shift();
          now - next.interval <= duration && res.push(next.value);
        }
        o.onNext(res);
        o.onCompleted();
      });
    }, source);
  };

  /**
   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
   *
   * @example
   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for taking elements from the start of the sequence.
   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
   */
  observableProto.takeWithTime = function (duration, scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (o) {
      return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function () { o.onCompleted(); }), source.subscribe(o));
    }, source);
  };

  /**
   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
   *
   * @example
   *  1 - res = source.skipWithTime(5000, [optional scheduler]);
   *
   * @description
   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
   *  may not execute immediately, despite the zero due time.
   *
   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
   * @param {Number} duration Duration for skipping elements from the start of the sequence.
   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
   */
  observableProto.skipWithTime = function (duration, scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return new AnonymousObservable(function (observer) {
      var open = false;
      return new CompositeDisposable(
        scheduler.scheduleWithRelative(duration, function () { open = true; }),
        source.subscribe(function (x) { open && observer.onNext(x); }, observer.onError.bind(observer), observer.onCompleted.bind(observer)));
    }, source);
  };

  /**
   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
   *
   * @examples
   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
   */
  observableProto.skipUntilWithTime = function (startTime, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var source = this, schedulerMethod = startTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';
    return new AnonymousObservable(function (o) {
      var open = false;

      return new CompositeDisposable(
        scheduler[schedulerMethod](startTime, function () { open = true; }),
        source.subscribe(
          function (x) { open && o.onNext(x); },
          function (e) { o.onError(e); }, function () { o.onCompleted(); }));
    }, source);
  };

  /**
   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
   */
  observableProto.takeUntilWithTime = function (endTime, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var source = this, schedulerMethod = endTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';
    return new AnonymousObservable(function (o) {
      return new CompositeDisposable(
        scheduler[schedulerMethod](endTime, function () { o.onCompleted(); }),
        source.subscribe(o));
    }, source);
  };

  /**
   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
   * @returns {Observable} An Observable that performs the throttle operation.
   */
  observableProto.throttleFirst = function (windowDuration, scheduler) {
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var duration = +windowDuration || 0;
    if (duration <= 0) { throw new RangeError('windowDuration cannot be less or equal zero.'); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var lastOnNext = 0;
      return source.subscribe(
        function (x) {
          var now = scheduler.now();
          if (lastOnNext === 0 || now - lastOnNext >= duration) {
            lastOnNext = now;
            o.onNext(x);
          }
        },function (e) { o.onError(e); }, function () { o.onCompleted(); }
      );
    }, source);
  };

  /**
   * Executes a transducer to transform the observable sequence
   * @param {Transducer} transducer A transducer to execute
   * @returns {Observable} An Observable sequence containing the results from the transducer.
   */
  observableProto.transduce = function(transducer) {
    var source = this;

    function transformForObserver(o) {
      return {
        '@@transducer/init': function() {
          return o;
        },
        '@@transducer/step': function(obs, input) {
          return obs.onNext(input);
        },
        '@@transducer/result': function(obs) {
          return obs.onCompleted();
        }
      };
    }

    return new AnonymousObservable(function(o) {
      var xform = transducer(transformForObserver(o));
      return source.subscribe(
        function(v) {
          try {
            xform['@@transducer/step'](o, v);
          } catch (e) {
            o.onError(e);
          }
        },
        function (e) { o.onError(e); },
        function() { xform['@@transducer/result'](o); }
      );
    }, source);
  };

  /*
   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
   * Observables that come in between subscriptions will be dropped on the floor.
   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
   */
  observableProto.exclusive = function () {
    var sources = this;
    return new AnonymousObservable(function (observer) {
      var hasCurrent = false,
        isStopped = false,
        m = new SingleAssignmentDisposable(),
        g = new CompositeDisposable();

      g.add(m);

      m.setDisposable(sources.subscribe(
        function (innerSource) {
          if (!hasCurrent) {
            hasCurrent = true;

            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

            var innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);

            innerSubscription.setDisposable(innerSource.subscribe(
              observer.onNext.bind(observer),
              observer.onError.bind(observer),
              function () {
                g.remove(innerSubscription);
                hasCurrent = false;
                if (isStopped && g.length === 1) {
                  observer.onCompleted();
                }
            }));
          }
        },
        observer.onError.bind(observer),
        function () {
          isStopped = true;
          if (!hasCurrent && g.length === 1) {
            observer.onCompleted();
          }
        }));

      return g;
    }, this);
  };

  /*
   * Performs a exclusive map waiting for the first to finish before subscribing to another observable.
   * Observables that come in between subscriptions will be dropped on the floor.
   * @param {Function} selector Selector to invoke for every item in the current subscription.
   * @param {Any} [thisArg] An optional context to invoke with the selector parameter.
   * @returns {Observable} An exclusive observable with only the results that happen when subscribed.
   */
  observableProto.exclusiveMap = function (selector, thisArg) {
    var sources = this,
        selectorFunc = bindCallback(selector, thisArg, 3);
    return new AnonymousObservable(function (observer) {
      var index = 0,
        hasCurrent = false,
        isStopped = true,
        m = new SingleAssignmentDisposable(),
        g = new CompositeDisposable();

      g.add(m);

      m.setDisposable(sources.subscribe(
        function (innerSource) {

          if (!hasCurrent) {
            hasCurrent = true;

            innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);

            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

            innerSubscription.setDisposable(innerSource.subscribe(
              function (x) {
                var result;
                try {
                  result = selectorFunc(x, index++, innerSource);
                } catch (e) {
                  observer.onError(e);
                  return;
                }

                observer.onNext(result);
              },
              function (e) { observer.onError(e); },
              function () {
                g.remove(innerSubscription);
                hasCurrent = false;

                if (isStopped && g.length === 1) {
                  observer.onCompleted();
                }
              }));
          }
        },
        function (e) { observer.onError(e); },
        function () {
          isStopped = true;
          if (g.length === 1 && !hasCurrent) {
            observer.onCompleted();
          }
        }));
      return g;
    }, this);
  };

  /** Provides a set of extension methods for virtual time scheduling. */
  Rx.VirtualTimeScheduler = (function (__super__) {

    function localNow() {
      return this.toDateTimeOffset(this.clock);
    }

    function scheduleNow(state, action) {
      return this.scheduleAbsoluteWithState(state, this.clock, action);
    }

    function scheduleRelative(state, dueTime, action) {
      return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
    }

    function scheduleAbsolute(state, dueTime, action) {
      return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
    }

    function invokeAction(scheduler, action) {
      action();
      return disposableEmpty;
    }

    inherits(VirtualTimeScheduler, __super__);

    /**
     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
     *
     * @constructor
     * @param {Number} initialClock Initial value for the clock.
     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
     */
    function VirtualTimeScheduler(initialClock, comparer) {
      this.clock = initialClock;
      this.comparer = comparer;
      this.isEnabled = false;
      this.queue = new PriorityQueue(1024);
      __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
    }

    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;

    /**
     * Adds a relative time value to an absolute time value.
     * @param {Number} absolute Absolute virtual time value.
     * @param {Number} relative Relative virtual time value to add.
     * @return {Number} Resulting absolute virtual time sum value.
     */
    VirtualTimeSchedulerPrototype.add = notImplemented;

    /**
     * Converts an absolute time to a number
     * @param {Any} The absolute time.
     * @returns {Number} The absolute time in ms
     */
    VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;

    /**
     * Converts the TimeSpan value to a relative virtual time value.
     * @param {Number} timeSpan TimeSpan value to convert.
     * @return {Number} Corresponding relative virtual time value.
     */
    VirtualTimeSchedulerPrototype.toRelative = notImplemented;

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
     * @param {Mixed} state Initial state passed to the action upon the first iteration.
     * @param {Number} period Period for running the work periodically.
     * @param {Function} action Action to be executed, potentially updating the state.
     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
     */
    VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function (state, period, action) {
      var s = new SchedulePeriodicRecursive(this, state, period, action);
      return s.start();
    };

    /**
     * Schedules an action to be executed after dueTime.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Number} dueTime Relative time after which to execute the action.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function (state, dueTime, action) {
      var runAt = this.add(this.clock, dueTime);
      return this.scheduleAbsoluteWithState(state, runAt, action);
    };

    /**
     * Schedules an action to be executed at dueTime.
     * @param {Number} dueTime Relative time after which to execute the action.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleRelative = function (dueTime, action) {
      return this.scheduleRelativeWithState(action, dueTime, invokeAction);
    };

    /**
     * Starts the virtual time scheduler.
     */
    VirtualTimeSchedulerPrototype.start = function () {
      if (!this.isEnabled) {
        this.isEnabled = true;
        do {
          var next = this.getNext();
          if (next !== null) {
            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
            next.invoke();
          } else {
            this.isEnabled = false;
          }
        } while (this.isEnabled);
      }
    };

    /**
     * Stops the virtual time scheduler.
     */
    VirtualTimeSchedulerPrototype.stop = function () {
      this.isEnabled = false;
    };

    /**
     * Advances the scheduler's clock to the specified time, running all work till that point.
     * @param {Number} time Absolute time to advance the scheduler's clock to.
     */
    VirtualTimeSchedulerPrototype.advanceTo = function (time) {
      var dueToClock = this.comparer(this.clock, time);
      if (this.comparer(this.clock, time) > 0) { throw new ArgumentOutOfRangeError(); }
      if (dueToClock === 0) { return; }
      if (!this.isEnabled) {
        this.isEnabled = true;
        do {
          var next = this.getNext();
          if (next !== null && this.comparer(next.dueTime, time) <= 0) {
            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
            next.invoke();
          } else {
            this.isEnabled = false;
          }
        } while (this.isEnabled);
        this.clock = time;
      }
    };

    /**
     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
     * @param {Number} time Relative time to advance the scheduler's clock by.
     */
    VirtualTimeSchedulerPrototype.advanceBy = function (time) {
      var dt = this.add(this.clock, time),
          dueToClock = this.comparer(this.clock, dt);
      if (dueToClock > 0) { throw new ArgumentOutOfRangeError(); }
      if (dueToClock === 0) {  return; }

      this.advanceTo(dt);
    };

    /**
     * Advances the scheduler's clock by the specified relative time.
     * @param {Number} time Relative time to advance the scheduler's clock by.
     */
    VirtualTimeSchedulerPrototype.sleep = function (time) {
      var dt = this.add(this.clock, time);
      if (this.comparer(this.clock, dt) >= 0) { throw new ArgumentOutOfRangeError(); }

      this.clock = dt;
    };

    /**
     * Gets the next scheduled item to be executed.
     * @returns {ScheduledItem} The next scheduled item.
     */
    VirtualTimeSchedulerPrototype.getNext = function () {
      while (this.queue.length > 0) {
        var next = this.queue.peek();
        if (next.isCancelled()) {
          this.queue.dequeue();
        } else {
          return next;
        }
      }
      return null;
    };

    /**
     * Schedules an action to be executed at dueTime.
     * @param {Scheduler} scheduler Scheduler to execute the action on.
     * @param {Number} dueTime Absolute time at which to execute the action.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (dueTime, action) {
      return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
    };

    /**
     * Schedules an action to be executed at dueTime.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Number} dueTime Absolute time at which to execute the action.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function (state, dueTime, action) {
      var self = this;

      function run(scheduler, state1) {
        self.queue.remove(si);
        return action(scheduler, state1);
      }

      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
      this.queue.enqueue(si);

      return si.disposable;
    };

    return VirtualTimeScheduler;
  }(Scheduler));

  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
  Rx.HistoricalScheduler = (function (__super__) {
    inherits(HistoricalScheduler, __super__);

    /**
     * Creates a new historical scheduler with the specified initial clock value.
     * @constructor
     * @param {Number} initialClock Initial value for the clock.
     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
     */
    function HistoricalScheduler(initialClock, comparer) {
      var clock = initialClock == null ? 0 : initialClock;
      var cmp = comparer || defaultSubComparer;
      __super__.call(this, clock, cmp);
    }

    var HistoricalSchedulerProto = HistoricalScheduler.prototype;

    /**
     * Adds a relative time value to an absolute time value.
     * @param {Number} absolute Absolute virtual time value.
     * @param {Number} relative Relative virtual time value to add.
     * @return {Number} Resulting absolute virtual time sum value.
     */
    HistoricalSchedulerProto.add = function (absolute, relative) {
      return absolute + relative;
    };

    HistoricalSchedulerProto.toDateTimeOffset = function (absolute) {
      return new Date(absolute).getTime();
    };

    /**
     * Converts the TimeSpan value to a relative virtual time value.
     * @memberOf HistoricalScheduler
     * @param {Number} timeSpan TimeSpan value to convert.
     * @return {Number} Corresponding relative virtual time value.
     */
    HistoricalSchedulerProto.toRelative = function (timeSpan) {
      return timeSpan;
    };

    return HistoricalScheduler;
  }(Rx.VirtualTimeScheduler));

  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
    inherits(AnonymousObservable, __super__);

    // Fix subscriber to check for undefined or function returned to decorate as Disposable
    function fixSubscriber(subscriber) {
      return subscriber && isFunction(subscriber.dispose) ? subscriber :
        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
    }

    function setDisposable(s, state) {
      var ado = state[0], subscribe = state[1];
      var sub = tryCatch(subscribe)(ado);

      if (sub === errorObj) {
        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
      }
      ado.setDisposable(fixSubscriber(sub));
    }

    function AnonymousObservable(subscribe, parent) {
      this.source = parent;

      function s(observer) {
        var ado = new AutoDetachObserver(observer), state = [ado, subscribe];

        if (currentThreadScheduler.scheduleRequired()) {
          currentThreadScheduler.scheduleWithState(state, setDisposable);
        } else {
          setDisposable(null, state);
        }
        return ado;
      }

      __super__.call(this, s);
    }

    return AnonymousObservable;

  }(Observable));

  var AutoDetachObserver = (function (__super__) {
    inherits(AutoDetachObserver, __super__);

    function AutoDetachObserver(observer) {
      __super__.call(this);
      this.observer = observer;
      this.m = new SingleAssignmentDisposable();
    }

    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;

    AutoDetachObserverPrototype.next = function (value) {
      var result = tryCatch(this.observer.onNext).call(this.observer, value);
      if (result === errorObj) {
        this.dispose();
        thrower(result.e);
      }
    };

    AutoDetachObserverPrototype.error = function (err) {
      var result = tryCatch(this.observer.onError).call(this.observer, err);
      this.dispose();
      result === errorObj && thrower(result.e);
    };

    AutoDetachObserverPrototype.completed = function () {
      var result = tryCatch(this.observer.onCompleted).call(this.observer);
      this.dispose();
      result === errorObj && thrower(result.e);
    };

    AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
    AutoDetachObserverPrototype.getDisposable = function () { return this.m.getDisposable(); };

    AutoDetachObserverPrototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this.m.dispose();
    };

    return AutoDetachObserver;
  }(AbstractObserver));

  var GroupedObservable = (function (__super__) {
    inherits(GroupedObservable, __super__);

    function subscribe(observer) {
      return this.underlyingObservable.subscribe(observer);
    }

    function GroupedObservable(key, underlyingObservable, mergedDisposable) {
      __super__.call(this, subscribe);
      this.key = key;
      this.underlyingObservable = !mergedDisposable ?
        underlyingObservable :
        new AnonymousObservable(function (observer) {
          return new CompositeDisposable(mergedDisposable.getDisposable(), underlyingObservable.subscribe(observer));
        });
    }

    return GroupedObservable;
  }(Observable));

  /**
   *  Represents an object that is both an observable sequence as well as an observer.
   *  Each notification is broadcasted to all subscribed observers.
   */
  var Subject = Rx.Subject = (function (__super__) {
    function subscribe(observer) {
      checkDisposed(this);
      if (!this.isStopped) {
        this.observers.push(observer);
        return new InnerSubscription(this, observer);
      }
      if (this.hasError) {
        observer.onError(this.error);
        return disposableEmpty;
      }
      observer.onCompleted();
      return disposableEmpty;
    }

    inherits(Subject, __super__);

    /**
     * Creates a subject.
     */
    function Subject() {
      __super__.call(this, subscribe);
      this.isDisposed = false,
      this.isStopped = false,
      this.observers = [];
      this.hasError = false;
    }

    addProperties(Subject.prototype, Observer.prototype, {
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onCompleted();
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          this.error = error;
          this.hasError = true;
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onError(error);
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (!this.isStopped) {
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onNext(value);
          }
        }
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
      }
    });

    /**
     * Creates a subject from the specified observer and observable.
     * @param {Observer} observer The observer used to send messages to the subject.
     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
     * @returns {Subject} Subject implemented using the given observer and observable.
     */
    Subject.create = function (observer, observable) {
      return new AnonymousSubject(observer, observable);
    };

    return Subject;
  }(Observable));

  /**
   *  Represents the result of an asynchronous operation.
   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
   */
  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {

    function subscribe(observer) {
      checkDisposed(this);

      if (!this.isStopped) {
        this.observers.push(observer);
        return new InnerSubscription(this, observer);
      }

      if (this.hasError) {
        observer.onError(this.error);
      } else if (this.hasValue) {
        observer.onNext(this.value);
        observer.onCompleted();
      } else {
        observer.onCompleted();
      }

      return disposableEmpty;
    }

    inherits(AsyncSubject, __super__);

    /**
     * Creates a subject that can only receive one value and that value is cached for all future observations.
     * @constructor
     */
    function AsyncSubject() {
      __super__.call(this, subscribe);

      this.isDisposed = false;
      this.isStopped = false;
      this.hasValue = false;
      this.observers = [];
      this.hasError = false;
    }

    addProperties(AsyncSubject.prototype, Observer, {
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () {
        checkDisposed(this);
        return this.observers.length > 0;
      },
      /**
       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
       */
      onCompleted: function () {
        var i, len;
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          var os = cloneArray(this.observers), len = os.length;

          if (this.hasValue) {
            for (i = 0; i < len; i++) {
              var o = os[i];
              o.onNext(this.value);
              o.onCompleted();
            }
          } else {
            for (i = 0; i < len; i++) {
              os[i].onCompleted();
            }
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the error.
       * @param {Mixed} error The Error to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          this.hasError = true;
          this.error = error;

          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onError(error);
          }

          this.observers.length = 0;
        }
      },
      /**
       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
       * @param {Mixed} value The value to store in the subject.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.value = value;
        this.hasValue = true;
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
        this.exception = null;
        this.value = null;
      }
    });

    return AsyncSubject;
  }(Observable));

  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
    inherits(AnonymousSubject, __super__);

    function subscribe(observer) {
      return this.observable.subscribe(observer);
    }

    function AnonymousSubject(observer, observable) {
      this.observer = observer;
      this.observable = observable;
      __super__.call(this, subscribe);
    }

    addProperties(AnonymousSubject.prototype, Observer.prototype, {
      onCompleted: function () {
        this.observer.onCompleted();
      },
      onError: function (error) {
        this.observer.onError(error);
      },
      onNext: function (value) {
        this.observer.onNext(value);
      }
    });

    return AnonymousSubject;
  }(Observable));

  /**
  * Used to pause and resume streams.
  */
  Rx.Pauser = (function (__super__) {
    inherits(Pauser, __super__);

    function Pauser() {
      __super__.call(this);
    }

    /**
     * Pauses the underlying sequence.
     */
    Pauser.prototype.pause = function () { this.onNext(false); };

    /**
    * Resumes the underlying sequence.
    */
    Pauser.prototype.resume = function () { this.onNext(true); };

    return Pauser;
  }(Subject));

  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    root.Rx = Rx;

    define(function() {
      return Rx;
    });
  } else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = Rx).Rx = Rx;
    } else {
      freeExports.Rx = Rx;
    }
  } else {
    // in a browser or Rhino
    root.Rx = Rx;
  }

  // All code before this point will be filtered from stack traces.
  var rEndingLine = captureLine();

}.call(this));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/browserify/node_modules/process/browser.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/core.js":[function(require,module,exports){
'use strict';

var asap = require('asap')

module.exports = Promise
function Promise(fn) {
  if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new')
  if (typeof fn !== 'function') throw new TypeError('not a function')
  var state = null
  var value = null
  var deferreds = []
  var self = this

  this.then = function(onFulfilled, onRejected) {
    return new Promise(function(resolve, reject) {
      handle(new Handler(onFulfilled, onRejected, resolve, reject))
    })
  }

  function handle(deferred) {
    if (state === null) {
      deferreds.push(deferred)
      return
    }
    asap(function() {
      var cb = state ? deferred.onFulfilled : deferred.onRejected
      if (cb === null) {
        (state ? deferred.resolve : deferred.reject)(value)
        return
      }
      var ret
      try {
        ret = cb(value)
      }
      catch (e) {
        deferred.reject(e)
        return
      }
      deferred.resolve(ret)
    })
  }

  function resolve(newValue) {
    try { //Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.')
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then
        if (typeof then === 'function') {
          doResolve(then.bind(newValue), resolve, reject)
          return
        }
      }
      state = true
      value = newValue
      finale()
    } catch (e) { reject(e) }
  }

  function reject(newValue) {
    state = false
    value = newValue
    finale()
  }

  function finale() {
    for (var i = 0, len = deferreds.length; i < len; i++)
      handle(deferreds[i])
    deferreds = null
  }

  doResolve(fn, resolve, reject)
}


function Handler(onFulfilled, onRejected, resolve, reject){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null
  this.onRejected = typeof onRejected === 'function' ? onRejected : null
  this.resolve = resolve
  this.reject = reject
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, onFulfilled, onRejected) {
  var done = false;
  try {
    fn(function (value) {
      if (done) return
      done = true
      onFulfilled(value)
    }, function (reason) {
      if (done) return
      done = true
      onRejected(reason)
    })
  } catch (ex) {
    if (done) return
    done = true
    onRejected(ex)
  }
}

},{"asap":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/node_modules/asap/asap.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/index.js":[function(require,module,exports){
'use strict';

//This file contains then/promise specific extensions to the core promise API

var Promise = require('./core.js')
var asap = require('asap')

module.exports = Promise

/* Static Functions */

function ValuePromise(value) {
  this.then = function (onFulfilled) {
    if (typeof onFulfilled !== 'function') return this
    return new Promise(function (resolve, reject) {
      asap(function () {
        try {
          resolve(onFulfilled(value))
        } catch (ex) {
          reject(ex);
        }
      })
    })
  }
}
ValuePromise.prototype = Object.create(Promise.prototype)

var TRUE = new ValuePromise(true)
var FALSE = new ValuePromise(false)
var NULL = new ValuePromise(null)
var UNDEFINED = new ValuePromise(undefined)
var ZERO = new ValuePromise(0)
var EMPTYSTRING = new ValuePromise('')

Promise.resolve = function (value) {
  if (value instanceof Promise) return value

  if (value === null) return NULL
  if (value === undefined) return UNDEFINED
  if (value === true) return TRUE
  if (value === false) return FALSE
  if (value === 0) return ZERO
  if (value === '') return EMPTYSTRING

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then
      if (typeof then === 'function') {
        return new Promise(then.bind(value))
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex)
      })
    }
  }

  return new ValuePromise(value)
}

Promise.from = Promise.cast = function (value) {
  var err = new Error('Promise.from and Promise.cast are deprecated, use Promise.resolve instead')
  err.name = 'Warning'
  console.warn(err.stack)
  return Promise.resolve(value)
}

Promise.denodeify = function (fn, argumentCount) {
  argumentCount = argumentCount || Infinity
  return function () {
    var self = this
    var args = Array.prototype.slice.call(arguments)
    return new Promise(function (resolve, reject) {
      while (args.length && args.length > argumentCount) {
        args.pop()
      }
      args.push(function (err, res) {
        if (err) reject(err)
        else resolve(res)
      })
      fn.apply(self, args)
    })
  }
}
Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments)
    var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null
    try {
      return fn.apply(this, arguments).nodeify(callback)
    } catch (ex) {
      if (callback === null || typeof callback == 'undefined') {
        return new Promise(function (resolve, reject) { reject(ex) })
      } else {
        asap(function () {
          callback(ex)
        })
      }
    }
  }
}

Promise.all = function () {
  var calledWithArray = arguments.length === 1 && Array.isArray(arguments[0])
  var args = Array.prototype.slice.call(calledWithArray ? arguments[0] : arguments)

  if (!calledWithArray) {
    var err = new Error('Promise.all should be called with a single array, calling it with multiple arguments is deprecated')
    err.name = 'Warning'
    console.warn(err.stack)
  }

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([])
    var remaining = args.length
    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then
          if (typeof then === 'function') {
            then.call(val, function (val) { res(i, val) }, reject)
            return
          }
        }
        args[i] = val
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex)
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i])
    }
  })
}

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) { 
    reject(value);
  });
}

Promise.race = function (values) {
  return new Promise(function (resolve, reject) { 
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    })
  });
}

/* Prototype Methods */

Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this
  self.then(null, function (err) {
    asap(function () {
      throw err
    })
  })
}

Promise.prototype.nodeify = function (callback) {
  if (typeof callback != 'function') return this

  this.then(function (value) {
    asap(function () {
      callback(null, value)
    })
  }, function (err) {
    asap(function () {
      callback(err)
    })
  })
}

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
}

},{"./core.js":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/core.js","asap":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/node_modules/asap/asap.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/node_modules/asap/asap.js":[function(require,module,exports){
(function (process){

// Use the fastest possible means to execute a task in a future turn
// of the event loop.

// linked list of tasks (single, with head node)
var head = {task: void 0, next: null};
var tail = head;
var flushing = false;
var requestFlush = void 0;
var isNodeJS = false;

function flush() {
    /* jshint loopfunc: true */

    while (head.next) {
        head = head.next;
        var task = head.task;
        head.task = void 0;
        var domain = head.domain;

        if (domain) {
            head.domain = void 0;
            domain.enter();
        }

        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function() {
                   throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    flushing = false;
}

if (typeof process !== "undefined" && process.nextTick) {
    // Node.js before 0.9. Note that some fake-Node environments, like the
    // Mocha test runner, introduce a `process` global without a `nextTick`.
    isNodeJS = true;

    requestFlush = function () {
        process.nextTick(flush);
    };

} else if (typeof setImmediate === "function") {
    // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
    if (typeof window !== "undefined") {
        requestFlush = setImmediate.bind(window, flush);
    } else {
        requestFlush = function () {
            setImmediate(flush);
        };
    }

} else if (typeof MessageChannel !== "undefined") {
    // modern browsers
    // http://www.nonblocking.io/2011/06/windownexttick.html
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    requestFlush = function () {
        channel.port2.postMessage(0);
    };

} else {
    // old browsers
    requestFlush = function () {
        setTimeout(flush, 0);
    };
}

function asap(task) {
    tail = tail.next = {
        task: task,
        domain: isNodeJS && process.domain,
        next: null
    };

    if (!flushing) {
        flushing = true;
        requestFlush();
    }
};

module.exports = asap;


}).call(this,require('_process'))

},{"_process":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/browserify/node_modules/process/browser.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/drivers/indexeddb.js":[function(require,module,exports){
// Some code originally from async_storage.js in
// [Gaia](https://github.com/mozilla-b2g/gaia).
(function() {
    'use strict';

    // Originally found in https://github.com/mozilla-b2g/gaia/blob/e8f624e4cc9ea945727278039b3bc9bcb9f8667a/shared/js/async_storage.js

    // Promises!
    var Promise = (typeof module !== 'undefined' && module.exports) ?
                  require('promise') : this.Promise;

    // Initialize IndexedDB; fall back to vendor-prefixed versions if needed.
    var indexedDB = indexedDB || this.indexedDB || this.webkitIndexedDB ||
                    this.mozIndexedDB || this.OIndexedDB ||
                    this.msIndexedDB;

    // If IndexedDB isn't available, we get outta here!
    if (!indexedDB) {
        return;
    }

    // Open the IndexedDB database (automatically creates one if one didn't
    // previously exist), using any options set in the config.
    function _initStorage(options) {
        var self = this;
        var dbInfo = {
            db: null
        };

        if (options) {
            for (var i in options) {
                dbInfo[i] = options[i];
            }
        }

        return new Promise(function(resolve, reject) {
            var openreq = indexedDB.open(dbInfo.name, dbInfo.version);
            openreq.onerror = function() {
                reject(openreq.error);
            };
            openreq.onupgradeneeded = function() {
                // First time setup: create an empty object store
                openreq.result.createObjectStore(dbInfo.storeName);
            };
            openreq.onsuccess = function() {
                dbInfo.db = openreq.result;
                self._dbInfo = dbInfo;
                resolve();
            };
        });
    }

    function getItem(key, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly')
                    .objectStore(dbInfo.storeName);
                var req = store.get(key);

                req.onsuccess = function() {
                    var value = req.result;
                    if (value === undefined) {
                        value = null;
                    }

                    resolve(value);
                };

                req.onerror = function() {
                    reject(req.error);
                };
            }).catch(reject);
        });

        executeDeferedCallback(promise, callback);
        return promise;
    }

    // Iterate over all items stored in database.
    function iterate(iterator, callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly')
                                     .objectStore(dbInfo.storeName);

                var req = store.openCursor();
                var iterationNumber = 1;

                req.onsuccess = function() {
                    var cursor = req.result;

                    if (cursor) {
                        var result = iterator(cursor.value, cursor.key, iterationNumber++);

                        if (result !== void(0)) {
                            resolve(result);
                        } else {
                            cursor.continue();
                        }
                    } else {
                        resolve();
                    }
                };

                req.onerror = function() {
                    reject(req.error);
                };
            }).catch(reject);
        });

        executeDeferedCallback(promise, callback);

        return promise;
    }

    function setItem(key, value, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');
                var store = transaction.objectStore(dbInfo.storeName);

                // The reason we don't _save_ null is because IE 10 does
                // not support saving the `null` type in IndexedDB. How
                // ironic, given the bug below!
                // See: https://github.com/mozilla/localForage/issues/161
                if (value === null) {
                    value = undefined;
                }

                var req = store.put(value, key);
                transaction.oncomplete = function() {
                    // Cast to undefined so the value passed to
                    // callback/promise is the same as what one would get out
                    // of `getItem()` later. This leads to some weirdness
                    // (setItem('foo', undefined) will return `null`), but
                    // it's not my fault localStorage is our baseline and that
                    // it's weird.
                    if (value === undefined) {
                        value = null;
                    }

                    resolve(value);
                };
                transaction.onabort = transaction.onerror = function() {
                    reject(req.error);
                };
            }).catch(reject);
        });

        executeDeferedCallback(promise, callback);
        return promise;
    }

    function removeItem(key, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');
                var store = transaction.objectStore(dbInfo.storeName);

                // We use a Grunt task to make this safe for IE and some
                // versions of Android (including those used by Cordova).
                // Normally IE won't like `.delete()` and will insist on
                // using `['delete']()`, but we have a build step that
                // fixes this for us now.
                var req = store.delete(key);
                transaction.oncomplete = function() {
                    resolve();
                };

                transaction.onerror = function() {
                    reject(req.error);
                };

                // The request will be aborted if we've exceeded our storage
                // space. In this case, we will reject with a specific
                // "QuotaExceededError".
                transaction.onabort = function(event) {
                    var error = event.target.error;
                    if (error === 'QuotaExceededError') {
                        reject(error);
                    }
                };
            }).catch(reject);
        });

        executeDeferedCallback(promise, callback);
        return promise;
    }

    function clear(callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');
                var store = transaction.objectStore(dbInfo.storeName);
                var req = store.clear();

                transaction.oncomplete = function() {
                    resolve();
                };

                transaction.onabort = transaction.onerror = function() {
                    reject(req.error);
                };
            }).catch(reject);
        });

        executeDeferedCallback(promise, callback);
        return promise;
    }

    function length(callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly')
                              .objectStore(dbInfo.storeName);
                var req = store.count();

                req.onsuccess = function() {
                    resolve(req.result);
                };

                req.onerror = function() {
                    reject(req.error);
                };
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function key(n, callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            if (n < 0) {
                resolve(null);

                return;
            }

            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly')
                              .objectStore(dbInfo.storeName);

                var advanced = false;
                var req = store.openCursor();
                req.onsuccess = function() {
                    var cursor = req.result;
                    if (!cursor) {
                        // this means there weren't enough keys
                        resolve(null);

                        return;
                    }

                    if (n === 0) {
                        // We have the first key, return it if that's what they
                        // wanted.
                        resolve(cursor.key);
                    } else {
                        if (!advanced) {
                            // Otherwise, ask the cursor to skip ahead n
                            // records.
                            advanced = true;
                            cursor.advance(n);
                        } else {
                            // When we get here, we've got the nth key.
                            resolve(cursor.key);
                        }
                    }
                };

                req.onerror = function() {
                    reject(req.error);
                };
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function keys(callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly')
                              .objectStore(dbInfo.storeName);

                var req = store.openCursor();
                var keys = [];

                req.onsuccess = function() {
                    var cursor = req.result;

                    if (!cursor) {
                        resolve(keys);
                        return;
                    }

                    keys.push(cursor.key);
                    cursor.continue();
                };

                req.onerror = function() {
                    reject(req.error);
                };
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function executeCallback(promise, callback) {
        if (callback) {
            promise.then(function(result) {
                callback(null, result);
            }, function(error) {
                callback(error);
            });
        }
    }

    function executeDeferedCallback(promise, callback) {
        if (callback) {
            promise.then(function(result) {
                deferCallback(callback, result);
            }, function(error) {
                callback(error);
            });
        }
    }

    // Under Chrome the callback is called before the changes (save, clear)
    // are actually made. So we use a defer function which wait that the
    // call stack to be empty.
    // For more info : https://github.com/mozilla/localForage/issues/175
    // Pull request : https://github.com/mozilla/localForage/pull/178
    function deferCallback(callback, result) {
        if (callback) {
            return setTimeout(function() {
                return callback(null, result);
            }, 0);
        }
    }

    var asyncStorage = {
        _driver: 'asyncStorage',
        _initStorage: _initStorage,
        iterate: iterate,
        getItem: getItem,
        setItem: setItem,
        removeItem: removeItem,
        clear: clear,
        length: length,
        key: key,
        keys: keys
    };

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = asyncStorage;
    } else if (typeof define === 'function' && define.amd) {
        define('asyncStorage', function() {
            return asyncStorage;
        });
    } else {
        this.asyncStorage = asyncStorage;
    }
}).call(window);

},{"promise":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/drivers/localstorage.js":[function(require,module,exports){
// If IndexedDB isn't available, we'll fall back to localStorage.
// Note that this will have considerable performance and storage
// side-effects (all data will be serialized on save and only data that
// can be converted to a string via `JSON.stringify()` will be saved).
(function() {
    'use strict';

    // Promises!
    var Promise = (typeof module !== 'undefined' && module.exports) ?
                  require('promise') : this.Promise;

    var globalObject = this;
    var serializer = null;
    var localStorage = null;

    // If the app is running inside a Google Chrome packaged webapp, or some
    // other context where localStorage isn't available, we don't use
    // localStorage. This feature detection is preferred over the old
    // `if (window.chrome && window.chrome.runtime)` code.
    // See: https://github.com/mozilla/localForage/issues/68
    try {
        // If localStorage isn't available, we get outta here!
        // This should be inside a try catch
        if (!this.localStorage || !('setItem' in this.localStorage)) {
            return;
        }
        // Initialize localStorage and create a variable to use throughout
        // the code.
        localStorage = this.localStorage;
    } catch (e) {
        return;
    }

    var ModuleType = {
        DEFINE: 1,
        EXPORT: 2,
        WINDOW: 3
    };

    // Attaching to window (i.e. no module loader) is the assumed,
    // simple default.
    var moduleType = ModuleType.WINDOW;

    // Find out what kind of module setup we have; if none, we'll just attach
    // localForage to the main window.
    if (typeof module !== 'undefined' && module.exports) {
        moduleType = ModuleType.EXPORT;
    } else if (typeof define === 'function' && define.amd) {
        moduleType = ModuleType.DEFINE;
    }

    // Config the localStorage backend, using options set in the config.
    function _initStorage(options) {
        var self = this;
        var dbInfo = {};
        if (options) {
            for (var i in options) {
                dbInfo[i] = options[i];
            }
        }

        dbInfo.keyPrefix = dbInfo.name + '/';

        self._dbInfo = dbInfo;

        var serializerPromise = new Promise(function(resolve/*, reject*/) {
            // We allow localForage to be declared as a module or as a
            // library available without AMD/require.js.
            if (moduleType === ModuleType.DEFINE) {
                require(['localforageSerializer'], resolve);
            } else if (moduleType === ModuleType.EXPORT) {
                // Making it browserify friendly
                resolve(require('./../utils/serializer'));
            } else {
                resolve(globalObject.localforageSerializer);
            }
        });

        return serializerPromise.then(function(lib) {
            serializer = lib;
            return Promise.resolve();
        });
    }

    // Remove all keys from the datastore, effectively destroying all data in
    // the app's key/value store!
    function clear(callback) {
        var self = this;
        var promise = self.ready().then(function() {
            var keyPrefix = self._dbInfo.keyPrefix;

            for (var i = localStorage.length - 1; i >= 0; i--) {
                var key = localStorage.key(i);

                if (key.indexOf(keyPrefix) === 0) {
                    localStorage.removeItem(key);
                }
            }
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Retrieve an item from the store. Unlike the original async_storage
    // library in Gaia, we don't modify return values at all. If a key's value
    // is `undefined`, we pass that value to the callback function.
    function getItem(key, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = self.ready().then(function() {
            var dbInfo = self._dbInfo;
            var result = localStorage.getItem(dbInfo.keyPrefix + key);

            // If a result was found, parse it from the serialized
            // string into a JS object. If result isn't truthy, the key
            // is likely undefined and we'll pass it straight to the
            // callback.
            if (result) {
                result = serializer.deserialize(result);
            }

            return result;
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Iterate over all items in the store.
    function iterate(iterator, callback) {
        var self = this;

        var promise = self.ready().then(function() {
            var keyPrefix = self._dbInfo.keyPrefix;
            var keyPrefixLength = keyPrefix.length;
            var length = localStorage.length;

            for (var i = 0; i < length; i++) {
                var key = localStorage.key(i);
                var value = localStorage.getItem(key);

                // If a result was found, parse it from the serialized
                // string into a JS object. If result isn't truthy, the
                // key is likely undefined and we'll pass it straight
                // to the iterator.
                if (value) {
                    value = serializer.deserialize(value);
                }

                value = iterator(value, key.substring(keyPrefixLength), i + 1);

                if (value !== void(0)) {
                    return value;
                }
            }
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Same as localStorage's key() method, except takes a callback.
    function key(n, callback) {
        var self = this;
        var promise = self.ready().then(function() {
            var dbInfo = self._dbInfo;
            var result;
            try {
                result = localStorage.key(n);
            } catch (error) {
                result = null;
            }

            // Remove the prefix from the key, if a key is found.
            if (result) {
                result = result.substring(dbInfo.keyPrefix.length);
            }

            return result;
        });

        executeCallback(promise, callback);
        return promise;
    }

    function keys(callback) {
        var self = this;
        var promise = self.ready().then(function() {
            var dbInfo = self._dbInfo;
            var length = localStorage.length;
            var keys = [];

            for (var i = 0; i < length; i++) {
                if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {
                    keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));
                }
            }

            return keys;
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Supply the number of keys in the datastore to the callback function.
    function length(callback) {
        var self = this;
        var promise = self.keys().then(function(keys) {
            return keys.length;
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Remove an item from the store, nice and simple.
    function removeItem(key, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = self.ready().then(function() {
            var dbInfo = self._dbInfo;
            localStorage.removeItem(dbInfo.keyPrefix + key);
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Set a key's value and run an optional callback once the value is set.
    // Unlike Gaia's implementation, the callback function is passed the value,
    // in case you want to operate on that value only after you're sure it
    // saved, or something like that.
    function setItem(key, value, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = self.ready().then(function() {
            // Convert undefined values to null.
            // https://github.com/mozilla/localForage/pull/42
            if (value === undefined) {
                value = null;
            }

            // Save the original value to pass to the callback.
            var originalValue = value;

            return new Promise(function(resolve, reject) {
                serializer.serialize(value, function(value, error) {
                    if (error) {
                        reject(error);
                    } else {
                        try {
                            var dbInfo = self._dbInfo;
                            localStorage.setItem(dbInfo.keyPrefix + key, value);
                            resolve(originalValue);
                        } catch (e) {
                            // localStorage capacity exceeded.
                            // TODO: Make this a specific error/event.
                            if (e.name === 'QuotaExceededError' ||
                                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                                reject(e);
                            }
                            reject(e);
                        }
                    }
                });
            });
        });

        executeCallback(promise, callback);
        return promise;
    }

    function executeCallback(promise, callback) {
        if (callback) {
            promise.then(function(result) {
                callback(null, result);
            }, function(error) {
                callback(error);
            });
        }
    }

    var localStorageWrapper = {
        _driver: 'localStorageWrapper',
        _initStorage: _initStorage,
        // Default API, from Gaia/localStorage.
        iterate: iterate,
        getItem: getItem,
        setItem: setItem,
        removeItem: removeItem,
        clear: clear,
        length: length,
        key: key,
        keys: keys
    };

    if (moduleType === ModuleType.EXPORT) {
        module.exports = localStorageWrapper;
    } else if (moduleType === ModuleType.DEFINE) {
        define('localStorageWrapper', function() {
            return localStorageWrapper;
        });
    } else {
        this.localStorageWrapper = localStorageWrapper;
    }
}).call(window);

},{"./../utils/serializer":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/utils/serializer.js","promise":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/drivers/websql.js":[function(require,module,exports){
/*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function() {
    'use strict';

    // Promises!
    var Promise = (typeof module !== 'undefined' && module.exports) ?
                  require('promise') : this.Promise;

    var globalObject = this;
    var serializer = null;
    var openDatabase = this.openDatabase;

    // If WebSQL methods aren't available, we can stop now.
    if (!openDatabase) {
        return;
    }

    var ModuleType = {
        DEFINE: 1,
        EXPORT: 2,
        WINDOW: 3
    };

    // Attaching to window (i.e. no module loader) is the assumed,
    // simple default.
    var moduleType = ModuleType.WINDOW;

    // Find out what kind of module setup we have; if none, we'll just attach
    // localForage to the main window.
    if (typeof module !== 'undefined' && module.exports) {
        moduleType = ModuleType.EXPORT;
    } else if (typeof define === 'function' && define.amd) {
        moduleType = ModuleType.DEFINE;
    }

    // Open the WebSQL database (automatically creates one if one didn't
    // previously exist), using any options set in the config.
    function _initStorage(options) {
        var self = this;
        var dbInfo = {
            db: null
        };

        if (options) {
            for (var i in options) {
                dbInfo[i] = typeof(options[i]) !== 'string' ?
                            options[i].toString() : options[i];
            }
        }

        var serializerPromise = new Promise(function(resolve/*, reject*/) {
            // We allow localForage to be declared as a module or as a
            // library available without AMD/require.js.
            if (moduleType === ModuleType.DEFINE) {
                require(['localforageSerializer'], resolve);
            } else if (moduleType === ModuleType.EXPORT) {
                // Making it browserify friendly
                resolve(require('./../utils/serializer'));
            } else {
                resolve(globalObject.localforageSerializer);
            }
        });

        var dbInfoPromise = new Promise(function(resolve, reject) {
            // Open the database; the openDatabase API will automatically
            // create it for us if it doesn't exist.
            try {
                dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version),
                                         dbInfo.description, dbInfo.size);
            } catch (e) {
                return self.setDriver(self.LOCALSTORAGE).then(function() {
                    return self._initStorage(options);
                }).then(resolve).catch(reject);
            }

            // Create our key/value table if it doesn't exist.
            dbInfo.db.transaction(function(t) {
                t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName +
                             ' (id INTEGER PRIMARY KEY, key unique, value)', [],
                             function() {
                    self._dbInfo = dbInfo;
                    resolve();
                }, function(t, error) {
                    reject(error);
                });
            });
        });

        return serializerPromise.then(function(lib) {
            serializer = lib;
            return dbInfoPromise;
        });
    }

    function getItem(key, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                dbInfo.db.transaction(function(t) {
                    t.executeSql('SELECT * FROM ' + dbInfo.storeName +
                                 ' WHERE key = ? LIMIT 1', [key],
                                 function(t, results) {
                        var result = results.rows.length ?
                                     results.rows.item(0).value : null;

                        // Check to see if this is serialized content we need to
                        // unpack.
                        if (result) {
                            result = serializer.deserialize(result);
                        }

                        resolve(result);
                    }, function(t, error) {

                        reject(error);
                    });
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function iterate(iterator, callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;

                dbInfo.db.transaction(function(t) {
                    t.executeSql('SELECT * FROM ' + dbInfo.storeName, [],
                        function(t, results) {
                            var rows = results.rows;
                            var length = rows.length;

                            for (var i = 0; i < length; i++) {
                                var item = rows.item(i);
                                var result = item.value;

                                // Check to see if this is serialized content
                                // we need to unpack.
                                if (result) {
                                    result = serializer.deserialize(result);
                                }

                                result = iterator(result, item.key, i + 1);

                                // void(0) prevents problems with redefinition
                                // of `undefined`.
                                if (result !== void(0)) {
                                    resolve(result);
                                    return;
                                }
                            }

                            resolve();
                        }, function(t, error) {
                            reject(error);
                        });
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function setItem(key, value, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                // The localStorage API doesn't return undefined values in an
                // "expected" way, so undefined is always cast to null in all
                // drivers. See: https://github.com/mozilla/localForage/pull/42
                if (value === undefined) {
                    value = null;
                }

                // Save the original value to pass to the callback.
                var originalValue = value;

                serializer.serialize(value, function(value, error) {
                    if (error) {
                        reject(error);
                    } else {
                        var dbInfo = self._dbInfo;
                        dbInfo.db.transaction(function(t) {
                            t.executeSql('INSERT OR REPLACE INTO ' +
                                         dbInfo.storeName +
                                         ' (key, value) VALUES (?, ?)',
                                         [key, value], function() {
                                resolve(originalValue);
                            }, function(t, error) {
                                reject(error);
                            });
                        }, function(sqlError) { // The transaction failed; check
                                                // to see if it's a quota error.
                            if (sqlError.code === sqlError.QUOTA_ERR) {
                                // We reject the callback outright for now, but
                                // it's worth trying to re-run the transaction.
                                // Even if the user accepts the prompt to use
                                // more storage on Safari, this error will
                                // be called.
                                //
                                // TODO: Try to re-run the transaction.
                                reject(sqlError);
                            }
                        });
                    }
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function removeItem(key, callback) {
        var self = this;

        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            window.console.warn(key +
                                ' used as a key, but it is not a string.');
            key = String(key);
        }

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                dbInfo.db.transaction(function(t) {
                    t.executeSql('DELETE FROM ' + dbInfo.storeName +
                                 ' WHERE key = ?', [key], function() {

                        resolve();
                    }, function(t, error) {

                        reject(error);
                    });
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Deletes every item in the table.
    // TODO: Find out if this resets the AUTO_INCREMENT number.
    function clear(callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                dbInfo.db.transaction(function(t) {
                    t.executeSql('DELETE FROM ' + dbInfo.storeName, [],
                                 function() {
                        resolve();
                    }, function(t, error) {
                        reject(error);
                    });
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Does a simple `COUNT(key)` to get the number of items stored in
    // localForage.
    function length(callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                dbInfo.db.transaction(function(t) {
                    // Ahhh, SQL makes this one soooooo easy.
                    t.executeSql('SELECT COUNT(key) as c FROM ' +
                                 dbInfo.storeName, [], function(t, results) {
                        var result = results.rows.item(0).c;

                        resolve(result);
                    }, function(t, error) {

                        reject(error);
                    });
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    // Return the key located at key index X; essentially gets the key from a
    // `WHERE id = ?`. This is the most efficient way I can think to implement
    // this rarely-used (in my experience) part of the API, but it can seem
    // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
    // the ID of each key will change every time it's updated. Perhaps a stored
    // procedure for the `setItem()` SQL would solve this problem?
    // TODO: Don't change ID on `setItem()`.
    function key(n, callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                dbInfo.db.transaction(function(t) {
                    t.executeSql('SELECT key FROM ' + dbInfo.storeName +
                                 ' WHERE id = ? LIMIT 1', [n + 1],
                                 function(t, results) {
                        var result = results.rows.length ?
                                     results.rows.item(0).key : null;
                        resolve(result);
                    }, function(t, error) {
                        reject(error);
                    });
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function keys(callback) {
        var self = this;

        var promise = new Promise(function(resolve, reject) {
            self.ready().then(function() {
                var dbInfo = self._dbInfo;
                dbInfo.db.transaction(function(t) {
                    t.executeSql('SELECT key FROM ' + dbInfo.storeName, [],
                                 function(t, results) {
                        var keys = [];

                        for (var i = 0; i < results.rows.length; i++) {
                            keys.push(results.rows.item(i).key);
                        }

                        resolve(keys);
                    }, function(t, error) {

                        reject(error);
                    });
                });
            }).catch(reject);
        });

        executeCallback(promise, callback);
        return promise;
    }

    function executeCallback(promise, callback) {
        if (callback) {
            promise.then(function(result) {
                callback(null, result);
            }, function(error) {
                callback(error);
            });
        }
    }

    var webSQLStorage = {
        _driver: 'webSQLStorage',
        _initStorage: _initStorage,
        iterate: iterate,
        getItem: getItem,
        setItem: setItem,
        removeItem: removeItem,
        clear: clear,
        length: length,
        key: key,
        keys: keys
    };

    if (moduleType === ModuleType.DEFINE) {
        define('webSQLStorage', function() {
            return webSQLStorage;
        });
    } else if (moduleType === ModuleType.EXPORT) {
        module.exports = webSQLStorage;
    } else {
        this.webSQLStorage = webSQLStorage;
    }
}).call(window);

},{"./../utils/serializer":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/utils/serializer.js","promise":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/localforage.js":[function(require,module,exports){
(function() {
    'use strict';

    // Promises!
    var Promise = (typeof module !== 'undefined' && module.exports) ?
                  require('promise') : this.Promise;

    // Custom drivers are stored here when `defineDriver()` is called.
    // They are shared across all instances of localForage.
    var CustomDrivers = {};

    var DriverType = {
        INDEXEDDB: 'asyncStorage',
        LOCALSTORAGE: 'localStorageWrapper',
        WEBSQL: 'webSQLStorage'
    };

    var DefaultDriverOrder = [
        DriverType.INDEXEDDB,
        DriverType.WEBSQL,
        DriverType.LOCALSTORAGE
    ];

    var LibraryMethods = [
        'clear',
        'getItem',
        'iterate',
        'key',
        'keys',
        'length',
        'removeItem',
        'setItem'
    ];

    var ModuleType = {
        DEFINE: 1,
        EXPORT: 2,
        WINDOW: 3
    };

    var DefaultConfig = {
        description: '',
        driver: DefaultDriverOrder.slice(),
        name: 'localforage',
        // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
        // we can use without a prompt.
        size: 4980736,
        storeName: 'keyvaluepairs',
        version: 1.0
    };

    // Attaching to window (i.e. no module loader) is the assumed,
    // simple default.
    var moduleType = ModuleType.WINDOW;

    // Find out what kind of module setup we have; if none, we'll just attach
    // localForage to the main window.
    if (typeof module !== 'undefined' && module.exports) {
        moduleType = ModuleType.EXPORT;
    } else if (typeof define === 'function' && define.amd) {
        moduleType = ModuleType.DEFINE;
    }

    // Check to see if IndexedDB is available and if it is the latest
    // implementation; it's our preferred backend library. We use "_spec_test"
    // as the name of the database because it's not the one we'll operate on,
    // but it's useful to make sure its using the right spec.
    // See: https://github.com/mozilla/localForage/issues/128
    var driverSupport = (function(self) {
        // Initialize IndexedDB; fall back to vendor-prefixed versions
        // if needed.
        var indexedDB = indexedDB || self.indexedDB || self.webkitIndexedDB ||
                        self.mozIndexedDB || self.OIndexedDB ||
                        self.msIndexedDB;

        var result = {};

        result[DriverType.WEBSQL] = !!self.openDatabase;
        result[DriverType.INDEXEDDB] = !!(function() {
            // We mimic PouchDB here; just UA test for Safari (which, as of
            // iOS 8/Yosemite, doesn't properly support IndexedDB).
            // IndexedDB support is broken and different from Blink's.
            // This is faster than the test case (and it's sync), so we just
            // do this. *SIGH*
            // http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/
            //
            // We test for openDatabase because IE Mobile identifies itself
            // as Safari. Oh the lulz...
            if (typeof self.openDatabase !== 'undefined' && self.navigator &&
                self.navigator.userAgent &&
                /Safari/.test(self.navigator.userAgent) &&
                !/Chrome/.test(self.navigator.userAgent)) {
                return false;
            }
            try {
                return indexedDB &&
                       typeof indexedDB.open === 'function' &&
                       // Some Samsung/HTC Android 4.0-4.3 devices
                       // have older IndexedDB specs; if this isn't available
                       // their IndexedDB is too old for us to use.
                       // (Replaces the onupgradeneeded test.)
                       typeof self.IDBKeyRange !== 'undefined';
            } catch (e) {
                return false;
            }
        })();

        result[DriverType.LOCALSTORAGE] = !!(function() {
            try {
                return (self.localStorage &&
                        ('setItem' in self.localStorage) &&
                        (self.localStorage.setItem));
            } catch (e) {
                return false;
            }
        })();

        return result;
    })(this);

    var isArray = Array.isArray || function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };

    function callWhenReady(localForageInstance, libraryMethod) {
        localForageInstance[libraryMethod] = function() {
            var _args = arguments;
            return localForageInstance.ready().then(function() {
                return localForageInstance[libraryMethod].apply(localForageInstance, _args);
            });
        };
    }

    function extend() {
        for (var i = 1; i < arguments.length; i++) {
            var arg = arguments[i];

            if (arg) {
                for (var key in arg) {
                    if (arg.hasOwnProperty(key)) {
                        if (isArray(arg[key])) {
                            arguments[0][key] = arg[key].slice();
                        } else {
                            arguments[0][key] = arg[key];
                        }
                    }
                }
            }
        }

        return arguments[0];
    }

    function isLibraryDriver(driverName) {
        for (var driver in DriverType) {
            if (DriverType.hasOwnProperty(driver) &&
                DriverType[driver] === driverName) {
                return true;
            }
        }

        return false;
    }

    var globalObject = this;

    function LocalForage(options) {
        this._config = extend({}, DefaultConfig, options);
        this._driverSet = null;
        this._ready = false;
        this._dbInfo = null;

        // Add a stub for each driver API method that delays the call to the
        // corresponding driver method until localForage is ready. These stubs
        // will be replaced by the driver methods as soon as the driver is
        // loaded, so there is no performance impact.
        for (var i = 0; i < LibraryMethods.length; i++) {
            callWhenReady(this, LibraryMethods[i]);
        }

        this.setDriver(this._config.driver);
    }

    LocalForage.prototype.INDEXEDDB = DriverType.INDEXEDDB;
    LocalForage.prototype.LOCALSTORAGE = DriverType.LOCALSTORAGE;
    LocalForage.prototype.WEBSQL = DriverType.WEBSQL;

    // Set any config values for localForage; can be called anytime before
    // the first API call (e.g. `getItem`, `setItem`).
    // We loop through options so we don't overwrite existing config
    // values.
    LocalForage.prototype.config = function(options) {
        // If the options argument is an object, we use it to set values.
        // Otherwise, we return either a specified config value or all
        // config values.
        if (typeof(options) === 'object') {
            // If localforage is ready and fully initialized, we can't set
            // any new configuration values. Instead, we return an error.
            if (this._ready) {
                return new Error("Can't call config() after localforage " +
                                 'has been used.');
            }

            for (var i in options) {
                if (i === 'storeName') {
                    options[i] = options[i].replace(/\W/g, '_');
                }

                this._config[i] = options[i];
            }

            // after all config options are set and
            // the driver option is used, try setting it
            if ('driver' in options && options.driver) {
                this.setDriver(this._config.driver);
            }

            return true;
        } else if (typeof(options) === 'string') {
            return this._config[options];
        } else {
            return this._config;
        }
    };

    // Used to define a custom driver, shared across all instances of
    // localForage.
    LocalForage.prototype.defineDriver = function(driverObject, callback,
                                                  errorCallback) {
        var defineDriver = new Promise(function(resolve, reject) {
            try {
                var driverName = driverObject._driver;
                var complianceError = new Error(
                    'Custom driver not compliant; see ' +
                    'https://mozilla.github.io/localForage/#definedriver'
                );
                var namingError = new Error(
                    'Custom driver name already in use: ' + driverObject._driver
                );

                // A driver name should be defined and not overlap with the
                // library-defined, default drivers.
                if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                }
                if (isLibraryDriver(driverObject._driver)) {
                    reject(namingError);
                    return;
                }

                var customDriverMethods = LibraryMethods.concat('_initStorage');
                for (var i = 0; i < customDriverMethods.length; i++) {
                    var customDriverMethod = customDriverMethods[i];
                    if (!customDriverMethod ||
                        !driverObject[customDriverMethod] ||
                        typeof driverObject[customDriverMethod] !== 'function') {
                        reject(complianceError);
                        return;
                    }
                }

                var supportPromise = Promise.resolve(true);
                if ('_support'  in driverObject) {
                    if (driverObject._support && typeof driverObject._support === 'function') {
                        supportPromise = driverObject._support();
                    } else {
                        supportPromise = Promise.resolve(!!driverObject._support);
                    }
                }

                supportPromise.then(function(supportResult) {
                    driverSupport[driverName] = supportResult;
                    CustomDrivers[driverName] = driverObject;
                    resolve();
                }, reject);
            } catch (e) {
                reject(e);
            }
        });

        defineDriver.then(callback, errorCallback);
        return defineDriver;
    };

    LocalForage.prototype.driver = function() {
        return this._driver || null;
    };

    LocalForage.prototype.ready = function(callback) {
        var self = this;

        var ready = new Promise(function(resolve, reject) {
            self._driverSet.then(function() {
                if (self._ready === null) {
                    self._ready = self._initStorage(self._config);
                }

                self._ready.then(resolve, reject);
            }).catch(reject);
        });

        ready.then(callback, callback);
        return ready;
    };

    LocalForage.prototype.setDriver = function(drivers, callback,
                                               errorCallback) {
        var self = this;

        if (typeof drivers === 'string') {
            drivers = [drivers];
        }

        this._driverSet = new Promise(function(resolve, reject) {
            var driverName = self._getFirstSupportedDriver(drivers);
            var error = new Error('No available storage method found.');

            if (!driverName) {
                self._driverSet = Promise.reject(error);
                reject(error);
                return;
            }

            self._dbInfo = null;
            self._ready = null;

            if (isLibraryDriver(driverName)) {
                // We allow localForage to be declared as a module or as a
                // library available without AMD/require.js.
                if (moduleType === ModuleType.DEFINE) {
                    require([driverName], function(lib) {
                        self._extend(lib);

                        resolve();
                    });

                    return;
                } else if (moduleType === ModuleType.EXPORT) {
                    // Making it browserify friendly
                    var driver;
                    switch (driverName) {
                        case self.INDEXEDDB:
                            driver = require('./drivers/indexeddb');
                            break;
                        case self.LOCALSTORAGE:
                            driver = require('./drivers/localstorage');
                            break;
                        case self.WEBSQL:
                            driver = require('./drivers/websql');
                    }

                    self._extend(driver);
                } else {
                    self._extend(globalObject[driverName]);
                }
            } else if (CustomDrivers[driverName]) {
                self._extend(CustomDrivers[driverName]);
            } else {
                self._driverSet = Promise.reject(error);
                reject(error);
                return;
            }

            resolve();
        });

        function setDriverToConfig() {
            self._config.driver = self.driver();
        }
        this._driverSet.then(setDriverToConfig, setDriverToConfig);

        this._driverSet.then(callback, errorCallback);
        return this._driverSet;
    };

    LocalForage.prototype.supports = function(driverName) {
        return !!driverSupport[driverName];
    };

    LocalForage.prototype._extend = function(libraryMethodsAndProperties) {
        extend(this, libraryMethodsAndProperties);
    };

    // Used to determine which driver we should use as the backend for this
    // instance of localForage.
    LocalForage.prototype._getFirstSupportedDriver = function(drivers) {
        if (drivers && isArray(drivers)) {
            for (var i = 0; i < drivers.length; i++) {
                var driver = drivers[i];

                if (this.supports(driver)) {
                    return driver;
                }
            }
        }

        return null;
    };

    LocalForage.prototype.createInstance = function(options) {
        return new LocalForage(options);
    };

    // The actual localForage object that we expose as a module or via a
    // global. It's extended by pulling in one of our other libraries.
    var localForage = new LocalForage();

    // We allow localForage to be declared as a module or as a library
    // available without AMD/require.js.
    if (moduleType === ModuleType.DEFINE) {
        define('localforage', function() {
            return localForage;
        });
    } else if (moduleType === ModuleType.EXPORT) {
        module.exports = localForage;
    } else {
        this.localforage = localForage;
    }
}).call(window);

},{"./drivers/indexeddb":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/drivers/indexeddb.js","./drivers/localstorage":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/drivers/localstorage.js","./drivers/websql":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/drivers/websql.js","promise":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/node_modules/promise/index.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/utils/serializer.js":[function(require,module,exports){
(function() {
    'use strict';

    // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
    // it to Base64, so this is how we store it to prevent very strange errors with less
    // verbose ways of binary <-> string data storage.
    var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    var SERIALIZED_MARKER = '__lfsc__:';
    var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

    // OMG the serializations!
    var TYPE_ARRAYBUFFER = 'arbf';
    var TYPE_BLOB = 'blob';
    var TYPE_INT8ARRAY = 'si08';
    var TYPE_UINT8ARRAY = 'ui08';
    var TYPE_UINT8CLAMPEDARRAY = 'uic8';
    var TYPE_INT16ARRAY = 'si16';
    var TYPE_INT32ARRAY = 'si32';
    var TYPE_UINT16ARRAY = 'ur16';
    var TYPE_UINT32ARRAY = 'ui32';
    var TYPE_FLOAT32ARRAY = 'fl32';
    var TYPE_FLOAT64ARRAY = 'fl64';
    var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH +
                                        TYPE_ARRAYBUFFER.length;

    // Serialize a value, afterwards executing a callback (which usually
    // instructs the `setItem()` callback/promise to be executed). This is how
    // we store binary data with localStorage.
    function serialize(value, callback) {
        var valueString = '';
        if (value) {
            valueString = value.toString();
        }

        // Cannot use `value instanceof ArrayBuffer` or such here, as these
        // checks fail when running the tests using casper.js...
        //
        // TODO: See why those tests fail and use a better solution.
        if (value && (value.toString() === '[object ArrayBuffer]' ||
                      value.buffer &&
                      value.buffer.toString() === '[object ArrayBuffer]')) {
            // Convert binary arrays to a string and prefix the string with
            // a special marker.
            var buffer;
            var marker = SERIALIZED_MARKER;

            if (value instanceof ArrayBuffer) {
                buffer = value;
                marker += TYPE_ARRAYBUFFER;
            } else {
                buffer = value.buffer;

                if (valueString === '[object Int8Array]') {
                    marker += TYPE_INT8ARRAY;
                } else if (valueString === '[object Uint8Array]') {
                    marker += TYPE_UINT8ARRAY;
                } else if (valueString === '[object Uint8ClampedArray]') {
                    marker += TYPE_UINT8CLAMPEDARRAY;
                } else if (valueString === '[object Int16Array]') {
                    marker += TYPE_INT16ARRAY;
                } else if (valueString === '[object Uint16Array]') {
                    marker += TYPE_UINT16ARRAY;
                } else if (valueString === '[object Int32Array]') {
                    marker += TYPE_INT32ARRAY;
                } else if (valueString === '[object Uint32Array]') {
                    marker += TYPE_UINT32ARRAY;
                } else if (valueString === '[object Float32Array]') {
                    marker += TYPE_FLOAT32ARRAY;
                } else if (valueString === '[object Float64Array]') {
                    marker += TYPE_FLOAT64ARRAY;
                } else {
                    callback(new Error('Failed to get type for BinaryArray'));
                }
            }

            callback(marker + bufferToString(buffer));
        } else if (valueString === '[object Blob]') {
            // Conver the blob to a binaryArray and then to a string.
            var fileReader = new FileReader();

            fileReader.onload = function() {
                var str = bufferToString(this.result);

                callback(SERIALIZED_MARKER + TYPE_BLOB + str);
            };

            fileReader.readAsArrayBuffer(value);
        } else {
            try {
                callback(JSON.stringify(value));
            } catch (e) {
                window.console.error("Couldn't convert value into a JSON " +
                                     'string: ', value);

                callback(null, e);
            }
        }
    }

    // Deserialize data we've inserted into a value column/field. We place
    // special markers into our strings to mark them as encoded; this isn't
    // as nice as a meta field, but it's the only sane thing we can do whilst
    // keeping localStorage support intact.
    //
    // Oftentimes this will just deserialize JSON content, but if we have a
    // special marker (SERIALIZED_MARKER, defined above), we will extract
    // some kind of arraybuffer/binary data/typed array out of the string.
    function deserialize(value) {
        // If we haven't marked this string as being specially serialized (i.e.
        // something other than serialized JSON), we can just return it and be
        // done with it.
        if (value.substring(0,
            SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
            return JSON.parse(value);
        }

        // The following code deals with deserializing some kind of Blob or
        // TypedArray. First we separate out the type of data we're dealing
        // with from the data itself.
        var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
        var type = value.substring(SERIALIZED_MARKER_LENGTH,
                                   TYPE_SERIALIZED_MARKER_LENGTH);

        var buffer = stringToBuffer(serializedString);

        // Return the right type based on the code/type set during
        // serialization.
        switch (type) {
            case TYPE_ARRAYBUFFER:
                return buffer;
            case TYPE_BLOB:
                return new Blob([buffer]);
            case TYPE_INT8ARRAY:
                return new Int8Array(buffer);
            case TYPE_UINT8ARRAY:
                return new Uint8Array(buffer);
            case TYPE_UINT8CLAMPEDARRAY:
                return new Uint8ClampedArray(buffer);
            case TYPE_INT16ARRAY:
                return new Int16Array(buffer);
            case TYPE_UINT16ARRAY:
                return new Uint16Array(buffer);
            case TYPE_INT32ARRAY:
                return new Int32Array(buffer);
            case TYPE_UINT32ARRAY:
                return new Uint32Array(buffer);
            case TYPE_FLOAT32ARRAY:
                return new Float32Array(buffer);
            case TYPE_FLOAT64ARRAY:
                return new Float64Array(buffer);
            default:
                throw new Error('Unkown type: ' + type);
        }
    }

    function stringToBuffer(serializedString) {
        // Fill the string into a ArrayBuffer.
        var bufferLength = serializedString.length * 0.75;
        var len = serializedString.length;
        var i;
        var p = 0;
        var encoded1, encoded2, encoded3, encoded4;

        if (serializedString[serializedString.length - 1] === '=') {
            bufferLength--;
            if (serializedString[serializedString.length - 2] === '=') {
                bufferLength--;
            }
        }

        var buffer = new ArrayBuffer(bufferLength);
        var bytes = new Uint8Array(buffer);

        for (i = 0; i < len; i+=4) {
            encoded1 = BASE_CHARS.indexOf(serializedString[i]);
            encoded2 = BASE_CHARS.indexOf(serializedString[i+1]);
            encoded3 = BASE_CHARS.indexOf(serializedString[i+2]);
            encoded4 = BASE_CHARS.indexOf(serializedString[i+3]);

            /*jslint bitwise: true */
            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }
        return buffer;
    }

    // Converts a buffer to a string to store, serialized, in the backend
    // storage library.
    function bufferToString(buffer) {
        // base64-arraybuffer
        var bytes = new Uint8Array(buffer);
        var base64String = '';
        var i;

        for (i = 0; i < bytes.length; i += 3) {
            /*jslint bitwise: true */
            base64String += BASE_CHARS[bytes[i] >> 2];
            base64String += BASE_CHARS[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
            base64String += BASE_CHARS[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
            base64String += BASE_CHARS[bytes[i + 2] & 63];
        }

        if ((bytes.length % 3) === 2) {
            base64String = base64String.substring(0, base64String.length - 1) + '=';
        } else if (bytes.length % 3 === 1) {
            base64String = base64String.substring(0, base64String.length - 2) + '==';
        }

        return base64String;
    }

    var localforageSerializer = {
        serialize: serialize,
        deserialize: deserialize,
        stringToBuffer: stringToBuffer,
        bufferToString: bufferToString
    };

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = localforageSerializer;
    } else if (typeof define === 'function' && define.amd) {
        define('localforageSerializer', function() {
            return localforageSerializer;
        });
    } else {
        this.localforageSerializer = localforageSerializer;
    }
}).call(window);

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/angular-rx.config.js":[function(require,module,exports){
'use strict';

/**
 Purpose:
 * Configure the angular log extender (`angular-logex`)
 *
 Documentation:
 *  - [RxJS](https://github.com/Reactive-Extensions/RxJS)
 *  - [angular-rx](https://github.com/Reactive-Extensions/rx.angular.js)
 *  - [RxBook](http://xgrommx.github.io/rx-book/content/config/index.html)
*/

module.exports = function (app) {
    function configAngularRx(_, rx, Bluebird, $log) {
        rx.config.Promise = Bluebird;
    }

    configAngularRx.$inject = ['lodash', 'rx', 'Bluebird', '$log'];

    return app.run(configAngularRx);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/compile.config.js":[function(require,module,exports){
'use strict';

/**
 * from https://github.com/angular/angular.js/blob/master/docs/content/guide/production.ngdoc
 *
 * ## Disabling Debug Data
 *
 * By default AngularJS attaches information about binding and scopes to DOM nodes,
 * and adds CSS classes to data-bound elements:
 *
 * - As a result of `ngBind`, `ngBindHtml` or `{{...}}` interpolations, binding data and CSS class
 * `ng-binding` are attached to the corresponding element.
 *
 * - Where the compiler has created a new scope, the scope and either `ng-scope` or `ng-isolated-scope`
 * CSS class are attached to the corresponding element. These scope references can then be accessed via
 * `element.scope()` and `element.isolateScope()`.
 *
 * Tools like [Protractor](https://github.com/angular/protractor) and
 * [Batarang](https://github.com/angular/angularjs-batarang) need this information to run,
 * but you can disable this in production for a significant performance boost with:
 *
 * ```js
 * myApp.config(['$compileProvider', function ($compileProvider) {
 *   $compileProvider.debugInfoEnabled(false);
 * }]);
 * ```
 *
 * If you wish to debug an application with this information then you should open up a debug
 * console in the browser then call this method directly in this console:
 *
 * ```js
 * angular.reloadWithDebugInfo();
 * ```
 *
 * The page should reload and the debug information should now be available.
 *
 * For more see the docs pages on {@link ng.$compileProvider#debugInfoEnabled `$compileProvider`}
 * and {@link angular.reloadWithDebugInfo `angular.reloadWithDebugInfo`}.
 *
*/

module.exports = function (app) {
    function configAngularCompiler(_, $compileProvider) {
        var inDevelopment = true;

        if (inDevelopment || _.isUndefined(inDevelopment) || _.isNull(inDevelopment)) {
            $compileProvider.debugInfoEnabled(true);
            // console.log('angular debug info ENABLED');
        } else {
            $compileProvider.debugInfoEnabled(false);
            // console.log('angular debug info DISABLED');
        }
    }

    configAngularCompiler.$inject = ['lodash', '$compileProvider'];

    return app.config(configAngularCompiler);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/index.js":[function(require,module,exports){
/**
 * rjadCommonConfig
 * Description
 */

'use strict';

module.exports = function rjadCommonConfig(app) {
    require('./localforage.config')(app);
    require('./jsdata.config')(app);
    require('./compile.config')(app);
    require('./angular-rx.config')(app);
};

},{"./angular-rx.config":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/angular-rx.config.js","./compile.config":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/compile.config.js","./jsdata.config":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/jsdata.config.js","./localforage.config":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/localforage.config.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/jsdata.config.js":[function(require,module,exports){
/**
 * configureJSData
 * Description
 */

'use strict';

module.exports = function configureJSData(app) {
    function _configureJSData(_, DSProvider, DSLocalForageAdapterProvider) {
        DSProvider.defaults.defaultAdapter = 'DSLocalForageAdapter';
        DSLocalForageAdapterProvider.defaults.basePath = 'JSData';
    }

    _configureJSData.$inject = ['lodash', 'DSProvider', 'DSLocalForageAdapterProvider'];

    return app.config(_configureJSData);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/localforage.config.js":[function(require,module,exports){
/**
 * configureLocalForage
 * Description
 */

'use strict';

module.exports = function configureLocalForage(app) {
    function _configureLocalForage($localForageProvider) {
        var dataConfig = {
            name: 'rjaDemo',
            storeName: 'keyvaluepairs',
            description: 'demo data'
        };

        $localForageProvider.config({
            // driver      : 'localStorageWrapper', // if you want to force a driver
            name: 'rjaDemo', // name of the database and prefix for your data, it is "lf" by default
            // version     : 1.0, // version of the database, you shouldn't have to use this
            storeName: 'lolumad', // name of the table
            description: 'demo data'
        });
    }

    _configureLocalForage.$inject = ['$localForageProvider'];

    return app.config(_configureLocalForage);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/controllers/home.controller.js":[function(require,module,exports){
'use strict';
var controllername = 'home';

module.exports = function (app) {
    var fullname = app.name + '.' + controllername;
    /*jshint validthis: true */

    var deps = [app.name + '.Post', '$log', '$scope'];

    function controller(Post, $log, $scope) {
        var vm = this;
        vm.controllername = fullname;

        vm.allPosts = [];

        var allPostsStream;

        function buildSubscription() {
            allPostsStream = Post.all.output.subscribe(function (newState) {
                $log.info(fullname + ' got Posts state update #:', newState);
                vm.allPosts = newState;
            }, function (err) {
                $log.error(fullname + ' got Posts state ERROR #: ', err);
            }, function (completed) {
                $log.error(fullname + ' Posts COMPLETED', completed);
            });
        }

        vm.newPostModel = {
            author: '',
            title: '',
            message: ''
        };

        function resetNewPostModel() {
            vm.newPostModel = {
                author: '',
                title: '',
                message: ''
            };
        }

        vm.createNewPost = function (newPost) {
            return Post.create(newPost, true).then(function (newlyCreated) {
                resetNewPostModel();
                $log.debug('homeCtrl: created new post (id:' + newlyCreated.id + ')');
            }, function (error) {
                $log.error('homeCtrl: new post create error:', error);
            });
        };

        var activate = function activate() {
            $log.debug('activating HomeCtrl');
            buildSubscription();
        };

        activate();

        $scope.$on('$destroy', function () {
            $log.info('destroying HomeCtrl $scope');
            allPostsStream.dispose();
        });
    }

    controller.$inject = deps;
    app.controller(fullname, controller);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/controllers/index.js":[function(require,module,exports){
'use strict';

module.exports = function (app) {
    // inject:start
    require('./home.controller')(app);
    require('./post-detail.controller')(app);
    // inject:end
};

},{"./home.controller":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/controllers/home.controller.js","./post-detail.controller":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/controllers/post-detail.controller.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/controllers/post-detail.controller.js":[function(require,module,exports){
'use strict';
var controllername = 'postDetail';

module.exports = function (app) {
    var fullname = app.name + '.' + controllername;
    /*jshint validthis: true */

    var deps = ['lodash', app.name + '.Post', '$log', '$scope', '$stateParams', app.name + '.Comment', app.name + '.DSComment', '$window', 'rx'];

    function controller(_, Post, $log, $scope, $stateParams, Comment, DSComment, $window, rx) {
        var vm = this;
        vm.controllername = fullname;

        vm.postComments = {
            all: []
        };

        vm.postInfo = {};

        var postId = $stateParams.postId;

        function requestAllComments(postId) {
            return Comment.allForPost(postId);
        }

        function updateViewState(posts) {
            vm.postComments.all = posts;
        }

        function buildComments() {
            vm.commentStream = new rx.BehaviorSubject();

            vm.subscription = vm.commentStream.subscribe(function (newState) {
                console.log('postDetail: got a new state', newState);
                updateViewState(newState);
            }, function (err) {
                $log.error('postDetail buildSubscriptions error', err);
            }, function (completed) {
                $log.error('postDetail subscription completed!?');
            });

            // get initial state
            requestAllComments(postId).then(function (initialState) {
                console.log('got initial state', initialState);
                vm.commentStream.onNext(initialState);
            }, function (error) {
                vm.commentStream.onError(error);
            });
        }

        function buildPost() {
            Post.get(postId).then(function (postInfo) {
                console.log('got post info', postInfo);
                vm.postInfo = postInfo;
            }, function (error) {
                $log.error('buildPost error', error);
            });
        }

        function buildSubscriptions() {
            buildComments();
            buildPost();
        }

        vm.newCommentModel = {
            parentPost: postId,
            author: '',
            message: ''
        };

        var reset = function resetNewCommentModel() {
            vm.newCommentModel = {
                parentPost: postId,
                author: '',
                message: ''
            };
        };

        vm.createNewComment = function (newComment) {
            return Comment.create(newComment, true).then(function (newlyCreated) {
                reset();
                $log.debug('postDetailCtrl: created new comment (id:' + newlyCreated.id + ')');
                return Comment.allForPost(postId);
            }).then(function (newState) {
                vm.commentStream.onNext(newState);
            });
        };

        var activate = function activate() {
            $log.debug('activating postDetailCtrl');
            buildSubscriptions();
        };

        activate();

        $scope.$on('$destroy', function () {
            $log.info('destroying postDetailCtrl $scope');
            vm.subscription.dispose();
        });
    }

    controller.$inject = deps;
    app.controller(fullname, controller);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/index.js":[function(require,module,exports){
(function (global){
'use strict';
require('angular-ui-router');

var Bluebird = typeof window !== 'undefined' ? window.Promise : typeof global !== 'undefined' ? global.Promise : null;
var _ = require('lodash');
var faker = require('faker');
var Rx = require('rx');
require('angular-rx');
require('localforage');
require('angular-localforage');
require('js-data-schema');
require('js-data');
require('js-data-angular');
require('js-data-localforage');
require('ngMagicStream');

var modulename = 'common';

module.exports = function (namespace) {

    var fullname = namespace + '.' + modulename;

    var angular = require('angular');
    var app = angular.module(fullname, ['ui.router', 'rx', 'LocalForageModule', 'js-data', 'mmg.MagicStreams']);
    // inject:folders start

    require('./controllers')(app);

    require('./services')(app);

    // inject:folders end
    require('./config')(app);
    require('./run')(app);

    app.constant('lodash', _);
    app.constant('faker', faker);
    app.constant('moment', require('moment'));
    app.constant('Bluebird', Bluebird);

    app.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider.state('home', {
            url: '/',
            template: require('./views/home.html'),
            controller: app.name + '.home as homeCtrl'
        }).state('viewPost', {
            url: '/post/{postId}',
            template: require('./views/view-post.html'),
            controller: app.name + '.postDetail as postDetailCtrl'
        });
    }]);

    return app;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./config":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/config/index.js","./controllers":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/controllers/index.js","./run":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/run/index.js","./services":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/index.js","./views/home.html":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/views/home.html","./views/view-post.html":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/views/view-post.html","angular":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular/angular.js","angular-localforage":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular-localforage/dist/angular-localForage.min.js","angular-rx":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular-rx/dist/rx.angular.js","angular-ui-router":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/angular-ui-router/release/angular-ui-router.js","faker":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/Faker/index.js","js-data":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data/dist/js-data.js","js-data-angular":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-angular/dist/js-data-angular.js","js-data-localforage":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-localforage/dist/js-data-localforage.js","js-data-schema":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/js-data-schema/dist/js-data-schema.js","localforage":"/Users/rai/dev/rx-jsdata-angular-demo/node_modules/localforage/src/localforage.js","lodash":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/lodash/lodash.min.js","moment":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/moment/min/moment.min.js","ngMagicStream":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/ngMagicStream/dist/ngMagicStream.js","rx":"/Users/rai/dev/rx-jsdata-angular-demo/bower_components/rxjs/dist/rx.all.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/run/bootstrap-data.run.js":[function(require,module,exports){
/**
 * bootstrapData
 * Description
 */

'use strict';

module.exports = function bootstrapData(app) {
    function _bootstrapData($log, Post, Comment) {
        $log.info('bootstrapping data');
    }

    _bootstrapData.$inject = ['$log', app.name + '.Post', app.name + '.Comment'];

    return app.run(_bootstrapData);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/run/index.js":[function(require,module,exports){
/**
 * rjadCommonRun
 * Description
 */

'use strict';

module.exports = function rjadCommonRun(app) {
  require('./jsdata.run')(app);
  require('./bootstrap-data.run')(app);
};

},{"./bootstrap-data.run":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/run/bootstrap-data.run.js","./jsdata.run":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/run/jsdata.run.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/run/jsdata.run.js":[function(require,module,exports){
/**
 * setupJSDataAndAdapters
 * Description
 */

'use strict';

module.exports = function setupJSDataAndAdapters(app) {
    function _setupJSDataAndAdapters(DS, DSLocalForageAdapter, $log, $window, _) {
        $log.debug('setting up js-data localForage adapter and bootstrapping JSData models');
        DS.registerAdapter('DSLocalForageAdapter', DSLocalForageAdapter, { 'default': true });
    }

    _setupJSDataAndAdapters.$inject = ['DS', 'DSLocalForageAdapter', '$log', '$window', 'lodash'];

    return app.run(_setupJSDataAndAdapters);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/comment.service.js":[function(require,module,exports){
'use strict';
var servicename = 'Comment';

module.exports = function (app) {

    var dependencies = ['lodash', 'rx', '$log', app.name + '.Post', app.name + '.DSComment', '$q', 'moment', 'faker', 'Bluebird'];

    function service(_, rx, $log, Post, DSComment, $q, moment, faker, BPromise) {

        var create = function create(input, createId) {
            if (!!input && input.author && input.message && input.parentPost) {
                if (!!createId) {
                    input.id = faker.random.uuid();
                }
                input.createdAt = moment().toJSON();

                return DSComment.create(input);
            } else {
                return BPromise.reject('Comment#create: missing/incomplete input');
            }
        };

        var allCommentsForPost = function allCommentsForPost(postId) {
            return DSComment.findAll({ parentPost: postId }, { bypassCache: true });
        };

        return {
            create: create,
            allForPost: allCommentsForPost
        };
    }

    service.$inject = dependencies;
    app.factory(app.name + '.' + servicename, service);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/core-data.service.js":[function(require,module,exports){
'use strict';
var servicename = 'coreData';

module.exports = function (app) {
    var dependencies = ['lodash', 'rx', 'Bluebird', '$log', app.name + '.Comment', app.name + '.Post'];

    function service(_, rx, Bluebird, $log, Comment, Post) {
        var add = function add(a, b) {
            return a + b;
        };

        return {
            add: add
        };
    }

    service.$inject = dependencies;
    app.factory(app.name + '.' + servicename, service);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/ds-comment.service.js":[function(require,module,exports){
'use strict';
var servicename = 'DSComment';

module.exports = function (app) {

    var dependencies = ['DS', 'lodash', 'rx', '$log'];

    function service(DS, _, rx, $log) {
        return DS.defineResource({
            name: 'Comment',
            idAttribute: 'id',
            endpoint: '/comment',
            schema: {
                id: {
                    type: 'string',
                    nullable: false
                },
                author: {
                    type: 'string',
                    nullable: false,
                    minLength: 5,
                    maxLength: 64
                },
                message: {
                    type: 'string',
                    nullable: false,
                    minLength: 3,
                    maxLength: 140
                },
                createdAt: {
                    type: 'string',
                    nullable: false
                },
                parentPost: {
                    type: 'string',
                    nullable: false
                }
            },
            // basePath: 'http://myoverridingapp.com/api',
            beforeDestroy: function beforeDestroy(resourceName, attrs, cb) {

                cb(null, attrs);
            },
            methods: {}
        });
    }

    service.$inject = dependencies;
    app.factory(app.name + '.' + servicename, service);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/ds-post.service.js":[function(require,module,exports){
'use strict';
var servicename = 'DSPost';

module.exports = function (app) {

    var dependencies = ['DS', 'lodash', 'rx', '$log'];

    function service(DS, _, rx, $log) {
        return DS.defineResource({
            name: 'Post',
            idAttribute: 'id',
            endpoint: '/post',
            schema: {
                id: {
                    type: 'string',
                    nullable: false
                },
                author: {
                    type: 'string',
                    nullable: false,
                    minLength: 5,
                    maxLength: 64
                },
                content: {
                    type: 'string',
                    nullable: false,
                    minLength: 3,
                    maxLength: 140
                },
                title: {
                    type: 'string',
                    nullable: false,
                    minLength: 3,
                    maxLength: 100
                },
                createdAt: {
                    type: 'string',
                    nullable: false
                }
            },
            // basePath: 'http://myoverridingapp.com/api',
            beforeDestroy: function beforeDestroy(resourceName, attrs, cb) {

                cb(null, attrs);
            },
            methods: {}
        });
    }

    service.$inject = dependencies;
    app.factory(app.name + '.' + servicename, service);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/index.js":[function(require,module,exports){
'use strict';

module.exports = function (app) {
    // inject:start
    require('./comment.service')(app);
    require('./core-data.service')(app);
    require('./ds-comment.service')(app);
    require('./ds-post.service')(app);
    require('./placeholders.service')(app);
    require('./post.service')(app);
    // inject:end
};

},{"./comment.service":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/comment.service.js","./core-data.service":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/core-data.service.js","./ds-comment.service":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/ds-comment.service.js","./ds-post.service":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/ds-post.service.js","./placeholders.service":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/placeholders.service.js","./post.service":"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/post.service.js"}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/placeholders.service.js":[function(require,module,exports){
'use strict';
var servicename = 'placeholders';

module.exports = function (app) {

    var dependencies = ['lodash', 'faker', 'moment', '$log', app.name + '.Post', app.name + '.Comment', 'Bluebird'];

    function service(_, faker, moment, $log, Post, Comment, Bluebird) {
        function buildPosts() {
            var fakesPromises = _.map([1, 2, 3, 4, 5], function (value, key, collection) {
                $log.debug('creating fake ' + value);
                var fake = {
                    author: faker.internet.email(),
                    content: faker.lorem.sentence(),
                    title: faker.company.bs()
                };
                return Post.create(fake, true);
            });

            return Promise.settle(fakesPromises).then(function (results) {
                _.forEach(results, function (result, index, collection) {
                    if (result.isFulfilled()) {
                        $log.debug('fake ' + index + ' fulfilled: ', result.value());
                        Post.updateState(result.value());
                    } else if (result.isRejected()) {
                        $log.error('fake ' + index + ' rejected: ', result.reason());
                    } else {
                        $log.error('fake ' + index + ' unknown!?: ', result);
                    }
                });
            });
        }

        return {};
    }
    service.$inject = dependencies;
    app.factory(app.name + '.' + servicename, service);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/services/post.service.js":[function(require,module,exports){
'use strict';
var servicename = 'Post';

module.exports = function (app) {

    var dependencies = ['lodash', 'rx', '$log', app.name + '.DSPost', '$q', 'moment', 'faker', 'MagicStream'];

    function service(_, rx, $log, DSPost, $q, moment, faker, MagicStream) {
        var all = new MagicStream({
            'name': 'Posts',
            'source': function source(input) {
                return rx.Observable.fromPromise(DSPost.findAll(null, { bypassCache: true }));
            }
        });

        all.bootstrap();

        var updateState = function updateState(input) {
            // $log.debug('updating ' + servicename + ' BehaviourSubject with ', input);
            return all.updates.add(input);
        };

        var create = function create(input, createId) {
            var deferred = $q.defer();
            if (!!input && input.author && input.content && input.title) {
                if (!!createId) {
                    input.id = faker.random.uuid();
                }
                input.createdAt = moment().toJSON();

                DSPost.create(input).then(function (createdPost) {
                    DSPost.findAll(null, { bypassCache: true }).then(function (newState) {
                        updateState(newState);
                        deferred.resolve(createdPost);
                    }, function (error) {
                        deferred.reject(error);
                    });
                }, function (err) {
                    deferred.reject(err);
                });
            } else {
                deferred.reject('Post#create: missing/incomplete input');
            }
            return deferred.promise;
        };

        function getPost(postId, options) {
            return DSPost.find(postId, { bypassCache: true });
        }

        return {
            create: create,
            all: all,
            updateState: updateState,
            get: getPost
        };
    }

    service.$inject = dependencies;
    app.factory(app.name + '.' + servicename, service);
};

},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/views/home.html":[function(require,module,exports){
module.exports = '<div class="container">\n' +
    '    <div class="panel panel-default">\n' +
    '        <div class="panel-heading">New Post</div>\n' +
    '        <div class="panel-body">\n' +
    '                <form ng-submit="homeCtrl.createNewPost(homeCtrl.newPostModel)" class="form-horizontal">\n' +
    '                  <div class="form-group">\n' +
    '                    <label for="inputEmail" class="col-sm-2 control-label">Email</label>\n' +
    '                    <div class="col-sm-10">\n' +
    '                      <input tabindex="1" type="email" class="form-control" id="inputEmail" placeholder="Email" ng-model="homeCtrl.newPostModel.author">\n' +
    '                    </div>\n' +
    '                  </div>\n' +
    '                  <div class="form-group">\n' +
    '                    <label for="inputTitle" class="col-sm-2 control-label">Title</label>\n' +
    '                    <div class="col-sm-10">\n' +
    '                      <input tabindex="2" type="text" class="form-control" id="inputTitle" placeholder="Title" ng-model="homeCtrl.newPostModel.title">\n' +
    '                    </div>\n' +
    '                  </div>\n' +
    '\n' +
    '                  <div class="form-group">\n' +
    '                    <label for="inputMessage" class="col-sm-2 control-label">Message</label>\n' +
    '                    <div class="col-sm-10">\n' +
    '                      <textarea tabindex="3" class="form-control" rows="3" id="inputMessage" placeholder="Blah blah blah...." ng-model="homeCtrl.newPostModel.content"></textarea>\n' +
    '                    </div>\n' +
    '                  </div>\n' +
    '\n' +
    '                  <div class="form-group">\n' +
    '                    <div class="col-sm-offset-2 col-sm-10">\n' +
    '                      <button type="submit" tabindex="4" class="btn btn-default btn-block">Create Post</button>\n' +
    '                    </div>\n' +
    '                  </div>\n' +
    '                </form>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '    <h2>Posts</h2>\n' +
    '    <ul class="list-group" ng-if="homeCtrl.allPosts && homeCtrl.allPosts.length > 0">\n' +
    '      <a class="list-group-item clearfix" ng-repeat="post in homeCtrl.allPosts" ui-sref="viewPost({postId: post.id})">\n' +
    '          <button type="button" class="close pull-right" aria-label="Close"><span aria-hidden="true">&times;</span></button>\n' +
    '        <h3 class="list-group-item-heading">{{post.title}} <small>by {{post.author}}</small></h3>\n' +
    '        <p class="list-group-item-text">\n' +
    '            {{post.content}}\n' +
    '        </p>\n' +
    '        <p><small>#{{$index}} (id: {{post.id}})</small></p>\n' +
    '        <span class="badge">{{$index}} Comments</span>\n' +
    '      </a>\n' +
    '    </ul>\n' +
    '\n' +
    '    <div class="panel" ng-if="!homeCtrl.allPosts || homeCtrl.allPosts.length < 1">\n' +
    '      <div class="panel-body">No existing posts. Create a new one?</div>\n' +
    '    </div>\n' +
    '\n' +
    '\n' +
    '\n' +
    '\n' +
    '\n' +
    '\n' +
    '</div>\n' +
    '';
},{}],"/Users/rai/dev/rx-jsdata-angular-demo/src/scripts/common/views/view-post.html":[function(require,module,exports){
module.exports = '\n' +
    '\n' +
    '<div class="container">\n' +
    '  <div class="jumbotron" ng-if="postDetailCtrl.postInfo">\n' +
    '          <h2>{{postDetailCtrl.postInfo.title}}&nbsp;<small>by {{postDetailCtrl.postInfo.author}}</small></h2>\n' +
    '          <p>{{postDetailCtrl.postInfo.content}}</p>\n' +
    '  </div>\n' +
    '\n' +
    '  <div class="container">\n' +
    '    <div class="panel panel-default">\n' +
    '        <div class="panel-heading">Post New Comment</div>\n' +
    '        <div class="panel-body">\n' +
    '            <form ng-submit="postDetailCtrl.createNewComment(postDetailCtrl.newCommentModel)" class="form-horizontal">\n' +
    '              <div class="form-group">\n' +
    '                <label for="inputEmail" class="col-sm-2 control-label">Email</label>\n' +
    '                <div class="col-sm-10">\n' +
    '                  <input tabindex="1" type="email" ng-model="postDetailCtrl.newCommentModel.author" class="form-control" id="inputEmail" placeholder="Email">\n' +
    '                </div>\n' +
    '              </div>\n' +
    '              <div class="form-group">\n' +
    '                <label for="inputMessage" class="col-sm-2 control-label">Comment</label>\n' +
    '                <div class="col-sm-10">\n' +
    '                  <textarea tabindex="2" ng-model="postDetailCtrl.newCommentModel.message" class="form-control" rows="3" id="inputMessage" placeholder="Blah blah blah...."></textarea>\n' +
    '                </div>\n' +
    '              </div>\n' +
    '\n' +
    '              <div class="form-group">\n' +
    '                <div class="col-sm-offset-2 col-sm-10">\n' +
    '                  <button tabindex="3" type="submit" ng-model="postDetailCtrl.newCommentModel.author" class="btn btn-default btn-block">Comment</button>\n' +
    '                </div>\n' +
    '              </div>\n' +
    '            </form>\n' +
    '        </div>\n' +
    '    </div>\n' +
    '\n' +
    '</div>\n' +
    '\n' +
    '\n' +
    '  <h3>Comments <span class="badge">{{postDetailCtrl.postComments.all.length}}</span></h3>\n' +
    '    <div class="panel panel-warning" ng-if="!postDetailCtrl.postComments.all || postDetailCtrl.postComments.all.length < 1">\n' +
    '        <div class="panel-heading">No Comments</div>\n' +
    '        <div class="panel-body">Add something!</div>\n' +
    '    </div>\n' +
    '\n' +
    '    <div ng-if="postDetailCtrl.postComments.all && postDetailCtrl.postComments.all.length > 0">\n' +
    '\n' +
    '        <div ng-repeat="postComment in postDetailCtrl.postComments.all track by postComment.id" class="col-xs-12">\n' +
    '          <blockquote ng-class-even="\'blockquote-reverse\'">\n' +
    '            <p>{{::postComment.message}}</p>\n' +
    '            <small><cite title="comment author">{{::postComment.author}}</cite> at <cite title="comment time">{{::postComment.createdAt | date}}</cite></small>\n' +
    '          </blockquote>\n' +
    '        </div>\n' +
    '\n' +
    '    </div>\n' +
    '\n' +
    '</div>\n' +
    '';
},{}]},{},["./src/scripts/main.js"])
//# sourceMappingURL=app-v0.0.1.map.js
